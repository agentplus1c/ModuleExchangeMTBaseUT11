#Область Описание 

/////////////////////////////////////////////////////////////////////////////
// Описание модуля объекта (обработки).       
//
// *** Префиксы в именах процедур и функций.                         
//
//	  * ВО... - виртуальные объекты (виртуальные справочники и документы). Виртуальные объекты - это имитация существования в конфигурации
//				справочников и документов, на самом деле отсутствующих в конфигурации. 
//				Примеры виртуальных объектов:
//				- Справочники: "_РезультатыПосещений", "_ШаблоныАнкет";
//				- Документы: "_Мерчендайзинг", "_Посещение".
//	  * ВДок...	- виртуальные документы (см. описание "ВО...")
//	  * ВСпр... - виртуальные справочники (см. описание "ВО...")
//	  * МенеджерВТ... - создание временных таблиц запроса для выгрузки данных в МУ. Используется для отборов выгрузки данных в соответствии
//				с настройками торгового агента.
//	  * СД... - служебные данные - сохранение, чтение. Опционально служебные данные могут сохраняться в файлах или хранилище данных.
//				В служебных данных хранятся объекты в виде структур, например, треки передвижений агентов (это структура с одним из
//				свойств типа ТаблицаЗначений).
//	  * СТЗ... - служебные таблицы значений. Чтение из хранилища, изменение, сохранение. Служебные таблицы используются для 
//				сопоставления элементов справочников между УТ и МТ. В таблицах должны быть обязательные колонки "Идентификатор" (для МТ)
//				и "Ссылка" (ссылка на элемент сопоставляемого справочника в УТ). Применяется, когда требуется сопосавить один общий элемент
//				справочника в УТ с несколькими элементами справочника в МТ. Например, общую характеристику для вида номенклатуры.
//	  * Структура... - дополнительные процедуры и функции для работы с объектом типа "Структура".
//
//
// *** Принцип загрузки фотографий, созданных в МУ. 
//
// 		Из МУ выгружается архив To1C.zip. В архиве содержатся файлы:
// 			- ToCDB.xml - файл данных (созданные в МУ справочники, документы, ссылки на фотографии);
// 			- PhotosToCDB.zip (опционально) - архив фотографий, созданных в МУ. 
// 		Примеры названий файлов фотографий из архива PhotosToCDB.zip:
//			- B13EBE19-67E2-407F-698A-B63563D8341C.jpg
//			- B13EDEFB-B7E2-4AC4-954F-480B8CC29E53.jpg
// 			В качестве имени файла указывается строка формата GUID.
// 			Имя файла фотографии используется для привязки фотографии по ее идентификатору GUID к элементу справочника МТ "*ФотоДокументов" 
// 			(в этом модуле если имя справочника начинается со знака "*" - это означает, что аналогичный справочник есть в МТ, но отсутствует в УТ).
// 		В файле ToCDB.xml одна и та же фотография указывается в двух местах:
// 			- В ветке "CATALOG" выгрузки справочника "*ФотоДокументов" (GUID справочника в МТ - "05ea7926-febb-4d82-97fc-19294dd5dd29") -
//				в атрибуте ветки "A04".
// 			- В ветке "PICTURES" выгрузки описаний картинок (в атрибуте "GUID" - идентификатор фотографии, в атрибуте "FileName" - имя файла
// 				фотографии, как он указан в архиве PhotosToCDB.zip).
// 		
// 		Т.к. при выгрузке данных из УТ в МУ требуется подтверждать загруженные до этого данные, то для фотографий нужно:
// 			- подтверждать загрузку каждого элемента справочника "*ФотоДокументов";
// 			- подтверждать загрузку каждой фотографии из тэга "PICTURES".
// 			
// 		Загрузка в УТ фотографий из файлов ToCDB.xml и PhotosToCDB.zip происходит в 3 этапа:
// 			1. Функция ЗагрузитьФотографиюЭтап1() - 
// 				элементы справочника "*ФотоДокументов" загружаются в таблицу значений (ТЗ) ЗагружаемыеОбъекты.тзФотографии.
// 				На этом этапе в ТЗ хранятся ссылки на фотографии, имя же файла фотографий и описание фотографии - неизвестны.
//			2. Процедура ЗагрузитьФотографииЭтап2() -
// 				имена файлов фотографий и описания фотографий переносятся из узла "PICTURES" в ТЗ ЗагружаемыеОбъекты.тзФотографии.
//			3. Процедура ЗакончитьЗагрузкуФотографий() - 
// 				файлы фотографий из архива PhotosToCDB.zip загружаются в БД УТ и создаются элементы справочников
// 				вида "<ВидДокумента>ПрисоединенныеФайлы", например - "ЗаказКлиентаПрисоединенныеФайлы" - для фотографий,
// 				которые в МУ создавались и закреплялись за документом "ЗаказКлиента".
// 				Данные для генерации элементов справочников и ссылок на фотографии берутся из ТЗ ЗагружаемыеОбъекты.тзФотографии.
//
// 		Процедура ПодтвержденияСохранитьВсе() - после 3 этапов загрузки фотографий сохраняются подтверждения фотографий для будущей
//			отправкb подтверждений в МУ при выгрузке данных из УТ в МУ.
//			Подтверждения сохраняются в ТЗ тзPictures.
//		    В процедуре учитывается состояние флажка "Подтверждать все фотографии" (в "Общих настройках обмена" модуля, реквизит
//		    обработки ПодтверждатьВсеФотографии):
//			- Если выбран флажок, то подтверждаются все фотографии, которые встретились в тэге "PICTURES" файла ToCDB.xml
//			  (даже если файлы фотографий не загружались в УТ).
//			- Если снят флажок, то подтверждаются только те фотографии, для которых выполнено сразу два условия:
//			  	1. На фотографию ссылается элемент справочника "*ФотоДокументов".
//			  	2. Файл фотографии успешно загружен в БД УТ.
// 			
/////////////////////////////////////////////////////////////////////////////

// Описание
#КонецОбласти


#Область ГлобальныеПеременные

	Перем гБазоваяКонфигурация;		// базовая конфигурация 1С для текущей конфигурации, созданной на базе УТ (или сама конфигурация УТ)
	Перем гКонфигурация;			// текущая конфигурация - краткое название (УТ_АП, УТ_UA, ERP, КА, и т.д.)
	Перем гКонфигурацияВерсия; 		// gi_180123 - для учета внутренних различий в конфигурациях, не соответствующих поколениям УТ.
	Перем гНастройкиОбменаЗагружены;// признак, что все настройки обмена загружены из хранилища (используется для загрузки и выгрузки данных в МУ / из МУ)
	Перем гТаблицыВидовОбъектов;	// структура с таблицами значений идентификаторов видов справочников и документов в МТ и соответствия им в УТ
	Перем гТаблицыПеречислений;		// структура с таблицами значений перечислений - соответствий перечислений УТ и элементам справочников МТ
	Перем гСлужебныеДанныеВФайлах; 	// признак сохранения служебных данных модуля в файлах (если значение Истина) или в Хранилище (если Ложь)
	Перем гКэшЧтенияКонстант; 		// кэш для ускорения чтения констант из БД
	Перем гКэшСравненияКонфигураций;// используется для ускорения работы функции ПоколениеКонфигурации()
	Перем гКэшРеквизитыОбъектов;	// используется для ускорения работы функции РеквизитОбъекта()
	Перем гКэшСпискиОбъектов;		// кэш списков объектов (для выгрузки и отборов, например, массив организаций)
	Перем гЭтоLinuxСервер; 			// для ускорения работы функции ЭтоLinuxСервер
	Перем гДанныеОДополнительныхСвойствахДокументаДляМУ; // для ускорения записи дополнительных свойств документов при загрузке документов из МУ
	Перем гВДокРеквизиты; 			// Соответствие - элементами соответствия являются массивы реквизитов виртуальных документов
	Перем гВДокКэшТЗЖурналов; 		// кэш таблиц значений, хранящих заголовочную часть виртуальных документов	
	Перем гВСпрКэшТЗСправочника;	// кэш таблиц значений, хранящих заголовочную часть элементов виртуальных справочников
	Перем гВОКэшСвойств; 			// кэш системных свойств виртуальных объектов (виртуальных справочников и документов)
	Перем гКэшСлужебныхТаблиц; 		// структура для служебных таблиц, используется при выгрузке служебных справочных данных в МУ
	//Перем гмСкладыВыгрузки; 		// массив складов выгрузки для текущего торгового агента //vd_190313 Не используется
	Перем гВидДокументаПоступлениеТоваровУслуг; // кэш результата функции ВидДокументаПоступлениеТоваровУслуг
	Перем гИспользоватьНаправленияДеятельности; // кэш результата функции гИспользоватьНаправленияДеятельности
	Перем гКэшАдресаДоставки;		// кэш адресов доставки
	Перем гКэшНастроек;				// кэш значений настроек из Хранилища системных настроек
	
	//vd_181024 Убрана глобальная переменная Перем гКэшОсновнойПланПродаж;	// кэш значение	типа (Документ.ПланПродаж) основной план продаж для агента.
	
// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ПрограммныйИнтерфейс

Функция КонфигурацияРазмерностьЭлементовФормыДляТакси() Экспорт
	
	Возврат КонфигурацияРежимСовместимости(">=8.3.7");
	
КонецФункции

Функция КонфигурацияРежимСовместимости(строкаСравненияВерсии) Экспорт
	
	ТекущийРежим = Метаданные.РежимСовместимости;

	Если ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		СисИнфо = Новый СистемнаяИнформация;
		стрВерсияПлатформы = СисИнфо.ВерсияПриложения;
	Иначе
		стрВерсияПлатформы = ПолучитьВерисиюИзСтроки(СтрЗаменить(Строка(ТекущийРежим), "_", "."));
	КонецЕсли; 
	
	строкаСравнения = СтрЗаменить(строкаСравненияВерсии, " ", "");
	Длина = стрДлина(строкаСравнения);
	ЗнакСравнения = "";
	Для Индекс = 1 По 2 Цикл
		Символ = Сред(строкаСравнения, Индекс, 1);
		Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда
			ЗнакСравнения = ЗнакСравнения + Символ;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗнакСравнения = "" Тогда
		ЗнакСравнения = "=";
	Иначе
		стрОперации = ",<,=,>,<>,<=,>=,";
		Если Найти(стрОперации, "," + ЗнакСравнения + ",") = 0 Тогда
			Текст = "Функция КонфигурацияСравнитьРежимСовместимости(): неверное значение параметра ""строкаСравненияВерсии"" = ""%1""!" + Символы.ПС
				+ "Значение должно начинаться с операции сравнения (<, =, >, <>, <= или >=)!";
			ВызватьИсключение(СтрШаблон_(Текст, строкаСравненияВерсии));
		КонецЕсли;
	КонецЕсли;
	
	Сравнение = СравнитьВерсии(стрВерсияПлатформы, Сред(строкаСравнения, СтрДлина(ЗнакСравнения)+1));
	
	Если ЗнакСравнения = ">=" Тогда
		Значение = (Сравнение >= 0);
	ИначеЕсли ЗнакСравнения = "<=" Тогда
		Значение = (Сравнение <= 0);
	ИначеЕсли ЗнакСравнения = "<" Тогда
		Значение = (Сравнение < 0);
	ИначеЕсли ЗнакСравнения = ">" Тогда
		Значение = (Сравнение > 0);
	ИначеЕсли ЗнакСравнения = "=" Тогда
		Значение = (Сравнение = 0);
	ИначеЕсли ЗнакСравнения = "<>" Тогда
		Значение = (Сравнение <> 0);
	Иначе
		ВызватьИсключение("Функция КонфигурацияСравнитьРежимСовместимости() - неизвестный оператор сравнения: " + ЗнакСравнения);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьВерисиюИзСтроки(Знач стрРежим) 
	
	стрВерсия = "";
	стрРежим = СтрЗаменить(стрРежим, "_", ".");
	Длина = СтрДлина(стрРежим);
	Для Индекс = 1 По Длина Цикл
		Символ = Сред(стрРежим, Индекс, 1);
		Код = КодСимвола(Символ);
		Если Код = 46 Или (Код >= 48 И Код <= 57) Тогда
		    стрВерсия = стрВерсия + Символ;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат стрВерсия;
	
КонецФункции

// Процедура  заполняет значения структуры в соответствии со свойствами структуры. В качестве свойств структуры
// указываются виды объектов метаданных, например, "ЗаказКлиента".
Процедура ПолучитьПредставленияВидовОбъектов(стррВидыДокументов, ВидМетаданных = "Документы") Экспорт

	Для Каждого Элемент Из СтррВидыДокументов Цикл
		стррВидыДокументов[Элемент.Ключ] = Метаданные[ВидМетаданных][Элемент.Ключ].РасширенноеПредставлениеОбъекта;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВСтрокуНомерКопии(ИсхСтрока) Экспорт
	
	ИсхСтрока = СокрП(ИсхСтрока);
	ИндексН = СтрДлина(ИсхСтрока) + 1; // индекс начала
	Символ = Неопределено;
	Пока ИндексН > 0 И Символ <> "(" Цикл
		ИндексН = ИндексН - 1;		
		Символ = Сред(ИсхСтрока, ИндексН, 1);
	КонецЦикла; 
	
	СтрКопия = НСтр("ru = 'копия'");
	
	Если Символ = "(" И Сред(ИсхСтрока, ИндексН + 1, СтрДлина(СтрКопия)) = СтрКопия Тогда // есть в названии слово "(копия"
		СтрНомерКопии = "";
		ИндексК = СтрДлина(ИсхСтрока); // индекс конца
		Для Индекс = ИндексН По ИндексК Цикл
			Символ = Сред(ИсхСтрока, Индекс, 1);
			Код = КодСимвола(Символ);			
			Если Код = 41 Тогда // ")"
				Прервать;
			ИначеЕсли Код > 47 И Код < 58 Тогда
				СтрНомерКопии = СтрНомерКопии + Символ;
			КонецЕсли; 
		КонецЦикла;
		НомерКопии = ?(СтрНомерКопии <> "", Число(СтрНомерКопии), 1) + 1;
		ИсхСтрока = Лев(ИсхСтрока, ИндексН) + СтрКопия + " " + Строка(НомерКопии) + ")";
	Иначе
		ИсхСтрока = ИсхСтрока + " (" + СтрКопия + ")";
	КонецЕсли; 
	
КонецПроцедуры

Функция МакетОбработки(ИмяМакета) Экспорт

	Попытка
		Возврат ПолучитьМакет(ИмяМакета);
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

#Область ПрограммныйИнтерфейс_ОпределениеКонфигурации
// Аналогичные функции объявлены в клиентском модуле МодульОбщий (ПоколениеКонфигурации, СравнитьВерсии, ВерсияКонфигурации).

// Функция сравнивает идентификатор текущей конфигурации (в глобальной переменной гБазоваяКонфигурация) с проверяемым 
// идентификатором конфигурации (в параметре СтрКонфигурация).
// Возвращает Истина, если идентификатор текущей конфигурации соответствует идентификатору проверяемой конфигурации и 
// операция сравнения версии (переданная вместе с идентификатором) верна.
// Формат идентификатора конфигурации: "P_V1.V2.V3.V4", где P - префикс конфигурации, V1-V4 - вресия конфигурации.
// Версия может быть неполной. Примеры: "УТ_11.1.15.120", "УТ_11.1"
// 	Параметры:
// 		СтрКонфигурация - Строка - операция сравнеия и идентификатор сравниваемой конфигурации.
// 		
Функция ПоколениеКонфигурации(СтрКонфигурация) 
	
	Если гКэшСравненияКонфигураций = Неопределено Тогда
		гКэшСравненияКонфигураций = Новый Соответствие;
	КонецЕсли; 
	
	Значение = гКэшСравненияКонфигураций.Получить(СтрКонфигурация);
	
	Если Значение = Неопределено Тогда
		
		Индекс1 = Найти(гБазоваяКонфигурация, "_");
		Индекс2 = Найти(СтрКонфигурация, "_");
		
		Если Индекс2 = 0 Тогда
			ВызватьИсключение("Функция ПоколениеКонфигурации(): указан параметр без префикса ""_""! Параметр = """ + СтрКонфигурация + """.");
		КонецЕсли; 
		
		Префикс1 = Лев(гБазоваяКонфигурация, Индекс1);
		Префикс2 = Лев(СтрКонфигурация, Индекс2);
		
		ЗнакСравнения = "";
		Для Индекс = 1 По 2 Цикл
			Символ = Сред(Префикс2, Индекс, 1);
			Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда // знаки "<=>"
				ЗнакСравнения = ЗнакСравнения + Символ;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗнакСравнения = "" Тогда
			ЗнакСравнения = "=";
		Иначе
			Префикс2 = Сред(Префикс2, СтрДлина(ЗнакСравнения) + 1);
		КонецЕсли;
		
		Если Префикс1 <> Префикс2 Тогда // сравниваем префиксы конфигураций
			
			Значение = Ложь;
			
		Иначе
			
			Сравнение = СравнитьВерсии(Сред(гБазоваяКонфигурация, Индекс1+1), Сред(СтрКонфигурация, Индекс2+1));
			
			Если ЗнакСравнения = ">=" Тогда
				Значение = (Сравнение >= 0);
			ИначеЕсли ЗнакСравнения = "<=" Тогда
				Значение = (Сравнение <= 0);
			ИначеЕсли ЗнакСравнения = "<" Тогда
				Значение = (Сравнение < 0);
			ИначеЕсли ЗнакСравнения = ">" Тогда
				Значение = (Сравнение > 0);
			ИначеЕсли ЗнакСравнения = "=" Тогда
				Значение = (Сравнение = 0);
			Иначе
				ВызватьИсключение("Функция ПоколениеКонфигурации() - неизвестный оператор сравнения: " + ЗнакСравнения);
			КонецЕсли;
			
		КонецЕсли;
		
		гКэшСравненияКонфигураций.Вставить(СтрКонфигурация, Значение);
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

// Сравнивает две строки версий. Если передана не полная версия, то сравнивается только общая начальная часть версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2) Экспорт
	
	мВерсия1 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1), ".");
	мВерсия2 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2), ".");
	
	ВГраница = Мин(мВерсия1.Количество(), мВерсия2.Количество()) - 1;
	
	Результат = 0;
	Для Разряд = 0 По ВГраница Цикл
		Результат = Число(мВерсия1[Разряд]) - Число(мВерсия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВерсияКонфигурации() Экспорт
	
	стррРезультат = Новый Структура("Конфигурация,БазоваяКонфигурация,КонфигурацияВерсия");
	
	Имя    = Метаданные.Имя;
	Версия = Метаданные.Версия;
	
	Если    Имя = "УправлениеТорговлей" 
		Или Имя = "УправлениеТорговлейБазовая" 
		Или Имя = "АгентПлюсУправлениеТорговлей" 
	Тогда
		стррРезультат.БазоваяКонфигурация = "УТ_" + Версия;
		//(( sk_190423 Исправлена инициализация имя и версии конфигурации в рамках (MOD-511) 
		//Если Метаданные.Справочники.ЦеновыеГруппы.Реквизиты.Найти("Валюта") <> Неопределено Тогда
		//	стррРезультат.Конфигурация = "УТ_GR";
		//КонецЕсли;
		////vd_180627 АКФ
		//Если Метаданные.Справочники.Найти("ТорговыеТочки") <> Неопределено Тогда
		//	стррРезультат.Конфигурация = "УТ_АКФ";	
		//КонецЕсли;
		Если Метаданные.Справочники.ЦеновыеГруппы.Реквизиты.Найти("Валюта") <> Неопределено Тогда
			стррРезультат.Конфигурация = "УТ_GR";
		ИначеЕсли Метаданные.Справочники.Найти("ТорговыеТочки") <> Неопределено Тогда
			стррРезультат.Конфигурация = "УТ_АКФ";	
		Иначе
			стррРезультат.Конфигурация = "УТ";
		КонецЕсли;
		
		стррРезультат.КонфигурацияВерсия  = Версия;
		//)) sk_190423
		
	ИначеЕсли Имя = "УправлениеТорговлей_CRM_2" Тогда
		//{{vd_181009
		//Было:
		//стррРезультат.БазоваяКонфигурация = "УТ_11.2";
		//Версия продукта (3.0.11.1)  - УТ 11.4.3.172
		//Версия продукта (3.0.14.12) - УТ 11.4.6.188
		Если СравнитьВерсии(Версия, "3.0.14") >= 0 Тогда //vd_190117 добавлено условие
			стррРезультат.БазоваяКонфигурация = "УТ_11.4.6.188";
		ИначеЕсли СравнитьВерсии(Версия, "3.0.11") >= 0 Тогда
			стррРезультат.БазоваяКонфигурация = "УТ_11.4.3.172";
		Иначе
			стррРезультат.БазоваяКонфигурация = "УТ_11.2";
		КонецЕсли;		
		стррРезультат.Конфигурация 	      = "УТ_CRM_2";
		стррРезультат.КонфигурацияВерсия  = Версия; 
		//}}vd_181009		
		
	ИначеЕсли Имя = "УправлениеТорговлейДляУкраины" Тогда
		стррРезультат.БазоваяКонфигурация = "УТ_11.1.10";
		стррРезультат.Конфигурация 	      = "УТ_UA";
		стррРезультат.КонфигурацияВерсия  = Версия; //vd_180619
		
	ИначеЕсли Имя = "УправлениеТорговлейДляКазахстана" Тогда
		//vd_180718 Добавлено условие. //стррРезультат.БазоваяКонфигурация = "УТ_11.1.10";
		Если СравнитьВерсии(Версия, "3.2") < 0 Тогда
			стррРезультат.БазоваяКонфигурация = "УТ_11.1.10";
		Иначе
			стррРезультат.БазоваяКонфигурация = "УТ_11.2.3";
		КонецЕсли;
		стррРезультат.Конфигурация  = "УТ_KZ";
			
	ИначеЕсли Имя = "КомплекснаяАвтоматизация" Или Имя = "КомплекснаяАвтоматизацияДляКазахстана" Тогда
		//((vd_181225
		//стррРезультат.БазоваяКонфигурация = "УТ_11.2.3";
		//Версия УТ смотреть на https://releases.1c.ru - Комплексная автоматизация - Выбрать версию - Версии библиотек
		Если СравнитьВерсии(Версия, "2.4.6.175") >= 0 Тогда
			стррРезультат.БазоваяКонфигурация = "УТ_11.4.6.175";
		Иначе
			стррРезультат.БазоваяКонфигурация = "УТ_11.2.3";
		КонецЕсли;
		//))vd_181225
		стррРезультат.Конфигурация  	  = "КА";
		стррРезультат.КонфигурацияВерсия  = Версия; //vd_180912 Было стррРезультат.КонфигурацияВерсия  = "КА_OLD";
		
	ИначеЕсли Имя = "УправлениеПредприятием" Тогда // ERP 2.X
		
		Если СравнитьВерсии(Версия, "2.4") < 0 Тогда
			стррРезультат.БазоваяКонфигурация = "УТ_11.2.3";
			стррРезультат.КонфигурацияВерсия = "ERP_OLD";
		Иначе
			//((vd_190211
			//стррРезультат.БазоваяКонфигурация = "УТ_11.3";
			Отбор = Новый Структура("ИмяПодсистемы", "УправлениеТорговлей");
			стррВыборка = РегистрыСведений.ВерсииПодсистем.Получить(Отбор);
			Если ЗначениеЗаполнено(стррВыборка.Версия) Тогда
				стррРезультат.БазоваяКонфигурация = "УТ_" + стррВыборка.Версия;
			Иначе
				стррРезультат.БазоваяКонфигурация = "УТ_11.3";
			КонецЕсли;
			стррРезультат.КонфигурацияВерсия  = Версия;
			//))vd_190211
		КонецЕсли; 
		стррРезультат.Конфигурация  = "ERP";
		
	ИначеЕсли Имя = "KT2000_Alcohol_Trade" Тогда 
		стррРезультат.БазоваяКонфигурация = "УТ_" + Версия;
		стррРезультат.Конфигурация  = "УТ_АП";
		
	Иначе
		стррРезультат.Конфигурация  		= "УТ";             // vd_181009  Оприделяется поумолчанию
		стррРезультат.БазоваяКонфигурация 	= "УТ_11.2"; 	 	// пока неизвестные конфигурации приравниваем к УТ 11.2
		стррРезультат.КонфигурацияВерсия  	= Неопределено; 	// vd_181009  Оприделяется поумолчанию	
	КонецЕсли;
	
	Возврат стррРезультат;
	
КонецФункции

Процедура ОпределитьВерсиюКонфигурации()
	
	Если гБазоваяКонфигурация <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррВерсияКонфигурации = ВерсияКонфигурации();
	
	гБазоваяКонфигурация = стррВерсияКонфигурации.БазоваяКонфигурация;
	гКонфигурация  		 = стррВерсияКонфигурации.Конфигурация;
	гКонфигурацияВерсия	 = стррВерсияКонфигурации.КонфигурацияВерсия;
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ОпределениеКонфигурации
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ЧтениеЗаписьНастроекОбработки

// Функция возвращает строку-идентификатор пользователя для обращения к объекту ХранилищеСистемныхНастроек.
Функция ПользовательНастроек()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции 

// Функция возвращает строку-ключ настроек для обращения к объекту ХранилищеСистемныхНастроек.
Функция КлючНастроекОбмена()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции 

// Процедура сохраняет значения настроек обработки в ХранилищеСистемныхНастроек. 
// Параметры:
//		стррНастройки - Структура - структура, где Ключ и Значение используются как:
//			Ключ 	 - название настройки обработки,
//			Значение - значение настройки обработки.
Процедура СохранитьЗначенияНастроекИзСтруктуры(стррНастройки) Экспорт

	КлючНастроекОбмена   = КлючНастроекОбмена();
	ПользовательНастроек = ПользовательНастроек();
	
	Для Каждого Элемент Из стррНастройки Цикл
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена, Элемент.Ключ, Элемент.Значение,, ПользовательНастроек);
	КонецЦикла;

КонецПроцедуры

// В качестве параметра передается строка с именами настроек через запятую.
Функция СохранитьЗначенияНастроекОбработки(ИменаНастроек, СохранитьВВХ = Ложь) Экспорт

	Результат = Истина;
	
	МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	
	Если Не СохранитьВВХ Тогда // запись в хранилище
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, ЭтотОбъект[ИмяНастройки], , ПользовательНастроек());
		КонецЦикла;
		
	Иначе // запись в XML-файл с последующей записью во временное хранилище
		
		СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения,АдресВХ", Ложь, Новый Массив);
		
		ИмяФайла = КаталогВременныхФайлов() + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".xml";
		
		ДокXML = Новый ЗаписьXML();
		
		Попытка
			ДокXML.ОткрытьФайл(ИмяФайла);
			ДокXML.ЗаписатьОбъявлениеXML();	
			ДокXML.ЗаписатьНачалоЭлемента("Settings");

			ДокXML.ЗаписатьАтрибут("Generator", 		"Module1C");
			
			ДокXML.ЗаписатьАтрибут("ModuleVersion", 	ВерсияОбработки());
			ДокXML.ЗаписатьАтрибут("ModuleName", 		"APMTBase");
			
			ДокXML.ЗаписатьАтрибут("ProductName", 		Метаданные.Имя);
			ДокXML.ЗаписатьАтрибут("ProductVer", 	 	Метаданные.Версия); 
			ДокXML.ЗаписатьАтрибут("Compatibility", 	Строка(Метаданные.РежимСовместимости));
			ДокXML.ЗаписатьАтрибут("UICompatibility",	Строка(Метаданные.РежимСовместимостиИнтерфейса));
			//ДокXML.ЗаписатьАтрибут("PlatformVersion",	СистемнаяИнформация.ВерсияПриложения);
			//ДокXML.ЗаписатьАтрибут("OSVersion",		СистемнаяИнформация.ВерсияОС);
			//ДокXML.ЗаписатьАтрибут("OSType",			СистемнаяИнформация.ТипПлатформы);
			
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Ошибка создания файла настроек ""%1"". Причина: %2'"), ИмяФайла, ОписаниеОшибки());
			ВывестиСообщение(СтррРезультат, Текст, Истина);
			Возврат СтррРезультат;
		КонецПопытки;
		
		ДокXML.ЗаписатьНачалоЭлемента("Root");
		ДокXML.ЗаписатьНачалоЭлемента("Attributes");
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ДокXML.ЗаписатьНачалоЭлемента("Item");
			ДобавитьПоле(ДокXML, "Name",  ИмяНастройки);
			ДобавитьПоле(ДокXML, "Value", ЗначениеВСтрокуДляXML(ЭтотОбъект[ИмяНастройки]));
			ДокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ДокXML.ЗаписатьКонецЭлемента(); // "Attributes"
		ДокXML.ЗаписатьКонецЭлемента(); // "Root"
		ДокXML.ЗаписатьКонецЭлемента(); // "Settings"
		
		ДокXML.Закрыть();
		
		СтррРезультат.АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
		УдалитьФайлы(ИмяФайла);
		
		Результат = СтррРезультат;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура загружает реквизиты обработки значениями из хранилища системных настроек.
// 
// Параметры:
//	ИменаНастроек - Строка - строка с именами настроек через запятую.
//	ПеренестиТаблицыВоВременныеТаблицы - Булево - если Истина, то загружать таблицы значений в структуру ВременныеТаблицы (реквизит обработки).
//
Процедура ВосстановитьЗначенияНастроекОбработки(ИменаНастроек, ПеренестиТаблицыВоВременныеТаблицы = Ложь) Экспорт

	Если Не ЗначениеЗаполнено(ИменаНастроек) Тогда
		Возврат;
	КонецЕсли; 
	
	Имена = СтрЗаменить(ИменаНастроек, ",ВременныеТаблицы", "");
	
	СтррНастройки = ПрочитатьЗначенияНастроек(Имена);
	
	ТипТЗ = Тип("ТаблицаЗначений");	
	
	ВременныеТаблицы = Новый Структура;		

	Для Каждого Элемент Из СтррНастройки Цикл
		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;
		Если ТипЗнч(Значение) = ТипТЗ Тогда
			Если ПеренестиТаблицыВоВременныеТаблицы Тогда
				ВременныеТаблицы.Вставить(Ключ, Значение);
			Иначе
				ЭтотОбъект[Ключ] = Значение.Скопировать();
			КонецЕсли;
		Иначе
			ЭтотОбъект[Ключ] = Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция загружает реквизиты обработки значениями из XML-файла из временного хранилища.
// 
// Параметры:
//	ИменаНастроек 	- Строка - строка с именами настроек через запятую.
//	АдресВХ 		- Строка - адрес XML-файла настроек во временном хранилище.
//
Функция ЗагрузитьЗначенияНастроекОбработкиИзВХ(ИменаНастроек, АдресВХ) Экспорт

	Имена = "," + ВРег(ИменаНастроек) + ",";
	
	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения,ВсегоИзменений", Ложь, Новый Массив, 0);
	
	Данные = ПолучитьИзВременногоХранилища(АдресВХ);
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'В хранилище отсутствует XML-файл настроек.'"), Истина);
		Возврат СтррРезультат;
	КонецЕсли;
	
	ФайлНастроек = КаталогВременныхФайлов() + "apconfig.xml";
	Данные.Записать(ФайлНастроек);
	
	ДокXML = Новый ЧтениеXML;
    ДокXML.ОткрытьФайл(ФайлНастроек);
	
	ФайлКорректный 			 = Ложь;
	ЕстьТэгSettings 		 = Ложь;
	ВыведенЗаголовокЗагрузки = Ложь;		
 
    Пока ДокXML.Прочитать() Цикл
 
        Если ДокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
		 	ИмяУзла = ВРег(ДокXML.Name);
			
			Если ИмяУзла = "SETTINGS" Тогда
				
				ЕстьТэгSettings = Истина;
				
				ЦелевойМодуль = ДокXML.ЗначениеАтрибута("ModuleName");
				ЦелеваяВерсия = ДокXML.ЗначениеАтрибута("ModuleVersion");					
				
				Если ЦелевойМодуль = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Отсутствувет атрибут %1 узла ""Settings""!'"), "ModuleName");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
				КонецЕсли;
				
				Если ЦелеваяВерсия = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Отсутствувет атрибут %1 узла ""Settings""!'"), "ModuleVersion");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
				КонецЕсли;
				
				Если ЦелевойМодуль = Неопределено Или ЦелеваяВерсия = Неопределено Тогда 
					ДокXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ВРег(ЦелевойМодуль) <> "APMTBASE" Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Настройки предназначены для другого модуля (ModuleName = %1, ожидаемое значение: %2)!'"), 
						ЦелевойМодуль, "APMTBase");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
					ДокXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Сравнение = СравнитьВерсии(ВерсияОбработки(), ЦелеваяВерсия);
				Если Сравнение <> 0 Тогда
					Разница = ?(Сравнение < 0, НСтр("ru = 'более новой'"), НСтр("ru = 'более старой'"));
					Текст = СтрШаблон_(НСтр("ru = 'Получены настройки для обработки %1 версии (%2)!'"), Разница, ЦелеваяВерсия);
					ВывестиСообщение(СтррРезультат, Текст);
				КонецЕсли;
				
				ФайлКорректный = Истина;
				
			ИначеЕсли ИмяУзла = "ITEM" И ФайлКорректный Тогда
				
				Если Не ВыведенЗаголовокЗагрузки Тогда
					ВывестиСообщение(СтррРезультат,  НСтр("ru = 'Чтение значений настроек...'"));
					ВыведенЗаголовокЗагрузки = Истина;
				КонецЕсли;
				
				Имя = ДокXML.ЗначениеАтрибута("Name");
				Если 0 = Найти(Имена, "," + ВРег(Имя) + ",") Тогда
					// загружаем только реквизиты, указанные в параметре Имена
				ИначеЕсли Не ЕстьРеквизитОбъекта(Имя, ЭтотОбъект) Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Пропущен параметр (отсутствует в обработке): ""%1"".'"), Имя);
					ВывестиСообщение(СтррРезультат, Текст);
				Иначе
					Значение = ЗначениеИзСтрокиXML(ДокXML.ЗначениеАтрибута("Value"), ТипЗнч(ЭтотОбъект[Имя]));
					Если ЭтотОбъект[Имя] <> Значение Тогда // изменилось значение реквизита, загружаем новое значение
						ЭтотОбъект[Имя] = Значение;
						Если СтррРезультат.ВсегоИзменений = 0 Тогда
							ВывестиСообщение(СтррРезультат, НСтр("ru = 'Получены новые значения параметров настройки:'"));
						КонецЕсли;
						СтррРезультат.ВсегоИзменений = СтррРезультат.ВсегоИзменений + 1;
						Текст = СтрШаблон_(НСтр("ru = '%1. ""%2""'"), СтррРезультат.ВсегоИзменений, Имя);
						ВывестиСообщение(СтррРезультат, Текст);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;					
 
        КонецЕсли;
 
    КонецЦикла; 
 
    ДокXML.Закрыть();
	
	Если Не ЕстьТэгSettings Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Файл не является файлом настроек - ожидается тэг ""Settings"".'"), Истина);
	КонецЕсли;
	
	Возврат СтррРезультат;

КонецФункции

// Функция возвращает структуру с прочитанными настройками из хранилища системных настроек.
// Параметры:
//	 стрИменаНастроек - Строка - строка имен настроек, перечисленных через запятую.
//	 ЗначениеПоУмолчанию - любой тип - возвращаемое значение настройки, если исходное значение настройки оказалось равным Неопределено.
//
// Возвращаемое значение:
//  Структура - значения прочитанных настроек.
//
Функция ПрочитатьЗначенияНастроек(стрИменаНастроек, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	МассивИмен = СтрРазделить_(стрИменаНастроек, ",", Ложь);
	
	стррРезультат = Новый Структура(стрИменаНастроек);
	Ключ 		 = КлючНастроекОбмена();
	Пользователь = ПользовательНастроек();
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда // не проверяем прочитанные значения на Неопределено
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(Ключ, ИмяНастройки,, Пользователь);
			стррРезультат.Вставить(ИмяНастройки, ЗначениеНастройки);
		КонецЦикла;
		
	Иначе // проверяем прочитанные значение на Неопределено и заменяем такие значения на ЗначениеПоУмолчанию	
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(Ключ, ИмяНастройки,, Пользователь);
			Если ЗначениеНастройки <> Неопределено Тогда
				стррРезультат.Вставить(ИмяНастройки, ЗначениеНастройки);
			Иначе
				стррРезультат.Вставить(ИмяНастройки, ЗначениеПоУмолчанию);			
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат стррРезультат;

КонецФункции

// Удаляет настройки из хранилища.
// В качестве параметра передается строка с именами настроек через запятую или массив имен настроек.
Процедура УдалитьЗначенияНастроек(ИменаНастроек)
	
	ТипПараметра = ТипЗнч(ИменаНастроек);
	Если ТипПараметра = Тип("Строка") Тогда
		МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	ИначеЕсли ТипПараметра = Тип("Массив") Тогда
		МассивИмен = ИменаНастроек;
	Иначе
		ВызватьИсключение("Процедура УдалитьЗначенияНастроек() - неизвестный тип папаметра ИменаНастроек - " + Строка(ТипПараметра));
	КонецЕсли;
	
	Для Каждого ИмяНастройки Из МассивИмен Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), ИмяНастройки, ПользовательНастроек());
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить системную настройку: " + ИмяНастройки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение настройки, прочитанной из хранилища настроек.
// В параметре передается имя настройки.
Функция ПрочитатьЗначениеНастройки(ИмяНастройки, ИспользоватьКэш = Ложь) Экспорт
	
	Если Не ИспользоватьКэш Тогда
		Возврат ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), ИмяНастройки, , ПользовательНастроек());
	Иначе
		Если гКэшНастроек = Неопределено Тогда
			гКэшНастроек = Новый Соответствие;
		КонецЕсли; 
		Значение = гКэшНастроек.Получить(ИмяНастройки);
		Если Значение = Неопределено Тогда
			Значение = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), ИмяНастройки, , ПользовательНастроек());
			гКэшНастроек.Вставить(ИмяНастройки, Значение);
		КонецЕсли; 
		Возврат Значение;
	КонецЕсли; 

КонецФункции

Функция ПрочитатьЗначениеНастройкиПоУмолчанию(ИмяНастройки, ЗначениеПоУмолчанию)
	
	Значение = ПрочитатьЗначениеНастройки(ИмяНастройки, Истина);
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли; 
	
КонецФункции

// В качестве параметра передается имя настройки (строка).
Процедура СохранитьЗначениеНастройки(ИмяНастройки, Значение) Экспорт

	ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, Значение, , ПользовательНастроек());
		
КонецПроцедуры

Процедура УдалитьЗначениеНастройки(ИмяНастройки)
	
	ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), ИмяНастройки, ПользовательНастроек());
	
КонецПроцедуры	

// Функция возвращает заполненную структуру объекта, прочитанного из хранилища.
// В структуре проставлены значения свойств в соответствии с данными в хранилище БД, найденными по ключу ID.
//
Функция ПолучитьОбъектИзХранилища(Префикс, ID) Экспорт

	Если ID = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПрочитатьЗначениеНастройки(Префикс + Строка(ID));
	КонецЕсли; 

КонецФункции 

// Процедура сохраняет заполненную структуру объекта в хранилище.
Процедура СохранитьОбъектВХранилище(Префикс, ID, СтррОбъект) Экспорт

	СохранитьЗначениеНастройки(Префикс + Строка(ID), СтррОбъект);

КонецПроцедуры

// Процедура удаляет объект из хранилища.
Процедура УдалитьОбъектИзХранилища(Префикс, ID) Экспорт
	
	УдалитьЗначениеНастройки(Префикс + Строка(ID));
	
КонецПроцедуры

// Процедура удаляет объект из хранилища.
Процедура УдалитьОбъектыИзХранилища(Префикс, мИдентификаторы) Экспорт
	
	Для Каждого ID Из мИдентификаторы Цикл
		УдалитьОбъектИзХранилища(Префикс, ID)
	КонецЦикла; 
	
КонецПроцедуры

// Процедура полностью удаляет все настройки модуля.
// Параметры:
// 	СтррРезультат - Структура - структура для возвращения результата. Свойства:
// 		ОшибокНет - Булево - Истина, если ошибок нет и Ложь, если есть ошибки удаления (сбросить настройки не удалось).
// 		Описание  - Строка - описание ошибки.
// 	
Процедура СброситьВсеНастройкиМодуля(СтррРезультат) Экспорт
	
	СтррРезультат.ОшибокНет = Ложь;
	СтррРезультат.Описание  = "Неизвестная ошибка.";
	
	Попытка
		ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), , ПользовательНастроек());
		Текст = СтрШаблон_("Настройки сброшены %1." + Символы.ПС + "Пользователь: %2.", ТекущаяДата(), Пользователи.ТекущийПользователь());
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), "НастройкиСброшены", Текст, , ПользовательНастроек());
		СтррРезультат.ОшибокНет = Истина;
	Исключение
		СтррРезультат.Описание = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

// Процедура загружает реквизиты объекта (модуля) с правильной обработкой значений типа ТаблицаЗначений
Процедура ЗаполнитьРеквизитыОбъектаИзСтруктуры(Модуль, СтррОбъект) Экспорт
	
	ТипТЗ = Тип("ТаблицаЗначений");
	стрРеквизитыТЗ = Неопределено;
	мРеквизитыТЗ = Новый Массив;
	Для Каждого Элемент Из СтррОбъект Цикл
		Если ТипЗнч(Элемент.Значение) = ТипТЗ Тогда
			стрРеквизитыТЗ = ?(стрРеквизитыТЗ = Неопределено, "", стрРеквизитыТЗ + ",") + Элемент.Ключ;
			мРеквизитыТЗ.Добавить(Элемент.Ключ);
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(Модуль, СтррОбъект, ,стрРеквизитыТЗ);
	//ЗаполнитьЗначенияСвойств(Модуль, СтррОбъект, ,);
	
	Стр1С = "";
	Для Каждого ИмяРеквизита Из мРеквизитыТЗ Цикл
		Стр1С = Стр1С + СтрЗаменить("Модуль.%1.Загрузить(СтррОбъект.%1); ", "%1", ИмяРеквизита);
	КонецЦикла;
	
	Если Стр1С <> "" Тогда
		Выполнить(Стр1С);
	КонецЕсли; 
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ЧтениеЗаписьНастроекОбработки
#КонецОбласти 

#Область ПрограммныйИнтерфейс_РасширениеСтруктуры

// Функция возвращает представление структуры в виде строки
Функция СтруктураПредставление(Структура, ОграничениеДлиныПредставления = 100) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(Структура) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Структура Цикл

			Тип = ТипЗнч(Элемент.Значение);
			Если Тип = Тип("Строка") Тогда
				ЗначениеСтр = "'" + СокрЛП(Элемент.Значение) + "'";
			ИначеЕсли Тип = Тип("СписокЗначений") Тогда
				ЗначениеСтр = "<Список N=" + Строка(Элемент.Значение.Количество()) + ">";
			ИначеЕсли Тип = Тип("Массив") Или Тип = Тип("ФиксированныйМассив") Тогда
				ЗначениеСтр = "<Массив N=" + Строка(Элемент.Значение.Количество()) + ">";
			Иначе
				ЗначениеСтр = Строка(Элемент.Значение);
			КонецЕсли;
			
			Если Результат <> "" Тогда
				Результат = Результат + "; ";
			КонецЕсли; 
			Результат = Результат + Элемент.Ключ + ": " + ЗначениеСтр;
			Если СтрДлина(Результат) >= ОграничениеДлиныПредставления Тогда
				Результат = Лев(Результат, ОграничениеДлиныПредставления - 3) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;		
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает список отсутствующих обязательных свойств.
Функция СтруктураОтсутствуютОбязательныеСвойства(Структура, стрОбязательныеСвойства)
	
	стрРезультат = "";
	
	Если ЗначениеЗаполнено(стрОбязательныеСвойства) Тогда
		МассивСвойств = СтрРазделить_(стрОбязательныеСвойства, ",");
		Для Каждого стрСвойство Из МассивСвойств Цикл
			Если Не Структура.Свойство(стрСвойство) Тогда
				стрРезультат = стрРезультат + ?(ПустаяСтрока(стрРезультат), "", ",") + стрСвойство;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат стрРезультат;
	
КонецФункции

// Функция проверяет наличие всех свойств структуры, названия свойств передаются в виде строки с разделителем ",".
Функция СтруктураЕстьСвойства(Структура, СтрСвойства) Экспорт
	
	Результат = Истина;
	
	Если ТипЗнч(Структура) <> Тип("Структура") Тогда
		Результат = Ложь;
	Иначе
		МассивСвойств = СтрРазделить_(СтрСвойства, ",");
		Для Каждого Элемент Из МассивСвойств Цикл
			Если Не Структура.Свойство(Элемент) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураЗначениеСвойства(Структура, СтрСвойство)
	
	Перем Результат;
	Структура.Свойство(СтрСвойство, Результат);
	Возврат Результат;
	
КонецФункции

// ПрограммныйИнтерфейс_РасширениеСтруктуры
#КонецОбласти 

#Область ПрограммныйИнтерфейс_РасширениеТаблицыЗначений

// Функция сокращает количество строк в ТЗ до заданного количества строк.
// Если удалялись лишние строки, то возвращается Истина.
Функция тзСократитьДоКоличестваСтрок(тз, КоличествоСтрок)

	УдалитьСтрок = тз.Количество() - КоличествоСтрок;
	Если УдалитьСтрок > 0 Тогда
		Для Поз = 1 По УдалитьСтрок Цикл
			тз.Удалить(тз.Получить(0));
		КонецЦикла;
	КонецЕсли;
	
	Возврат (УдалитьСтрок > 0);

КонецФункции

// Функция проверяет наличие колонок в таблице значений. Названия колонок передаются в виде строки с разделителем ",".
Функция тзЕстьКолонки(ТЗ, СтрКолонки)
	
	Результат = Истина;
	
	Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Тогда
		Результат = Ложь;
	Иначе
		мКолонки = СтрРазделить_(СтрКолонки, ",");
		Для Каждого ИмяКолонки Из мКолонки Цикл
			Если ТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
// ПрограммныйИнтерфейс_РасширениеТаблицыЗначений
#КонецОбласти 


#Область ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм

// Процедура используется для инициализации реквизита формы СтррКонтекст (вызывается в обработчике события ПриСозданииНаСервере() в модулях форм.
Процедура КонтекстФормыИнициализировать(стррКонтекст, ПараметрыФормы, стрОбязательныеСвойства = Неопределено) Экспорт
	
	Если стррКонтекст = Неопределено Тогда
		стррКонтекст = Новый Структура;
	КонецЕсли;
	
	стрНетСвойств = СтруктураОтсутствуютОбязательныеСвойства(ПараметрыФормы, стрОбязательныеСвойства);
	Если ЗначениеЗаполнено(стрНетСвойств) Тогда
		Если Найти(стрНетСвойств, ",") = 0 Тогда // отсуствует одно обязательное свойство в ПараметрыФормы
			Текст = СтрШаблон_("Отсутствует обязательное свойство ""Параметры.%1"" для открытия формы!", стрНетСвойств);
		Иначе // отсуствует несколько обязательных свойств в ПараметрыФормы
			Текст = СтрШаблон_("Отсутствуют обязательные свойства у объекта ""Параметры"" для открытия формы! Ожидаются свойства: %1.", стрНетСвойств);
		КонецЕсли; 
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	стррКонтекст.Вставить("ПутьКФорме", Метаданные().ПолноеИмя() + ".Форма.");
	стррКонтекст.Вставить("Версия", 	ВерсияОбработки());
	стррКонтекст.Вставить("Цвета", 		ВернутьЦветаОФормления());
	стррКонтекст.Вставить("ВХОбщиеПараметры", Неопределено);
	Если стррКонтекст.Свойство("РежимСовместимости") Тогда
		стррКонтекст.РежимСовместимости = Метаданные.РежимСовместимости;
	КонецЕсли;
	
	Если стррКонтекст.Свойство("Конфигурация") Тогда // требуется в "Контексте" указать данные о конфигурации 1С
	    стррВерсия = ВерсияКонфигурации();
		стррКонтекст.Конфигурация = стррВерсия.Конфигурация;
		стррКонтекст.Вставить("БазоваяКонфигурация", стррВерсия.БазоваяКонфигурация);
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(стррКонтекст, ПараметрыФормы);	
	
	Если стррКонтекст.Свойство("СпрТоргТочки") Тогда
		флИспользоватьПунктыРазгрузки = ПрочитатьЗначениеНастройки("ИспользоватьПунктыРазгрузки");
		Если флИспользоватьПунктыРазгрузки = Неопределено Тогда
			ИспользоватьПунктыРазгрузки = Ложь;
		Иначе 
			ИспользоватьПунктыРазгрузки = флИспользоватьПунктыРазгрузки;
		КонецЕсли;
		стррТТ = Новый Структура("ВидСправочника, Синоним, Представление, тзИмяКолонки, тзИмяЭлемента, Адрес");
		Если ИспользоватьПунктыРазгрузки Тогда 
			стррТТ.ВидСправочника = "алкПунктыРазгрузки"; // указывается имя справочника объекта метаданных в конфигурации, который заменяет справочник 'Партнеры'.
			стррТТ.Синоним 		  = "Пункты разгрузки"; // указывается для вывода на форме списка торговых точек.
			стррТТ.Представление  = "Пункт разгрузки"; // указывается для вывода в информационных сообщениях пользователю.
			стррТТ.тзИмяКолонки	  = "ПунктРазгрузки"; // имя колонки в таблице значений 'Состав' в модуле формы 'СписокТорговыхТочек'.
			стррТТ.тзИмяЭлемента  = "СоставПунктРазгрузки"; // имя элемента таблицы значений 'Состав' на форме 'СписокТорговыхТочек'.
			стррТТ.Адрес 		  = Справочники.ВидыКонтактнойИнформации.АдресПунктаРазгрузки;
		Иначе // используется типовой справочник Партнеры
			стррТТ.ВидСправочника = "Партнеры";
			стррТТ.Синоним 		  = "Партнеры";
			стррТТ.Представление  = "Партнер (Клиент)";
			стррТТ.тзИмяКолонки	  = "Партнер";
			стррТТ.тзИмяЭлемента  = "СоставПартнер";
			стррТТ.Адрес		  = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		КонецЕсли;
		стррКонтекст.СпрТоргТочки = стррТТ;		
	КонецЕсли; 
	
КонецПроцедуры

Функция ВернутьЦветаОФормления() Экспорт
	
	стррРезультат = Новый Структура;
	стррРезультат.Вставить("Авто", 	 		 Новый Цвет);
	стррРезультат.Вставить("ТекстПояснение", Новый Цвет(70,130,180));
	стррРезультат.Вставить("ТекстВнимание",  Новый Цвет(255,0,0));
	стррРезультат.Вставить("ТекстОбычный", 	 ЦветаСтиля.ЦветТекстаФормы);
	стррРезультат.Вставить("ФонРаздела", 	 Новый Цвет(225, 222, 255));
	стррРезультат.Вставить("ПолеГлавноеОкно",Новый Цвет(249, 243, 209));
	стррРезультат.Вставить("ФонСостояние", 	 Новый Цвет(255, 250, 217));
	стррРезультат.Вставить("ФонЗеленый", 	 Новый Цвет(128, 255, 128));
	стррРезультат.Вставить("ФонВнимание",	 Новый Цвет(255, 255, 128));
	стррРезультат.Вставить("Белый", 	 	 Новый Цвет(255, 255, 255));
	
	Возврат стррРезультат;
	
КонецФункции

Процедура ЗаполнитьСпособыОбмена(Список) Экспорт

	Список.Очистить();
	Список.Добавить("КаталогОбмена", НСтр("ru='Каталог обмена'"));
	Список.Добавить("АПСОД",  		 НСтр("ru='Агент Плюс: СОД (служба обмена данными)'"));
	Список.Добавить("FTP", 			 НСтр("ru='FTP-сервер'"));

КонецПроцедуры

Функция ПолучитьВсеЗакладкиЖурналаДокументовДляМУ() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("Заказ", 		НСтр("ru='Заказы'"));
	Список.Добавить("Долг", 		НСтр("ru='Долги'"));
	Список.Добавить("Реализация", 	НСтр("ru='Реализация'"));
	Список.Добавить("ПКО", 			НСтр("ru='Касса'"));
	Список.Добавить("Поступление", 	НСтр("ru='Поступления/Возвраты'")); //vd_180319 Добавления Поступления/Возвраты. 
	Список.Добавить("Перемещение", 	НСтр("ru='Перемещение'")); 
	Список.Добавить("Мерчендайзинг",НСтр("ru='Мерчендайзинг'")); 
	Список.Добавить("Посещение",	НСтр("ru='Посещение'"));
	Список.Добавить("Задание",		НСтр("ru='Задание'")); 				//vd_190418
	
	Возврат Список;
	
КонецФункции

// Функция возвращает последний элемент строки-списка с разделителями.
Функция ПоследнийЭлементСтроки(СтрВыражение, СимволРазделитель = ".") Экспорт

	Если Найти(СтрВыражение, СимволРазделитель) <> 0 Тогда 
		Результат = "";
		Индекс = СтрДлина(СтрВыражение);
		Символ = Сред(СтрВыражение, Индекс, 1);
		Пока Символ <> СимволРазделитель Цикл // в цикле ищем справа налево первый символ-разделительр
			Результат = Символ + Результат;
			Индекс = Индекс - 1;
			Символ = Сред(СтрВыражение, Индекс, 1);
		КонецЦикла;
	Иначе
		Результат = СтрВыражение;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция возвращает строковое представление расписания трекинга
Функция ПредставлениеРасписанияТрекинга(СтррРасписание) Экспорт
	
	Если Не СтруктураЕстьСвойства(СтррРасписание, "ВремяНачала,ВремяОкончания,ДниНедели,ПериодЗаписи") Тогда
		Возврат "";
	КонецЕсли;
	
	Дни = СтрЗаменить(СтррРасписание.ДниНедели, ",", "");
	Если Дни = ""  Тогда
		Возврат "";
	КонецЕсли;
	
	Если Дни = "1234567" Тогда
		СтрДни = НСтр("ru='все'");
	Иначе
		ДниНеделиСтр = НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС'");
		Если Лев(Дни, 5) = "12345" Тогда
			СтрДни = НСтр("ru='по будням'");
			Если Число(Прав(Дни, 1)) > 5 Тогда
				СтрДни = СтрДни + ", " + СтрРазделить_(ДниНеделиСтр, ",")[Число(Прав(Дни, 1))-1];
			КонецЕсли;
		Иначе
			МассивДней = СтрРазделить_(ДниНеделиСтр, ",");
			СтрДни = ""; 
			Для Поз = 1 По МассивДней.Количество() Цикл	
				Если Найти(Дни, Строка(Поз)) <> 0 Тогда
					СтрДни = СтрДни + ?(СтрДни = "", "", ", ") + МассивДней[Поз-1];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = НСтр("ru='Дни недели:'") + " " + СтрДни + ". ";
	СтрВремя  = СтрШаблон_(НСтр("ru='Время с %1 по %2'"), СтррРасписание.ВремяНачала, СтррРасписание.ВремяОкончания) + ". ";
	Результат = Результат + СтрВремя;
	СтрИнтервал = НСтр("ru='Интервал: каждые'") + " ";
	Если СтррРасписание.ПериодЗаписи = 0 Или СтррРасписание.ПериодЗаписи % 60 <> 0 Тогда
		СтрИнтервал = СтрИнтервал + Строка(СтррРасписание.ПериодЗаписи) + " " + НСтр("ru='сек'");
	Иначе
		СтрИнтервал = СтрИнтервал + Строка(СтррРасписание.ПериодЗаписи / 60) + " " + НСтр("ru='мин'");
	КонецЕсли;
	Результат = Результат + СтрИнтервал + ".";

	Возврат Результат;

КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

#Область ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм_ПроверкаГотовностиНастроек

// Функция проверяет готовность справочника торговых агентов к обмену данными.
//
// Параметры:
//  тз - ТаблицаЗначений - таблица виртуального справочника "НастройкиАгентов".
//
// Возвращаемое значение:
//   Структура - структура со свойствами статуса готовности справочника.
//
Функция СправочникАгентовПроверитьГотовность(тз)

	стррРезультат = Новый Структура("Готово,КодСостояния,Описание,Количество");
	
	Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Или тз.Количество() = 0 Тогда
		
		стррРезультат.Готово 		= Ложь;		
		стррРезультат.Описание 		= НСтр("ru = 'Не заполнены настройки агентов.'");
		стррРезультат.КодСостояния 	= "СправочникПустой";
		стррРезультат.Количество 	= 0;
		
	Иначе
		
		стррРезультат.Количество = тз.Количество(); // общее количество агентов (готовых и не готовых)
		
		ГотовыеАгенты 		 = 0;
		КритичныеЗамечания 	 = 0;
		НеКритичныеЗамечания = 0;
		
		Для Каждого СтрокаТ Из тз Цикл
			Если СтрокаТ.СтатусНастроек = 1 Тогда // зеленая галка статуса агента
				ГотовыеАгенты = ГотовыеАгенты + 1;
			ИначеЕсли СтрокаТ.СтатусНастроек = 2 Тогда
				КритичныеЗамечания = КритичныеЗамечания + 1;
			ИначеЕсли СтрокаТ.СтатусНастроек = 3 Тогда
				НеКритичныеЗамечания = НеКритичныеЗамечания + 1;
			Иначе // неизвестный статус!
				НеКритичныеЗамечания = НеКритичныеЗамечания + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КритичныеЗамечания > 0 Тогда
			ЧислоАгентов = ЧислоЦифрамиПредметИсчисленияПрописью(КритичныеЗамечания, НСтр("ru = 'агента, агентов, агентов'"));
			стррРезультат.Готово = Ложь;			
			стррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Не заполнены настройки у %1.'"), ЧислоАгентов);
			стррРезультат.КодСостояния = "НеУВсехЗаполненыНастройки";
		ИначеЕсли ГотовыеАгенты > 0 Тогда
			стррРезультат.Готово = Истина;
			стррРезультат.Описание = "";
			стррРезультат.КодСостояния = ?(НеКритичныеЗамечания > 0, "НеКритичныеЗамечания", "ЕстьГотовыеАгенты");
		Иначе
			стррРезультат.Готово = Ложь;
			стррРезультат.Описание = НСтр("ru = 'Нет торговых агентов готовых к обмену данными.'");
			стррРезультат.КодСостояния = "НетГотовыхАгентов";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат стррРезультат;
	
КонецФункции

// Функция проверяет готовность справочника МУ к обмену данными.
//
// Параметры:
//  тз - ТаблицаЗначений - таблица виртуального справочника "МобильныеУстройства".
//
// Возвращаемое значение:
//   Структура - структура со свойствами статуса готовности справочника.
//
Функция СправочникМобильныхУстройствПроверитьГотовность(тз)
	
	стррРезультат = Новый Структура("Готово,КодСостояния,Описание", Истина, "", "");
	
	Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Или тз.Количество() = 0 Тогда
		
		стррРезультат.Описание 	   = НСтр("ru = 'Не заполнен справочник мобильных устройств.'");
		стррРезультат.КодСостояния = "СправочникПустой";
		стррРезультат.Готово 	   = Ложь;
		
	КонецЕсли;
	
	Возврат стррРезультат;
	
КонецФункции

// Функция проверяет готовность некоторых виртуальных справочников к обмену данными.
//
// Параметры:
//  ИменаСправочников - Строка - список названий виртуальных справочников через запятую.
//
// Возвращаемое значение:
//   Структура статусов в соответствии с переданным списком названий виртуальных справочников.
//   Если передано единственное название справочника, то возвращается структура статуса справочнкиа только для данного справочника.
//
Функция ГотовностьСправочников(ИменаСправочников) Экспорт

	стррРезультат = Новый Структура(ИменаСправочников);
	стррЗначения  = ПрочитатьЗначенияНастроек(ИменаСправочников);
	
	Для Каждого Элемент Из стррЗначения Цикл
		ВидСправочника = Элемент.Ключ;
		Если ВидСправочника = "НастройкиАгентов" Тогда
			стррРезультат[ВидСправочника] = СправочникАгентовПроверитьГотовность(Элемент.Значение);
		ИначеЕсли ВидСправочника = "МобильныеУстройства" Тогда
			стррРезультат[ВидСправочника] = СправочникМобильныхУстройствПроверитьГотовность(Элемент.Значение);
		Иначе
			ВызватьИсключение("Передан неизвестный вид справочника для чтения из системных настроек: " + ВидСправочника);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(стррРезультат.Количество() = 1, стррРезультат[ВидСправочника], стррРезультат);
	
КонецФункции

Функция ГотовностьНастроекОбмена() Экспорт

	стррРезультат = Новый Структура("Готово,КодСостояния,Описание", Истина, "", "");
	стррЗначения  = ПрочитатьЗначенияНастроек("КаталогДанных,КаталогОбмена,СпособОбмена,СОДАдрес,СОДПорт,FTPАдрес,FTPПароль,FTPПользователь");
	
	Если Не ЗначениеЗаполнено(стррЗначения.КаталогДанных) Тогда
		
		стррРезультат.Описание = НСтр("ru = 'Не указан каталог данных.'");
		стррРезультат.КодСостояния = "НеУказанКаталогДанных";
		
	ИначеЕсли Не КаталогСуществует(стррЗначения.КаталогДанных) Тогда
		
		стррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Каталог данных не существует (%1).'"), стррЗначения.КаталогДанных);
		стррРезультат.КодСостояния = "НеСуществуетКаталогДанных";
		
	ИначеЕсли Не ЗначениеЗаполнено(стррЗначения.КаталогОбмена) Тогда
		
		стррРезультат.Описание = НСтр("ru = 'Не указан каталог обмена.'");
		стррРезультат.КодСостояния = "НеУказанКаталогОбмена";
		
	ИначеЕсли Не КаталогСуществует(стррЗначения.КаталогОбмена) Тогда
		
		стррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Каталог обмена не существует (%1).'"), стррЗначения.КаталогОбмена);
		стррРезультат.КодСостояния = "НеСуществуетКаталогОбмена";
		
	ИначеЕсли Не ЗначениеЗаполнено(стррЗначения.СпособОбмена) Тогда
		
		стррРезультат.Описание = НСтр("ru = 'Не указан способ обмена.'");
		стррРезультат.КодСостояния = "НеВыбранСпособ";
		
	Иначе
		
		НазванияРеквизитов = "";		
		
		Если стррЗначения.СпособОбмена = "КаталогОбмена" Тогда // ничего не проверяем
		
		ИначеЕсли стррЗначения.СпособОбмена = "АПСОД" Тогда 
			
			Если Не ЗначениеЗаполнено(стррЗначения.СОДАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Адрес СОД'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(стррЗначения.СОДПорт) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Порт СОД'") + """";
			КонецЕсли;
			
		ИначеЕсли стррЗначения.СпособОбмена = "FTP" Тогда 
			
			Если Не ЗначениеЗаполнено(стррЗначения.FTPПользователь) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Пользователь FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(стррЗначения.FTPАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Адрес FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(стррЗначения.FTPПароль) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Пароль FTP'") + """";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НазванияРеквизитов <> "" Тогда
			
			стррРезультат.Описание = НСтр("ru = 'В настройках обмена не заполнены реквизиты:'") + " "
				+ Прав(НазванияРеквизитов, СтрДлина(НазванияРеквизитов) - 2) + ".";
			стррРезультат.КодСостояния = "НеЗаполненыРеквизиты";
			
		КонецЕсли;
		
	КонецЕсли;
	
	стррРезультат.Готово = ПустаяСтрока(стррРезультат.Описание); // если нет описания, то ошибок нет
	
	Возврат стррРезультат;
	
КонецФункции

// Функция проверяет регистрацию обработки в 1С:Предприятии как регламентного задания.
Функция ГотовностьФоновогоЗадания() Экспорт

	стррРезультат = Новый Структура;
	стррРезультат.Вставить("РегистрацияОбработки", 	СтатусГовоностиРегистрацииОбработки());
	стррРезультат.Вставить("РегламетноеЗадание", 	СтатусГовоностиРегламетногоЗадания());
	
	Возврат стррРезультат;

КонецФункции 

Функция СтатусГовоностиРегистрацииОбработки()

	стррРезультат = Новый Структура("Готово,КодСостояния,Описание,Иконка", Ложь);
	стррИконки = Новый Структура("Пусто,ОК,Внимание", 0, 1, 2);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеОтчетыИОбработки.Ссылка,
		|	ДополнительныеОтчетыИОбработки.ИмяФайла,
        |	ДополнительныеОтчетыИОбработки.Версия
        |ИЗ
        |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
        |ГДЕ
        |	ДополнительныеОтчетыИОбработки.ИмяФайла = &ИмяФайла
        |	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления
		|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайлаОбработки());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		стррРезультат.КодСостояния = "ТребуетсяРегистрация";
		стррРезультат.Описание = НСтр("ru = 'Требуется регистрация текущей обработки для ее выполнения как регламентного задания.'");
		стррРезультат.Иконка   = стррИконки.Внимание;
	Иначе
		Выборка.Следующий();
		Если СравнитьВерсии(ВерсияОбработки(), Выборка.Версия) <= 0 Тогда // версия актуальная или зарегистрирована более новая версия обработки
			// перебираем строки в ТЧ "Команды" - ищем хотя бы одну команду, связанную с регламентным заданием
			ЕстьРегламентноеЗаданиеДляКоманды = Ложь;
			Для каждого СтрокаТ Из Выборка.Ссылка.Команды Цикл
				Если ЗначениеЗаполнено(СтрокаТ.РегламентноеЗаданиеGUID) Тогда
					ЕстьРегламентноеЗаданиеДляКоманды = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ЕстьРегламентноеЗаданиеДляКоманды Тогда
				стррРезультат.КодСостояния = "ОК";
				стррРезультат.Описание = НСтр("ru = 'Обработка зарегистрирована в справонике и задано расписание. Замечаний нет.'");
				стррРезультат.Иконка   = стррИконки.ОК;
				стррРезультат.Готово   = Истина;
			Иначе
				стррРезультат.КодСостояния = "НетРегламентногоЗадания";
				стррРезультат.Описание = НСтр("ru = 'Не указано расписание выполнения хотя бы для одной из команд обработки.'");
				стррРезультат.Иконка   = стррИконки.Внимание;
			КонецЕсли; 
			
		Иначе
			стррРезультат.КодСостояния = "ЗарегистрированаСтараяВерсия"; // зарегистрирована устаревшая версия обработки
			Текст = НСтр("ru = 'Зарегистрирована устаревшая версия обработки (открыта версия - %1, зарегистрирована версия - %2).'");
			стррРезультат.Описание = СтрШаблон_(Текст, ВерсияОбработки(), Выборка.Версия);
			стррРезультат.Иконка   = стррИконки.Внимание;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат стррРезультат;
			
КонецФункции

Функция СтатусГовоностиРегламетногоЗадания()

	стррРезультат = Новый Структура("Готово,КодСостояния,Описание,Иконка,ИдентификаторЗадания", Ложь);
	стррИконки = Новый Структура("Пусто,ОК,Внимание", 0, 1, 2);

	стррОтбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
	мТекущиеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(стррОтбор);
	
	ИмяФайла = ИмяФайлаОбработки();
	НайденноеЗадание = Неопределено;
	
	// ищем зарегистрированную обработку "апОбменДанными.epf" среди регламентных заданий
	Для каждого Задание Из мТекущиеЗадания Цикл
		Параметр0 = Задание.Параметры[0]; // первый параметр задания должен ссылаться на элемент справочника "ДополнительныеОтчетыИОбработки"
		Если ТипЗнч(Параметр0) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			Продолжить;
		КонецЕсли; 
		Если Параметр0.ИмяФайла = ИмяФайла Тогда
			Если НайденноеЗадание = Неопределено Тогда
				НайденноеЗадание = Задание;
				Если Задание.Использование Тогда // если задание не используется, продолжаем поиск
					Прервать; // нашли используемое задание, связанное с обработкой
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденноеЗадание <> Неопределено Тогда
		стррРезультат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли; 
	
	Если НайденноеЗадание = Неопределено Тогда // нет регламентного задания, связанного с обработкой
		стррРезультат.КодСостояния = "НетЗадания";
		Текст = НСтр("ru = 'Не найдено регламентного задания, связанного с текущей обработкой (""%1"").'");
		стррРезультат.Описание = СтрШаблон_(Текст, ИмяФайла);
		стррРезультат.Иконка = стррИконки.Внимание;
	ИначеЕсли Не НайденноеЗадание.Использование Тогда // нет регламентного задания, связанного с обработкой
		стррРезультат.КодСостояния = "ЗаданиеВыключено";
		стррРезультат.Описание = НСтр("ru = 'Регламентное задание выключено.'");
		стррРезультат.Иконка = стррИконки.Внимание;
	ИначеЕсли Не ЗначениеЗаполнено(НайденноеЗадание.ИмяПользователя) Тогда // не указан пользователь для регламентного задания
		стррРезультат.КодСостояния = "НеУказанПользователь";
		стррРезультат.Описание = НСтр("ru = 'Не указан пользователь, от имени которого запускать регламентное задание.'");
		стррРезультат.Иконка = стррИконки.Внимание;		
	Иначе // замечаний нет
		стррРезультат.КодСостояния = "ОК";
		стррРезультат.Описание = НСтр("ru = 'Обработка указана в регламентном задании. Замечаний нет.'");
		стррРезультат.Иконка = стррИконки.ОК;		
		стррРезультат.Готово = Истина;
	КонецЕсли; 

	Возврат стррРезультат;
	
КонецФункции

// ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм_ПроверкаГотовностиНастроек
#КонецОбласти 

// ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм
#КонецОбласти 

#Область ПрограммныйИнтерфейс_СпискиТорговыхТочек

// Функция возвращает параметры детализации списка торговых точек
Функция ПолучитьСписокДетализацииСписковТорговыхТочек() Экспорт

	ИспользоватьДоговорыИлиСоглашения = ПрочитатьЗначениеНастройки("ИспользоватьДоговорыИлиСоглашения"); // реквизит обработки, используется ниже в процедурах ИспользоватьСоглашения() и ИспользоватьДоговоры().
	
	Если ИспользоватьСоглашения() Тогда
	    ПредставлениеДоговор = НСтр("ru = 'Соглашение'");
	ИначеЕсли ИспользоватьДоговоры() Тогда
		ПредставлениеДоговор = НСтр("ru = 'Договор'");
	Иначе
		ПредставлениеДоговор = Неопределено;
	КонецЕсли; 
	
	Список = Новый СписокЗначений;
	Список.Добавить("Организация", 	НСтр("ru = 'Организация'"));
	Список.Добавить("Контрагент", 	НСтр("ru = 'Контрагент'"));
	Если ПредставлениеДоговор <> Неопределено Тогда
		Список.Добавить("Договор", 	ПредставлениеДоговор);
	КонецЕсли; 
	Список.Добавить("График", 		НСтр("ru = 'График'"));	
	Список.Добавить("ПланПосещений",НСтр("ru = 'План посещений'"));	
	
	Возврат Список;

КонецФункции

// Функция возвращает Истина, если список торговых точек используется для планирования посещений.
// В параметрах ИспользуетсяГрафик, ИспользуетсяПП возвращаются признаки - какой вариант планирования посещений задействован (через График или через ПланПосещений).
Функция СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик = Неопределено, ИспользуетсяПП  = Неопределено) Экспорт
	
	ИспользуетсяГрафик 	= стррОбъект.Детализация.НайтиПоЗначению("График") <> Неопределено;
	ИспользуетсяПП 	   	= стррОбъект.Детализация.НайтиПоЗначению("ПланПосещений") <> Неопределено;
	
	Возврат ИспользуетсяГрафик Или ИспользуетсяПП;
	
КонецФункции

// ПрограммныйИнтерфейс_СпискиТорговыхТочек
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбменДанными

Функция КонстантыПолучитьЗначение(ИмяКонстанты) 

	Перем Значение;
	
	Если гКэшЧтенияКонстант = Неопределено  Тогда
		гКэшЧтенияКонстант = Новый Структура;
	КонецЕсли; 
	
	Если Не гКэшЧтенияКонстант.Свойство(ИмяКонстанты, Значение) Тогда
		Значение = Константы[ИмяКонстанты].Получить();
		гКэшЧтенияКонстант.Вставить(ИмяКонстанты, Значение);
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции

Функция НужноПропуститьТекущегоАгента()
	
	Если ВыбНастройкиАгента.СтатусНастроек = 2 Тогда // для агента все настроено
		Текст = НСтр("ru='Пропущен агент по причине не заполненных настроек.'");
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Результат = Истина;
	ИначеЕсли ВыбНастройкиАгента.СтатусНастроек <> 1 Тогда // нет статуса готовности
		Результат = Истина;
	ИначеЕсли ВыбНастройкиАгента.ВыгружаемыеОбъекты = Неопределено Тогда // vd_181203 добавлено условие
		Текст = НСтр("ru = 'Пропущен агент: ""%1"", не заполнены ""Выгружаемые данные""! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь);
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выгрузка данных по переданному агенту или по всем агентам.
Процедура ВыгрузитьДанные(Агент) Экспорт

	ЗагрузитьНастройкиДляРаботыОбмена();
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда // значит настройки агентов еще не создавались
		ОповеститьОСобытии(НСтр("ru='Настройки агентов не заданы! Данные не выгружены.'"), "ОшибкаНастройки");
		Возврат;
	КонецЕсли;  

	//vd_190304
	//Обновление регистра накоплений "Расчеты с клиентами по документам"
	ОбновлениеРегистрРасчетыСКлиентамиПоДокументам();
	
	Если ЗначениеЗаполнено(Агент) Тогда // выгрузка данных для одного агента
		
		ВыгрузитьДанныеДляАгента(Агент);
		
	Иначе // выгрузка данных для всех агентов
		
		ТЗ = ВременныеТаблицы.НастройкиАгентов;	
		Для Каждого СтрокаТ Из ТЗ Цикл
			ВыгрузитьДанныеДляАгента(СтрокаТ.Пользователь);
		КонецЦикла;
		
		ВыбАгент = Справочники.Пользователи.ПустаяСсылка(); //vd_180606 Баг 380809
		
	КонецЕсли;

КонецПроцедуры

// Формирование файла выгрузки для переданного агента.
Процедура ВыгрузитьДанныеДляАгента(Агент, ОтветныеДанные = Ложь) Экспорт
	
	Если гКэшСравненияКонфигураций = Неопределено Тогда // используем переменную гКэшСравненияКонфигураций как признак, что нужно загрузить настройки обмена из хранилища
		ЗагрузитьНастройкиДляРаботыОбмена();
	КонецЕсли;
	
	гКэшСпискиОбъектов = Новый Соответствие; 							//vd_181203 mod-146 Перенесена из ЗагрузитьНастройкиДляРаботыОбмена(). Ее требуется очищать для каждого агента при выгрузке. Не используется при загрузке. Не используем гКэшСпискиОбъектов.Очистить(), тк нужно проверять тип итд  
	гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", Неопределено);  
	
	ВыбАгент 			= Агент; //vd_180606 Баг 380809
	ВыбНастройкиАгента  = ПолучитьНастройкиАгента(Агент);
	тзКартинки 			= Неопределено;
	
	Если НужноПропуститьТекущегоАгента() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтветныеДанные Тогда
	    ОповеститьОСобытии("Выгрузка ответных данных для агента: " + СокрЛП(Агент));
	Иначе
		ОповеститьОСобытии("Выгрузка для агента: " + СокрЛП(Агент));
	КонецЕсли; 
	
	ИмяФайлаВыгрузки = КаталогВременныхФайловАгента() + "FromCDB.xml";
	ДокОбмена 		 = СоздатьФайлВыгрузкиДанных(ИмяФайлаВыгрузки);
	
	МенеджерВТ = МенеджерВТПолучить();
			
	ВыгрузитьКонстанты(ДокОбмена, МенеджерВТ); //vd_181024 Добавлен параметр МенеджерВТ, нужен для получения Основного плна прадаж
	
	ВыгрузитьСправочники(ДокОбмена, МенеджерВТ, тзКартинки);
	
	ВыгрузитьДокументы(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьИзображения(ДокОбмена, тзКартинки);
	
	ВыгрузитьПодтверждения(ДокОбмена);

	ЗакрытьФайлВыгрузки(ДокОбмена);
	
	СТЗСохранить("Все"); // сохраняем все измененные служебные таблицы значений
	
	ИмяФайлаАрхиваКартинок = СформироватьАрхивСКартинками(тзКартинки);
	
	ФайлОтправки = УпаковатьФайл(ИмяФайлаВыгрузки, ИмяФайлаАрхиваКартинок);
	
	ОтправитьФайлПоСпособуОбмена(ФайлОтправки);

КонецПроцедуры

// Загрузка данных по переданному агенту или по всем агентам.
// Функция возвращает количество агентов, по которым загружены данные.
Функция ЗагрузитьДанные(Агент) Экспорт
	
	Количество = 0;
	
	ЗагрузитьНастройкиДляРаботыОбмена();
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда // значит настройки агентов еще не создавались
		ОповеститьОСобытии(НСтр("ru='Настройки агентов не заданы! Данные не выгружены.'"), "ОшибкаНастройки");
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Агент) Тогда // загрузка данных для одного агента
		
		Если ЗагрузитьДанныеДляАгента(Агент) Тогда
			Количество = Количество + 1
		КонецЕсли;
		
	Иначе // загрузка данных для всех агентов
		
		ТЗ = ВременныеТаблицы.НастройкиАгентов;	
		Для Каждого СтрокаТ Из ТЗ Цикл
			Если ЗагрузитьДанныеДляАгента(СтрокаТ.Пользователь) Тогда
				Количество = Количество + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Количество;

КонецФункции

// Функция возвращает Истина, если данные от агента были успешно загружены.
Функция ЗагрузитьДанныеДляАгента(Агент)

	ВыбНастройкиАгента = ПолучитьНастройкиАгента(Агент);
	
	Если НужноПропуститьТекущегоАгента() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьАвтообмен Или СпособОбмена = "АПСОД" Тогда
		ОповеститьОСобытии("Загрузка для агента: " + СокрЛП(Агент));
	КонецЕсли;
	
	стррСведения = Новый Структура; // структура для возврата дополнительных данных по содержимому архива файла обмена
	Каталог = ЗагрузитьИРаспаковатьФайлПоСпособуОбмена(стррСведения); 
	Если Каталог = Неопределено Тогда // была ошибка копирования/скачивания
		Возврат Ложь;
	КонецЕсли;
	
	ФайлОбмена = ФайлОбменаРаспакованный(Каталог);
	Если ФайлОбмена = Неопределено Тогда
		ОповеститьОСобытии("В zip-архиве не найден файл загрузки.");
	Иначе
		ЗагружаемыеОбъекты = ЗагруженныеОбъектыИзФайла(стррСведения);
		Результат = ЗагрузитьДанныеИзФайлаОбмена(Агент, ФайлОбмена, ЗагружаемыеОбъекты);
		УдалитьФайлы(ФайлОбмена.ПолноеИмя);
		Если Не Результат Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	ЗагрузитьGPSФайлы(Каталог); //vd_180319 Фоновая передача GPS . Перенес код в функцию.
	
	Если ОтветнаяВыгрузка Тогда
		ВыгрузитьДанныеДляАгента(Агент, Истина);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Возвращает папку, куда скопирован и распакован файл обмена,
// или Неопределено, если произошла ошибка.
// В параметре стррСведения возвращаются дополнительные данные о содержимом архива.
Функция ЗагрузитьИРаспаковатьФайлПоСпособуОбмена(стррСведения)

	Если СпособОбмена = "АПСОД" Тогда
		ФайлАрхив = СОДЗагрузитьФайл();
	ИначеЕсли СпособОбмена = "FTP" Тогда	
		ФайлАрхив = ФТПЗагрузитьФайл();
	ИначеЕсли СпособОбмена = "КаталогОбмена" Тогда
		ФайлАрхив = КОЗагрузитьФайл();		
	Иначе
		ВызватьИсключение("Неизвестный способ обмена: " + СпособОбмена);
	КонецЕсли;
	
	Если ФайлАрхив <> Неопределено Тогда
		СохранитьФайлДляУД(ФайлАрхив.ПолноеИмя, Истина);
		Каталог = КаталогВременныхФайловАгента();	
		Если РаспаковатьФайлОбменаВПапку(ФайлАрхив, Каталог, стррСведения) Тогда
			Возврат Каталог;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции

//vd_180319 Фоновая передача GPS. Добавил процедуру. Процедура загружает все файлы с треками из Каталога.
Процедура ЗагрузитьGPSФайлы (Каталог, Знач ИмяФайла = Неопределено)
	
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = "gps*.txt";
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(Каталог, ИмяФайла);
		
	Для Каждого ФайлТрека Из НайденныеФайлы Цикл 
		ЗагрузитьТрек(ФайлТрека, ВыбНастройкиАгента.СсылкаМУ);
		УдалитьФайлы(ФайлТрека.ПолноеИмя);
	КонецЦикла;
	
Конецпроцедуры

// gi_180415 функция возвращает подкаталог фотографий относительно исходного каталога
Функция ПодкаталогФотографийВременный(Каталог)
	
	Возврат ДополнитьСлешВПуть(Каталог) + "Photos";

КонецФункции 

// Функция возвращает Истина, если успешно распакован архив.
// В структуре Сведения возвращается дополнительная информация по содержимому распакованного архива.
Функция РаспаковатьФайлОбменаВПапку(ФайлАрхив, КаталогНазначения, стррСведения) // gi_180415 добавлен параметр стррСведения
	
	КаталогФотографийВременный = ПодкаталогФотографийВременный(КаталогНазначения); // gi_180415
	
	Попытка
		УдалитьФайлы(КаталогНазначения, "To*.*");
		УдалитьФайлы(КаталогНазначения, "gpstrack.txt");
		//(( gi_180415 для загрузки фотографий
		УдалитьФайлы(КаталогНазначения, "PhotosToCDB.zip"); 
		УдалитьФайлы(КаталогФотографийВременный, "*.*"); 
		//)) gi_180415
	Исключение
	КонецПопытки;
	
	Если ФайлАрхив <> Неопределено Тогда
		
		ПарольАрхива = СокрЛП(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ПарольНастроек.Значение);
		//(( gi_180420 учтен случай, когда архив поврежден (например, еще не был дозакачен из МУ на сервер)
		Попытка
			АрхивОбмена = Новый ЧтениеZipФайла(ФайлАрхив.ПолноеИмя, ПарольАрхива);
		Исключение
		    ОповеститьОСобытии("Ошибка чтения архива! " + ОписаниеОшибки(), "ОшибкаОбмен",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки; 
		//)) gi_180420
		АрхивОбмена.ИзвлечьВсе(КаталогНазначения);
		АрхивОбмена.Закрыть();
		Попытка
			УдалитьФайлы(ФайлАрхив.ПолноеИмя);
		Исключение
			Текст = "Не удалось удалить файл загрузки: " + ФайлАрхив.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
		
		//(( gi_180415 для загрузки фотографий
		ФайлАрхиваФотографий = ДополнитьСлешВПуть(КаталогНазначения) +  "PhotosToCDB.zip";
		Если ФайлСуществует(ФайлАрхиваФотографий) Тогда
			ПроверитьИСоздатьКаталог(КаталогФотографийВременный);
			АрхивФото = Новый ЧтениеZipФайла(ФайлАрхиваФотографий);
			АрхивФото.ИзвлечьВсе(КаталогФотографийВременный);
			АрхивФото.Закрыть();
			//стррСведения.Вставить("КаталогФото", КаталогФотографийВременный); //vd_180712 // временный каталог фотографий, распакованных из файла обмена данными
		КонецЕсли;
		стррСведения.Вставить("КаталогФото", КаталогФотографийВременный); //vd_180712 // временный каталог фотографий, распакованных из файла обмена данными
		//)) gi_180415
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ОтправитьФайлПоСпособуОбмена(ФайлОтправки)

	ИмяФайлаНаСервере = "From1C.zip";
	КаталогАгента = Неопределено;
	
	Если СпособОбмена = "АПСОД" Тогда
		
		КаталогОбменаАгентаПолучитьИПроверить(КаталогАгента);
		Если ЗначениеЗаполнено(КаталогАгента) Тогда
			ИмяФайлаАПС = КаталогАгента + ИмяФайлаНаСервере;
			КопироватьФайл(ФайлОтправки, ИмяФайлаАПС);
			Текст = СтрШаблон_("Данные для агента выгружены в файл ""%1"".", ИмяФайлаАПС);
			ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		КонецЕсли; 
		
	ИначеЕсли СпособОбмена = "FTP" Тогда
		
		ФТПВыгрузитьФайл(ФайлОтправки, ИмяФайлаНаСервере);
		
	ИначеЕсли СпособОбмена = "КаталогОбмена" Тогда
		
		КаталогОбменаАгентаПолучитьИПроверить(КаталогАгента);
		Если ЗначениеЗаполнено(КаталогАгента) Тогда
			ИмяФайлаКО = КаталогАгента + ИмяФайлаНаСервере;
			КопироватьФайл(ФайлОтправки, ИмяФайлаКО);
			Текст = СтрШаблон_("Данные для агента выгружены в файл ""%1"".", ИмяФайлаКО);
			ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение("Неизвестный способ обмена: " + СпособОбмена);
		
	КонецЕсли;

	СохранитьФайлДляУД(ФайлОтправки, Ложь);
	
	Попытка
		УдалитьФайлы(ФайлОтправки);
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура СохранитьФайлДляУД(ПутьИИмяФайла, ФайлПолученИзМУ)
	
	Если Не ЗначениеЗаполнено(РежимВыгрузкиВУД) Тогда
		Возврат;
	ИначеЕсли ФайлПолученИзМУ Тогда // попытка выгрузить в УД, файл полученный из МУ 
		Если 0 = Найти(РежимВыгрузкиВУД, "МУ") Тогда // не включен режим выгрузки в УД файлов, полученных из МУ
			Возврат;
		КонецЕсли;
	ИначеЕсли 0 = Найти(РежимВыгрузкиВУД, "УС") Тогда // попытка выгрузить в УД, файл отправляемый в МУ 
		Возврат; // не включен режим выгрузки в УД файлов, отправляемых в МУ
	КонецЕсли;
	
	КаталогАПДиск = ПодкаталогДанных("АПДиск",, Истина);
	ИмяФайла 	  = ФайлИзвлечьИмя(ПутьИИмяФайла);
		
	ИДАгента 		= XMLСтрока(ВыбНастройкиАгента.Пользователь);
	КаталогАгента 	= КаталогАпДиск + ИДАгента;
	ПроверитьИСоздатьКаталог(КаталогАгента, Истина);
	ТаймСтэмп = Формат(Число(ТекущаяДата() - Дата("19700101")), "ЧН=0; ЧГ=0");
	ФайлПриемникДляУД = КаталогАгента + "\" + СокрЛП(ТаймСтэмп) + "_" + ИДАгента + "_" + ИмяФайла;
	КопироватьФайл(ПутьИИмяФайла, ФайлПриемникДляУД);
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс_ОбменДанными_ФТП

Функция ФТПСоздатьПодключение()
	
	Если ПустаяСтрока(FTPАдрес) Или ПустаяСтрока(FTPПользователь) Тогда
		Текст = "В настройках обмена заданы не все параметры соединения с FTP-сервером. Работа с FTP невозможна!";
		ОповеститьОСобытии(Текст, "ОшибкаНастройки");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПодключениеКФТП = Новый FTPСоединение(FTPАдрес,, FTPПользователь, FTPПароль,, FTPПассивныйРежим, 0);		
	Исключение
		ОповеститьОСобытии("Ошибка подключения. Причина: " + ОписаниеОшибки(), "ОшибкаОбмен");
		Возврат Неопределено;
	КонецПопытки;
	
	а = 1;
	
	Возврат ПодключениеКФТП;
	
КонецФункции //Функция СоздатьПодключениеКФТП()

Процедура ФТПВыгрузитьФайл(ФайлОтправки, ИмяФайлаНаСервере)

	ПодключениеFTP = ФТПСоздатьПодключение();
	Если ПодключениеFTP = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФТППапка = СтрЗаменить(ВыбНастройкиАгента.КаталогОбмена, "\", "/");
	
	ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
	Если Не ПустаяСтрока(ФТППапкаСервера) И Лев(ФТППапка, 1) <> "\" Тогда // указан начальный каталог сервера и указана относительная папка агента
		Если ПодключениеFTP.НайтиФайлы(ФТППапкаСервера).Количество() = 0 Тогда
			ПодключениеFTP.СоздатьКаталог(ФТППапкаСервера);
		КонецЕсли;
		ПодключениеFTP.УстановитьТекущийКаталог(ФТППапкаСервера);
	КонецЕсли;
	
	Если ПодключениеFTP.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
		ПодключениеFTP.СоздатьКаталог(ФТППапка);
	КонецЕсли;
	
	ИмяФайлаFTP = ФТППапка + "/" + ИмяФайлаНаСервере;
	
	Попытка
		ПодключениеFTP.Записать(ФайлОтправки, ИмяФайлаFTP);
		Текст = "Данные для агента успешно выгружены на FTP-сервер.";
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
	Исключение	
		Текст = "Данные для агента не отправлены! Причина: ";
		Если ПодключениеFTP.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
			Текст = Текст + "не существует папка на FTP-сервере " + ФТППапка;
		Иначе
			Текст = Текст + ОписаниеОшибки();				
		КонецЕсли;
		ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгентСообщить");
	КонецПопытки;

КонецПроцедуры

//vd_180319 Фоновая передача GPS. При наличии не архивированного файла gpstrack.txt в папке агента, загружает его как фоновую передачу GPS координат.  
// Возвращает объект "Файл", полученный из FTP-сервера.
// 
Функция ФТПЗагрузитьФайл()
	
	ПодключениеКФТП = ФТПСоздатьПодключение();	
	Если ПодключениеКФТП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяФайла = "To1C.zip";
	
	ФТППапка = ВыбНастройкиАгента.КаталогОбмена;
	Если ПустаяСтрока(ФТППапка) Тогда
		Текст = "В ""Настройках агентов"" у агента не указана папка обмена!";
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Возврат Неопределено;
	КонецЕсли;
	
	ФТППапка = ДополнитьСлешВПуть(ФТППапка, "/");
	
	ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
	Если Не ПустаяСтрока(ФТППапкаСервера) И Лев(ФТППапка, 1) <> "\" Тогда // указан начальный каталог сервера и указана относительная папка агента
		ПодключениеКФТП.УстановитьТекущийКаталог(ФТППапкаСервера);
	КонецЕсли; 
	
	КаталогТ = КаталогВременныхФайловДляТранспорта(ВыбНастройкиАгента.КаталогОбмена);
	
	//{{ ЗАГРУЗКА фоновых GPS треков
	
	КаталогЛокальный = КаталогВременныхФайловАгента();
	
	ЗагрузитьGPSФайлы(КаталогЛокальный);  //Загружаем файлы с треками ,если таковые есть.
	
	//{{ vd_180404 Баг 38208. ПроверкаПапки. Добавил проверку.
	Если ПодключениеКФТП.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
		ПодключениеКФТП.СоздатьКаталог(ФТППапка);
		Текст = "На  FTP-сервере создана папка агента: " + ФТППапка;
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
	КонецЕсли;
	//}} vd_180404 Баг 38208
	
	НайденныеФайлы = ПодключениеКФТП.НайтиФайлы(ФТППапка, "gps*.txt");
		
	Для Каждого ФайлТрек Из НайденныеФайлы Цикл
		//КОПИРОВАТЬ
		Попытка
			ПодключениеКФТП.Получить(ФайлТрек.ПолноеИмя, КаталогЛокальный + ФайлТрек.Имя);
		Исключение
			Текст = "Ошибка при скачивании файла трека от СОД. Возможная причина: отсутсвует папка агента (%1). Трек от агента не загружен!";
			ОповеститьОСобытии(СтрШаблон_(Текст, ВыбНастройкиАгента.КаталогОбмена), "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//ЗАГРУЗКА
		Попытка
			ЗагрузитьGPSФайлы(КаталогЛокальный, ФайлТрек.Имя);  
		Исключение
			Текст = "Не удалось Загрузить файл трека: " + ФайлТрек.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//УДАЛЕНИЕ файла "gpstrack.txt" на ФТП-сервере
		Попытка
			ПодключениеКФТП.Удалить(ФайлТрек.ПолноеИмя);
		Исключение
			Текст = "Не удалось удалить файл ""gpstrack.txt"" на FTP-сервере. Причина: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
	КонецЦикла;
	
	//}} ЗАГРУЗКА фоновых GPS треков

	// КОПИРОВАНИЕ файла "To1C.*" с данными с ФТП в каталоги временных файлов
	Попытка    		
		Если ПодключениеКФТП.НайтиФайлы(ФТППапка, "To1C.*").Количество() = 0 Тогда
			Если НайденныеФайлы.Количество() > 0 Тогда
				ОповеститьОСобытии("Загружены только данные по фоновой передачи GPS трека. Файл обмена данными отсутствует.",,, "ТекущийАгентСообщить");
			Иначе
				ОповеститьОСобытии("Нет данных на FTP-сервере.",,, "ТекущийАгентСообщить");
			КонецЕсли;
			Результат = Неопределено; 
		Иначе
			Если НайденныеФайлы.Количество() > 0 Тогда
				ОповеститьОСобытии("Загружены данные по фоновой передачи GPS трека.",,, "ТекущийАгентСообщить");
			КонецЕсли;
			ИмяФайлаФТП   = ФТППапка + ИмяФайла;
			ФайлЛокальный = КаталогТ + ИмяФайла;
			ПодключениеКФТП.Получить(ИмяФайлаФТП, ФайлЛокальный);
			Результат = Новый Файл(ФайлЛокальный); 
		КонецЕсли;  
	Исключение             
		Текст = "Ошибка при скачивании файла с FTP-сервера. Возможная причина: отсутсвует папка агента (%1) на FTP-сервере. Данные от агента не загружены!";
		ОповеститьОСобытии(СтрШаблон_(Текст, ВыбНастройкиАгента.КаталогОбмена), "ОшибкаОбмен",, "ТекущийАгент");
		Текст = "Папка на FTP-сервере будет создана автоматически при выгрузке данных из 1С:Предприятия на FTP-сервер.";
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		Результат = Неопределено;			
	КонецПопытки;   	
	
	//УДАЛЕНИЕ файла "To1C.*" на ФТП-сервере
	Попытка
		Если Результат <> Неопределено Тогда
			ПодключениеКФТП.Удалить(ФТППапка, "To1C.*");
		КонецЕсли;
	Исключение
		Текст = "Не удалось удалить файл ""To1C.zip"" на FTP-сервере. Причина: " + ОписаниеОшибки();
		ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// ПрограммныйИнтерфейс_ОбменДанными_ФТП
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбменДанными_СОД

//vd_180319 Фоновая передача GPS.
// Функция возвращает файл (объект "Файл") для загрузки в УТ. Способ обмена - "СОД".
// 
Функция СОДЗагрузитьФайл()

	КаталогОбменаАгента = КаталогОбменаАгента(Ложь);    // Каталог СОД.
	
	Если КаталогОбменаАгента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	//{{ЗАГРУЗКА фоновых GPS треков
	
	КаталогОбменаАгентаПолучитьИПроверить(КаталогОбменаАгента); //vd_180404 Баг 38208. ПроверкаПапки

	НайденныеФайлы = НайтиФайлы(КаталогОбменаАгента, "gps*.txt");
	
	Для Каждого ФайлТрек Из НайденныеФайлы Цикл
		//ЗАГРУЗИТЬ
		Попытка
			ЗагрузитьGPSФайлы(КаталогОбменаАгента, ФайлТрек.Имя);  
		Исключение
			Текст = "Не удалось Загрузить файл трека: " + ФайлТрек.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//УДАЛИТЬ ИЗ СОД
		Попытка
			УдалитьФайлы(ФайлТрек.ПолноеИмя);   				
		Исключение
			Текст = "Не удалось Удалить файл трека: " + ФайлТрек.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки; 
	КонецЦикла;
	
	//}}ЗАГРУЗКА фоновых GPS треков

	ФайлАрхив = НайтиФайлОбменаВКаталоге(КаталогОбменаАгента);
	
	Если ФайлАрхив = Неопределено И НайденныеФайлы.Количество() > 0 Тогда
		ОповеститьОСобытии("Загружены только данные по фоновой передачи GPS трека. Файл обмена данными отсутствует.",,, "ТекущийАгентСообщить");
	ИначеЕсли НайденныеФайлы.Количество() > 0 Тогда
		ОповеститьОСобытии("Загружены данные по фоновой передачи GPS трека.",,, "ТекущийАгентСообщить");
	КонецЕсли;
	
	Возврат ФайлАрхив;

КонецФункции

// Функция возвращает файл (объект "Файл") для загрузки в УТ. Способ обмена - "Каталог обмена".
//
Функция КОЗагрузитьФайл()
	
	Каталог = КаталогВременныхФайловАгента(); // функция всегда возвращает корректный результат
	
	КаталогОбменаАгента = КаталогОбменаАгента(Ложь);
	
	Если КаталогОбменаАгента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлАрхив = НайтиФайлОбменаВКаталоге(КаталогОбменаАгента);
	
	Возврат ФайлАрхив;
	
КонецФункции

// Функция возвращает путь к каталогу обмена для агента, указанного в реквизите обработки ВыбНастройкиАгента.
// Если настройки не заданы или если не удалось создать каталог, возращает Неопределено.
// 
// Параметры:
//	СоздаватьКаталог - Булево - Если Истина, то каталог будет создан (если его нет), иначе каталог будет только проверен на существование.
//
Функция КаталогОбменаАгента(СоздаватьКаталог)

	Если ПустаяСтрока(КаталогОбмена) Тогда
		
		ОповеститьОСобытии("Не указан каталог обмена в ""Настройках обмена"".", "ОшибкаНастройки");
		Результат = Неопределено;
		
	ИначеЕсли ПустаяСтрока(ВыбНастройкиАгента.КаталогОбмена) Тогда
		
		Текст = "Не указан каталог обмена для агента в ""Настройках агентов"", агент: " + Строка(ВыбНастройкиАгента.Пользователь);
		ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгент");
		Результат = Неопределено;
		
	ИначеЕсли Не СоздаватьКаталог Тогда // проверяем каталог на существование
		
		КаталогАгента = ДополнитьСлешВПуть(КаталогОбмена) + ВыбНастройкиАгента.КаталогОбмена;
		Если КаталогСуществует(КаталогАгента) Тогда
			Результат = ДополнитьСлешВПуть(КаталогАгента);
		Иначе
			Текст = "Не существует каталог """ + КаталогАгента + """, указанный в настройках агента. ";
			Если СпособОбмена = "АПСОД" Тогда
				Текст = Текст + "Обновите файл настроек службы СОД в ""Настройках обмена""."; 
			КонецЕсли;
			ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгентСообщить");
			Результат = Неопределено;			
		КонецЕсли;
		
	Иначе // пытаемся создать каталог, если его нет.
		
		ПроверитьИСоздатьКаталог(КаталогОбмена);
		КаталогАгента = ДополнитьСлешВПуть(КаталогОбмена) + ВыбНастройкиАгента.КаталогОбмена;
		ПроверитьИСоздатьКаталог(КаталогАгента);
		Если КаталогСуществует(КаталогАгента) Тогда
			Результат = ДополнитьСлешВПуть(КаталогАгента);
		Иначе
			Текст = "Не удалось создать каталог обмена для агента, каталог: " + КаталогАгента; 
			ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгент");
			Результат = Неопределено;
		КонецЕсли;			
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Процедура пытается получить каталог обмена данными для агента.
// Если попытка неудачная, то выводистя сообщение.
// Каталог вовзращается в параметре Каталог.
Процедура КаталогОбменаАгентаПолучитьИПроверить(Каталог)
	
	Каталог = КаталогОбменаАгента(Истина);
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		Текст = "Данные для агента не выгружены - не задан каталог обмена агента.";
		ОповеститьОСобытии(Текст,,, "ТекущийАгентСообщить");
	КонецЕсли; 
	
КонецПроцедуры

// Загружает данные из файла обмена по данным из внешнего события.
// Содержимое массива мПараметры:
//	0-й - идентификатор МУ
//	1-й - псевдоним торгвого агента (владельца КПК)
//	2-й - директория обмена данными 
//	3-й - имя полученного с КПК файла с директорией
//	4-й - время сеанса
//	5-й - контрольная сумма полученного файла
Функция СОДЗагрузитьДанныеПоВнешнемуСобытию(мПараметры, ЗагрузитьВсеНастройки = Ложь) Экспорт
	
	стрИдМУ 	= мПараметры[0];
	Псевдоним 	= мПараметры[1];
	
	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения", Ложь, Новый Массив);
	
	Если ЗагрузитьВсеНастройки Тогда
		ЗагрузитьНастройкиДляРаботыОбмена();
	КонецЕсли;
	
#Область ПроверкаСправочников

	Если Не ВременныеТаблицы.Свойство("МобильныеУстройства") Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Не заполнен справочник мобильных устройств.'"), Истина);
	КонецЕсли;
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда 
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Не заполнены настройки торговых агентов.'"), Истина);
	КонецЕсли;
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Возврат СтррРезультат;
	КонецЕсли;
	
	идМУ = Новый УникальныйИдентификатор(стрИдМУ);
	ЭлементМУ = ВременныеТаблицы.МобильныеУстройства.Найти(идМУ, "ИдентификаторМУ");
	Если ЭлементМУ = Неопределено Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Не найдено мобильное устройство с идентификатором ""%1"".'"), стрИдМУ);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;
	
	ЭлементАгент = ВременныеТаблицы.НастройкиАгентов.Найти(ЭлементМУ.ID, "СсылкаМУ");
	Если ЭлементАгент = Неопределено Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Не найден агент для мобильного устройства с идентификатором ""%1"" (%2).'"), стрИдМУ, ЭлементМУ.Наименование);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;
	
	КаталогОбменаИзСпрАгентов = СокрЛП(ЭлементАгент.КаталогОбмена);
	КаталогОбменаИзСОД = СокрЛП(мПараметры[2]);
	Если НРег(КаталогОбменаИзСпрАгентов) <> НРег(КаталогОбменаИзСОД) Тогда
		Текст = СтрШаблон_(НСтр("ru = 'По сведениям из настроек СОД поступили данные от агента ""%1"", папка: ""%2"".'"), Псевдоним, КаталогОбменаИзСОД);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		Текст = СтрШаблон_(НСтр("ru = 'По сведениям из настроек агентов указаны другие данные (агент ""%1"", папка: ""%2"")!'"), ЭлементАгент.Пользователь, КаталогОбменаИзСпрАгентов);
		ВывестиСообщение(СтррРезультат, Текст);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Папки обмена отличаются! Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;

// ПроверкаСправочников
#КонецОбласти 

	ЗагрузитьДанныеДляАгента(ЭлементАгент.Пользователь);
	
	Возврат СтррРезультат;
	
КонецФункции

Функция СОДПопыткаСгенерироватьФайлНастройки() Экспорт

	СпособОбмена = ПрочитатьЗначениеНастройки("СпособОбмена");
	
	Если СпособОбмена = "АПСОД" Тогда
		Возврат СОДСгенерироватьФайлНастройки();
	Иначе
		мЗамечания = Новый Массив;
		ДобавитьЗамечание(мЗамечания, НСтр("ru='В настройках выключен способ обмена через Агент Плюс СОД'"), "СпособОбмена");
		Возврат Новый Структура("Замечания", мЗамечания);
	КонецЕсли;

КонецФункции

// Добавляет сообщение в массив сообщений для будущего вывода на Клиенте.
Процедура ДобавитьЗамечание(мЗамечания, Описание, Реквизит)
	СтррЗамечание = Новый Структура("Описание,Реквизит", Описание, Реквизит);
	мЗамечания.Добавить(СтррЗамечание);
КонецПроцедуры

// Функция генерирует и возвращает текст файла настройки СОД.
// Предварительно проверяет зависимые настройки СОД.
// Фукнкция не проверяет существование папки обмена, т.к. запускается на Сервере.
Функция СОДСгенерироватьФайлНастройки() Экспорт
	
	СтррРезультат = Новый Структура;
	
	СтррЗначения = ПрочитатьЗначенияНастроек("НастройкиАгентов,МобильныеУстройства,СОДПорт,КаталогОбмена");
	
	тзНастройкиАгентов = СтррЗначения.НастройкиАгентов;
	тзМУ 			   = СтррЗначения.МобильныеУстройства;
	
#Область ПроверкаРеквизитовИСправочников
	// Проверяем значения настроек СОД и зависимых настроек
	мЗамечания = Новый Массив;
	
	Если ПустаяСтрока(СтррЗначения.КаталогОбмена) Тогда
		ДобавитьЗамечание(мЗамечания, НСтр("ru='Не указано значение настройки ""Каталог обмена""!'"), "КаталогОбмена");
	КонецЕсли;
	
	Если СтррЗначения.СОДПорт = 0 Тогда
		ДобавитьЗамечание(мЗамечания, НСтр("ru='Не указан порт службы Агент Плюс СОД'"), "СОДПорт");
	КонецЕсли;
	
	СтррСтатус = СправочникАгентовПроверитьГотовность(тзНастройкиАгентов);
	Если Не СтррСтатус.Готово Тогда
		ДобавитьЗамечание(мЗамечания, СтррСтатус.Описание, "НастройкиАгентов");
	КонецЕсли;
	
	СтррСтатус = СправочникМобильныхУстройствПроверитьГотовность(тзМУ);
	Если Не СтррСтатус.Готово Тогда
		ДобавитьЗамечание(мЗамечания, СтррСтатус.Описание, "МобильныеУстройства");
	КонецЕсли;
	
	СтррРезультат.Вставить("Замечания", мЗамечания);
	
	Если мЗамечания.Количество() > 0 Тогда
		Возврат СтррРезультат;
	КонецЕсли;
	
// ПроверкаРеквизитовИСправочников
#КонецОбласти 
	
	ИдКонфигурации = ВРег(Строка(Новый УникальныйИдентификатор));
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("<?xml version=""1.0"" encoding=""UTF-16""?>");
	Текст.ДобавитьСтроку("<APlusServer VERSION=""2.5"">");
	Текст.ДобавитьСтроку("<ServerConfig PortExternal=""" + Формат(СтррЗначения.СОДПорт, "ЧГ=0'") 
		+ """ ConfigID=""" + ИдКонфигурации + """ />");
	Текст.ДобавитьСтроку("<!-- PortExternal - номер порта для запросов от мобильного устройства -->");
	Текст.ДобавитьСтроку("<!-- Образец описания настроек для мобильного устройства: -->");
	Текст.ДобавитьСтроку("<!-- PPC DEVICE_ID=""00000000-0000-0000-0000-000000000000"" PSEUDONIM=""Agent1"" DIRECTORY=""PPC1"" -->");
	
	КоличествоАгентов  = 0;
	
	Для Каждого НастройкаАгента Из тзНастройкиАгентов Цикл
		
		Если НастройкаАгента.СтатусНастроек <> 1 Тогда // включаем только для агентов с зелеными галками - для неработающих агентов МУ от обмена отключаем
			Продолжить;
		КонецЕсли;
		
		СсылкаМУ = НастройкаАгента.СсылкаМУ;
		МУ = тзМУ.Найти(СсылкаМУ, "ID");
		
		Если МУ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдМУ 		= ВРег(Строка(МУ.ИдентификаторМУ));
		Псевдоним 	= СокрЛП(Строка(НастройкаАгента.Пользователь)) + " (" + СокрЛП(МУ.Наименование) + ")";
		Каталог		= НастройкаАгента.КаталогОбмена;
		
		Текст.ДобавитьСтроку("<PPC DEVICE_ID=""" + ИдМУ + """ PSEUDONIM=""" + Лев(Псевдоним, 60) + """ DIRECTORY=""" + Каталог + """ />");
		КоличествоАгентов = КоличествоАгентов + 1;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("</APlusServer>");
	
	ПолноеИмяФайла = ДополнитьСлешВПуть(СтррЗначения.КаталогОбмена) + "config.xml";
	
	СтррРезультат.Вставить("Текст", 			Текст);
	СтррРезультат.Вставить("Кодировка", 		КодировкаТекста.UTF16);
	СтррРезультат.Вставить("ПолноеИмяФайла", 	ПолноеИмяФайла);
	СтррРезультат.Вставить("КоличествоАгентов", КоличествоАгентов);
	
	Возврат СтррРезультат;
	
КонецФункции // СгенерироватьФайлНастройкиСОД

// ПрограммныйИнтерфейс_ОбменДанными_СОД
#КонецОбласти

// Преобразует исходную строку в транслит.
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	
	Результат = "";
	
	Буквы = "аa,бb,вv,гg,дd,еe,ёe,жzh,зz,иi,йy,кk,лl,мm,нn,оo,пp,рr,сs,тt,уu,фf,хkh,цts,чch,шsh,щshch,ъ,ыy,ь,эe,юyu,яya,";
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		Если КодСимвола(Символ) < 128 Тогда
			СимволЛатиницей = Символ;
		Иначе
			ПозНачала = Найти(Буквы, НРег(Символ)); // Поиск соответствия без учета регистра.			
			Если ПозНачала = 0 Тогда
				// Другие символы остаются "как есть".
				СимволЛатиницей = Символ;
			Иначе
				ПозНачала = ПозНачала + 1;
				ПозКонца = ПозНачала;
				Пока Сред(Буквы, ПозКонца, 1) <> "," Цикл
					ПозКонца = ПозКонца + 1;
				КонецЦикла;
				СимволЛатиницей = Сред(Буквы, ПозНачала, ПозКонца - ПозНачала);
				Если Символ = ВРег(Символ) Тогда
					СимволЛатиницей = ВРег(СимволЛатиницей); // восстанавливаем регистр
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокуВЧисло(Строка)
	
	СтрРезультат = "";
	
	БылаТочка = Ложь;
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Или Код = 46 Тогда
			СтрРезультат = СтрРезультат + Символ;
		ИначеЕсли Не БылаТочка И Код = 46 Тогда
			СтрРезультат = СтрРезультат + Символ;
			БылаТочка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылаТочка Тогда
		СтрРезультат = "0" + СтрРезультат + "0"; // чтобы корректно обработалось число вида ".x" или "x."
	КонецЕсли; 
	
	Возврат ?(СтрДлина(СтрРезультат) = 0, 0, Число(СтрРезультат));
	
КонецФункции

Функция ЗначениеВЧисло(Значение)
	
	Строка = СтрЗаменить(Значение, ",", ".");
	
	Возврат ?(ЗначениеЗаполнено(Строка), СтрокуВЧисло(Строка), 0);
	
КонецФункции

// Функция сокращает слово до N символов. Слово передается латиницей.
Функция СократитьСлово(Слово, МаксДлина)
	
	Длина = СтрДлина(Слово);
	Если Длина <= МаксДлина Тогда
		Возврат Слово;
	КонецЕсли;
	
	Результат = Лев(Слово, МаксДлина - 1); // пытаемся последним символом добавить согласную букву
	Для Поз = МаксДлина По Длина Цикл
		Символ = Сред(Слово, Поз, 1);
		Если 0 = Найти("aeiou", Символ) Тогда // согласная буква
			Результат = Результат + Символ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Результат) <> МаксДлина Тогда
		Результат = Лев(Слово, МаксДлина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает уникальное название для имени файла на основе переданного имени.
// Если в переданном имени есть несколько слов, то функция стремится первые три слова включить в название по правилу:
// первые 4 символа - от первого слова + по одному символу от второго и третьего слова (т.е. сокращение от фамилии и инициалов).
// 
// Параметры:
//	Название - Строка - исходная строка, на основании которой генерировать название.
//	мЗапретныеНазвания - Массив - массив названий для проверки на уникальность.
//
Функция ПреобразоватьВНазваниеКаталога(Знач Название, мЗапретныеНазвания)
	
	Название = НРег(СтрокаЛатиницей(СокрЛП(Название)));
	
	ИсключаемыеСимволы = ",;:?!-+\/=<>~'""@#$%^&*()[]{}|&"; // запрещенные символы в названии имен файлов
	ВсегоИсключать = СтрДлина(ИсключаемыеСимволы);
	Для Поз = 1 По ВсегоИсключать Цикл // цикл исключения запрещенных символов
		ИсключитьСимвол = Сред(ИсключаемыеСимволы, Поз, 1);
		Название = СтрЗаменить(Название, ИсключитьСимвол, "");
	КонецЦикла;
	
	Название = СокрЛП(СтрЗаменить(Название, ".", " ")); // заменяем точки на пробелы
	
	// исключаем идущие подряд пробелы
	ПрежнееНазвание = Неопределено;
	Пока Название <> ПрежнееНазвание Цикл
		ПрежнееНазвание = Название;
		Название = СтрЗаменить(Название, "  ", " ");
	КонецЦикла;
	
	Если ПустаяСтрока(Название) Тогда
		Название = "folder";
	ИначеЕсли СтрДлина(Название) < 6 Тогда
		Название = Лев(Название + "_fldr", 6);
	Иначе
		мСлова = СтрРазделить_(Название, " ");
		Если мСлова.Количество() > 1 Тогда // название из 2 и более слов
			Название = СократитьСлово(мСлова[0], 4) + Лев(мСлова[1], 1) + ?(мСлова.Количество() > 2, Лев(мСлова[2], 1), "") + "_fldr";
		КонецЕсли;
		Название = Лев(Название, 6);		
	КонецЕсли;
	
	ПрежнееНазвание = Название;
	Номер = 1;
	Пока мЗапретныеНазвания.Найти(Название) <> Неопределено Цикл
		Название = ПрежнееНазвание + Строка(Номер);
		Номер = Номер + 1;
	КонецЦикла;
	
	Возврат Название;
	
КонецФункции

// Функция генерирует имя папки 
Функция ПреобразоватьВНазваниеКаталогаИзИдентификатораМУ(СсылкаМУ, тзМУ)
	
	Результат = "";	
	Идентификатор = Неопределено;

	стзМУ = тзМУ.Найти(СсылкаМУ, "ID");
	Если стзМУ = Неопределено Тогда // ошибка - МУ с идентификатором СсылкаМУ не найдено
	ИначеЕсли ЗначениеЗаполнено(стзМУ.ИдентификаторМУ) Тогда
		Идентификатор = стзМУ.ИдентификаторМУ;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Результат = НРег(СтрЗаменить(Строка(Идентификатор), "-" ,""));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Название каталога, которое интерпретируется как автоматически генерируемое.
Функция НазваниеАвтоКаталога() Экспорт
	
	Возврат НСтр("ru = 'Авто'");
	
КонецФункции

// Процедура заполняет названия каталогов агентов уникальными значениями.
Процедура ЗаполнитьНазванияКаталоговАгентов() Экспорт

	мНазванияКаталогов = НастройкиАгентов.ВыгрузитьКолонку("КаталогОбмена");
	АвтоКаталог = НРег(НазваниеАвтоКаталога());
	ИменаПодкаталоговНаОсновеФИО = ПрочитатьЗначениеНастройки("ИменаПодкаталоговОбменаНаОсновеФИО");
	Если ИменаПодкаталоговНаОсновеФИО = Неопределено Тогда
		ИменаПодкаталоговНаОсновеФИО = Ложь;
	КонецЕсли; 
	
	Если Не ИменаПодкаталоговНаОсновеФИО Тогда
	    тзМУ = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТипЗнч(тзМУ) <> Тип("ТаблицаЗначений") Тогда // МУ еще нет в БД, задать каталоги не можем
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого СтрокаТ Из НастройкиАгентов Цикл
		Если ПустаяСтрока(СтрокаТ.КаталогОбмена) Или СокрЛП(НРег(СтрокаТ.КаталогОбмена)) = АвтоКаталог Тогда
			Если ИменаПодкаталоговНаОсновеФИО Тогда // название каталога на основе ФИО
				СтрокаТ.КаталогОбмена = ПреобразоватьВНазваниеКаталога(СтрокаТ.Пользователь.Наименование, мНазванияКаталогов);
			Иначе // 
			    СтрокаТ.КаталогОбмена = ПреобразоватьВНазваниеКаталогаИзИдентификатораМУ(СтрокаТ.СсылкаМУ, тзМУ);
			КонецЕсли; 
			мНазванияКаталогов.Добавить(СтрокаТ.КаталогОбмена);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// ПрограммныйИнтерфейс_ОбменДанными
#КонецОбласти

#Область ПрограммныйИнтерфейс_НастройкиТорговогоАгента
// Возвращает настройки агента.
Функция ПолучитьНастройкиАгента(Агент)

	ТЗ = ВременныеТаблицы.НастройкиАгентов;
	СтрокаТ = ТЗ.Найти(Агент, "Пользователь");
	Если СтрокаТ = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура;		
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаТ[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция возвращает настройки агента. В отличии от функции ПолучитьНастройкиАгента() читает данные сразу из временного хранилища.
Функция ПолучитьНастройкиАгентаИзВХ(Агент, стрРеквизиты = Неопределено) Экспорт

	Результат = Неопределено;
	
	ТЗ = ПрочитатьЗначениеНастройки("НастройкиАгентов");
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		СтрокаТ = ТЗ.Найти(Агент, "Пользователь");
		Если СтрокаТ <> Неопределено Тогда
			Если стрРеквизиты = Неопределено Тогда
				Результат = Новый Структура;
				Для Каждого Колонка Из ТЗ.Колонки Цикл
					Результат.Вставить(Колонка.Имя, СтрокаТ[Колонка.Имя]);
				КонецЦикла;
			Иначе
				Результат = Новый Структура(стрРеквизиты);
				Для Каждого ЭлементСтруктуры Из Результат Цикл
					Результат[ЭлементСтруктуры.Ключ] = СтрокаТ[ЭлементСтруктуры.Ключ];
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция НастройкиДляТекущегоАгента() Экспорт
	
	ЗагрузитьНастройкиДляРаботыОбмена();
	ВыбНастройкиАгента = ПолучитьНастройкиАгента(ВыбАгент);
	стррРезультат = Новый Структура("ВыбНастройкиАгента,Организации", ВыбНастройкиАгента, ОрганизацииВыгрузки(Неопределено));
	Возврат стррРезультат;
	
КонецФункции

// ПрограммныйИнтерфейс_НастройкиТорговогоАгента
#КонецОбласти 

#Область ДополнительныеРеквизиты

Функция ИмяСвойстваДокументШирота()
	Возврат "АгентПлюсДокументШирота";
КонецФункции 

Функция ИмяСвойстваДокументДолгота() 
	Возврат "АгентПлюсДокументДолгота";
КонецФункции 

Функция ИмяСвойстваДокументВремяНачала()
	Возврат "АгентПлюсДокументВремяНачала";
КонецФункции 

Функция ИмяСвойстваДокументВремяОкончания()
	Возврат "АгентПлюсДокументВремяОкончания";
КонецФункции 

Функция ИмяСвойстваШиротаПартнер() Экспорт
	Возврат "АгентПлюсШиротаПартнер";
КонецФункции 

Функция ИмяСвойстваДолготаПартнер() Экспорт
	Возврат "АгентПлюсДолготаПартнер";
КонецФункции 

Функция ИмяСвойстваАдресИзСервисаПартнер() Экспорт
	Возврат "АгентПлюсАдресИзСервиса";
КонецФункции 

Функция ДополнительноеСвойствоПоНаименованию(ИмяСвойства) Экспорт

	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
	Возврат Свойство;
	
КонецФункции 

Функция ТипСвойстваКоординатыGPS()
	Возврат Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
КонецФункции 

Функция ПроверитьДополнительныеРеквизитыСправочникаПартнеры() Экспорт

	ствРеквизиты = Новый Соответствие;
	ствРеквизиты.Вставить(ИмяСвойстваШиротаПартнер(), 0);
	ствРеквизиты.Вставить(ИмяСвойстваДолготаПартнер(), 0);
	ствРеквизиты.Вставить(ИмяСвойстваАдресИзСервисаПартнер(), 0);
	
	//НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие; в УТ общие наборы хранятся с пустым значением реквизита "НаборСвойств"

	Выборка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.НаборСвойств) Тогда
			Наименование = Выборка.Наименование;
			Значение = ствРеквизиты.Получить(Наименование);
			Если Значение <> Неопределено Тогда
				ствРеквизиты[Наименование] = Значение + 1;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	СтрДубли  = "";	
	СтрПустые = "";

	Для каждого Элемент Из ствРеквизиты Цикл
		Если Элемент.Значение > 1 Или Элемент.Значение = 0 Тогда
			Если Элемент.Значение > 1 Тогда
				СтрДубли  = СтрДубли  + ?(СтрДубли  = "", "", ", ") + Элемент.Ключ + " (" + Строка(Элемент.Значение) + ")";
			Иначе
				СтрПустые = СтрПустые + ?(СтрПустые = "", "", ", ") + Элемент.Ключ;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	мСообщения = Новый Массив;
	
	Если Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить() = Ложь Тогда
		Текст = "Выключен режим ""Использовать дополнительные реквизиты и сведения"" - координаты партнеров не сохранятся. Перейдите в ""Общие настройки"" 1С:Предприятия и выберите флажок ""Использовать дополнительные реквизиты и сведения"".";
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Если СтрДубли <> "" Тогда
		Текст = "В объекте ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" указаны дубли названий реквизитов:";
		Текст = Текст + ?(СтрДлина(СтрДубли) > 30, Символы.ПС, " ") + СтрДубли + "." + Символы.ПС + "Удалите лишние реквизиты!";
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Если СтрПустые <> "" Тогда
		Текст = "В объекте ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" не указаны реквизиты:";
		Текст = Текст + ?(СтрДлина(СтрПустые) > 30, Символы.ПС, " ") + СтрПустые + "." + Символы.ПС + "Создайте недостающие реквизиты!";
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Возврат Новый Структура("ЕстьОшибки,Сообщения", мСообщения.Количество() <> 0, мСообщения);

КонецФункции

Процедура СоздатьДополнительныеРеквизитыДокументов() Экспорт

	ОпределитьВерсиюКонфигурации();
	
	//vd_181224 
	//ИмяСвойства = ИмяСвойстваДокументШирота();
	//Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	//Если Не ЗначениеЗаполнено(Свойство) Тогда
	//	СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, "МУ: Широта", 
	//		ТипСвойстваКоординатыGPS(), НСтр("ru = 'Географическая широта места создания документа'"));
	//КонецЕсли;
	//
	//ИмяСвойства = ИмяСвойстваДокументДолгота();
	//Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	//Если Не ЗначениеЗаполнено(Свойство) Тогда
	//	СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, "МУ: Долгота", 
	//		ТипСвойстваКоординатыGPS(), НСтр("ru = 'Географическая долгота места создания документа'"));
	//КонецЕсли;
	//
	//ИмяСвойства = ИмяСвойстваДокументВремяНачала();
	//Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	//Если Не ЗначениеЗаполнено(Свойство) Тогда
	//	ТипСвойства = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	//	СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, "МУ: Время начала", 
	//		ТипСвойства, НСтр("ru = 'Время начала работы с документом в МУ'"));
	//КонецЕсли;
	//
	//ИмяСвойства = ИмяСвойстваДокументВремяОкончания();
	//Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	//Если Не ЗначениеЗаполнено(Свойство) Тогда
	//	ТипСвойства = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	//	СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, "МУ: Время окончания", 
	//		ТипСвойства, НСтр("ru = 'Время окончания работы с документом в МУ'"));
	//КонецЕсли;

	//Описание типов	
	ТипСвойстваКоординатыGPS = ТипСвойстваКоординатыGPS();
	ТипСвойстваДата 		 = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	//Широта.
	ИмяСвойства = ИмяСвойстваДокументШирота();
	//1.Проверяем и создаем, если еще не создан ПланыВидовХарактеристикпвх.ДополнительныеРеквизитыИСведения
	пвхСвойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(пвхСвойство) Тогда
		ПредставлениеСвойства = "МУ: Широта"; 
		Подсказка			  = НСтр("ru = 'Географическая широта места создания документа'");	
		пвхСвойство = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ТипСвойстваКоординатыGPS, Истина, Подсказка);	
	КонецЕсли;
	//2.Проверяем и создаем, если еще не созданы Справочники.НаборыДополнительныхРеквизитовИСведений
	СоздатьДополнительноеСведениеДляДокументов(пвхСвойство);
		
	//Долгота
	ИмяСвойства = ИмяСвойстваДокументДолгота();
	//1.Проверяем и создаем, если еще не создан ПланыВидовХарактеристикпвх.ДополнительныеРеквизитыИСведения
	пвхСвойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(пвхСвойство) Тогда
		ПредставлениеСвойства = "МУ: Долгота"; 
		Подсказка			  = НСтр("ru = 'Географическая долгота места создания документа'");	
		пвхСвойство = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ТипСвойстваКоординатыGPS, Истина, Подсказка);	
	КонецЕсли;
	//2.Проверяем и создаем, если не созданы Справочники.НаборыДополнительныхРеквизитовИСведений
	СоздатьДополнительноеСведениеДляДокументов(пвхСвойство);
			
	//Время начала
	ИмяСвойства = ИмяСвойстваДокументВремяНачала();
	//1.Проверяем и создаем, если еще не создан ПланыВидовХарактеристикпвх.ДополнительныеРеквизитыИСведения
	пвхСвойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(пвхСвойство) Тогда
		ПредставлениеСвойства = "МУ: Время начала"; 
		Подсказка			  = НСтр("ru = 'Время начала работы с документом в МУ'");	
		пвхСвойство = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ТипСвойстваДата, Истина, Подсказка);	
	КонецЕсли;
	//2.Проверяем и создаем, если еще не созданы Справочники.НаборыДополнительныхРеквизитовИСведений
	СоздатьДополнительноеСведениеДляДокументов(пвхСвойство);
	
	//Время окончания
	ИмяСвойства = ИмяСвойстваДокументВремяОкончания();
	//1.Проверяем и создаем, если он не создан ПланыВидовХарактеристикпвх.ДополнительныеРеквизитыИСведения
	пвхСвойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(пвхСвойство) Тогда
		ПредставлениеСвойства = "МУ: Время окончания"; 
		Подсказка			  = НСтр("ru = 'Время окончания работы с документом в МУ'");	
		пвхСвойство = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ТипСвойстваДата, Истина, Подсказка);	
	КонецЕсли;
	//2.Проверяем и создаем, если еще не созданы Справочники.НаборыДополнительныхРеквизитовИСведений
	СоздатьДополнительноеСведениеДляДокументов(пвхСвойство);

	//))vd_181224
	
КонецПроцедуры

Процедура СоздатьДополнительныеРеквизитыСправочников() Экспорт

	ОпределитьВерсиюКонфигурации();
	
	ИмяСвойства = ИмяСвойстваШиротаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Подсказка = НСтр("ru = 'Географическая широта местоположения (в формате NMEA)'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Широта", ТипСвойстваКоординатыGPS(), Подсказка);
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДолготаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Подсказка = НСтр("ru = 'Географическая долгота местоположения (в формате NMEA)'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Долгота", ТипСвойстваКоординатыGPS(), Подсказка);
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваАдресИзСервисаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ТипСвойства = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(128));
		Подсказка = НСтр("ru = 'Адрес, полученный из веб-сервиса определения координат'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Адрес из веб-сервиса", ТипСвойства, Подсказка);
	КонецЕсли;

КонецПроцедуры

//vd_181225 Убраны параметры //СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Подсказка)
Процедура СоздатьДополнительноеСведениеДляДокументов(пвхСвойство)
	
	
	//((vd_181224
	//НовыйЭлемент = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Истина, Подсказка);
	//мНаборы = Новый Массив;
	//Для Каждого НаборСсылка Из мНаборы Цикл
	//	ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, НовыйЭлемент);
	//КонецЦикла;

	//мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента);
	//мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПриходныйКассовыйОрдер);
	//мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РасходныйКассовыйОрдер);
	
	//Масив документов с дополнительными сведениями.
	мНаборы = Новый Массив;
	мНаборы.Добавить("Документ_ЗаказКлиента");
	мНаборы.Добавить("Документ_РеализацияТоваровУслуг");
	мНаборы.Добавить("Документ_ПриходныйКассовыйОрдер");
	мНаборы.Добавить("Документ_РасходныйКассовыйОрдер");
	мНаборы.Добавить("Документ_ПоступлениеТоваров");
	мНаборы.Добавить("Документ_ВозвратТоваровОтКлиента");
	мНаборы.Добавить("Документ_ЗаявкаНаВозвратТоваровОтКлиента");
	мНаборы.Добавить("Документ_ПеремещениеТоваров");
	
	//тз для проверки создано ли доп сведение.
	
	//{{vd_190118
	//Было:
	//Запрос = Новый Запрос;
	//Запрос.Текст =  "ВЫБРАТЬ
	//                |	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	//                |	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	//                |ПОМЕСТИТЬ ВТ_НаборыДополнительныхРеквизитовИСведений
	//                |ИЗ
	//                |	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	//                |ГДЕ
	//                |	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных В(&мНаборы)
	//                |
	//                |ИНДЕКСИРОВАТЬ ПО
	//                |	Ссылка
	//                |;
	//                |
	//                |////////////////////////////////////////////////////////////////////////////////
	//                |ВЫБРАТЬ
	//                |	ВТ_НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	//                |	ДополнительныеСведения.Свойство КАК Свойство
	//                |ИЗ
	//                |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НаборыДополнительныхРеквизитовИСведений КАК ВТ_НаборыДополнительныхРеквизитовИСведений
	//                |		ПО ДополнительныеСведения.Ссылка = ВТ_НаборыДополнительныхРеквизитовИСведений.Ссылка";
	//Запрос.УстановитьПараметр("мНаборы", мНаборы);
	
	//Платформа 8.3.12 и 8.3.13 не позволяет делать отбор в запросах по полю ИмяПредопределенныхДанных. Возникает исключение, если поля не существует. Функция ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент() также выдает мсключение.
	//Поэтому сначала проверим существование полей ИмяПредопределенныхДанных. 
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	                |	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	                |ИЗ
	                |	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	                |ГДЕ
	                |	НаборыДополнительныхРеквизитовИСведений.Предопределенный = ИСТИНА";
	
	ВыборкаНаборы = Запрос.Выполнить().Выгрузить();

	тзНаборы = ВыборкаНаборы.СкопироватьКолонки();
	
	Счетчик = мНаборы.Количество() - 1;	
	Пока Счетчик >= 0 Цикл
		стзВыборкаРезультат = ВыборкаНаборы.Найти(мНаборы[Счетчик], "ИмяПредопределенныхДанных");	
		Если стзВыборкаРезультат = Неопределено Тогда
			мНаборы.Удалить(Счетчик);		
		Иначе
			стзНаборы = тзНаборы.Добавить();
			стзНаборы.Ссылка = стзВыборкаРезультат.Ссылка;
			стзНаборы.ИмяПредопределенныхДанных = стзВыборкаРезультат.ИмяПредопределенныхДанных;
		КонецЕсли;			
		Счетчик = Счетчик - 1;
	КонецЦикла;	
	
	//тз для проверки создано ли доп сведение.
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	                |	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	                |ПОМЕСТИТЬ ВТ_НаборыДополнительныхРеквизитовИСведений
	                |ИЗ
	                |	&тзНаборы КАК НаборыДополнительныхРеквизитовИСведений
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Ссылка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	                |	ДополнительныеСведения.Свойство КАК Свойство
	                |ИЗ
	                |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НаборыДополнительныхРеквизитовИСведений КАК ВТ_НаборыДополнительныхРеквизитовИСведений
	                |		ПО ДополнительныеСведения.Ссылка = ВТ_НаборыДополнительныхРеквизитовИСведений.Ссылка";
	Запрос.УстановитьПараметр("тзНаборы", тзНаборы);
	//))vd_190118	
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	стррОтбор   = Новый Структура("ИмяПредопределенныхДанных,Свойство", "", пвхСвойство);
	
	Для Каждого Элемент Из мНаборы Цикл
		стррОтбор.ИмяПредопределенныхДанных = Элемент;
		Если тзРезультат.НайтиСтроки(стррОтбор).Количество() = 0 Тогда 
			НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений[Элемент];
			ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, пвхСвойство);	
		КонецЕсли;
	КонецЦикла;
	
	//))vd_181224 

КонецПроцедуры

Процедура СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Подсказка)

	НовыйЭлемент = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Ложь, Подсказка);
	НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие;
	ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, НовыйЭлемент)

КонецПроцедуры

Процедура ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, Элемент)

	НаборОбъект = НаборСсылка.ПолучитьОбъект();
	
	Если Элемент.ЭтоДополнительноеСведение Тогда
		
		НовоеСвойство = НаборОбъект.ДополнительныеСведения.Добавить();
		НовоеСвойство.Свойство = Элемент;
		СтароеКоличество = СтрЗаменить(НаборОбъект.КоличествоСведений, Символы.НПП, "");
		Если СтароеКоличество = "" Тогда
			СтароеКоличество = "0";
		КонецЕсли;
		НаборОбъект.КоличествоСведений = Число(СтароеКоличество) + 1;
		
	Иначе	
		
		НовыйРеквизит = НаборОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйРеквизит.Свойство = Элемент;
		СтароеКоличество = СтрЗаменить(НаборОбъект.КоличествоРеквизитов, Символы.НПП, "");
		Если СтароеКоличество = "" Тогда
			СтароеКоличество = "0";
		КонецЕсли;
		НаборОбъект.КоличествоРеквизитов = Число(СтароеКоличество) + 1;
		
	КонецЕсли; 
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		НаборОбъект.Используется = Истина;	
	КонецЕсли; 
	
	НаборОбъект.Записать();

КонецПроцедуры

Функция ДанныеОДополнительныхСвойствахДокументаДляМУ()

	Если гДанныеОДополнительныхСвойствахДокументаДляМУ = Неопределено Тогда
	
		стррДанные = Новый Структура("тзРеквизиты,стзШирота,стзДолгота,стзВремяНачала,стзВремяОкончания");
		
		тзРеквизиты = Новый ТаблицаЗначений;
		тзРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		тзРеквизиты.Колонки.Добавить("Значение");
		
		стррДанные.тзРеквизиты = тзРеквизиты;
		
		СтрокаТ = тзРеквизиты.Добавить();	
		СтрокаТ.Свойство  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументШирота());
		стррДанные.стзШирота = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументДолгота());
		стррДанные.стзДолгота = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяНачала());
		стррДанные.стзВремяНачала = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяОкончания());
		стррДанные.стзВремяОкончания = СтрокаТ;
		
		гДанныеОДополнительныхСвойствахДокументаДляМУ = стррДанные;
		
	КонецЕсли; 
	
	Возврат гДанныеОДополнительныхСвойствахДокументаДляМУ;

КонецФункции  

// Запись дополнительных свойств документа.
Процедура ЗаписатьДополнительныеСвойстваДокумента(ДокументСсылка, стррЗначения)

	стррДанные = ДанныеОДополнительныхСвойствахДокументаДляМУ();
	
	стррДанные.стзШирота.Значение  			= стррЗначения.Широта;
	стррДанные.стзДолгота.Значение 			= стррЗначения.Долгота;
	стррДанные.стзВремяНачала.Значение 		= стррЗначения.ВремяНачала;
	стррДанные.стзВремяОкончания.Значение 	= стррЗначения.ВремяОкончания;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокументСсылка, стррДанные.тзРеквизиты);	

КонецПроцедуры

// ДополнительныеРеквизиты
#КонецОбласти

#Область ВнешняяОбработка

Функция СведенияОВнешнейОбработке() Экспорт

	стррРегистрация = Новый Структура;
	стррРегистрация.Вставить("Вид", 			"ДополнительнаяОбработка");	
	стррРегистрация.Вставить("Назначение", 		Неопределено);
	стррРегистрация.Вставить("Наименование", 	"Обмен данными с 'Агент Плюс: Мобильной торговлей'");
	стррРегистрация.Вставить("Версия", 			ВерсияОбработки());
	стррРегистрация.Вставить("БезопасныйРежим", Ложь);
	стррРегистрация.Вставить("Информация", 		"Обработка обмена данными с приложением 'Агент Плюс: Мобильная торговля'");
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Представление", 	Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование", 	Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор", 	Новый ОписаниеТипов("Строка"));

	стзКоманд = тзКоманд.Добавить();
	стзКоманд.Идентификатор = "ОткрытьОтчет";
	стзКоманд.Представление = "Обмен данными с 'Агент Плюс: Мобильной торговлей'";
	стзКоманд.Использование = "ОткрытиеФормы";
	стзКоманд.ПоказыватьОповещение = Истина;	
	
	стзКоманд = тзКоманд.Добавить();
	стзКоманд.Идентификатор = "Загрузить";
	стзКоманд.Представление = "Загрузить данные из 'Агент Плюс: Мобильной торговли'";
	стзКоманд.Использование = "ВызовСерверногоМетода";
	стзКоманд.ПоказыватьОповещение = Истина;	

	стзКоманд = тзКоманд.Добавить();
	стзКоманд.Идентификатор = "Выгрузить";
	стзКоманд.Представление = "Выгрузить данные в 'Агент Плюс: Мобильную торговлю'";
	стзКоманд.Использование = "ВызовСерверногоМетода";
	стзКоманд.ПоказыватьОповещение = Истина;	
	
	//((vd_181210 Регcnhfwbz задание для АКФ
	ОпределитьВерсиюКонфигурации();
	Если гКонфигурация = "УТ_АКФ" Тогда
		стзКоманд = тзКоманд.Добавить();
		стзКоманд.Идентификатор = "АКФ_ОбновитьТТпоТорговымПредставителям";
		стзКоманд.Представление = "Обновить торговые точки АКФ";
		стзКоманд.Использование = "ВызовСерверногоМетода";
		стзКоманд.ПоказыватьОповещение = Истина;	
	КонецЕсли;
	//))vd_181210 Регbcnhfwbz задание для АКФ

	стррРегистрация.Вставить("Команды", тзКоманд);

	Возврат стррРегистрация;
	
КонецФункции

// Интерфейс для запуска логики обработки для фоновых заданий.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения = Неопределено) Экспорт

	// Общие действия перед началом выполнения команд.
	УстановитьПривилегированныйРежим(Истина);

	стрИнформация = ИнициализироватьДанныеВХранилищеДляНовойВерсии(); // попытка обновить настройки в хранилище до более новой версии (если была обновлена версия обработки)
	Если ЗначениеЗаполнено(стрИнформация) Тогда // обработка обновлена до более новой версии
		ОповеститьОСобытии(стрИнформация);
	КонецЕсли; 
	
	//Диспетчеризация обработчиков команд.
	Если ИмяКоманды = "Загрузить" Тогда
		ЗагрузитьДанные(Неопределено);
	ИначеЕсли ИмяКоманды = "Выгрузить" Тогда
		ВыгрузитьДанные(Неопределено);
	ИначеЕсли ИмяКоманды = "АКФ_ОбновитьТТпоТорговымПредставителям" Тогда
		АКФ_ДобавитьТорговыеТочкиВСпискиНаСервере(Новый Массив);
	КонецЕсли;

КонецПроцедуры

// Возвращает номер версии обработки. Номер версии обработки указывается в синониме обработки в круглых скобках.
Функция ВерсияОбработки() Экспорт
	
	Комментарий = Метаданные().Комментарий;
	ПозНачала = Найти(Комментарий, "(");
	ПозКонца  = Найти(Комментарий, ")");
	
	Если ПозНачала = 0 Или ПозКонца = 0 Тогда
		ВызватьИсключение("В Комментарии обработки в метаданных не указана версия обработки! Версия должна указываться в круглых скобках!");
	КонецЕсли;
	
	Результат = ИзвлечьВерсию(Сред(Комментарий, ПозНачала+1, ПозКонца - ПозНачала - 1));
	
	Возврат Результат;
	
КонецФункции

// Функция извлекает номер версии из строки. Строка может состоять из любых символов - извлекаются цифры и точки.
Функция ИзвлечьВерсию(стрВерсия)
	
	Результат = "";
	МаксИндекс = стрДлина(стрВерсия);
	
	Для Индекс = 1 По МаксИндекс Цикл
		Символ = Сред(стрВерсия, Индекс, 1);
		Код = КодСимвола(Символ);
		Если Код > 45 И Код < 58 И Код <> 47  Тогда
			Результат = Результат + Символ;
		КонецЕсли; 
	КонецЦикла;
	
	Пока Лев(стрВерсия, 1) = "."  Цикл
		Результат = Сред(стрВерсия, 2);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// ВнешняяОбработка
#КонецОбласти

#Область ПрограммныйИнтерфейс_ПланПосещений

Функция ПланПосещенийНомерПунктаВнеПлана() Экспорт
	Возврат 99999;
КонецФункции

// Функция возвращает таблицу плана посещений, сгенерированную из "Cписка торговых точек", переданного в параметре.
// 
// Параметры:
// 
//	стррПараметры - Структура - структура со свойствами:
//  	Период - СтандартныйПериод - период отчета
//  	СсылкаСписокТТ  - Строка или УникальныйИдентификатор - идентификатор списка торговых точек
//  
// Возвращаемое значение:
//  ТаблицаЗначений, в структуре стррПараметры возвращается свойство "ВсегоДней" - сколько дней в таблице плана посещений.
//  
Функция ПолучитьПланПосещенийДляОтчета(стррПараметры) Экспорт

	ИспользуетсяГрафик 	= Неопределено;
	ИспользуетсяПП 	   	= Неопределено;
	Период 				= стррПараметры.Период;	
	ВсегоДней 			= (НачалоДня(Период.ДатаОкончания) - НачалоДня(Период.ДатаНачала)) / 86400 + 1;			
	
	//((vd_190415 Перенесено ниже 
	//Если Не стррПараметры.Свойство("ИгнорироватьОтсутствиеПлана") Или стррПараметры.ИгнорироватьОтсутствиеПлана = Ложь Тогда
	//	Если стррОбъект = Неопределено Тогда
	//	    ВызватьИсключение("Не найден список торговых точек с идентификатором: " + стррПараметры.СсылкаСписокТТ);
	//	КонецЕсли; 
	//КонецЕсли; 
	//))
	
	//vd_190415 Перенесено ниже
	//Если стррОбъект <> Неопределено Тогда 
	//	// СписокБезПланаИГрафика = Не СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик, ИспользуетсяПП); 
	//	ПериодПлана 	= стррОбъект.ПериодГрафикаПлана;
	//	ПромДатаНачала 	= ?(ПериодПлана = 7, НачалоНедели(Период.ДатаНачала), стррОбъект.ДатаНачала); // дата начала плана посещений
	//	РазницаДней 	= (Период.ДатаНачала - ПромДатаНачала) / 86400;
	//КонецЕсли;
	
	ТипЧисло  	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0));
	ТипСтрока 	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Партнер", 	Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗРезультат.Колонки.Добавить("Адрес", 		ТипСтрока);
	ТЗРезультат.Колонки.Добавить("НомерВПлане",	ТипЧисло); // номер строки в ТЗ "Состав" списка ТТ
	
	стррПараметры.Вставить("ВсегоДней", ВсегоДней);
	
	Для День = 1 По ВсегоДней Цикл
		ТЗРезультат.Колонки.Добавить("Д" + День, ТипСтрока);  // факт посещения
		ТЗРезультат.Колонки.Добавить("П" + День, ТипЧисло); // план посещения (порядковые номера посещения, если заданы)
	КонецЦикла;
	
	НомерВнеПлана   = ПланПосещенийНомерПунктаВнеПлана();

	//((vd_190415 Добавлен обход списков ТТ через массив, раньше только одна ТТ.  
	Если ТипЗнч(стррПараметры.СсылкаСписокТТ) = Тип("Массив") Тогда
		мСпискиТТ = стррПараметры.СсылкаСписокТТ;
	Иначе
		мСпискиТТ = Новый Массив;
		мСпискиТТ.Добавить(стррПараметры.СсылкаСписокТТ);
	КонецЕсли;

	Для Каждого СсылкаСписокТТ Из мСпискиТТ Цикл
	
		стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", СсылкаСписокТТ);
	
		Если стррОбъект = Неопределено Тогда
			Если Не стррПараметры.Свойство("ИгнорироватьОтсутствиеПлана") Или стррПараметры.ИгнорироватьОтсутствиеПлана = Ложь Тогда
			    ВызватьИсключение("Не найден список торговых точек с идентификатором: " + стррПараметры.СсылкаСписокТТ);
			КонецЕсли; 
			ТЗРезультат.Очистить();
			Возврат ТЗРезультат;
		КонецЕсли; 
		
		ПериодПлана 	= стррОбъект.ПериодГрафикаПлана;
		ПромДатаНачала 	= ?(ПериодПлана = 7, НачалоНедели(Период.ДатаНачала), стррОбъект.ДатаНачала); // дата начала плана посещений
		РазницаДней 	= (Период.ДатаНачала - ПромДатаНачала) / 86400;
			
		ИспользуетсяГрафик 	= стррОбъект.Детализация.НайтиПоЗначению("График") <> Неопределено;
		ИспользуетсяПП 	   	= стррОбъект.Детализация.НайтиПоЗначению("ПланПосещений") <> Неопределено;
		//))vd_190415 Добавлен обход списков ТТ через массив, раньше только одна ТТ 		
		
		тзСостав = стррОбъект.Состав;	

		Если ИспользуетсяПП Тогда // Детализация списка ТТ по плану посещения
			СмещениеОтНачалаПлана	= РазницаДней % ПериодПлана; // количество дней от начала плана для вывода первого дня в отчете		
			тзПланПосещений 		= стррОбъект.ПланПосещений;
			
			//((vd_190125 Если Партнеры имеют одинаковое наименование, то сортировка не корректна, одинаковые наименования перемешиваются.
			//Было:
			//тзПланПосещений.Сортировать("Партнер,День");
			Индекс = 1;  
			ТекстПолей = "тзПланПосещений." + тзПланПосещений.Колонки[0].Имя; 
			Пока Индекс < тзПланПосещений.Колонки.Количество() Цикл
				ТекстПолей 	= ТекстПолей + ", тзПланПосещений." + тзПланПосещений.Колонки[Индекс].Имя;	
				Индекс 		= Индекс + 1;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	[ТекстПолей]
			               |ПОМЕСТИТЬ ВТ_тзПланПосещений
			               |ИЗ
			               |	&тзПланПосещений КАК тзПланПосещений
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	тзПланПосещений.Партнер
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	[ТекстПолей]
			               |ИЗ
			               |	ВТ_тзПланПосещений КАК тзПланПосещений
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	тзПланПосещений.Партнер";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ТекстПолей]", ТекстПолей);
			Запрос.УстановитьПараметр("тзПланПосещений", тзПланПосещений);

			тзПланПосещений = Запрос.Выполнить().Выгрузить();
			//))vd_190125
			
			ТекПартнер = Неопределено;
			
			Для каждого СтрокаТ Из тзПланПосещений Цикл
				//1. ??? // vd_180125 Добавлен комментарий. 
				Если СтрокаТ.День > ПериодПлана Тогда // Такое возможно, если в списке ранее был создан план с бОльшим периодом, а потом был период изменен 
					Продолжить; 					  // на меньший - пункты от бОльшего периода в списке на всякий случай сохраняются.
				КонецЕсли;
				
				//2. Добавляем строчку в результирующую таблицу. Строчки в ТЗРезультат уникальны только по двум полям : Партнер и номер в плане).  // vd_190125 Добавлен комментарий.
				Если СтрокаТ.Партнер <> ТекПартнер Тогда
					ТекПартнер = СтрокаТ.Партнер;				
					стзРезультат = ТЗРезультат.Добавить();
					стзРезультат.Партнер = ТекПартнер;
					стзСостав = тзСостав.Найти(ТекПартнер, "Партнер");
					стзРезультат.НомерВПлане = ?(стзСостав = Неопределено, НомерВнеПлана, тзСостав.Индекс(стзСостав));
				КонецЕсли;
				
				//3. Заполняем колонки П1 П2 итд в текущей строчке  // vd_190125 Добавлен комментарий.
				НомерДня = СтрокаТ.День - СмещениеОтНачалаПлана;
				НормироватьПоМодулю(НомерДня, ПериодПлана);
				Пока НомерДня <= ВсегоДней Цикл // цикл занесения дней в план с учетом, что период отчета может быть больше циклического периода плана
					стзРезультат["П" + НомерДня] = СтрокаТ.Порядок;
					НомерДня = НомерДня + ПериодПлана;
				КонецЦикла;
				
			КонецЦикла;
			
			ТЗРезультат.Сортировать("НомерВПлане,Партнер");
			
		ИначеЕсли ИспользуетсяГрафик Тогда // Детализация списка ТТ по графику посещения
			// Графики указаны в таблице тзСостав
			Пункт = Неопределено;
			Для каждого стзСостав Из тзСостав Цикл
				стррГрафик = стзСостав.График;
				Если стррГрафик = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				стррПункты = стррГрафик.Пункты;
				Если стррПункты = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ПериодГрафика = стррГрафик.ПериодГрафика;
				СмещениеОтНачалаГрафика = РазницаДней % ПериодГрафика; // количество дней от начала графика для вывода первого дня в отчете					
				стзРезультат = ТЗРезультат.Добавить();
				стзРезультат.Партнер = стзСостав.Партнер;
				стзРезультат.НомерВПлане = тзСостав.Индекс(стзСостав);
				Для НомерДня = 1 По ВсегоДней Цикл
					ДеньГрафика = НомерДня + СмещениеОтНачалаГрафика;
					НормироватьПоМодулю(ДеньГрафика, ПериодГрафика);
					Если стррПункты.Свойство("П"+Строка(ДеньГрафика-1), Пункт) И Пункт.Выбран Тогда // пункты в графике нумеруются с 0
						стзРезультат["П" + НомерДня] = 1000; // признак включения дня в план посещений
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла
			
		Иначе // список ТТ без плана и графика, просто переносим партнеров
			Для каждого стзСостав Из тзСостав Цикл
				стзРезультат = ТЗРезультат.Добавить();
				стзРезультат.Партнер = стзСостав.Партнер;
			КонецЦикла
			
		КонецЕсли;
		
	КонецЦикла; //vd_190415
	
	Возврат ТЗРезультат;
	
КонецФункции

// Функция возвращает факты посещений (т.е. документы, созданные при посещении ТТ) в виде таблицы значений.
// 
// Параметры:
// 
//	стррПараметры - Структура - структура со свойствами:
//  	Агент - СправочникСсылка.Пользователи - агент, документы которого считать фактами посещений.
//  	Период - СтандартныйПериод - период отчета
//		День - ДатаВремя - дата формирования отчета (указывается, если нет свойства "Период").
//		ТолькоПроведенныеДокументы - Булево - признак включать / не включать проведенные документы в таблицу.
//		списокВидыДокументов - СписокЗначений - список видов документов для получения фактов.
//		ДопустимаяУдаленностьОтТТ - Число - максимально допустимое расстоение от ТТ места создания документа для установки факта посещения. gi_180307
//											// Если установлено значение 0 или свойство отсутствует, то расстояние не учиывается.
//  
// Возвращаемое значение:
//  ТаблицаЗначений.
//  
Функция ПолучитьФактПосещенийДляОтчета(стррПараметры) Экспорт

		Текст = "
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект
		|ПОМЕСТИТЬ ДокументыСоСведениями
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &СвойствоВремяНачала
		|	И ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК ДАТА) МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Агент КАК Агент,
		|	ВложенныйЗапрос.Партнер КАК Партнер,
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриходныйКассовыйОрдер.Кассир КАК Агент,
		|		ПриходныйКассовыйОрдер.Контрагент.Партнер КАК Партнер,
		|		ПриходныйКассовыйОрдер.Ссылка КАК Ссылка,
		|		ПриходныйКассовыйОрдер.Дата КАК Дата,
		|		ПриходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ПриходныйКассовыйОрдер.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ПриходныйКассовыйОрдер И ПриходныйКассовыйОрдер.Кассир = &Агент
		//|		ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ПриходныйКассовыйОрдер.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходныйКассовыйОрдер.Кассир,
		|		РасходныйКассовыйОрдер.Контрагент.Партнер,
		|		РасходныйКассовыйОрдер.Ссылка,
		|		РасходныйКассовыйОрдер.Дата,
		|		РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО РасходныйКассовыйОрдер.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&РасходныйКассовыйОрдер И РасходныйКассовыйОрдер.Кассир = &Агент 
		//|		РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА РасходныйКассовыйОрдер.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Менеджер,
		|		РеализацияТоваровУслуг.Партнер,
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.Дата,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
		//vd_181224 в отчете выполнение плана посещения и контроль передвижения не отображаются документы без доподнительных реквизитов дата создания координаты итд. загруженные жо версии 2.0.2.53 
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО РеализацияТоваровУслуг.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&РеализацияТоваровУслуг И РеализацияТоваровУслуг.Менеджер = &Агент
		//vd_181224
		|		И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА РеализацияТоваровУслуг.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВозвратТоваровОтКлиента.Менеджер,
		|		ВозвратТоваровОтКлиента.Партнер,
		|		ВозвратТоваровОтКлиента.Ссылка,
		|		ВозвратТоваровОтКлиента.Дата,
		|		ВозвратТоваровОтКлиента.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ВозвратТоваровОтКлиента.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ВозвратТоваровОтКлиента И ВозвратТоваровОтКлиента.Менеджер = &Агент 
		//|		ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ВозвратТоваровОтКлиента.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказКлиента.Менеджер КАК Агент,
		|		ЗаказКлиента.Партнер,
		|		ЗаказКлиента.Ссылка,
		|		ЗаказКлиента.Дата,
		|		ЗаказКлиента.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.ЗаказКлиента КАК ЗаказКлиента,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ЗаказКлиента.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ЗаказКлиента И ЗаказКлиента.Менеджер = &Агент 
		//|		ЗаказКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ЗаказКлиента.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ЗаказКлиента.ПометкаУдаления
		|	) КАК ВложенныйЗапрос
		|; 
		|	
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Агент,
		|	Документы.Партнер,
		|	Документы.Дата,
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.СуммаДокумента КАК СуммаДокумента,
		//vd_181224 добавлены условия естьNULL
		|	естьNULL(СведенияШирота.Значение, 0) КАК Широта,
		|	естьNULL(СведенияДолгота.Значение, 0) КАК Долгота,
		|	естьNULL(СведенияВремяНачала.Значение, датавремя(1,1,1)) КАК ВремяНачала,
		|	естьNULL(СведенияВремяОкончания.Значение, датавремя(1,1,1)) КАК ВремяОкончания
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияШирота
		|		ПО Документы.Ссылка = СведенияШирота.Объект	И СведенияШирота.Свойство = &СвойствоШирота
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияДолгота
		|		ПО Документы.Ссылка = СведенияДолгота.Объект И СведенияДолгота.Свойство = &СвойствоДолгота
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияВремяНачала
		|		ПО Документы.Ссылка = СведенияВремяНачала.Объект И СведенияВремяНачала.Свойство = &СвойствоВремяНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияВремяОкончания
		|		ПО Документы.Ссылка = СведенияВремяОкончания.Объект И СведенияВремяОкончания.Свойство = &СвойствоВремяОкончания
		|УПОРЯДОЧИТЬ ПО
		|	Документы.Партнер
		|";
		
	Если стррПараметры.Свойство("ДобавитьВремяПосещения") И стррПараметры.ДобавитьВремяПосещения = Истина Тогда
		Текст = Текст + ", СведенияВремяНачала.Значение";
	КонецЕсли; 
		   
	Запрос = Новый Запрос(Текст);			   
	Запрос.УстановитьПараметр("Агент", 					 	стррПараметры.Агент);
	Запрос.УстановитьПараметр("ТолькоПроведенныеДокументы", стррПараметры.ТолькоПроведенныеДокументы);
	Если стррПараметры.Свойство("Период") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", 	стррПараметры.Период.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода",  	стррПараметры.Период.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(стррПараметры.Дата));
		Запрос.УстановитьПараметр("КонецПериода",  	КонецДня(стррПараметры.Дата));
	КонецЕсли; 
	
	СвойствоШирота  		= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументШирота());	
	СвойствоДолгота 		= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументДолгота());
	СвойствоВремяНачала    	= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяНачала());
	СвойствоВремяОкончания	= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяОкончания());
	
	Запрос.УстановитьПараметр("СвойствоШирота",  		СвойствоШирота);
	Запрос.УстановитьПараметр("СвойствоДолгота",  		СвойствоДолгота);
	Запрос.УстановитьПараметр("СвойствоВремяНачала", 	СвойствоВремяНачала);
	Запрос.УстановитьПараметр("СвойствоВремяОкончания", СвойствоВремяОкончания);
	
	мВидыДокументов = СтрРазделить_("ПриходныйКассовыйОрдер,РасходныйКассовыйОрдер,РеализацияТоваровУслуг,ВозвратТоваровОтКлиента,ЗаказКлиента");
	списокВидыДокументов = стррПараметры.СписокВидыДокументов;
	Для Каждого ВидДокумента Из мВидыДокументов Цикл
		Запрос.УстановитьПараметр(ВидДокумента, списокВидыДокументов.НайтиПоЗначению(ВидДокумента) <> Неопределено);
	КонецЦикла;

	тзФакт = Запрос.Выполнить().Выгрузить();
	
	// проверяем - нужно ли учесть факты посещений по виртуальным документам?
	ПолучитьФактПоВиртуальнымДокументам = Ложь;
	Для каждого Элемент Из списокВидыДокументов Цикл
		Если ВДокЭтоВиртуальныйДокумент(Элемент.Значение) Тогда
			ПолучитьФактПоВиртуальнымДокументам = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПолучитьФактПоВиртуальнымДокументам Тогда
		ПолучитьФактПосещенийДляОтчетаПоВиртуальнымДокументам(тзФакт, стррПараметры);
	КонецЕсли; 
	
	Возврат тзФакт;
		   
КонецФункции

Процедура ПолучитьФактПосещенийДляОтчетаПоВиртуальнымДокументам(тзФакт, стррПараметры)
	
	тзФакт.Колонки.Добавить("СсылкаВДок"); // ссылка на виртуальный документ
	стррПоиск = Новый Структура;
	стррПоиск.Вставить("Менеджер", стррПараметры.Агент);
	Если стррПараметры.ТолькоПроведенныеДокументы Тогда
		стррПоиск.Вставить("Статус", 1); // у проведенных документов значение статуса = 1
	КонецЕсли; 
	
	Если стррПараметры.Свойство("Период") Тогда
		ДатаНачала    = стррПараметры.Период.ДатаНачала;
		ДатаОкончания = стррПараметры.Период.ДатаОкончания;
	Иначе
		ДатаНачала    = НачалоДня(стррПараметры.Дата);
		ДатаОкончания = КонецДня(стррПараметры.Дата);
	КонецЕсли; 
	
	списокВидыДокументов = стррПараметры.СписокВидыДокументов;
	Для каждого Элемент Из списокВидыДокументов Цикл
		ВидДокумента = Элемент.Значение;
		Если ВДокЭтоВиртуальныйДокумент(ВидДокумента) Тогда
			тзЖурнала = ВОТЗЗагрузить(ВидДокумента, Истина);
			мСтроки = тзЖурнала.НайтиСтроки(стррПоиск);
			Для каждого СтрокаТ Из мСтроки Цикл
				Если СтрокаТ.ВремяНачала >= ДатаНачала И СтрокаТ.ВремяНачала <= ДатаОкончания Тогда
					стзФакт = тзФакт.Добавить();
					ЗаполнитьЗначенияСвойств(стзФакт, СтрокаТ);
					стзФакт.СсылкаВДок = Новый Структура("ID,ВидДокумента,Проведен,ПометкаУдаления", 
						СтрокаТ.ID, ВидДокумента, СтрокаТ.Статус = 1, СтрокаТ.Статус = 2);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает таблицу значений плана-факта посещений.
//	
//	Параметры:
//	
//	стррПараметры - Структура - структура со свойствами:
//  	Агент, Период, СсылкаСписокТТ, ТолькоПроведенныеДокументы, списокВидыДокументов, ПронумероватьФактыПосещений, ДопустимаяУдаленностьОтТТ.
//		Описание свойств см. в комментариях к функциям ПолучитьПланПосещенийДляОтчета() и ПолучитьФактПосещенийДляОтчета().
//		
Функция ПолучитьПланФактПосещений(стррПараметры) Экспорт
	
	тзПланПосешений = ПолучитьПланПосещенийДляОтчета(стррПараметры); // используются свойства: Период, СсылкаСписокТТ, создается свойство ВсегоДней 
	тзФактПосещений = ПолучитьФактПосещенийДляОтчета(стррПараметры); // используются свойства: Период, Агент, ТолькоПроведенныеДокументы, списокВидыДокументов 
	
	НомерВнеПлана = ПланПосещенийНомерПунктаВнеПлана();
	
	ДатаНачала = стррПараметры.Период.ДатаНачала;
	
	ДопустимаяУдаленностьОтТТ = Неопределено;
	стррПараметры.Свойство("ДопустимаяУдаленностьОтТТ", ДопустимаяУдаленностьОтТТ);
	Если Не ЗначениеЗаполнено(ДопустимаяУдаленностьОтТТ) Тогда
		ДопустимаяУдаленностьОтТТ = 0;
	КонецЕсли;
	
	//(( gi_180307
	Если ДопустимаяУдаленностьОтТТ <> 0 Тогда // нужно проверять расстояние от места создания до торговой точки
		мПартнеры = тзПланПосешений.ВыгрузитьКолонку("Партнер");
		ТекПартнер = Неопределено;
		Для каждого стзФакт Из тзФактПосещений Цикл
			Если мПартнеры.Найти(стзФакт.Партнер) = Неопределено Тогда
				мПартнеры.Добавить(стзФакт.Партнер);
			КонецЕсли; 
		КонецЦикла; 
		тзКоординатыПартнеров = ПолучитьТЗКоординатПартнеров(мПартнеры);
	КонецЕсли; 
	//)) gi_180307
	
	тзФактПосещений.Колонки.Добавить("ЕстьПосещение", Новый ОписаниеТипов("Булево")); // признак - посещение сделано в ТТ или вне ТТ	
		
	ТекПартнер = Неопределено;		
	
	Для каждого стзФакт Из тзФактПосещений Цикл
		
		ТекПартнер = стзФакт.Партнер;
		стзПлан = тзПланПосешений.Найти(ТекПартнер, "Партнер");
		Если стзПлан = Неопределено Тогда
			стзПлан = тзПланПосешений.Добавить();
			стзПлан.Партнер 	= ТекПартнер;
			стзПлан.НомерВПлане = НомерВнеПлана;
		КонецЕсли;
		
		//(( gi_180307
		ТТПосещена = Истина; // признак, что торговая точка посещена
		Если ДопустимаяУдаленностьОтТТ <> 0 Тогда // проверяем расстояние от места создания до торговой точки
			Если ЗначениеЗаполнено(стзФакт.Широта) И ЗначениеЗаполнено(стзФакт.Долгота) И СокрЛП(стзФакт.Широта) <> "-" Тогда // известны координаты места создания документа
				стзКоординаты = тзКоординатыПартнеров.Найти(ТекПартнер, "Ссылка");
				Если стзКоординаты <> Неопределено Тогда // известны координаты ТТ
					Расстояние = РасстояниеМеждуТочкамиNMEA(стзКоординаты, стзФакт);
					Если Расстояние > ДопустимаяУдаленностьОтТТ Тогда
						ТТПосещена = Ложь;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		//)) gi_180307
		
		//((vd_190125 Обработка: время начала и дата документа - разные дни.
		//Было:
		//ВремяНачала = ?(ЗначениеЗаполнено(стзФакт.ВремяНачала),	стзФакт.ВремяНачала, стзФакт.Дата);
		//НомерДня = (НачалоДня(ВремяНачала) - ДатаНачала) / 86400 + 1;
		//стрВремяНачала    = Формат(ВремяНачала, "ДФ=""HH:mm"""); // время начала работы с документом
		//стрВремяОкончания = Формат(?(ЗначениеЗаполнено(стзФакт.ВремяОкончания), стзФакт.ВремяОкончания, ВремяНачала), "ДФ=""HH:mm"""); // время окончания работы с документом
		//стрТекИнтервал = стзПлан["Д" + НомерДня];
		Если (ЗначениеЗаполнено(стзФакт.ВремяНачала) И ЗначениеЗаполнено(стзФакт.ВремяОкончания))
				И НачалоДня(стзФакт.ВремяНачала) = НачалоДня(стзФакт.Дата)
				И НачалоДня(стзФакт.ВремяОкончания) = НачалоДня(стзФакт.Дата) 
		Тогда
			стрВремяНачала    = стзФакт.ВремяНачала;
			стрВремяОкончания = стзФакт.ВремяОкончания;
		Иначе
			стрВремяНачала    = стзФакт.Дата;
			стрВремяОкончания = стзФакт.Дата;
		КонецЕсли;
		
		НомерДня 		= (НачалоДня(стрВремяНачала) - ДатаНачала) / 86400 + 1;
		стрТекИнтервал 	= стзПлан["Д" + НомерДня];
		
		стрВремяНачала 		= Формат(стрВремяНачала, 	"ДФ=""HH:mm""");
		стрВремяОкончания 	= Формат(стрВремяОкончания, "ДФ=""HH:mm""");
		//))vd_190125
		
		//(( gi_180307
		// В строке времени пребывания в ТТ (переменная стрТекИнтервал) указывается время в виде "ЧЧ:ММ - ЧЧ:ММ" для документов, созданных в ТТ,
		// и указывается время в виде "ЧЧ:ММ* - ЧЧ:ММ*" для документов, созданных вне ТТ.
		// Если в посещении есть оба варианта создания документов (в ТТ и вне ТТ), то 
		Если ТТПосещена Тогда // документ создан в ТТ
			Если Найти(стрТекИнтервал, "*") <> 0 Тогда // в строке интервала есть время из документа, созданного вне ТТ
				стрТекИнтервал = "";
			КонецЕсли; 
			Если ЗначениеЗаполнено(стрТекИнтервал) Тогда
				стрТекВремяНачала    = Лев(стрТекИнтервал, 5);
				стрТекВремяОкончания = Прав(стрТекИнтервал, 5);
				стзПлан["Д" + НомерДня] = 
					?(стрВремяНачала < стрТекВремяНачала, стрВремяНачала, стрТекВремяНачала) 
					+ " - " 
					+ ?(стрВремяОкончания > стрТекВремяОкончания, стрВремяОкончания, стрТекВремяОкончания);
			Иначе
				стзПлан["Д" + НомерДня] = стрВремяНачала + " - " + стрВремяОкончания;
			КонецЕсли;
		Иначе // документ создан вне ТТ
			Если Не ЗначениеЗаполнено(стрТекИнтервал) Или Найти(стрТекИнтервал, "*") <> 0 Тогда // в строке интервала можно укзаать время из документа, созданного вне ТТ
				Если ЗначениеЗаполнено(стрТекИнтервал) Тогда
					стрТекВремяНачала    = Лев(стрТекИнтервал, 5);
					стрТекВремяОкончания = Сред(стрТекИнтервал, СтрДлина(стрТекИнтервал) - 5 + 1, 5);
					стзПлан["Д" + НомерДня] = 
						?(стрВремяНачала < стрТекВремяНачала, стрВремяНачала, стрТекВремяНачала) 
						+ "* - " 
						+ ?(стрВремяОкончания > стрТекВремяОкончания, стрВремяОкончания, стрТекВремяОкончания) + "*";
				Иначе
					стзПлан["Д" + НомерДня] = стрВремяНачала + "* - " + стрВремяОкончания + "*";
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		//)) gi_180307
		
		стзФакт.ЕстьПосещение = ТТПосещена;
		
	КонецЦикла;
	
	Если стррПараметры.Свойство("ПронумероватьФактыПосещений") И стррПараметры.ПронумероватьФактыПосещений = Истина Тогда
		ДобавитьНомераФактовПосещений(тзПланПосешений, стррПараметры.ВсегоДней);
	КонецЕсли;
	
	тзПланПосешений.Сортировать("НомерВПлане,Партнер");
	
	ДобавитьАдресаПартнеров(тзПланПосешений);
	
	Если стррПараметры.Свойство("ДобавитьКоординатыПартнеров") И стррПараметры.ДобавитьКоординатыПартнеров = Истина Тогда
		ДобавитьКоординатыПартнеров(тзПланПосешений);
	КонецЕсли; 
	
	Если стррПараметры.Свойство("ВернутьФактПосещений") И стррПараметры.ВернутьФактПосещений = Истина Тогда
		стррПараметры.Вставить("тзФактПосещений", тзФактПосещений);
	КонецЕсли; 

	Возврат тзПланПосешений;
	
КонецФункции

#Область ПрограммныйИнтерфейс_ПланПосещений_РасчетРасстояний

Функция РасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong)
	//Pi = 3.1415926535897932;

 // Передаваемые широта/долгота в градусах и сотых долях 
 //StartLat: double; // Начальная широта 
 //StartLong: double; // Начальная долгота 
 //EndLat: double; // Конечная широта 
 //EndLong: double; // Конечная долгота 

 //// Переменные, используемые для вычисления смещения и расстояния 
 //fPhimean: Double; // Средняя широта 
 //fdLambda: Double; // Разница между двумя значениями долготы 
 //fdPhi: Double; // Разница между двумя значениями широты 
 //fAlpha: Double; // Смещение 
 //fRho: Double; // Меридианский радиус кривизны 
 //fNu: Double; // Поперечный радиус кривизны 
 //fR: Double; // Радиус сферы Земли 
 //fz: Double; // Угловое расстояние от центра сфероида 
 //fTemp: Double; // Временная переменная, использующаяся в вычислениях 
 //Distance: Double; // Вычисленное расстояния в метрах 
 //Bearing: Double; // Вычисленное от и до смещение 

	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	КонецЕсли;
 
	 // Константы, используемые для вычисления смещения и расстояния 
	 D2R = 0.017453; // Константа для преобразования градусов в радианы 
	 R2D = 57.295781; // Константа для преобразования радиан в градусы 
	 a = 6378137.0; // Основные полуоси 
	 b = 6356752.314245; // Неосновные полуоси 
	 e2 = 0.006739496742337; // Квадрат эксцентричности эллипсоида 
	 f = 0.003352810664747; // Выравнивание эллипсоида 

	 fdLambda = (StartLong - EndLong) * D2R; 
	 fdPhi = (StartLat - EndLat) * D2R; 
	 fPhimean = ((StartLat + EndLat) / 2.0) * D2R; 

	 // Вычисляем меридианные и поперечные радиусы кривизны средней широты 
	 fTemp = 1 - e2 * (Pow(Sin(fPhimean), 2)); 
	 fRho = (a * (1 - e2)) / Pow(fTemp, 1.5); 
	 fNu = a / (Sqrt(1 - e2 * (Sin(fPhimean) * Sin(fPhimean)))); 

	 // Вычисляем угловое расстояние 
	 fz = Sqrt(Pow(Sin(fdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(fdLambda / 2.0), 2)); 

	 fz = 2 * ASin(fz); 

	 // Вычисляем смещение 
	 fAlpha = Cos(EndLat * D2R) * Sin(fdLambda) * 1 / Sin(fz);
	 
	Если fAlpha > 1 Тогда
		fAlpha = 1;
	ИначеЕсли fAlpha < -1 Тогда
		fAlpha = -1;
	КонецЕсли;
	
	 fAlpha = ASin(fAlpha); 

	 // Вычисляем радиус Земли 
	 fR = (fRho * fNu) / ((fRho * Pow(Sin(fAlpha), 2)) + (fNu * Pow(Cos(fAlpha), 2))); 

	 // Получаем смещение и расстояние 
	 Distance = (fz * fR); 
	 
	Возврат Distance;
	
КонецФункции

Функция РасстояниеМеждуТочкамиNMEA(Точка1, Точка2)
	
	Шрт1 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка1.Широта));
	Шрт2 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка2.Широта));
	Длг1 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка1.Долгота));
	Длг2 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка2.Долгота));
	
	Возврат РасстояниеМеждуТочками(Шрт1, Длг1, Шрт2, Длг2);
	
КонецФункции

Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

#КонецОбласти 

// Функция циклически приводит число Значение в число в диапазоне [1; Модуль]
Процедура НормироватьПоМодулю(Значение, Модуль)
	Если Значение < 1 Тогда
		Значение = Значение + Модуль * Цел((Модуль - Значение) / Модуль);
	ИначеЕсли Значение > Модуль Тогда
		Значение = Значение % Модуль;
		Если Значение = 0 Тогда
			Значение = Модуль;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

// Функция возвращает структуру с основными свойствами списка торговых точек, закрепленного за агентом.
// В свойстве ТекстОшибки возвращается описание ошибки (если возникла ошибка).
Функция ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент, ДляПоляВыбора = Истина) Экспорт 

	стррРезультат = Новый Структура("ТекстОшибки,КодОшибки,НаименованиеСписокТТ,СсылкаСписокТТ,ИспользуетсяДляПланированияСписокТТ,ИспользоватьПорядокСписокТТ");
	
	стррРезультат.НаименованиеСписокТТ = "";
	стррРезультат.ИспользоватьПорядокСписокТТ = Ложь;
	
	стррРеквизиты = ПолучитьНастройкиАгентаИзВХ(Агент, "СсылкаСписокТТ");
	Если стррРеквизиты = Неопределено Тогда
		
		стррРезультат.КодОшибки = "НетНастроекАгента";		
		Текст = НСтр("ru = 'Не найдено настроек для торгового агента. Проверьте настройки агента [подсказка].'");
		
	ИначеЕсли Не ЗначениеЗаполнено(стррРеквизиты.СсылкаСписокТТ) Тогда
		
		стррРезультат.КодОшибки = "НеУказанСТТ";		
		Текст = НСтр("ru = 'У торгового агента не указан ""Список торговых точек"". Задайте список торговых точек для агента [подсказка].'");
		
	Иначе
		стррРезультат.СсылкаСписокТТ = стррРеквизиты.СсылкаСписокТТ;
		стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", стррРеквизиты.СсылкаСписокТТ);
		Если стррОбъект = Неопределено Тогда
			
			стррРезультат.КодОшибки = "ОшибкаСсылкиСТТ";			
			Текст = НСтр("ru = 'У торгового агента указан несуществующий ""Список торговых точек"". Задайте список торговых точек для агента [подсказка].'");
			
		Иначе
			стррРезультат.НаименованиеСписокТТ = стррОбъект.Наименование;
			Если стррОбъект.Состав.Количество() = 0 Тогда
				
				стррРезультат.КодОшибки = "УказанПустойСТТ";				
				Текст = НСтр("ru = 'У торгового агента указан пустой ""Список торговых точек"". Укажите заполненный список торговых точек для агента [подсказка].'");
				
			Иначе
				стррРезультат.ИспользуетсяДляПланированияСписокТТ = СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект);
				Если стррРезультат.ИспользуетсяДляПланированияСписокТТ Тогда
					
					стррРезультат.ИспользоватьПорядокСписокТТ = стррОбъект.ИспользоватьПорядок;
					
				Иначе
					
					стррРезультат.КодОшибки = "ДетализацияСТТБезПланаГрафика";
					Текст = НСтр("ru = 'У торгового агента указан ""Список торговых точек"" без детализации по ""Графику"" или ""Плану посещений"". Укажите для агента список торговых точек с одним из указанных вариантов детализации [подсказка].'");
					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Текст <> "" Тогда
		Если ДляПоляВыбора Тогда
			стррРезультат.ТекстОшибки = СтрЗаменить(Текст, "[подсказка]", НСтр("ru = '(для этого нажмите кнопку ""Открыть"" справа от агента)'"));
		Иначе
			стррРезультат.ТекстОшибки = СтрЗаменить(Текст, " [подсказка]", "");
		КонецЕсли; 
	КонецЕсли; 
	 
	Возврат стррРезультат;

КонецФункции

Процедура ДобавитьАдресаПартнеров(ТЗ)
	
	мПартнеры = ТЗ.ВыгрузитьКолонку("Партнер");
	Если мПартнеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	мВидыКИ = Новый Массив;
	мВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	
	тзАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мПартнеры,, мВидыКИ);
	
	Для каждого СтрокаТ Из ТЗ Цикл
		
		стзАдреса = тзАдреса.Найти(СтрокаТ.Партнер, "Объект");
		Если стзАдреса <> Неопределено Тогда
			СтрокаТ.Адрес = стзАдреса.Представление;
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет номер факта посещений. Сортировка ТЗ меняется!
// В таблицу добавляются колонки вида НФ<N>, где N - номер дня в плане. В колонках указываются порядковые номера посещений ТТ.
Процедура ДобавитьНомераФактовПосещений(ТЗ, ВсегоДней)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(5, 0);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	Для Индекс = 1 По ВсегоДней Цикл
		ТЗ.Колонки.Добавить("НФ" + Строка(Индекс), ТипЧисло);
	КонецЦикла; 		

	Для Индекс = 1 По ВсегоДней Цикл
		стрИндекс = Строка(Индекс);
		КолонкаФакта = "Д" + Строка(Индекс);
		КолонкаНФ = "НФ" + Строка(Индекс);
		НомерФакта = 0;
		ТЗ.Сортировать(КолонкаФакта);
		Для каждого СтрокаТ Из ТЗ Цикл
			Если Не ПустаяСтрока(СтрокаТ[КолонкаФакта]) Тогда
				НомерФакта = НомерФакта + 1;
				СтрокаТ[КолонкаНФ] = НомерФакта;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьКоординатыПартнеров(ТЗ)
	
	мПартнеры = ТЗ.ВыгрузитьКолонку("Партнер");
	тзКоординаты = ПолучитьТЗКоординатПартнеров(мПартнеры);
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 4);
	ТипЧисло  = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	ТЗ.Колонки.Добавить("Широта", ТипЧисло);
	ТЗ.Колонки.Добавить("Долгота", ТипЧисло);
	Для Каждого СтрокаТ Из тзКоординаты Цикл
		сТЗ = ТЗ.Найти(СтрокаТ.Ссылка, "Партнер");
		Если сТЗ <> Неопределено Тогда
			сТЗ.Широта  = СтрокаТ.Широта;
			сТЗ.Долгота = СтрокаТ.Долгота;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ПланПосещений
#КонецОбласти 

#Область ПрограммныйИнтерфейс_КартыСервер

Функция ПолучитьКоординатыПартнера(Партнер, стррКоординаты) Экспорт
	
	мПартнеры = Новый Массив;
	мПартнеры.Добавить(Партнер);
	тз = ПолучитьТЗКоординатПартнеров(мПартнеры);
	Если тз.Количество() = 0 Тогда
		стррКоординаты.Широта  = 0;
		стррКоординаты.Долгота = 0;
		Возврат Ложь;
	Иначе
		СтрокаТ = тз[0];
		стррКоординаты.Широта  = СтрокаТ.Широта;
		стррКоординаты.Долгота = СтрокаТ.Долгота;
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьТЗКоординатПартнеров(мПартнеры) Экспорт
	
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка,
		|	СвойстваДолготы.Долгота,
		|	СвойстваШироты.Широта,
		|	СвойстваАдреса.Адрес
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Широта
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоШирота) КАК СвойстваШироты
		|	ПО (СвойстваШироты.Партнер = Партнеры.Ссылка)
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Долгота
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоДолгота) КАК СвойстваДолготы
		|	ПО (СвойстваДолготы.Партнер = Партнеры.Ссылка)
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Адрес
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоАдрес) КАК СвойстваАдреса
		|	ПО (СвойстваАдреса.Партнер = Партнеры.Ссылка)
		|ГДЕ 
		|	Партнеры.Ссылка В (&мПартнеры)";
		
	СвойствоШирота  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаПартнер());	
	СвойствоДолгота = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаПартнер());
	СвойствоАдрес   = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваАдресИзСервисаПартнер());
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("СвойствоШирота",  СвойствоШирота);
	Запрос.УстановитьПараметр("СвойствоДолгота", СвойствоДолгота);
	Запрос.УстановитьПараметр("СвойствоАдрес",   СвойствоАдрес);
	Запрос.УстановитьПараметр("мПартнеры", 		 мПартнеры);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьВебКаталогИконок() Экспорт

	Возврат "http://www.agentplus.ru/tmp/configs/map/"; //"http://www.agentplus.ru/download/1CModules/8/8.2/11/icons/";

КонецФункции
 
// ПрограммныйИнтерфейс_КартыСервер
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ГруппаПользователей

Функция ПолучитьГруппуПользователейТорговыеАгенты() Экспорт

	ИмяГруппы = "Торговые агенты (Агент Плюс)";
	
	Результат = Справочники.ГруппыПользователей.НайтиПоНаименованию(ИмяГруппы, Истина); 
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Элемент = Справочники.ГруппыПользователей.СоздатьЭлемент();
		Элемент.Наименование = ИмяГруппы;
		Элемент.Комментарий  = НСтр("ru = 'Группа пользователей, использующих ПО ""Агент Плюс: Мобильная торговля"". Создана автоматически.'");
		Элемент.Записать();
		Результат = Элемент.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// ПрограммныйИнтерфейс_ГруппаПользователей
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбновлениеОбработки
// Область используется для обновлений модуля обмена данными до новых версий - инициализации значений новых настроек, 
// конвертации значений настроек из прежнего формата в новый формат.

// Функция возвращает строку с описанием факта обновления (если было выполнено обновление настроек модуля) или возвращает Неопределено.
Функция ИнициализироватьДанныеВХранилищеДляНовойВерсии() Экспорт
	
	ОпределитьВерсиюКонфигурации();

	стррВерсии = Новый Структура;
	стррВерсии.Вставить("НоваяВерсия", ВерсияОбработки()); // версия запущенной обработки
	стррВерсии.Вставить("ВерсияИзВХ",  ПрочитатьЗначениеНастройки("ВерсияНастроек")); // версия обработки, сохранившей настройки в хранилище
	
	Если стррВерсии.ВерсияИзВХ = стррВерсии.НоваяВерсия Тогда
		Возврат Неопределено; // обновление не требуется
	КонецЕсли; 
	
	стррЗначения 	  = Новый Структура; // измененные значения настроек обработки, их потребуется сохранить в хранилище
	ИзменитьНастройки = Ложь; 		     // признак изменения значений настроек
	
	ЭтоПервыйЗапуск = ПустаяСтрока(стррВерсии.ВерсияИзВХ);
	
	Если ЭтоПервыйЗапуск Тогда // первый запуск
		
		СоздатьДополнительныеРеквизитыСправочников();
		СоздатьДополнительныеРеквизитыДокументов();
		ПолучитьГруппуПользователейТорговыеАгенты();

		//стррЗначения.Вставить("СпособРасчетаПросроченныхДолгов", "НеУчитывать"); 	//vd_190228 Не используем
		стррЗначения.Вставить("ВыгружатьТолькоПросроченныеДолги", Ложь); //vd_190228 
		стррЗначения.Вставить("ВыделятьЦветомПросроченныеДолги",  Ложь); //vd_190228 
		стррЗначения.Вставить("ПодтвержденияТолькоДляПроведенных", Истина);
		стррЗначения.Вставить("ОтветнаяВыгрузка", Истина);
		стррЗначения.Вставить("ВыгружатьМаршруты", Истина);		
		стррЗначения.Вставить("ИнтервалВыгрузкиМаршрутов", 7);
		стррЗначения.Вставить("РегистрОстатковТоваров", "СвободныеОстатки");
		
		РежимЗагрузкиЗаказов = ?(Константы.ИспользоватьЗаказыКлиентов.Получить(), "ЗагружатьКакЗаказ", "ЗагружатьКакРеализацию");
		стррЗначения.Вставить("РежимЗагрузкиЗаказов", 		     РежимЗагрузкиЗаказов); 
		стррЗначения.Вставить("СтатусЗаказовКлиентов", 		     Перечисления.СтатусыЗаказовКлиентов.НеСогласован); 
		стррЗначения.Вставить("СтатусРеализацияТоваровУслуг",    Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено); //vd_180330 ВидыДоставки
		стррЗначения.Вставить("ИспользоватьВидыДоставки",	     Ложь);													//vd_180330 ВидыДоставки 										  
		стррЗначения.Вставить("СпособДоставки", 				 Перечисления.СпособыДоставки.Самовывоз);				//vd_180330 ВидыДоставки	
		стррЗначения.Вставить("МаксКоличествоВиртуальныхДокументов", 1000);			 									//ig_180419 - максимальное количество вирт. документов в журнале документов
		стррЗначения.Вставить("ИспользоватьПланыПродаж", Ложь);                      									//vd_181106
		стррЗначения.Вставить("ИспользоватьПланыПродажПоТоварнымКатегориям", Ложь);  									//vd_181106
		стррЗначения.Вставить("ИспользоватьАвтообмен", Ложь);   														//vd_190312
		стррЗначения.Вставить("ИнтервалАвтообмена", 180);  																//vd_190312
		стррЗначения.Вставить("ВыгружатьДолгиТолькоПоДокументамАгента", Ложь);          								//vd_190408
		стррЗначения.Вставить("ПроводитьДокументыСписок", НастройкаПроводитьДокументыСписокПоУмолчанию());         		//vd_190408
		
		ЗаполнитьВидыЗадачПоУмолчанию(); //vd_190418
		
		//vd_180710
		Если НЕ гКонфигурация = "УТ_АП" Тогда
			стррЗначения.Вставить("РежимВыгрузкиРекомендуемый", Истина); 
		КонецЕсли;
		
		// устанавливаем значение настройки "ИспользоватьДоговорыИлиСоглашения"
		Если Константы.ИспользованиеСоглашенийСКлиентами.Получить() <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
			ЗначениеДоговорыИлиСоглашения = "СОГЛАШЕНИЯ";
		ИначеЕсли Константы.ИспользоватьДоговорыСКлиентами.Получить() Тогда 
			ЗначениеДоговорыИлиСоглашения = "ДОГОВОРЫ";
		Иначе
			ЗначениеДоговорыИлиСоглашения = "";
		КонецЕсли; 
		стррЗначения.Вставить("ИспользоватьДоговорыИлиСоглашения", ЗначениеДоговорыИлиСоглашения);
		
		Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда
			стррЗначения.Вставить("ИспользоватьХарактеристики", Истина);
		КонецЕсли;
			
	КонецЕсли;
		
	Если ОбновитьДоВерсии("1.0.0.23", стррВерсии, ИзменитьНастройки) Тогда
		стррЗначения.Вставить("ИнтервалАвтообмена", 180);
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.29", стррВерсии, ИзменитьНастройки) Тогда
		ПодтвержденияУдалить("Документы");
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.31", стррВерсии, ИзменитьНастройки) Тогда
		ОбновитьВидыДокументовИСправочниковВХранилище(стррЗначения);
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.32", стррВерсии, ИзменитьНастройки) Тогда
		// изменен тип значения реквизита "СОДПорт" со "Строка" на "Число"
		СОДПорт = ПрочитатьЗначениеНастройки("СОДПорт");
		Если ТипЗнч(СОДПорт) = Тип("Строка") Тогда
			НовоеЗначение = СтрокуВЧисло(СОДПорт);
		ИначеЕсли ТипЗнч(СОДПорт) = Тип("Число") Тогда
			НовоеЗначение = СОДПорт;
		Иначе
			НовоеЗначение = 0;
		КонецЕсли; 
		Если НовоеЗначение <> СОДПорт Тогда
			стррЗначения.Вставить("СОДПорт", НовоеЗначение);
		КонецЕсли; 
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.33", стррВерсии, ИзменитьНастройки) Тогда
		// заменено название реквизита "ЛКИдентификатор" на "ЛКЛогин"
		НовоеЗначение = ПрочитатьЗначениеНастройки("ЛКИдентификатор");
		Если НовоеЗначение <> Неопределено Тогда
			стррЗначения.Вставить("ЛКЛогин", НовоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.34", стррВерсии, ИзменитьНастройки) Тогда
		// добавлен новый реквизит "ЛКЗапомнитьЛогинИПароль"
		ЛКЛогин = ПрочитатьЗначениеНастройки("ЛКЛогин");
		Если Не ПустаяСтрока(ЛКЛогин) Тогда
			стррЗначения.Вставить("ЛКЗапомнитьЛогинИПароль", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("1.0.0.54", стррВерсии) Тогда
		// появился новый доп. реквизит справочника Партнеры - ИмяСвойстваАдресИзСервисаПартнер()
		СоздатьДополнительныеРеквизитыСправочников(); 
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("1.0.1.27", стррВерсии) Тогда
		// появились новые доп. сведения документов - ИмяСвойстваДокументВремяНачала() и ИмяСвойстваДокументВремяОкончания().
		СоздатьДополнительныеРеквизитыДокументов(); 
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.1.35", стррВерсии, ИзменитьНастройки) Тогда 
		стррЗначения.Вставить("ПоказыватьАдресКоординат", Истина);
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.2.1", стррВерсии) Тогда
		ВидДокумента = "_Мерчендайзинг";
		тз = ВОТЗЗагрузить(ВидДокумента);
		Если тз.Колонки.Найти("Менеджер") = Неопределено Тогда
			тз.Колонки.Добавить("Менеджер",	Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
			ВОТЗСохранить(ВидДокумента, тз)
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОбновитьДоВерсии("1.0.2.4", стррВерсии) Тогда
		// 1. Переименована колонка ТЗ Журнала документов мерчендайзинга из "ДатаНачала" в "ВремяНачала".
		// 2. Добавлена колонка "СуммаДокумента".
		
		ВидДокумента = "_Мерчендайзинг";
		тз = ВОТЗЗагрузить(ВидДокумента);
		Если тз <> Неопределено Тогда
			
			БылиИзменения = Ложь;
			
			ЗаменитьНазваниеКолонки(тз, "ДатаНачала",    "ВремяНачала",    БылиИзменения);
			ЗаменитьНазваниеКолонки(тз, "ДатаОкончания", "ВремяОкончания", БылиИзменения);
			
			// добавляем колонку "СуммаДокумента"
			Если тз.Колонки.Найти("СуммаДокумента") = Неопределено Тогда
				ОписаниеТипаСумма = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
				тз.Колонки.Добавить("СуммаДокумента", ОписаниеТипаСумма);
				БылиИзменения = Истина;
			КонецЕсли; 
		
			Если БылиИзменения Тогда
				ВОТЗСохранить(ВидДокумента, тз); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ОбновитьДоВерсии("2.0.0.8", стррВерсии) Тогда
		// Изменены названия колонки "Результат" и "Результат_Представление" в ТЗ виртуального документа "_Посещение".
		ВидДокумента = "_Посещение";		
		тз = ВОТЗЗагрузить(ВидДокумента);
		Если тз <> Неопределено Тогда
			БылиИзменения = Ложь;			
			ЗаменитьНазваниеКолонки(тз, "Результат", "РезультатПосещения", БылиИзменения);
			ЗаменитьНазваниеКолонки(тз, "Результат_Представление", "РезультатПосещения_Представление", БылиИзменения);
			Если БылиИзменения Тогда
				ВОТЗСохранить(ВидДокумента, тз); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОбновитьДоВерсии("2.0.0.11", стррВерсии) Тогда
		// Изменено название колонки "Характеристика" на "Ссылка" в ТЗ "СпрХарактеристикиНоменклатурыСлужебный"
		Реквизит = "СпрХарактеристикиНоменклатурыСлужебный";
		тз = ПрочитатьЗначениеНастройки(Реквизит);
		Если тз <> Неопределено И ЗаменитьНазваниеКолонки(тз, "Характеристика", "Ссылка") Тогда
			СохранитьЗначениеНастройки(Реквизит, тз); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОбновитьДоВерсии("2.0.0.20", стррВерсии) Тогда
		// Изменено для виртуального документа "_Мерчендайзинг" добавлен реквизит шапки ДокументОснование.
		ВидДокумента = "_Мерчендайзинг";		
		тз = ВОТЗЗагрузить(ВидДокумента);
		Если тз <> Неопределено Тогда
			Если тз.Колонки.Найти("ДокументОснование") = Неопределено Тогда
				ОписаниеТипаВсеДокументы  = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
				тз.Колонки.Добавить("ДокументОснование", ОписаниеТипаВсеДокументы );
				ВОТЗСохранить(ВидДокумента, тз); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.0.48", стррВерсии, ИзменитьНастройки) Тогда
		// Настройка "ИспользоватьСоглашения" заменена (типа Булево) на "ИспользоватьДоговорыИлиСоглашения" (типа Строка).
		// "ИспользоватьДоговорыИлиСоглашения" принимает одно из значений (задаются в процедуре ЗаполнитьСпособыВыгрузкиДоговоров(), интерактивно - на форме "НастройкиМодуля"): 
		// 	- "" - не использовать договоры и соглашения в МУ,
		//  - "ДОГОВОРЫ"   - использовать в МУ Договоры,
		//  - "СОГЛАШЕНИЯ" - использовать в МУ Соглашения.
		Значение = ?(ПрочитатьЗначениеНастройки("ИспользоватьСоглашения") = Истина, "СОГЛАШЕНИЯ", "");
		стррЗначения.Вставить("ИспользоватьДоговорыИлиСоглашения", Значение);
	КонецЕсли;
	
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.0.70", стррВерсии) И гКонфигурация = "УТ_GR" Тогда
		// изменился формат хранения адресов доставки для выгрузки в МТ
		АдресаДоставкиКонвертировать();
	КонецЕсли;
	
//{{vd_180410
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.0.95", стррВерсии, ИзменитьНастройки) Тогда
		
		// Настройка "ЗагружатьКакРеализацию" удалена, тк не используется.
		// Настройка "РежимЗагрузкиЗаказов"  - Тип(Строка). По умолчанию значение зависит от Константы.ИспользоватьЗаказыКлиентов 
		// 	Значения:
		//  	"ЗагружатьКакЗаказ"     - Строка - Загрузка заказов в 1с из МУ как Заказ.
		//  	"ЗагружатьКакРеализацию"- Строка - Загрузка заказов в 1с из МУ как Реализация.
		//
		// Настройка "СтатусЗаказовКлиентов"  - Тип(Перечисления). По умолчанию значение Перечисления.СтатусыЗаказовКлиентов.НеСогласован 
		// 	Значения: 	Перечисления.СтатусыЗаказовКлиентов	 - Перечисления - При загрузке документа заказ из МУ подставляет в реквизит "Статус" значение заданное в "Общие настройки - Основные - Статус заказов"
		//
		// Настройка "СтатусРеализацияТоваровУслуг"  - Тип(Перечисления). По умолчанию значение Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено
		// 	Значения:  	Перечисления.СтатусыРеализацийТоваровУслуг	- Перечисления - При загрузке документа заказ или реализация из МУ подставляет в реквизит "Статус" значение заданное в "Общие настройки - Основные - Статус реализаций"
		//
		// Настройка "СпособДоставки"  - Тип(Перечисления). По умолчанию значение Перечисления.СпособыДоставки.Самовывоз 
		// 	Значения:  	Перечисления.СпособыДоставки	- Перечисления - При загрузке документа заказ или реализация из МУ подставляет в реквизит "СпособДоставки" значение заданное в "Общие настройки - Основные - способ доставки"

		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		
		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "СтатусЗаказовКлиентов",, ПользовательНастроек);
        Если ЗначениеНастройки = Неопределено Тогда
			стррЗначения.Вставить("СтатусЗаказовКлиентов", Перечисления.СтатусыЗаказовКлиентов.НеСогласован); 	
		КонецЕсли;
		
		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "СтатусРеализацияТоваровУслуг",, ПользовательНастроек);
        Если ЗначениеНастройки = Неопределено Тогда
			стррЗначения.Вставить("СтатусРеализацияТоваровУслуг", Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено); 	
		КонецЕсли;

		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "СпособДоставки",, ПользовательНастроек);
        Если ЗначениеНастройки = Неопределено Тогда
			стррЗначения.Вставить("СпособДоставки", Перечисления.СпособыДоставки.Самовывоз);	
		КонецЕсли;
		
		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "РежимЗагрузкиЗаказов",, ПользовательНастроек);
		РежимЗагрузкиЗаказов = ?(Константы.ИспользоватьЗаказыКлиентов.Получить(), "ЗагружатьКакЗаказ", "ЗагружатьКакРеализацию");
		Если ЗначениеНастройки = Неопределено Тогда
			стррЗначения.Вставить("РежимЗагрузкиЗаказов", РежимЗагрузкиЗаказов);
		ИначеЕсли РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" И ЗначениеНастройки = "ЗагружатьКакЗаказ" Тогда //Если Константы.ИспользоватьЗаказыКлиентов не включена, то загружаем заказа как реализация.
			стррЗначения.Вставить("РежимЗагрузкиЗаказов", РежимЗагрузкиЗаказов);
		КонецЕсли;
			
		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ЗагружатьКакРеализацию",, ПользовательНастроек);
		Если НЕ ЗначениеНастройки = Неопределено Тогда
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена, "ЗагружатьКакРеализацию", ПользовательНастроек);			
		КонецЕсли;
		
	КонецЕсли;
	//}}vd_180410 
	
	//(( gi_180419
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.1.1", стррВерсии, ИзменитьНастройки) Тогда
		// Добавлен новый реквизит обработки - МаксКоличествоВиртуальныхДокументов.
		// В реквизите указывается максимальное количество виртуальных документов одного вида в журнале документов.
		// Значение по умолчанию: 1000. Ранее это значение прописывалось жестко в коде.
		стррЗначения.Вставить("МаксКоличествоВиртуальныхДокументов", 1000);
	КонецЕсли; 
	//)) gi_180419
	
	//((vd_181106
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.39", стррВерсии, ИзменитьНастройки) Тогда
		// Добавлен новый реквизит обработки - ИспользоватьПланыПродажПоТоварнымКатегориям.
		стррЗначения.Вставить("ИспользоватьПланыПродажПоТоварнымКатегориям", Ложь);
	КонецЕсли; 
	//))vd_181106
	
	//((vd_181225
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.53", стррВерсии, ИзменитьНастройки) Тогда
		СоздатьДополнительныеРеквизитыДокументов();
	КонецЕсли; 
	//))vd_181225	
	
	//((vd_181217
	//vd_190117 Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.51", стррВерсии, ИзменитьНастройки) Тогда
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.57", стррВерсии, ИзменитьНастройки) Тогда
		//Добавляем в настройки мобидьного приложения,новую настройку торговлю с колес. Переносим в нее значение старой общей настройки "Торговля с колес"
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		
		Настройка_ТоговляСКолес    = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ТорговляСКолес"  ,, ПользовательНастроек);
		Настройка_НастройкиАгентов = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "НастройкиАгентов",, ПользовательНастроек);
				
		//vd_190117		
		//Было:
		//Если Настройка_ТоговляСКолес <> Неопределено И Настройка_НастройкиАгентов <> Неопределено Тогда
		//	стррТорговляСКолес = Новый Структура("Значение, Идентификатор", Настройка_ТоговляСКолес, "72889bff-cc95-4c2e-9c4e-0d28e2efbf7c");
		Если Настройка_НастройкиАгентов <> Неопределено Тогда
			стррТорговляСКолес = Новый Структура("Значение, Идентификатор", ?(Настройка_ТоговляСКолес = Неопределено, Ложь, Настройка_ТоговляСКолес), "72889bff-cc95-4c2e-9c4e-0d28e2efbf7c");
			Для Каждого стзНастройкиАгентов Из Настройка_НастройкиАгентов Цикл
				стррНастройкиМобильногоПриложения = стзНастройкиАгентов.НастройкиМобильногоПриложения;
				//vd_190226
				//Если НЕ стррНастройкиМобильногоПриложения.Свойство("ТорговляCКолес") Тогда
				Если стррНастройкиМобильногоПриложения <> Неопределено И НЕ стррНастройкиМобильногоПриложения.Свойство("ТорговляCКолес") Тогда
					стррНастройкиМобильногоПриложения.Вставить("ТорговляCКолес", стррТорговляСКолес); 
				КонецЕсли;
			КонецЦикла;			
			стррЗначения.Вставить("НастройкиАгентов", Настройка_НастройкиАгентов); 	
		КонецЕсли;

		//Удаляем старую настройку торговля с колес.
		Если Настройка_ТоговляСКолес <> Неопределено Тогда
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена, "ТорговляСКолес", ПользовательНастроек);				
		КонецЕсли;
	КонецЕсли; 
	//))vd_181217
	
	//vd_190228 Удаление настройки "СпособРасчетаПросроченныхДолгов"
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.65", стррВерсии, ИзменитьНастройки) Тогда
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();

		Настройка_СпособРасчетаПросроченныхДолгов    = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "СпособРасчетаПросроченныхДолгов"  ,, ПользовательНастроек);	
		Если Настройка_СпособРасчетаПросроченныхДолгов <> Неопределено Тогда
			Если Настройка_СпособРасчетаПросроченныхДолгов = "НеУчитывать" Тогда
				стррЗначения.Вставить("ВыгружатьТолькоПросроченныеДолги", Ложь);
				стррЗначения.Вставить("ВыделятьЦветомПросроченныеДолги", Ложь);
			КонецЕсли;
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена, "СпособРасчетаПросроченныхДолгов", ПользовательНастроек);	
		КонецЕсли;
		Если НЕ стррЗначения.Свойство("ВыгружатьТолькоПросроченныеДолги") И ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ВыгружатьТолькоПросроченныеДолги"  ,, ПользовательНастроек) = Неопределено Тогда
			стррЗначения.Вставить("ВыгружатьТолькоПросроченныеДолги", Ложь);	
		КонецЕсли;
		Если НЕ стррЗначения.Свойство("ВыделятьЦветомПросроченныеДолги") И ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ВыделятьЦветомПросроченныеДолги"  ,, ПользовательНастроек) = Неопределено Тогда
			стррЗначения.Вставить("ВыделятьЦветомПросроченныеДолги", Ложь);	
		КонецЕсли;
	КонецЕсли;
	
	//vd_190312 Убрать использование компоненты, значение настроек поумолчанию для АПСОД
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.67", стррВерсии, ИзменитьНастройки) Тогда
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		
		Настройка_ИспользоватьАвтообмен = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ИспользоватьАвтообмен"  ,, ПользовательНастроек);	
		Если Настройка_ИспользоватьАвтообмен = Неопределено Тогда
			стррЗначения.Вставить("ИспользоватьАвтообмен", Ложь);
		КонецЕсли;
		
		Настройка_ИнтервалАвтообмена    = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ИнтервалАвтообмена"  ,, ПользовательНастроек);	
		Если Настройка_ИнтервалАвтообмена = Неопределено ИЛИ Настройка_ИнтервалАвтообмена <= 5 Тогда
			стррЗначения.Вставить("ИнтервалАвтообмена", 180);
		КонецЕсли;
	КонецЕсли;
	
	//Новая настройка ВыгружатьДолгиТолькоПоДокументамАгента И ПроводитьДокументыСписок
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.72", стррВерсии, ИзменитьНастройки) Тогда
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		
		Настройка = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ВыгружатьДолгиТолькоПоДокументамАгента"  ,, ПользовательНастроек);	
		Если Настройка = Неопределено Тогда
			стррЗначения.Вставить("ВыгружатьДолгиТолькоПоДокументамАгента", Ложь);
		КонецЕсли;
		
		Настройка = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ПроводитьДокументыСписок"  ,, ПользовательНастроек);	
		Если Настройка = Неопределено Тогда
			стррЗначения.Вставить("ПроводитьДокументыСписок", НастройкаПроводитьДокументыСписокПоУмолчанию());   
		КонецЕсли; 		

	КонецЕсли;
	
	//vd_190418                                       
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.74", стррВерсии, ИзменитьНастройки) Тогда
		ЗаполнитьВидыЗадачПоУмолчанию();		
	КонецЕсли;	
		
	Если ИзменитьНастройки Или стррВерсии.ВерсияИзВХ <> стррВерсии.НоваяВерсия Тогда
		стррЗначения.Вставить("ВерсияНастроек", стррВерсии.НоваяВерсия); // обязательно записываем новую версию в настройки
		СохранитьЗначенияНастроекИзСтруктуры(стррЗначения);
		Результат = СтрШаблон_(НСтр("ru = 'Обновлены настройки с версии %1 до версии %2.'"), стррВерсии.ВерсияИзВХ, стррВерсии.НоваяВерсия);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура удаляет из значений атрибутов обработки СписокОчищаемыхДокументов и СписокОчищаемыхСправочников
// несуществующие виды документов и справочников, которые могли остаться от прежних версий обработки.
Процедура ОбновитьВидыДокументовИСправочниковВХранилище(СтррЗначения)
	
	СтррСписки = ПрочитатьЗначенияНастроек("СписокОчищаемыхДокументов,СписокОчищаемыхСправочников");
	
	Для Каждого ЭлементСтруктуры Из СтррСписки Цикл
		
		Если ЭлементСтруктуры.Значение = Неопределено Тогда // значение может отсутствовать в хранилище
			Продолжить;
		КонецЕсли;
		
		СписокВсех = ПолучитьВсеВидыОбъектовДляМУ(?(ЭлементСтруктуры.Ключ = "СписокОчищаемыхДокументов", "Документ", "Справочник"));
		мУдаляемыеЭлементы = Новый Массив;
		СписокПроверки = ЭлементСтруктуры.Значение;
		Для Каждого Элемент Из СписокПроверки Цикл
			Если СписокВсех.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				мУдаляемыеЭлементы.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из мУдаляемыеЭлементы Цикл
			СписокПроверки.Удалить(Элемент);
		КонецЦикла;
		
		Если мУдаляемыеЭлементы.Количество() <> 0 Тогда
			СтррЗначения.Вставить(ЭлементСтруктуры.Ключ, СписокПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, если требуется обновить настройки обработки до новой версии обработки.
Функция ОбновитьДоВерсии(ВерсияОбновления, стррВерсии, ИзменитьНастройки = Неопределено)
	
	Если СравнитьВерсии(ВерсияОбновления, стррВерсии.НоваяВерсия) > 0 Тогда
		Возврат Ложь; // требуется обновиться до более новой версии, о которой обработка не знает (не знает как обновляться)
	ИначеЕсли СравнитьВерсии(ВерсияОбновления, стррВерсии.ВерсияИзВХ) < 0 Тогда
		Возврат Ложь; // сохранены настройки от более новой версии обработки, чем версия обновления
	Иначе
		ИзменитьНастройки = Истина;
		Возврат Истина; // требуется обновить настройки до более новой версии
	КонецЕсли;
		
КонецФункции

// Функция заменяет название колонки в таблице значений.
// Возвращает Истина, если название колонки было заменено.
Функция ЗаменитьНазваниеКолонки(тз, Название, НовоеНазвание, БылиИзменения = Неопределено)
	
	Если БылиИзменения = Неопределено Тогда
		БылиИзменения = Ложь;
	КонецЕсли; 
	
	Колонка = тз.Колонки.Найти(Название);
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = НовоеНазвание;
		БылиИзменения = Истина;
	КонецЕсли; 
	
	Возврат БылиИзменения;

КонецФункции

Функция НастройкаПроводитьДокументыСписокПоУмолчанию()
	
	сзДокументы = ПолучитьВсеВидыОбъектовДля1C("Документ", "СоздаваемыеВМУ");
	
	Для Каждого Элемент Из сзДокументы Цикл
		Элемент.Пометка = Истина;
	КонецЦикла;
	
	Возврат сзДокументы;
	
КонецФункции

//vd_190417 Добавлена
Процедура ЗаполнитьВидыЗадачПоУмолчанию()
	
	//СтруктураВО
	стррВО = ВОСвойстваОбъекта("_ВидыЗадач");
	
	//Получение ТЗ 	
	тзВидыЗадач = ВОТЗЗагрузить(стррВО);
	
	//Сохранение
	стррОбъект = Новый Структура("Статус, Наименование, ТипЗадачи, Группа, ВопросАнкеты"); //Группа, ВопросАнкеты - пока не используется на форме 
	стррОбъект.Статус		= 3;
	стррОбъект.Группа 		= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	стррОбъект.ВопросАнкеты = "";
	
	//Строка
	ID = Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D");
	Если ВОЭлементЗагрузить(стррВО, ID) = Неопределено Тогда
		стррОбъект.Наименование = "Адрес доставки";
		стррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D");
		ВОЭлементСохранить(стррВО, ID, стррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;

	//Создать Заказ
	ID = Новый УникальныйИдентификатор("EADED006-5271-4497-9222-79541D23E3FA");
	Если ВОЭлементЗагрузить(стррВО, ID) = Неопределено Тогда
		стррОбъект.Наименование = "Взять заказ";
		стррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("EADED006-5271-4497-9222-79541D23E3FA");
		ВОЭлементСохранить(стррВО, ID, стррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Дата
	ID = Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26");
	Если ВОЭлементЗагрузить(стррВО, ID) = Неопределено Тогда
		стррОбъект.Наименование = "Желаемое время посещения";
		стррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26");
		ВОЭлементСохранить(стррВО, ID, стррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Строка
	ID = Новый УникальныйИдентификатор("A7F5D83C-E157-4337-9170-6310931AB209");
	Если ВОЭлементЗагрузить(стррВО, ID) = Неопределено Тогда
		стррОбъект.Наименование = "Контактная информация";
		стррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D");
		ВОЭлементСохранить(стррВО, ID, стррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Булево
	ID = Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E");
	Если ВОЭлементЗагрузить(стррВО, ID) = Неопределено Тогда
		стррОбъект.Наименование = "Отдать акт сверки";
		стррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E");
		ВОЭлементСохранить(стррВО, ID, стррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Булево
	ID = Новый УникальныйИдентификатор("6A97D7C8-4177-4BD5-8F46-E71F4D914343");
	Если ВОЭлементЗагрузить(стррВО, ID) = Неопределено Тогда
		стррОбъект.Наименование = "Отдать печатный прайс";
		стррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E");
		ВОЭлементСохранить(стррВО, ID, стррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;

Конецпроцедуры	
	
// ПрограммныйИнтерфейс_ОбновлениеОбработки
#КонецОбласти 

// ПрограммныйИнтерфейс
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область РеквизитыОбъекта

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт
	
	ПроверкаРеквизита = Новый Структура(ИмяРеквизита, "2B8C0DC0-38EE-4B6A-883D-F432FCC0C5E1");
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Возврат ПроверкаРеквизита[ИмяРеквизита] <> "2B8C0DC0-38EE-4B6A-883D-F432FCC0C5E1";
	
КонецФункции

// Функция возвращает название реквизита, найденного среди реквизитов метаданных объекта.
// Ищутся названия реквизитов, указанных в параметре стрРеквизиты.
// Если ни один из реквизитов не найден, возвращается Неопределено.
Функция РеквизитОбъектаИзСписка(МетаданныеОбъекта, стрРеквизиты) Экспорт
	
	Результат = Неопределено;
	
	мРеквизиты = СтрРазделить_(стрРеквизиты);
	мтдРеквизиты = МетаданныеОбъекта.Реквизиты;
	Для Каждого стрРеквизит Из мРеквизиты Цикл
		Если мтдРеквизиты.Найти(стрРеквизит) <> Неопределено Тогда
			Результат = стрРеквизит;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Функция возвращает значение реквизита объекта с учетом конфигурации (например, когда
// в разных версиях конфигураций реквизит называется по-разному).
Функция РеквизитОбъекта(ИмяРеквизита)
	
	Значение = гКэшРеквизитыОбъектов.Получить(ИмяРеквизита);
	
	Если Значение = Неопределено Тогда
		
		Если ИмяРеквизита = "Спр_Пользователи_Подразделение" Тогда
			Реквизиты = Метаданные.Справочники.Пользователи.Реквизиты;
			Если Реквизиты.Найти("ТекущееПодразделение") <> Неопределено Тогда
				Значение = "ТекущееПодразделение";
			ИначеЕсли Реквизиты.Найти("Подразделение") <> Неопределено Тогда
				Значение = "Подразделение";
			Иначе
				ВызватьИсключение("Не удалось найти реквизит для объекта: " + ИмяРеквизита);
			КонецЕсли;
		Иначе
			ВызватьИсключение("Функция РеквизитОбъекта(), неизвестный параметр = " + ИмяРеквизита);
			
		КонецЕсли;
		
		гКэшРеквизитыОбъектов.Вставить(ИмяРеквизита, Значение);		
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// РеквизитыОбъекта
#КонецОбласти 

#Область ПреобразованияЦветСтрока

Функция ЦветВСтроку(Цвет)
	
	Возврат СтрЗаменить(Строка(Цвет), " ", "");
	
КонецФункции

Функция ЦветИзСтроки(Знач СтрЦвет)
	
	Если СтрЧислоВхождений(СтрЦвет, ",") <> 2 Тогда // неверный формат значения в СтрЦвет
		СтрЦвет = "0,0,0";
	КонецЕсли;
	
	мЦвета = СтрРазделить_(СтрЦвет, ",");
	
	Красный = СтрокуВЧислоЦвета(мЦвета[0]);
	Зеленый = СтрокуВЧислоЦвета(мЦвета[1]);
	Синий   = СтрокуВЧислоЦвета(мЦвета[2]);
	
	Возврат Новый Цвет(Красный, Зеленый, Синий);
	
КонецФункции

Функция СтрокуВЧислоЦвета(Строка)
	
	СтрРезультат = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Если КодСимвола(Символ) >= 48 И КодСимвола(Символ) <= 57 Тогда
			СтрРезультат = СтрРезультат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(СтрДлина(СтрРезультат) = 0, 0, Число(СтрРезультат) % 256);
	
КонецФункции

// ПреобразованияЦветСтрока
#КонецОбласти 

#Область ФайловаяСистема

Функция КаталогСуществует(ПутьККаталогу)
	
	ОбъектКаталог = Новый Файл(ПутьККаталогу);
	Возврат ОбъектКаталог.Существует() И ОбъектКаталог.ЭтоКаталог();
	
КонецФункции

Функция ФайлСуществует(ПутьКФайлу)
	
	ФайлОбъект = Новый Файл(ПутьКФайлу);
	Возврат ФайлОбъект.Существует();
	
КонецФункции

Функция ФайлИзвлечьИмя(ПутьИИмяФайла)
	
	Результат = "";
	
	Слеш = ?(ЭтоLinuxСервер(), "/", "\");

	Длина = СтрДлина(ПутьИИмяФайла);
	Для Индекс = 1 По Длина Цикл
		Символ = Сред(ПутьИИмяФайла, Длина - Индекс + 1, 1);
		Если Символ = Слеш Тогда
			Прервать;
		Иначе
			Результат = Символ + Результат;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции 

// Проверяет существование каталога, если он не существует, то создается новый.
Функция ПроверитьИСоздатьКаталог(ПутьККаталогу, ПроверитьПослеСоздания = Ложь)

	Если Не КаталогСуществует(ПутьККаталогу) Тогда
		Попытка
			СоздатьКаталог(ПутьККаталогу);
			Если ПроверитьПослеСоздания Тогда
				Возврат КаталогСуществует(ПутьККаталогу);
			КонецЕсли;
		Исключение
			Текст = СтрШаблон_("Не удалось создать папку по пути: ""%1"".", ПутьККаталогу)
				+ Символы.ПС + "Проверьте права доступа к папке и всем подпапкам на %1-сервере.";
			Если ЭтоLinuxСервер() Тогда
				Текст = СтрШаблон_(Текст, "Linux");
			Иначе
				Текст = СтрШаблон_(Текст, "Windows");
			КонецЕсли; 
			ВызватьИсключение(Текст);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Применяется только для сервера.
Функция ДополнитьСлешВПуть(Каталог, Слеш = Неопределено) Экспорт

	Если Слеш = Неопределено Тогда
		Слеш = ?(ЭтоLinuxСервер(), "/", "\");
	КонецЕсли; 
	
	Если Прав(Каталог, 1) <> Слеш Тогда
		Возврат Каталог + Слеш;
	Иначе
		Возврат Каталог;		
	КонецЕсли;

КонецФункции 

// Функция возвращает имя файла обработки
Функция ИмяФайлаОбработки() Экспорт

	Возврат Метаданные().Имя + ".epf";

КонецФункции 

// ФайловаяСистема
#КонецОбласти

#Область КаталогиМодуля

Функция КаталогВременныхФайловАгента()

	Результат = КаталогВременныхФайлов() + "AP20TMP";
	ПроверитьИСоздатьКаталог(Результат);
	
	Результат = ДополнитьСлешВПуть(Результат) + ВыбНастройкиАгента.КаталогОбмена;
	ПроверитьИСоздатьКаталог(Результат);
	
	Возврат ДополнитьСлешВПуть(Результат);
	
КонецФункции

Функция КаталогВременныхФайловДляТранспорта(Подкаталог = "") Экспорт
	
	Каталог = КаталогВременныхФайлов() + "APtmp";
	Результат = ПроверитьИСоздатьКаталог(Каталог, Истина);
	Если Не Результат Тогда
		ВызватьИсключение("Не удалось создать временный каталог для обмена данными: " + Каталог);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Подкаталог) Тогда
		Каталог = ДополнитьСлешВПуть(Каталог) + Подкаталог;
		Результат = ПроверитьИСоздатьКаталог(Каталог, Истина);
		Если Не Результат Тогда
			ВызватьИсключение("Не удалось создать временный подкаталог для обмена данными: " + Каталог);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(Каталог);
	
КонецФункции

Функция КаталогФайловТрековАгента()

	КаталогТреков = ПодкаталогДанных("Треки",, Истина);
	
	КаталогТрековАгента = ДополнитьСлешВПуть(КаталогТреков) + ВыбНастройкиАгента.КаталогОбмена;
	Если Не ПроверитьИСоздатьКаталог(КаталогТрековАгента, Истина) Тогда
		Текст = "Не удалось создать каталог хранения треков для агента ""%1"", каталог - ""%2""!";
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, КаталогТрековАгента);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(КаталогТрековАгента);
	
КонецФункции // КаталогФайловТрекинга()

Функция ПодкаталогиДанных() Экспорт
	//Возврат Новый Структура("КаталогОбмена,Логи,Треки,Входящие,Исходящие,АПДиск", // назначения подкаталогов
	//						"Exchange", "Logs", "Tracks", "In", "Out", "APDisk"); // подкаталоги
	//((av_180806
	Возврат Новый Структура("КаталогОбмена,Логи,Треки,Входящие,Исходящие,АПДиск,Фотографии", // назначения подкаталогов
							"Exchange", "Logs", "Tracks", "In", "Out", "APDisk", "Photoes"); // подкаталоги
	//))av_180806	
КонецФункции

// Функция возвращает подкаталог данных в папке, указанной в реквизите "КаталогДанных" обработки.
//
// Параметры:
//  Назначение			 - Строка - назначение подкаталога каталога, одно (см. функцию ПодкаталогиДанных()).
//  НачальныйПуть		 - Строка, Неопределено - 
//  ПроверитьИСоздать	 - Булево - Если истина, то проверить наличие каталога и создать каталог, если его нет.
// 
// Возвращаемое значение:
//   - Строка - полный путь к подкаталогу, включая финальный слэш.
//
Функция ПодкаталогДанных(Назначение, НачальныйПуть = Неопределено, ПроверитьИСоздать = Ложь) Экспорт
	
	ИмяПодкаталога	= Неопределено;	
	стррПодкаталоги = ПодкаталогиДанных();
	
	Если Не стррПодкаталоги.Свойство(Назначение, ИмяПодкаталога) Тогда
		ВызватьИсключение("Функция ПодкаталогДанных(): неизвестный параметр ИмяСвойства = " + Назначение);
	КонецЕсли;
	
	Путь = ?(НачальныйПуть <> Неопределено, НачальныйПуть, КаталогДанных); // КаталогДанных - реквизит обработки
	Если ЭтоLinuxСервер() Тогда
		Путь = СтрЗаменить(Путь, "\", "/");
	КонецЕсли; 
	
	Результат = ДополнитьСлешВПуть(Путь) + ИмяПодкаталога;
	Если ПроверитьИСоздать Тогда 
		Если Не ПроверитьИСоздатьКаталог(Результат, Истина) Тогда
			Текст = СтрШаблон_("Функция ПодкаталогДанных(): не удалось создать каталог ""%1""!", Результат);
		    ВызватьИсключение(Текст);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ДополнитьСлешВПуть(Результат);
	
КонецФункции

// КаталогиМодуля
#КонецОбласти 

Функция НайтиПоЗначению(Коллекция, Значение)

	Результат = Неопределено;
	
	Для Каждого Элемент Из Коллекция Цикл
		Если Элемент.Значение = Значение Тогда
			Результат = Элемент;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ЭтоLinuxСервер() Экспорт
	
	Если гЭтоLinuxСервер = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		гЭтоLinuxСервер = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		             Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	КонецЕсли; 
				 
	Возврат гЭтоLinuxСервер;
	
КонецФункции

Функция ЭтоСсылкаНаНайденныйОбъект(Ссылка)
	
	Если Ссылка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Стр = НРег(Строка(Ссылка));
		Если Лев(Стр, 1) = "<" И 0 <> Найти(Стр, ">") И 0 <> Найти(Стр, "объект") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ТипСсылки(Ссылка)
	
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			Возврат "Документ";
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		    Возврат "Справочник";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторСсылки(ОбъектСсылка)

	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Строка(ОбъектСсылка.Ссылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции 

#Область ОтборыВыгрузкиСправочниковПоСКД

Функция КомпоновщикНастроекАгента(СхемаКомпоновки) Экспорт

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	// Добавим выбранные поля
	Для Каждого Элемент из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;

	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

	Возврат КомпоновщикНастроек.Настройки;
	
КонецФункции

Функция ЭлементОтбораПоЛевомуЗначению(стрЛевоеЗначение, стрНазванияДополнительныхЭлементов = Неопределено, МенеджерВТ = Неопределено ) // gi_180525 добавлен параметр МенеджерВТ 

	ЭлементОтбора = Неопределено;                                     
	ОтборыАгента = ВыбНастройкиАгента.ВыгружаемыеОбъекты;
	
	Если ТипЗнч(ОтборыАгента) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Текст = НСтр("ru = 'Агент: ""%1"", не заполнены ""Выгружаемые данные""! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	Для Каждого Элемент Из ОтборыАгента.Элементы Цикл
		Если Строка(Элемент.ЛевоеЗначение) = стрЛевоеЗначение Тогда
			ЭлементОтбора = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда // не найден элемент отбора с представлением ПредставлениеОтбора
		Текст = НСтр("ru = 'Агент: ""%1"", не найдено поле СКД ""%2""! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, стрЛевоеЗначение);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	// проверяем существование ссылки в правом значении отбора
	Если ЭлементОтбора.Использование И Не ЭтоСсылкаНаНайденныйОбъект(ЭлементОтбора.ПравоеЗначение) Тогда
		Текст = НСтр("ru = 'Агент: ""%1"", параметр отбора: %2. Найдена ссылка на несуществующий объект: %3! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, стрЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	Если стрНазванияДополнительныхЭлементов <> Неопределено Тогда 
		
		ДопЭлементОтбора = ПолучитьОтборДляДополнительныхЭлементов(стрЛевоеЗначение, ОтборыАгента, стрНазванияДополнительныхЭлементов, МенеджерВТ);
		Если ДопЭлементОтбора <> Неопределено И ЭлементОтбора <> Неопределено Тогда
			мОтборы = Новый Массив;
			мОтборы.Добавить(ЭлементОтбора);
			мОтборы.Добавить(ДопЭлементОтбора);
			Возврат мОтборы;
		ИначеЕсли ДопЭлементОтбора <> Неопределено И ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ДопЭлементОтбора;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ЭлементОтбора;		
	
КонецФункции

Функция ПолучитьОтборДляДополнительныхЭлементов(НазваниеПоляКомпоновки, ОтборыАгента, НазванияДополнительныхЭлементов, МенеджерВТ) // gi_180525

	стррПараметры = Новый Структура("Условие,Запрос,ЭлементОтбора,ВидСправочника", "");
	Если НазваниеПоляКомпоновки = "Номенклатура" Или НазваниеПоляКомпоновки = "Партнеры" Или НазваниеПоляКомпоновки = "ВидыЦен" Тогда
		стррПараметры.ВидСправочника = НазваниеПоляКомпоновки;
	Иначе
		ВызватьИсключение("Функция ПолучитьОтборыДляДополнительныхЭлементов() - неизвестное значение НазваниеПоляКомпоновки = " + НазваниеПоляКомпоновки);
	КонецЕсли; 
	
	мНазвания = СтрРазделить_(НазванияДополнительныхЭлементов);
	мВыбранныеНазванияОтборов = Новый Массив; // gi_180302 Массив названий выбранных отборов, массив используется 
	// для проверки взаимосвязанных значений отборов. Пример связанных отборов - "ТолькоПартнерыИзСпискаТТ" и "СсылкаСписокТТ".
	// Если не задействован отбор "ТолькоПартнерыИзСпискаТТ", то при выгрузке партнеров не учитываем отбор "СсылкаСписокТТ".
	
	Для Каждого Название Из мНазвания Цикл
		
		ВРегНазвание = ВРег(Название);
		стррПараметры.ЭлементОтбора = Неопределено;
		Для Каждого Элемент Из ОтборыАгента.Элементы Цикл // ищем элемент отбора среди элементов отбора в СКД по названию
			Если ВРег(Элемент.ЛевоеЗначение) = ВРегНазвание Тогда
				стррПараметры.ЭлементОтбора = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если стррПараметры.ЭлементОтбора = Неопределено Тогда // Не найдено элемента отбора в СКД,
			Если ВыбНастройкиАгента.Свойство(Название) Тогда // но такой реквизит есть в настройках агента.
				стррПараметры.ЭлементОтбора = Название; // тип значения "Строка" - признак, что значение элемента отбора брать из настроек агента
			КонецЕсли; 
		КонецЕсли; 
		
		ОбработатьДополнительныйЭлементОтбора(стррПараметры, мВыбранныеНазванияОтборов, МенеджерВТ); // gi_180302
	
	КонецЦикла;
	
	Если стррПараметры.Запрос = Неопределено Тогда // не выбрано ни одного параметра, запрос для отбора не требуется
		Возврат Неопределено;
	КонецЕсли; 
	
	//(( gi_180525
	Если МенеджерВТ <> Неопределено Тогда
		стррПараметры.Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	КонецЕсли; 
	//)) gi_180525
		
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	[ВидСправочника].Ссылка
		|ИЗ
		|	Справочник.[ВидСправочника] КАК [ВидСправочника]
		|ГДЕ 
		|	[ВидСправочника].ПометкаУдаления = ЛОЖЬ
		|	[Условие]";
	
	стррЛитералы = Новый Структура("ВидСправочника,Условие");
	ЗаполнитьЗначенияСвойств(стррЛитералы, стррПараметры);
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	
	стррПараметры.Запрос.Текст = ТекстЗапроса;
	мЗначения = стррПараметры.Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); // получили массив отборанных элементов справочника "ВидСправочника"
	
	ЭлементОтбора = ОтборыАгента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); // всегда создаем новый элемент отбора, т.к. используем новое стрЛевоеЗначение
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеПоляКомпоновки);
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
	ЭлементОтбора.ПравоеЗначение = мЗначения;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементОтбора;
	
КонецФункции

Функция ВыражениеУсловияДляЗапроса(ВидСравнения, ИмяПараметра, ПредставлениеПустогоЗначения)
	
	стрРезультат = Неопределено;
	
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		стрРезультат = " = " + ИмяПараметра;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		стрРезультат = " <> " + ИмяПараметра;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		стрРезультат = " В (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		стрРезультат = " НЕ В (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		стрРезультат = " В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		стрРезультат = " НЕ В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		стрРезультат = " В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		стрРезультат = " НЕ В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		стрРезультат = " <> " + ПредставлениеПустогоЗначения;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		стрРезультат = " = " + ПредставлениеПустогоЗначения;
	КонецЕсли;
	
	Возврат стрРезультат;
	
КонецФункции	

// Функция генерирует строку условий для запроса на основании значения отбора. 
// Дополнительно создает сам запрос (если он еще не создан) и устанавливает для него параметры.
// Результат возвращается в свойстве "Условие" переданной структуры.
// 
// Параметры:
//	стррПараметры - Структура - структура со свойствами:
//    * ЭлементОтбора 	- ЭлементОтбораКомпоновкиДанных, Строка:
//			- при типе "ЭлементОтбораКомпоновкиДанных" - элемент поля отбора в СКД в "Выгружаемых данных" агента;
//    		- при типе "Строка" - название свойства агента для отбора партнеров.
//    * ВидСправочника 	- Строка - вид справочника, для которого вызывается запрос.
//    * Условие 		- Строка - строка условий (возвращаемое значение).
//  мВыбранныеНазванияОтборов - Массив - gi_180302 массив строк - названия выбранных ранее отборов
//  МенеджерВТ 			- МенеджерВременнытТаблиц, Неопределено - менеджер ВТ, если требуется из ВТ отобрать промежуточные данные для отбора
//  
Процедура ОбработатьДополнительныйЭлементОтбора(стррПараметры, мВыбранныеНазванияОтборов, МенеджерВТ)
	
	ТиповоеУсловие = Истина; // признак, что условие запроса типовое (отбор по значению поля таблицы)	
	ЭлементОтбора = стррПараметры.ЭлементОтбора;
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Строка") Тогда // правое значение отбора нужно брать из настроек торгового агента (из свойства структуры ВыбНастройкиАгента)
		Название = ЭлементОтбора;
	ИначеЕсли ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		Возврат;
	Иначе
		Название = Строка(ЭлементОтбора.ЛевоеЗначение);   // название элемента отбора
		ЗначениеПараметра = ЭлементОтбора.ПравоеЗначение; // значение параметра отбора
		ИмяПараметра      = Название;                     // название параметра в запросе
	КонецЕсли;
	
	ВключенОтбор = Ложь;
	
	// Отборы для партнеров /////////////////////////////////////////////////////////////////////////////////////////////
	Если Название = "ТолькоПартнерыИзСпискаТТ" Тогда // логический признак - использовать или нет для отбора список торговых точек
		// gi_180302
		Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.ПравоеЗначение = Истина)
			Или (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно И ЭлементОтбора.ПравоеЗначение = Ложь)
		Тогда
			ВключенОтбор = Истина;
		КонецЕсли; 
		
	ИначеЕсли Название = "СсылкаСписокТТ" Тогда // отбор партнеров по списку торговых точек
		// Задействуем только если элемент отбора "элементТолькоПартнерыИзСпискаТТ" установлен равным "Истина" (или неравным "Ложь")
		Если мВыбранныеНазванияОтборов.Найти("ТолькоПартнерыИзСпискаТТ") <> Неопределено Тогда // значит задействован элемент отбора "элементТолькоПартнерыИзСпискаТТ"
			стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ВыбНастройкиАгента.СсылкаСписокТТ); // список ТТ читаем из хранилища
			Если стррОбъект <> Неопределено Тогда
				стрУсловие   = "Партнеры.Ссылка В (&СписокТТ)";			
				ИмяПараметра = "СписокТТ";
				ЗначениеПараметра = стррОбъект.Состав.ВыгрузитьКолонку("Партнер");
				ТиповоеУсловие = Ложь;
			КонецЕсли; 
		КонецЕсли;
		
	//vd_180924 Добавлено условие для выгрузки СегментыПартнеров
	ИначеЕсли Название = "СегментыПартнеров" Тогда // отбор партнеров из регистра ПартнерыСегмента
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |ГДЕ
               |	ПартнерыСегмента.Сегмент [Условие]";
		Условие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&мСегмент", "ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[Условие]", Условие); 
		Запрос.УстановитьПараметр("мСегмент", ЗначениеПараметра);  
		мВыборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");
		ИмяПараметра 		= "мПартнерыИзСегментыПартнеров";
		ЗначениеПараметра 	= мВыборка;
		стрУсловие 			= "Партнеры.Ссылка В (&" + ИмяПараметра + ")";
		ТиповоеУсловие 		= Ложь;
			
	ИначеЕсли Название = "ТолькоПартнерыОсновногоМенеджера" Тогда // булево значение - признак отбора партнеров по атрибуту ОсновнойМенеджер = Агент.Пользователь
		Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.ПравоеЗначение = Истина)
			Или (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно И ЭлементОтбора.ПравоеЗначение = Ложь)
		Тогда
			стрУсловие = "Партнеры.ОсновнойМенеджер = &Пользователь";
			ИмяПараметра = "Пользователь";
			ЗначениеПараметра = ВыбНастройкиАгента.Пользователь;
			ТиповоеУсловие = Ложь;
		КонецЕсли; 
		
	ИначеЕсли Название = "ТипПартнера" Тогда // отбор партнеров по выбранному типу: "Клиент", "Поставщик" или "Конкурент"		
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда // тут значение параметра отбора (правое значение) - это список значений
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				стрУсловие = УсловиеВключенияПартнераПоТипуПартнера(ЗначениеПараметра, "=", "ИЛИ");
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				стрУсловие = УсловиеВключенияПартнераПоТипуПартнера(ЗначениеПараметра, "<>", "И");
			КонецЕсли;
			ИмяПараметра = Неопределено; // для условия по типу партнера параметр запроса не используется
			ТиповоеУсловие = Ложь;
		КонецЕсли; 
		
	ИначеЕсли Название = "ОсновнойМенеджер" Или Название = "РегиональныйМенеджер" Тогда // отбор партнеров по основному менеджеру
		стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)");
		
	ИначеЕсли Название = "БизнесРегион" Тогда // отбор партнеров по основному менеджеру
		стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)");
		
	// Отборы для номенклатуры /////////////////////////////////////////////////////////////////////////////////////////////
	ИначеЕсли Название = "ВидНоменклатуры" Тогда // отбор номенклатуры по виду
		стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)");
		
	ИначеЕсли Название = "ГруппаДоступа" Тогда // отбор номенклатуры по группе доступа
		стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ГруппыДоступаНоменклатуры.ПустаяСсылка)");
		
	ИначеЕсли Название = "ЦеноваяГруппа" Тогда // отбор номенклатуры по ценовой группе
		стрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)");
		
	// gi_180525 Отборы для видов цен /////////////////////////////////////////////////////////////////////////////////////////////
	ИначеЕсли Название = "ТолькоВидыЦенИзСоглашений" Тогда 
		Если ИспользоватьСоглашения() Тогда
			Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.ПравоеЗначение = Истина)
				Или (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно И ЭлементОтбора.ПравоеЗначение = Ложь)
			Тогда
				ВключенОтбор = Истина;
				стрУсловие = "ВидыЦен.Ссылка В (ВЫБРАТЬ ВТ_Соглашения.ВидЦен ИЗ ВТ_Соглашения)";
				ИмяПараметра = Неопределено; // для условия по типу партнера параметр запроса не используется
				ТиповоеУсловие = Ложь;
				МенеджерВТСоглашения(МенеджерВТ); // проверка на существование и создание временной таблица "ВТ_Соглашения" в МенеджерВТ
			КонецЕсли;
		КонецЕсли;
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Иначе
		ВызватьИсключение("Процедура ПодготовитьДополнительныйЭлементОтбора() - Неизвестное значение ЭлементОтбора.ЛевоеЗначение = """ 
			+ Название + """");
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(стрУсловие) Тогда
		мВыбранныеНазванияОтборов.Добавить(Название);
		
		Если ТиповоеУсловие Тогда
			стррПараметры.Условие = стррПараметры.Условие + Символы.ПС + " И " + стррПараметры.ВидСправочника + "." + Название + " " + стрУсловие;		
		Иначе
			стррПараметры.Условие = стррПараметры.Условие + Символы.ПС + " И " + стрУсловие;				
		КонецЕсли; 
		
		Если стррПараметры.Запрос = Неопределено Тогда
			стррПараметры.Запрос = Новый Запрос;
		КонецЕсли; 			
		
		Если ЗначениеЗаполнено(ИмяПараметра) Тогда
			стррПараметры.Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);		
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(стрУсловие) Или ВключенОтбор Тогда
		мВыбранныеНазванияОтборов.Добавить(Название);
	КонецЕсли; 

КонецПроцедуры

// Функция возвращает строку условия для запроса отбора партнеров по типу партнера (элемент отбора "ТипПартнера" в макете СКДВыгружаемыеДанные)
// по логическим реквизитам: Клиент, Поставщик, Конкурент справочника Партнеры.
// Итоговая строка условия может состоять из нескольких сравнений, соединенными операциями "И" или "ИЛИ".
// 
// Параметры:
//	  ПравоеЗначение - СписокЗначений, Строка - значения сравнения (список из значений: "Клиент", "Поставщик", "Конкурент" или одно из значений (Строка)).
//    ОперацияСравнения  - Строка - строка сравнения "==" или "<>"
//    ОперацияСоединения - Cтрока - строка соединения условий "И" или "ИЛИ"
//  
// Возвращаемое значение:
//  Строка - строка условия для запроса отбора партнеров.
//
Функция УсловиеВключенияПартнераПоТипуПартнера(ПравоеЗначение, ОперацияСравнения, ОперацияСоединения)
	
	стрУсловие = "";
	
	мРеквизиты = СтрРазделить_("Клиент,Поставщик,Конкурент");

	КоличествоУсловий = 0;
	ЭтоСписокЗначений = (ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений"));
	Для Каждого ИмяРеквизита Из мРеквизиты Цикл
		Если (ЭтоСписокЗначений И ПравоеЗначение.НайтиПоЗначению(ИмяРеквизита) <> Неопределено) Или ИмяРеквизита = ПравоеЗначение Тогда
			стрУсловие = стрУсловие + ?(ПустаяСтрока(стрУсловие), "", " " + ОперацияСоединения + " ")
				+ "Партнеры." + ИмяРеквизита + " " + ОперацияСравнения + " ИСТИНА ";
				КоличествоУсловий = КоличествоУсловий + 1;
		КонецЕсли; 
	КонецЦикла; 
	
	Если КоличествоУсловий > 1 Тогда // заключаем условия в скобки
		стрУсловие = "(" + СокрЛП(стрУсловие) + ")";	
	КонецЕсли;
	
	Возврат стрУсловие;
	
КонецФункции

Функция СхемаКомпоновкиДанныхДляОбъекта(ТекстЗапроса) Экспорт

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();

	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "Local";

	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;

	Возврат СхемаКомпоновки;
КонецФункции

// ОтборыВыгрузкиСправочниковПоСКД
#КонецОбласти 

// Функция возвращает массив элементов справочника в соответствии с текстом запроса.
// 
// Параметры:
//	ТекстЗапроса - Строка - текст запроса выборки из справочника;
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - элемент (условия) отбора.
//  
// Возвращаемое значение:
//  Массив - элементы справочника.
//
Функция ВыборкаИзСправочника(ТекстЗапроса, ЭлементОтбора = Неопределено)

	Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда // задействован ЭлементОтбораКомпоновкиДанных
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ЭлементОтбора, ТекстЗапроса);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		Возврат ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
	Иначе // условие без отбора данных
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	
КонецФункции

Функция РезультатЗапросаВВидеТЗ(ТекстЗапроса, ОтборыСКД = Неопределено)
	
	Если ОтборыСКД <> Неопределено И ОтборыСКД.Использование Тогда
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ОтборыСКД, ТекстЗапроса);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецФункции

// Функция упаковывает файл выгрузки в архив.
// Возвращает полный путь к архиву, 
// или Неопределено, если архив не удалось создать.
// 
Функция УпаковатьФайл(ИмяФайлаВыгрузки, ИмяАрхиваСКартинками)

	ПарольАрхива  = ""; // СокрЛП(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ПарольНастроек.Значение);
	ПутьИмяАрхива = Лев(ИмяФайлаВыгрузки, СтрДлина(ИмяФайлаВыгрузки) - 3) + "zip";

	Архив = Новый ЗаписьZipФайла(ПутьИмяАрхива, ПарольАрхива,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	Архив.Добавить(ИмяФайлаВыгрузки);


	Если ЗначениеЗаполнено(ИмяАрхиваСКартинками) Тогда
		Архив.Добавить(ИмяАрхиваСКартинками);
	КонецЕсли;
	
#Область ПокаУбрано	

	//Если Не ПустаяСтрока(ПапкаСОтчетом) Тогда
	//	Архив.Добавить(ПапкаСОтчетом, РежимСохраненияПутейZIP.СохранятьОтносительныеПути);
	//	ЭтоВыгрузкаОтчетаПоЗапросу = Истина;
	//Иначе
	//	ЭтоВыгрузкаОтчетаПоЗапросу = Ложь;
	//КонецЕсли;

	//СписокБазДанных = Новый СписокЗначений;

	//// Сформируем файл-манифест
	//ДопНастройкиАгента = ВыбАгент.апНастройкиПриложения.Настройки.Получить();
	//
	//Если (Не ЭтоВыгрузкаОтчетаПоЗапросу) И (Не ДопНастройкиАгента = Неопределено) Тогда
	//	
	//	Для Каждого ВеткаДерева Из ДопНастройкиАгента.Строки Цикл 
	//		//Идентификатор     = ВеткаДерева.Идентификатор;
	//		//ЗначениеКонстанты = ВеткаДерева.Значение;
	//		Ключ			  = ВеткаДерева.Ключ;
	//		
	//		Если Ключ = "Общие" Тогда
	//			Для Каждого ВеткаДерева Из ВеткаДерева.Строки Цикл
	//				ЗначениеКонстанты = ВеткаДерева.Значение;
	//				Ключ			  = ВеткаДерева.Ключ;
	//				
	//				Если Ключ = "СписокБазДанных" Тогда
	//					МассивПодстрок = РазложитьСтрокуНаМассивПодстрок(ЗначениеКонстанты, ";");
	//					Для Сч = 0 По МассивПодстрок.Количество()-1 Цикл
	//						СписокБазДанных.Добавить(МассивПодстрок[Сч]);	
	//					КонецЦикла;
	//				КонецЕсли; //Если Ключ = "СписокБазДанных" Тогда					
	//			КонецЦикла; //Для Каждого ВеткаДерева Из ВеткаДерева.Строки Цикл				
	//		КонецЕсли; //Если Ключ = "Общие" Тогда			
	//	КонецЦикла; //Для Каждого ВеткаДерева Из ДопНастройкиАгента Цикл
	//	
	//КонецЕсли; //Если ДопНастройкиАгента <> Неопределено Тогда

	//Если (Не ЭтоВыгрузкаОтчетаПоЗапросу) И (СписокБазДанных.Количество() > 1) Тогда
	//	
	//	ПутьКФайлуМанифест = ВернутьКаталогВременныхФайлов(ПараметрыОбмена) + "manifest";
	//	
	//	Текст = Новый ЗаписьТекста(ПутьКФайлуМанифест, КодировкаТекста.ANSI);
	//	
	//	Текст.ЗаписатьСтроку("<manifest version=""1"">");
	//	
	//	Для Каждого ТекСтрока Из СписокБазДанных Цикл				
	//		Текст.ЗаписатьСтроку("<import db=" + """" + ТекСтрока + """" + " file=" + """" + "FromCDB.xml""" + " />");				
	//	КонецЦикла;
	//	
	//	Текст.ЗаписатьСтроку("</manifest>");
	//	
	//	Текст.Закрыть();
	//	
	//	Архив.Добавить(ПутьКФайлуМанифест);
	//	
	//КонецЕсли;
	
// ПокаУбрано
#КонецОбласти
	
	Архив.Записать();
	
	Если ФайлСуществует(ПутьИмяАрхива) Тогда
		Результат = ПутьИмяАрхива;
		Попытка
			Если ЗначениеЗаполнено(ИмяАрхиваСКартинками) Тогда
				УдалитьФайлы(ИмяАрхиваСКартинками);
			КонецЕсли; 
			УдалитьФайлы(ИмяФайлаВыгрузки);
		Исключение
		КонецПопытки; 
	Иначе
		Результат = Неопределено;
		ОповеститьОСобытии("Ошибка создания архива: " + ПутьИмяАрхива, "ОшибкаОбмен",, "ТекущийАгент");
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#Область ВыводСообщений

Функция ВывестиИнформацию(СтррИнформация)

	// Заносим в журнал только ошибки
	Если Найти(СтррИнформация.ТипСобытия, "Ошибка") <> 0 Тогда
		Текст = ?(ЗначениеЗаполнено(СтррИнформация.Агент), СокрЛП(СтррИнформация.Агент) + ": ", "") + СтррИнформация.ТекстСообщения;
		ЗаписьЖурналаРегистрации(СтррИнформация.ТипСобытия, УровеньЖурналаРегистрации.Ошибка, Неопределено, СтррИнформация.СсылкаНаОбъект, Текст);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррИнформация.ТекстСообщения);

КонецФункции 

Функция ОповеститьОСобытии(Текст, ТипСобытия = "АПИнформация", СсылкаНаОбъект = Неопределено, Агент = Неопределено)
	
	ТекстСообщения = Текст;
	Если Агент = "ТекущийАгент" Тогда
		Агент = ВыбНастройкиАгента.Пользователь;
	ИначеЕсли Агент = "ТекущийАгентСообщить" Тогда
		Агент = ВыбНастройкиАгента.Пользователь;
		ТекстСообщения = "Агент " + Строка(Агент) + ": " + Текст;
	ИначеЕсли ТипЗнч(Агент) = Тип("Строка") Тогда
		ВызватьИсключение("Функция ОповеститьОСобытии() - неизвестное значение параметра Агент = " + Агент);
	КонецЕсли;
	
	СтррИнформация = Новый Структура("ТекстСообщения,ТипСобытия,СсылкаНаОбъект,Агент", ТекстСообщения, ТипСобытия, СсылкаНаОбъект, Агент);
	ВывестиИнформацию(СтррИнформация);

КонецФункции 

Процедура ВывестиСообщение(СтррРезультат, Текст, ЕстьОшибки = Неопределено)
	
	СтррСообщение = Новый Структура("Описание", Текст);
	СтррРезультат.Сообщения.Добавить(СтррСообщение);
	Если ЕстьОшибки <> Неопределено Тогда
		СтррРезультат.ЕстьОшибки = ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура БотОтправитьСообщение(ТекстСообщения) Экспорт
	
	Бот 	= "apinfo_bot";	// имя бота
	Токен 	= "547075615:AAGeG1hWj2OfZAEsI9URT9gQXH6jiRjG2dc";
	Сервер  = "api.telegram.org";
	//chat_id = "183657029";
	Информация = ТекстСообщения; //" Тестовое информационное сообщение";
	Ресурс = "bot" + Токен + "/getUpdates"; //запустить разово, чтобы получить chat_id.
	//Ресурс = "bot" + Токен + "/sendMessage?chat_id=" + СтрЗаменить(Формат(chat_id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text= " + Информация;
	Соединение  =  Новый HTTPСоединение(Сервер, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
	Запрос = Новый HTTPЗапрос(Ресурс);
	Ответ = Соединение.Получить(Запрос);
	ДвоичныеДанныеОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные();
	
КонецПроцедуры

//Процедура ОтправитьСообщениеТелеграм(Сообщение)
//	
//	Сервер = "api.telegram.org";
//	Ресурс = "bot" + ТокенБота + "/sendMessage?chat_id=" + СтрЗаменить(Формат(ИдентификаторЧата, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text= " + Сообщение;
//    Соединение  =  Новый HTTPСоединение(Сервер, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
//    Запрос = Новый HTTPЗапрос(Ресурс);
//    Ответ = Соединение.Получить(Запрос);
//    ДвоичныеДанныеОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные();
//	
//КонецПроцедуры


// ВыводСообщений
#КонецОбласти 

#Область ИдентификаторыПеречислений

Функция ПолучитьЗначениеПеречисленияПоИдентификатору(ВидПеречисления, Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда 
		Возврат Неопределено;
	КонецЕсли; 										

	ПопыткаСоздатьТаблицыПеречислений();
	
	СтрокаТ = гТаблицыПеречислений[ВидПеречисления].Найти(ВРег(Идентификатор), "Идентификатор");
	Если СтрокаТ = Неопределено Тогда
		ВызватьИсключение("Функция ПолучитьЗначениеПеречисленияПоИдентификатору(), неизвестный Идентификатор = " + Идентификатор);
	КонецЕсли;
	
	Возврат СтрокаТ.Значение;
	
КонецФункции

Функция ПолучитьИдентификаторПеречисленияПоЗначению(ВидПеречисления, Значение)

	ПопыткаСоздатьТаблицыПеречислений();
	
	СтрокаТ = гТаблицыПеречислений[ВидПеречисления].Найти(Значение, "Значение");
	Если СтрокаТ = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаТ.Идентификатор;
	КонецЕсли;
	
КонецФункции

Процедура ПопыткаСоздатьТаблицыПеречислений()
	
	Если гТаблицыПеречислений <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	гТаблицыПеречислений = Новый Структура("ТипыКонтактнойИнформации,ФормыОплаты");
	
	//vd_180330 ВидыДоставки.
	гТаблицыПеречислений.Вставить("СпособыДоставки");		
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	
	Для Каждого Элемент Из гТаблицыПеречислений Цикл
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока); //идентификатор значения перечисления в МТ
		ТЗ.Колонки.Добавить("Значение"); 						  //значение перечисления в УТ
		гТаблицыПеречислений[Элемент.Ключ] = ТЗ;
	КонецЦикла;
	
	ТЗ = гТаблицыПеречислений.ТипыКонтактнойИнформации;
	ДобавитьЗначениеПеречисления(ТЗ, "a4d0f540-64ed-4f3e-b2bb-818da38f5ab2", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ДобавитьЗначениеПеречисления(ТЗ, "52477200-af54-405b-9888-14b8bded0e19", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ДобавитьЗначениеПеречисления(ТЗ, "2c2cfc86-e2a0-414d-a116-5acadac53437", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ДобавитьЗначениеПеречисления(ТЗ, "e45419b3-0cfd-47ce-8b24-7037a1e86aed", Перечисления.ТипыКонтактнойИнформации.Другое);
	ДобавитьЗначениеПеречисления(ТЗ, "8fc8f351-14f0-48eb-952a-38bb313b28d5", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	// Для видов оплаты использованы случайные идентификаторы, т.к. в мобильном приложении это справочник.
	// Это же соответствие используется при выгрузке видов оплат в мобильное приложение в процедуре "Выгрузка дополнительной информации"
	ТЗ = гТаблицыПеречислений.ФормыОплаты;
	ДобавитьЗначениеПеречисления(ТЗ, "4a73372b-48e3-4874-8b87-b964d5782e25", Перечисления.ФормыОплаты.Наличная);
	ДобавитьЗначениеПеречисления(ТЗ, "7e6a8955-0b5b-4a3d-9446-acce667ed741", Перечисления.ФормыОплаты.Безналичная);
	ДобавитьЗначениеПеречисления(ТЗ, "f2cf11e4-d6cc-4986-a5a2-0a440301876c", Перечисления.ФормыОплаты.Взаимозачет);
	ДобавитьЗначениеПеречисления(ТЗ, "bd9e3958-1e52-4d37-9685-6083e249702f", Перечисления.ФормыОплаты.ПлатежнаяКарта);
	
	//vd_180402 ВидыДоставки. Значение сохраняются в хранилище в форме НастройкиМодуля.
	ТЗ = гТаблицыПеречислений.СпособыДоставки;	
	ИмяНастройки	  = "GUIDПеречисленийСпособыДоставки";
	ЗначениеНастройки = ПрочитатьЗначениеНастройки(ИмяНастройки);
	Если ЗначениеНастройки <> Неопределено Тогда
		Для Каждого Элемент Из ЗначениеНастройки Цикл
			ДобавитьЗначениеПеречисления(ТЗ, Элемент.Значение, Элемент.Ключ);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьЗначениеПеречисления(ТЗ, Идентификатор, Значение)
	
	СтрокаТ = ТЗ.Добавить();
	СтрокаТ.Идентификатор = ВРег(Идентификатор);
	СтрокаТ.Значение 	  = Значение;
	
КонецПроцедуры

//vd_180330 Добавил.
Процедура ЗаполнитьИСохранитьТЗСпособыДоставки (ТЗ)
	
	КлючНастроекОбмена   = КлючНастроекОбмена();
	КлючНастроек		 = "GUIDПеречисленийСпособыДоставки";
	ПользовательНастроек = ПользовательНастроек();
	
	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, КлючНастроек,, ПользовательНастроек);
    Если ЗначениеНастройки = Неопределено Тогда
		ЗначениеНастройки = Новый Соответствие;
	КонецЕсли;
	
	ПеречисленияВКонфигурации   = Перечисления.СпособыДоставки;
	ПеречисленияВХранилищеНовые = Новый Соответствие; //Если соответствие пустое, то значения в хранилище соответствуют значениям в конфигурации
	
	//Заполняет ТЗ
	Для Каждого Элемент Из ПеречисленияВКонфигурации Цикл
		
		гуидПеречисления = ЗначениеНастройки.Получить(Элемент);	
		
		Если гуидПеречисления = Неопределено Тогда
			гуидПеречисления = Новый УникальныйИдентификатор();
			ПеречисленияВХранилищеНовые.Вставить(Элемент, гуидПеречисления); 
		КонецЕсли;			
			
		ДобавитьЗначениеПеречисления(ТЗ, гуидПеречисления, Элемент);	
					
	КонецЦикла;
	
	//Сохранить в хранилище гуиды перечислений, если их нет в хранилище.
	Если ПеречисленияВХранилищеНовые.Количество() > 0 Тогда	
		Для Каждого Элемент Из ПеречисленияВКонфигурации Цикл
			ПоискЗначения = ПеречисленияВХранилищеНовые.Получить(Элемент);
			Если ПоискЗначения <> Неопределено Тогда
				ПеречисленияВХранилищеНовые.Вставить(Элемент, ПоискЗначения);	
			КонецЕсли;
		КонецЦикла;
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена, КлючНастроек, ПеречисленияВХранилищеНовые,, ПользовательНастроек);
	КонецЕсли;	
КонецПроцедуры

// ИдентификаторыПеречислений
#КонецОбласти 

#Область ИдентификаторыВидовСправочниковИДокументов

// Процедура создает таблицы соответствия видов документов и справочников между МТ и УТ.
// Таблицы соответствий используются в процедурах ПолучитьВсеВидыОбъектовДляМУ(), ПолучитьВсеВидыОбъектовДля1С(), ВидОбъектаПоИдентификатору()...
// Важно правильно соблюдать регистры в названиях видов объектов!
Процедура ПопыткаСоздатьТаблицыВидовОбъектов()

	Если гТаблицыВидовОбъектов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррТаблицы = Новый Структура("Документ,Справочник");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор"); // sd_24082017
		
	Для Каждого Элемент Из стррТаблицы Цикл
		тз = Новый ТаблицаЗначений;
		тз.Колонки.Добавить("ВидДляМТ",  	 ОписаниеТипаСтрока); //вид документа/справочника в МТ	
		тз.Колонки.Добавить("Представление", ОписаниеТипаСтрока); //представление вида документа/справочника в МТ		
		тз.Колонки.Добавить("Вид",  		 ОписаниеТипаСтрока); //вид документа/справочника в УТ
		тз.Колонки.Добавить("ИдентификаторВида", 	ОписаниеТипаИдентификатор); // sd_24082017 //идентификатор вида документа/справочника в МТ // gi_170902 - изменено название колокни с "Идентификатор" на "ИдентификаторВида"
		тз.Колонки.Добавить("ИнтерактивноОчищать", 	ОписаниеТипаБулево); //признак интерактивного выбора флага "Очищать перед загрузкой"
		стррТаблицы[Элемент.Ключ] = тз;
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////
	// виды документов в МТ      
	тз = стррТаблицы.Документ; 
	ДобавитьСвойстваВидаОбъекта(тз, "Заказ",, 			"ЗаказКлиента", 		   		"e01e1f5c-d6e4-46e8-b923-3758b0d79bde");
	ДобавитьСвойстваВидаОбъекта(тз, "ПКО",, 			"ПриходныйКассовыйОрдер",  		"749be2e0-9b00-4d7b-9d4d-88ca53327511");
	ДобавитьСвойстваВидаОбъекта(тз, "РКО",, 			"РасходныйКассовыйОрдер",  		"3890d435-96ba-4481-abc0-23782e15b32f");
	ДобавитьСвойстваВидаОбъекта(тз, "Реализация",,		"РеализацияТоваровУслуг",  		"7ffb418c-73c9-4883-91c5-827fa5145a3a");
	ДобавитьСвойстваВидаОбъекта(тз, "Перемещение",,		"ПеремещениеТоваров",	   		"77525c87-cb2f-405e-a92e-6f373edeece7"); 				// sd_22082017
	ДобавитьСвойстваВидаОбъекта(тз, "ВозвратТоваров", 	"Возврат товаров", "ВозвратТоваровОтКлиента", "4971b041-beab-4fa6-b1e8-10138f04fe44");
	ДобавитьСвойстваВидаОбъекта(тз, "Посещение",, 		"_",  			   				"9f147c59-5ee8-4550-8289-12ecfe5d0617"); 				// знак "_" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)
	ДобавитьСвойстваВидаОбъекта(тз, "Мерчендайзинг",, 	"_",  		  					"61dee5fe-d0a8-4842-a6af-a8d33f298845"); 				// знак "_" - признак виртуального документа ...
	ДобавитьСвойстваВидаОбъекта(тз, "Долг",, 			"_Взаиморасчеты",		   		"a93aadfa-2a35-40fe-b88a-3768825cdd31", Ложь); 			// знак "_" - признак виртуального документа ... // ??? - это не виртуальные документы, разобраться
	ДобавитьСвойстваВидаОбъекта(тз, "Маршрут",, 		"_Маршрут",		   		   		"43920fa1-745d-4499-84af-7000672ceeff", Ложь); 			// знак "_" - признак виртуального документа ... // ???
	ДобавитьСвойстваВидаОбъекта(тз, "ВнеплановыйМаршрут",,"_ВнеплановыйМаршрут",   		"27205d6e-e956-4c06-aa21-9b573f5d752f", Ложь); 			// знак "_" - признак виртуального документа ...
	ДобавитьСвойстваВидаОбъекта(тз, "СчетФактура","Счет-фактура","СчетФактураВыданный", "d7d70de1-4f98-4153-82f1-12c84ebf81a5", Ложь);
	ДобавитьСвойстваВидаОбъекта(тз, "Поступление",,	ВидДокументаПоступлениеТоваровУслуг(), "c9850d61-bc15-445a-8b1a-e328cc45ddae", Ложь);
	ДобавитьСвойстваВидаОбъекта(тз, "Задание",, 		"_",  			   				"b49074d6-3c0c-4361-b71d-bbf446ab02b6"); 				// vd_190403 знак "_" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)
	
	
	/////////////////////////////////////////////////////////////////////////
	// виды справочников в МТ  
	тз = стррТаблицы.Справочник; 
	ДобавитьСвойстваВидаОбъекта(тз, "Организации",,,									"0e3cbaea-5467-45cd-8c86-fb1777da435b");
	ДобавитьСвойстваВидаОбъекта(тз, "ТипыЦен","Типы цен","ВидыЦен", 					"00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59");
	ДобавитьСвойстваВидаОбъекта(тз, "ВидыОплат","Виды оплат","*",						"04977681-ebaf-4589-b6e7-93e883333db7", Ложь);
	ДобавитьСвойстваВидаОбъекта(тз, "Склады",,, 										"2516ffce-f46f-4326-be00-438ef0871d30");
	ДобавитьСвойстваВидаОбъекта(тз, "Договоры",,ВидСправочника1СДляВыгрузкиДоговоров(),	"735a9ce5-dcc1-4d1a-8f8d-643a50a6befc");
	ДобавитьСвойстваВидаОбъекта(тз, "Сегменты",,"*",									"b08784c4-5b74-4685-88b5-a17ea105ae48", Ложь); // связи сегментов партнеров и соглашений в УТ, пока не используется (03.12.17)
	ДобавитьСвойстваВидаОбъекта(тз, "Номенклатура",,, 									"d6d52ada-0f38-4112-af3c-2f1e425a43d1");
	ДобавитьСвойстваВидаОбъекта(тз, "ХарактеристикиНоменклатуры", "Характеристики номенклатуры",, 	"cc552c31-f7de-4259-a6e3-66ef765d3b43");
	ДобавитьСвойстваВидаОбъекта(тз, "ЕдиницыИзмерения","Единицы измерения",,			"80452c60-b442-4da9-a048-42f63270ca14");
	ДобавитьСвойстваВидаОбъекта(тз, "ПерсональныеЦены","Персональные цены","*",			"12215e0a-385d-441a-8e98-1b6e0206143f");
	ДобавитьСвойстваВидаОбъекта(тз, "КатегорииДокументов","Категории документов", "*", 	"f997f837-8721-4896-8fe8-3497c6c38206");       // знак "*" в параметре Вид - признак отсутствующего аналогичного справочника в УТ
	ДобавитьСвойстваВидаОбъекта(тз, "СтатусыКонтрагентов","Статусы контрагентов", "*", 	"74046d94-b25d-4f3a-b553-27b7fdd3c60c"); 
	ДобавитьСвойстваВидаОбъекта(тз, "Запросы",,"*", 									"cc458719-5078-4dc8-9a0c-fa19e3904f39"); 
	ДобавитьСвойстваВидаОбъекта(тз, "ИсторияПродаж","История продаж","*", 				"af9faa26-9638-41c5-bfce-9514e670ef2e", Ложь); 
	ДобавитьСвойстваВидаОбъекта(тз, "КонтактныеЛица","Контактные лица","КонтактныеЛицаПартнеров", 	"cf387a58-4655-41b5-a460-85884d1f20d0");
	ДобавитьСвойстваВидаОбъекта(тз, "КонтактнаяИнформация","Контактная информация","ВидыКонтактнойИнформации",	"85b62882-0156-4881-85ba-b8fef05c867b"); 	// sd_10082017 для загрузки в УТ имя спр ВидыКонтактнойИнформации, загружаются отдельно
	ДобавитьСвойстваВидаОбъекта(тз, "ВидыКонтактнойИнформации","Виды контактной информации",, 		"564e0eca-c498-4d28-83d7-4bdeaec558e2"); 				// sd_10082017 для выгрузки в МТ
	ДобавитьСвойстваВидаОбъекта(тз, "ФотоСправочников","Фото справочников","*",			"e01cf3a3-6765-4fd3-801c-ccdbf85c78fc");
	ДобавитьСвойстваВидаОбъекта(тз, "ФотоДокументов","Фото документов","*",				"05ea7926-febb-4d82-97fc-19294dd5dd29");       // gi_180414 - для загрузки фотографий из МУ
	ДобавитьСвойстваВидаОбъекта(тз, "ПечатныеФормыДокументов",,"*",						"17b09c65-5b6c-40d1-8616-3a655b99da8d", Ложь);
	ДобавитьСвойстваВидаОбъекта(тз, "ПечатныеФормыОрганизаций",,"*",					"c7b2883c-d872-4d19-8b32-e7cefaaceaca", Ложь);
	ДобавитьСвойстваВидаОбъекта(тз, "НастройкиОбмена",,"*",								"b20a258f-ffb6-49b4-b0fd-9853760cf70c", Ложь); // gi_180414 - добавлен параметр Вид = "*"
	ДобавитьСвойстваВидаОбъекта(тз, "Штрихкоды","Штрих-коды","*",						"c156cc98-8b92-444e-b8c2-e3de51106b66", Ложь);
	ДобавитьСвойстваВидаОбъекта(тз, "РезультатыПосещений",,"_",							"ffd68f37-4bdd-4692-8ab2-a22964f602b1", Ложь); // gi_180414 - добавлен параметр Вид = "_" - виртуальный справочник
	ДобавитьСвойстваВидаОбъекта(тз, "ШаблоныАнкет",,"_",								"29eea217-9f75-4994-941e-cab18f53a860", Ложь); // gi_180414 - добавлен параметр Вид = "_" - виртуальный справочник	
	ДобавитьСвойстваВидаОбъекта(тз, "ВидыДоставки", "Виды доставки","СпособыДоставки",	"E4623B4E-2F19-47AB-B158-EE0E021D3911", Ложь); // vd_180330 ВидыдДоставки
	ДобавитьСвойстваВидаОбъекта(тз, "Соответствия",,,									"AFE27FC7-B90E-4F33-A4C6-3759314657A7");       // vd_180711 Добавлена выгрузка справочника, необходим для выгрузки в режиме "Рекомендуемый".
	ДобавитьСвойстваВидаОбъекта(тз, "ПланыПродаж", "Планы продаж",,						"41598C02-F788-48A7-A039-645EF74BD57F");       // vd_180718 Добавлена выгрузка справочника.
	ДобавитьСвойстваВидаОбъекта(тз, "СоставПланаПродаж", "Состав плана продаж",,		"6B5D547E-B683-4990-89CD-61D0F8497A9C");	   // vd_180718 Добавлена выгрузка справочника.
	ДобавитьСвойстваВидаОбъекта(тз, "ВидыЗадач", "Виды задач",,							"A00B7107-5700-4E02-97F6-C577E707E21F");	   // vd_190402 Добавлена выгрузка справочника.

	
	//vd_180710 добавлены условия РежимВыгрузкиРекомендуемый
	стрТорговыеТочки = ?(РежимВыгрузкиРекомендуемый , "Партнеры", "Контрагенты");
	ДобавитьСвойстваВидаОбъекта(тз, "ТорговыеТочки","Торговые точки", стрТорговыеТочки,	"d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48");
	стрКонтрагенты = ?(РежимВыгрузкиРекомендуемый , "Контрагенты", "Партнеры");
	ДобавитьСвойстваВидаОбъекта(тз, "Контрагенты",,стрКонтрагенты,						"9450980f-fb59-47e3-bae2-aa3c58441b1a");


	гТаблицыВидовОбъектов = стррТаблицы;
	
КонецПроцедуры

// Фунция возвращает вид объекта в УТ 11 в соответствии с идентификатором вида объекта в МТ.
//
// Параметры:
//	ИдентификаторВида - УникальныйИдентификатор - (GUID) идентификатор вида документа в МТ. // gi_170902: изменен тип из "Строка" на "УникальныйИдентификатор".
//	Для1С		  	- Булево - Указывается для какой системы необходимо определить вид объекта, если значение Ложь то будет возвращен вид объекта для МТ.
//	КорневойВид   	- Строка - К какому типу метаданных принадлежит идентификатор вида объекта в МТ, "Справочник" или "Документ".
//	
Функция ВидОбъектаПоИдентификатору(ИдентификаторВида, Для1С = Истина, КорневойВид = "Справочник") Экспорт // sd_20082017 Добавил описание параметров и третий входящий параметр
	
	СвойстваВида = СвойстваВидаОбъекта(ИдентификаторВида, "ИдентификаторВида", КорневойВид); // sd_24082017 (ИдентификаторВида); // sd_24082017 // gi_170902 изменено значение параметра с "Идентификатор" на "ИдентификаторВида"
	Если СвойстваВида <> Неопределено Тогда
		СвойстваВида = ?(Для1С, СвойстваВида.Вид, СвойстваВида.ВидДляМТ);
	КонецЕсли;
	
	Возврат СвойстваВида;
	
КонецФункции

// Функция вовзращает представдение вида Документа или Справочника для указания в комментарии в файле выгрузки
//
// Параметры:
//	КорневойВид - Строка - значения "Документ" или "Справочник".
//	СвойстваВида - СтрокаТаблицыЗначений - строка ТЗ объекта гТаблицыВидовОбъектов.Документ или гТаблицыВидовОбъектов.Справочник.
//
Функция ПредставлениеВида(КорневойВид, СвойстваВида)
	
	Результат = КорневойВид + "." + СвойстваВида.ВидДляМТ;
	Если СвойстваВида.ВидДляМТ <> СвойстваВида.Вид Тогда
		Результат = Результат + " (" + СвойстваВида.Вид + ")";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает строку ТЗ гТаблицыВидовОбъектов.Документ или гТаблицыВидовОбъектов.Справочник, 
// найдя ее по заданным значению и имени колонки.
//
// Параметры:
//	Значение - Строка, УникальныйИдентификатор - искомое значение.
//	Имя - Строка - название свойства (колонки) таблицы для поиска значения.
//	КорневойВид - Строка - значения Неопределено, или "Документ", или "Справочник". 
//						   Если указано Неопределено, то в параметре возвращается строка "Документ" или "Справочник".
//	
Функция СвойстваВидаОбъекта(Значение, Имя, КорневойВид = Неопределено)
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Если КорневойВид = Неопределено Тогда // Значит в параметре Значение передана строка вида "Документ.X" или "Справочник.X"
		Поз = Найти(Значение, ".");
		Если Поз <> 0 Тогда
			КорневойВид 	= Лев(Значение, Поз-1);
			ИскатьЗначение 	= Сред(Значение, Поз+1);
		КонецЕсли;
	Иначе 							// Значит в параметре КорневойВид передана строка "Документ" или "Справочник",
		ИскатьЗначение = Значение; 	// а в параметре Значение - название вида документа или справочника.
	КонецЕсли;
		
	Если КорневойВид <> "Справочник" И КорневойВид <> "Документ" Тогда
		ВызватьИсключение("Процедура СвойстваВидаОбъекта() - неверный параметр Значение = " + Значение + " - "
			+ Символы.ПС + "Значение должно начинаться с ""Документ."" или ""Справочник.""!");
	КонецЕсли;
	
	// sd_25082017 Перенес условие ниже, чтобы не перезаписывалось значение перем "ИскатьЗначение", когда передается другое значение.
	Если Имя = "ИдентификаторВида" Тогда // в колонке "ИдентификаторВида" хранятся значения типа УникальныйИдентификатор // gi_170902 изменено значение переменной с "Идентификатор" на "ИдентификаторВида"
		ИскатьЗначение = ?(ТипЗнч(Значение) = Тип("Строка"), Новый УникальныйИдентификатор(Значение), Значение);
	КонецЕсли;
	
	СтрокаТ = гТаблицыВидовОбъектов[КорневойВид].Найти(ИскатьЗначение, Имя); // результат может быть равен Неопределено
	//Если СтрокаТ = Неопределено Тогда // gi_180220 убрал, чтобы исключить ошибку не-распознания видов документов, загружаемых от изменненой МТ
	//	ВызватьИсключение("Функция СвойстваВидаОбъекта(), неизвестное Значение = " + Значение);
	//КонецЕсли;
	
	Возврат СтрокаТ;	
	
КонецФункции

// Процедура добавляет свойства в таблицу соответствия видов документов и справочников между МТ и УТ.
//
// Параметры:
//	ТЗ 					- Таблица значений 	- таблица соответствий для документов или справочников.
//	ВидДляМТ			- Строка			- вид справочника/документа в МТ. Важно правильно соблюдать регистр в названии!
//	ПредставлениеДляМТ  - Строка			- представление справочника/документа в МТ.
//	Вид					- Строка			- вид справочника/документа в УТ. Возможные значения:
//												- ""  - вид справочника/документа в УТ такой же, как и в МТ;
//												- "*" - аналогичный справочник/документ в УТ отсутствует (значение преобразуется в строку вида: "*" + ВидДляМТ);
//												- "_" - аналогичный справочник/документ в УТ отсутствует, но виртуализируется средствами модуля (значение преобразуется в строку вида: "_" + ВидДляМТ);
//												- другие значения - вид справочника/документа в УТ.
//	Идентификатор		- Строка			- уникальный идентификатор справочника/документа в МТ.
//	ИнтерактивноОчищать	- Булево			- признак интерактивного выбора флага "Очищать перед загрузкой". 
//
Процедура ДобавитьСвойстваВидаОбъекта(ТЗ, ВидДляМТ, ПредставлениеДляМТ = "", Вид = "", ИдентификаторВида, ИнтерактивноОчищать = Истина)
	
	СтрокаТ = ТЗ.Добавить();
	СтрокаТ.ВидДляМТ 	  = ВидДляМТ;
	СтрокаТ.Представление = ?(ПредставлениеДляМТ = "", ВидДляМТ, ПредставлениеДляМТ);
	//(( gi_180414 - модификация для отсутствующих в УТ видов справочников/документов
	Если Вид = "" Тогда
		СтрокаТ.Вид = ВидДляМТ;
	ИначеЕсли Вид = "*" Или Вид = "_" Тогда
		СтрокаТ.Вид = Вид + ВидДляМТ;
	Иначе
		СтрокаТ.Вид = Вид;
	КонецЕсли;
	//)) gi_180414
	СтрокаТ.ИдентификаторВида 	= Новый УникальныйИдентификатор(ИдентификаторВида); // sd_24082017 // gi_170902 изменено название свойства с "Идентификатор" на "ИдентификаторВида"
	СтрокаТ.ИнтерактивноОчищать = ИнтерактивноОчищать;
	
КонецПроцедуры

Функция ПолучитьВсеВидыОбъектовДляМУ(КорневойВид, ИнтерактивноОчищать = Неопределено) Экспорт
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Список = Новый СписокЗначений;	
	ТЗ = гТаблицыВидовОбъектов[КорневойВид];
	Для Каждого СтрокаТ Из ТЗ Цикл
		Если ИнтерактивноОчищать = Неопределено Или ИнтерактивноОчищать = СтрокаТ.ИнтерактивноОчищать Тогда
			Список.Добавить(СтрокаТ.ВидДляМТ, СтрокаТ.Представление);
		КонецЕсли; 
	КонецЦикла;

	Возврат Список;
	
КонецФункции

Функция ПолучитьВсеВидыОбъектовДля1C(КорневойВид, Режим = Неопределено) Экспорт
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Список = Новый СписокЗначений;	
	ТЗ = гТаблицыВидовОбъектов[КорневойВид];
	Если Режим = Неопределено Тогда
		Для Каждого СтрокаТ Из ТЗ Цикл		
			Если Лев(СтрокаТ.Вид, 1) <> "_" Тогда
				Список.Добавить(СтрокаТ.Вид, СтрокаТ.Представление);
			КонецЕсли;
		КонецЦикла;	
		
	ИначеЕсли Режим = "СоздаваемыеВМУ" И КорневойВид = "Документ" Тогда
		Для Каждого СтрокаТ Из ТЗ Цикл		
			Если Лев(СтрокаТ.Вид, 1) <> "_" Или СтрокаТ.Вид = "_Мерчендайзинг" Или СтрокаТ.Вид = "_Посещение" Тогда
				Список.Добавить(СтрокаТ.Вид, СтрокаТ.Представление);
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		Текст = СтрШаблон_("ПолучитьВсеВидыОбъектовДля1C(): недопустимая комбинация параметров КорневойВид = ""%1"", Режим = ""%2"".", КорневойВид, Режим);
		ВызватьИсключение(Текст);
		
	КонецЕсли; 
	
	//vd_190312
	Если Метаданные.Документы.Найти("СчетФактураВыданный") = Неопределено Тогда
		//Удалить Счет-фактура для украинской УТ
		ЭлементСчетФактура = Список.НайтиПоЗначению("СчетФактураВыданный");
		Если ЭлементСчетФактура <> Неопределено Тогда
			Список.Удалить(ЭлементСчетФактура);	
		Конецесли;
	КонецЕсли;

	Возврат Список;
	
КонецФункции

Функция ВидДокументаПоступлениеТоваровУслуг() Экспорт

	Если гВидДокументаПоступлениеТоваровУслуг = Неопределено Тогда
		Если Метаданные.Документы.Найти("ПоступлениеТоваровУслуг") <> Неопределено Тогда
		    гВидДокументаПоступлениеТоваровУслуг = "ПоступлениеТоваровУслуг";
		ИначеЕсли Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") <> Неопределено Тогда
			гВидДокументаПоступлениеТоваровУслуг = "ПриобретениеТоваровУслуг";
		Иначе
			Текст = СтрШаблон_("Для текущей конфигурации ""%1"" не удалось определить вид документа ""ПоступлениеТоваровУслуг"".", Метаданные.Синоним);
			ВызватьИсключение(Текст);
		КонецЕсли; 
	КонецЕсли; 

	Возврат гВидДокументаПоступлениеТоваровУслуг;

КонецФункции 

// Функция определяет какой справочник в 1С ассоциировать со справочником "Договоры" в МТ - "СоглашенияСКлиентами" или "ДоговорыКонтрагентов".
Функция ВидСправочника1СДляВыгрузкиДоговоров()

	Если ИспользоватьДоговорыИлиСоглашения = Неопределено Тогда
		ИспользоватьДоговорыИлиСоглашения = ПрочитатьЗначениеНастройки("ИспользоватьДоговорыИлиСоглашения");
	КонецЕсли; 
	
	Если ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" Тогда
		Возврат "ДоговорыКонтрагентов";
	Иначе
		Возврат "СоглашенияСКлиентами"; // даже если значение ИспользоватьДоговорыИлиСоглашения пустое, считаем ассоциирование с "СоглашенияСКлиентами"
	КонецЕсли; 

КонецФункции

// ИдентификаторыВидовСправочниковИДокументов
#КонецОбласти

#Область СоответствияКонстант_МТ_УД

Функция КонстантыМТПолучитьСоответствие()

	ствРезультат = Новый Соответствие; // GUID считываемых констант и их названия
	ствРезультат.Вставить("79c698db-3c55-465e-acfe-4741acdd5655", "АгентЗагрузки");
	ствРезультат.Вставить("cf41ba05-a4ee-4492-9a2c-c96394c4864a", "КодЗапроса");
	
	Возврат ствРезультат;
	
КонецФункции 

Функция КонстантыМТПолучитьGUID(ИмяКонстанты)

	ствКонстанты = КонстантыМТПолучитьСоответствие();
	Элемент = НайтиПоЗначению(ствКонстанты, "АгентЗагрузки");
	Если Элемент = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Элемент.Ключ;
	КонецЕсли; 

КонецФункции 

// СоответствияКонстант_МТ_УД
#КонецОбласти

#Область ВиртуальныеОбъекты
// Виртуальные объекты (ВО)  - это виртуальные документы и виртуалные справочники.

#Область ВиртуальныеОбъекты_Надстройка
// Функции в области - надстройка над виртуальными документами и виртуальными справочниками - класс-обертка.
// Любая функция/процедура модуля применима и к виртуальному документу и к виртуальному справочнику.

#Область ВиртуальныеОбъекты_Надстройка_Форма

// Процедура дополняет контекст формы виртуального объекта (формы списка и формы элемента - справочника, документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ВидОбъекта - Строка - вид виртуального объекта.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВОКонтекстФормыДополнить(СтррКонтекст, ВидОбъекта, ДляФормыСписка) Экспорт
	
	стррВО = ВОСвойстваОбъекта(ВидОбъекта);
	
	СтррКонтекст.Вставить("ВО", стррВО); 							// ссылка на системные свойства виртуального объекта
	СтррКонтекст.Вставить("КодыИконок", ВОТЗИконкиСтатуса(стррВО));
	СтррКонтекст.Вставить("ЭтоФормаСписка", ДляФормыСписка);
	
	СтррКонтекст.Вставить("СпрТоргТочки"); 							// KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек	
	
	Если стррВО.КорневойВид = "Документ" Тогда
		ВДокКонтекстФормыДополнить(СтррКонтекст);
	ИначеЕсли стррВО.КорневойВид = "Справочник" Тогда
		ВСпрКонтекстФормыДополнить(СтррКонтекст);
	Иначе
		ВызватьИсключение("Процедура ВОКонтекстФормыДополнить() - неизвестное значение свойства КорневойВид = " + стррВО.КорневойВид);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при создании формы элемента виртуального объекта.
// Должна вызываться после вызова ПрочестьОбъектИзХранилища() и ВОКонтекстФормыДополнить().
Процедура ВОПриСозданииФормыЭлемента(Модуль) Экспорт
	
	Параметры    = Модуль.Параметры;
	СтррКонтекст = Модуль.СтррКонтекст;
	
	Если Параметры.Свойство("Статус") Тогда
		Модуль.Статус = Параметры.Статус;
	ИначеЕсли Параметры.Свойство("Проведен") И Параметры.Свойство("ПометкаУдаления") Тогда
		Если Параметры.Проведен Тогда
			Модуль.Статус = СтррКонтекст.КодыИконок.Проведен;
		ИначеЕсли Параметры.ПометкаУдаления Тогда
			Модуль.Статус = СтррКонтекст.КодыИконок.Помечен;
		Иначе
			Модуль.Статус = СтррКонтекст.КодыИконок.Записан;
		КонецЕсли; 
	Иначе // нужно прочитать статус элемента из ТЗ элементов
		СтрокаТ = ВОТЗПолучитьСтроку(СтррКонтекст.ВО, Модуль.ID);
		Модуль.Статус = ?(СтрокаТ <> Неопределено, СтрокаТ.Статус, СтррКонтекст.КодыИконок.Записан);
	КонецЕсли; 
	
	Если Параметры.Свойство("Копирование") И Параметры.Копирование Тогда // форма открыта для копирования существующего документа, очищаем его идентификатор
		Модуль.ID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		//((vd_190402
		//Было: 
		//ДобавитьВСтрокуНомерКопии(Модуль.Комментарий);
		Структура = Новый Структура("Комментарий", NULL);
		ЗаполнитьЗначенияСвойств(Структура, Модуль);
		Если Структура.Комментарий <> NULL Тогда
			ДобавитьВСтрокуНомерКопии(Модуль.Комментарий);	
		КонецЕсли;
		//))vd_190402
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при создании формы элемента виртуального объекта.
// Должна вызываться после ПрочестьОбъектИзХранилища() и ВОКонтекстФормыДополнить().
Процедура ВОПриСозданииФормыСписка(Модуль) Экспорт
	
	Параметры    = Модуль.Параметры;
	СтррКонтекст = Модуль.СтррКонтекст;
	
	СтррКонтекст.Вставить("ДляВыбора", Параметры.Свойство("ДляВыбора") И (Параметры.ДляВыбора = Истина));
	
	Если СтррКонтекст.ДляВыбора Тогда
		Модуль.Элементы.ТПЭлементы.РежимВыбора 		  = Истина;
		Модуль.Элементы.ТПЭлементы.МножественныйВыбор = Истина;
		Модуль.Элементы.ТПЭлементы.ТолькоПросмотр 	  = Истина;
		Модуль.ЭтаФорма.РежимОткрытияОкна 			  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;	
		СтррКонтекст.Вставить("ID", Параметры.ID);
	КонецЕсли; 

КонецПроцедуры

// ВиртуальныеОбъекты_Надстройка_Форма
#КонецОбласти

#Область ВиртуальныеОбъекты_Надстройка_СистемныеСвойства

// Функция вовзвращает структуру с системными свойствами для всех виртуальных объектов.
Функция ВОПолучитьВсеСвойства() Экспорт

	стррРезультат = Новый Структура("_РезультатыПосещений,_ШаблоныАнкет,_Мерчендайзинг,_Посещение");
	Для каждого Элемент Из стррРезультат Цикл
		стррРезультат[Элемент.Ключ] = ВОСвойстваОбъекта(Элемент.Ключ);
	КонецЦикла; 
	
	Возврат стррРезультат;
	
КонецФункции

// Функция возвращает системные свойства виртуального объекта (документа, справочника).
// Для ускорения - результат кэшируется.
// Параметры: 
// 	 ВидОбъекта - Строка - вид виртуального объекта (документа или справочника).
// 	 
// Возвращаемое значение:
//   Структура  - системные свойства виртуального объекта.
// 	 
Функция ВОСвойстваОбъекта(ВидОбъекта)

	Если гВОКэшСвойств = Неопределено Тогда // кэш сисиемных свойств виртуальных объектов
		гВОКэшСвойств = Новый Соответствие;
	КонецЕсли;
	
	стррРезультат = гВОКэшСвойств.Получить(ВидОбъекта);
	Если стррРезультат <> Неопределено Тогда
		Возврат стррРезультат;
	КонецЕсли; 
	
	стррРезультат = Новый Структура("ВидОбъекта,КорневойВид,РеквизитОбработки,Префикс,МаксКоличество,ФормаЭлемента");

	//vd_180919 добавлено 2 свойства
	Если ВидОбъекта = "_Фотографии" Тогда
		стррРезультат.Вставить("стррОбъекта");
		стррРезультат.Вставить("стррСписка");
	КонецЕсли;
		
	стррРезультат.ВидОбъекта = ВидОбъекта;
	
	// виртуальные справочники
	Если ВидОбъекта = "_РезультатыПосещений" Тогда
		стррРезультат.КорневойВид 		= "Справочник";
		стррРезультат.РеквизитОбработки = "СправочникРезультатыПосещений";
		стррРезультат.Префикс			= "СпрРезП"; // префикс для сохранения элементов справочника в процедурах СД... 
		стррРезультат.ФормаЭлемента		= "ЭлементСправочникаРезультатыПосещений";
		
	//((av_180811
	ИначеЕсли ВидОбъекта = "_Фотографии" Тогда		
		стррРезультат.КорневойВид 		= "Справочник";
		стррРезультат.РеквизитОбработки = "СправочникФотографии";
		стррРезультат.Префикс			= "СпрФото"; // префикс для сохранения элементов справочника в процедурах СД... 
		стррРезультат.ФормаЭлемента		= "ПрикрепленнаяФотография";
		//{{vd_180919
		стррРезультат.стррОбъекта = Новый Структура ("Статус,Наименование,ВладелецФайла,ДатаМодификацииУниверсальная,ДатаСоздания,ИмяФайла,Размер,Расширение,Описание,ХранимыйФайл");
		//}}vd_180919
	//))av_180811
	
	//((vd_190327
	ИначеЕсли ВидОбъекта = "_ВидыЗадач" Тогда		
		стррРезультат.КорневойВид 		= "Справочник";
		стррРезультат.РеквизитОбработки = "СправочникВидыЗадач";
		стррРезультат.Префикс			= "СпрЗдч"; // префикс для сохранения элементов справочника в процедурах СД... 
		стррРезультат.ФормаЭлемента		= "ЭлементСправочникаВидыЗадач";
	//))vd_190327
	
	ИначеЕсли ВидОбъекта = "_ШаблоныАнкет" Тогда		
		стррРезультат.КорневойВид 		= "Справочник";
		стррРезультат.РеквизитОбработки = "СправочникШаблоныАнкет";
		стррРезультат.Префикс			= "СпрШблА"; // префикс для сохранения элементов справочника в процедурах СД... 
		стррРезультат.ФормаЭлемента		= "ЭлементСправочникаШаблоныАнкет";
		
		// виртуальные документы
	ИначеЕсли ВидОбъекта = "_Мерчендайзинг" Тогда
		стррРезультат.КорневойВид 		= "Документ";
		стррРезультат.РеквизитОбработки = "ДокументыМерчендайзинга";
		стррРезультат.Префикс			= "ДокМерч";
		стррРезультат.ФормаЭлемента		= "ДокументМерчендайзинг";
		// максимально допустимое количество документов в ТЗ списка документов:
		стррРезультат.МаксКоличество	= ПрочитатьЗначениеНастройкиПоУмолчанию("МаксКоличествоВиртуальныхДокументов", 1000); 
		
	ИначеЕсли ВидОбъекта = "_Посещение" Тогда
		стррРезультат.КорневойВид 		= "Документ";		
		стррРезультат.РеквизитОбработки = "ДокументыПосещений";
		стррРезультат.Префикс			= "ДокПсщ";
		стррРезультат.ФормаЭлемента		= "ДокументПосещение";
		// максимально допустимое количество документов в ТЗ списка документов:
		стррРезультат.МаксКоличество	= ПрочитатьЗначениеНастройкиПоУмолчанию("МаксКоличествоВиртуальныхДокументов", 1000); 
		
	//((vd_190326	
	ИначеЕсли ВидОбъекта = "_Задание" Тогда
		стррРезультат.КорневойВид 		= "Документ";		
		стррРезультат.РеквизитОбработки = "ДокументыЗаданий";
		стррРезультат.Префикс			= "ДокЗдн";
		стррРезультат.ФормаЭлемента		= "ДокументЗадание";
		// максимально допустимое количество документов в ТЗ списка документов:
		стррРезультат.МаксКоличество	= ПрочитатьЗначениеНастройкиПоУмолчанию("МаксКоличествоВиртуальныхДокументов", 1000); 		
	//))vd_190326	
		
	Иначе
		ВызватьИсключение("Функция ВОСвойстваОбъекта(): неизвестное значение параметра ВидОбъекта - " + ВидОбъекта);
	КонецЕсли; 
	
	гВОКэшСвойств.Вставить(ВидОбъекта, стррРезультат);
	
	Возврат стррРезультат;

КонецФункции 

// ВиртуальныеОбъекты_Надстройка_СистемныеСвойства
#КонецОбласти

#Область ВиртуальныеОбъекты_Надстройка_ТЗ_Списка_Объектов

// Функция загружает таблицу значений виртуальных объектов из хранилища (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 Параметр - Строка, Структура - вид объекта (строка) или его системные свойства (Струкутра).
// 	 ИспользоватьКэш - Булево - использовать кэш для прочитанных ранее результатов вызова функции.
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - таблица виртуальных объектов.
//
Функция ВОТЗЗагрузить(Параметр, ИспользоватьКэш = Ложь) Экспорт
	
	стррВО = ?(ТипЗнч(Параметр) = Тип("Структура"), Параметр, ВОСвойстваОбъекта(Параметр)); // системные свойства виртуального объекта
	
	тз = Неопределено;     
	
	Если ИспользоватьКэш Тогда
		Если стррВО.КорневойВид = "Документ" Тогда
			Если гВДокКэшТЗЖурналов = Неопределено Тогда
				гВДокКэшТЗЖурналов = Новый Соответствие;
			КонецЕсли; 
			ствКэш = гВДокКэшТЗЖурналов;
		ИначеЕсли стррВО.КорневойВид = "Справочник" Тогда
			Если гВСпрКэшТЗСправочника = Неопределено Тогда
				гВСпрКэшТЗСправочника = Новый Соответствие;
			КонецЕсли; 
			ствКэш = гВСпрКэшТЗСправочника;
		Иначе
			ВызватьИсключение("Функция ВОТЗЗагрузить() - неизвестное значение свойства КорневойВид = " + стррВО.КорневойВид);
		КонецЕсли;
		тз = ствКэш.Получить(стррВО.ВидОбъекта);
	КонецЕсли; 
	
	Если тз = Неопределено Тогда
		тз = ПрочитатьЗначениеНастройки(стррВО.РеквизитОбработки);
		Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Тогда
			тз = ВОТЗСоздать(стррВО);
			ВОТЗСохранить(стррВО, тз);
		КонецЕсли;
		Если ИспользоватьКэш Тогда
			ствКэш.Вставить(стррВО.ВидОбъекта, тз);	
		КонецЕсли; 
	КонецЕсли; 
	
	ВОТЗСократить(стррВО, тз);
	
	Возврат тз;
	
КонецФункции

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (объектов одного вида).
//
Функция ВОТЗСоздать(стррВО)
	
	Если стррВО.КорневойВид = "Документ" Тогда
		Возврат ВДокТЗСоздать(стррВО.ВидОбъекта);
	ИначеЕсли стррВО.КорневойВид = "Справочник" Тогда
		Возврат ВСпрТЗСоздать(стррВО.ВидОбъекта);
	Иначе
		ВызватьИсключение("Функция ВОСоздатьТЗ() - неизвестное значение свойства КорневойВид = " + стррВО.КорневойВид);
	КонецЕсли;

КонецФункции

// Процедура сохраняет таблицу значений виртуальных объектов в хранилище.
// Параметры: 
// 	 Параметр - Строка, Структура - вид объекта (строка) или его системные свойства (Струкутра).
// 	 тз - ТаблицаЗначений - таблица виртуальных объектов (объектов одного вида).
//
Процедура ВОТЗСохранить(Параметр, тз) Экспорт
	
	РеквизитОбработки = ?(ТипЗнч(Параметр) = Тип("Структура"), Параметр.РеквизитОбработки, ВОСвойстваОбъекта(Параметр).РеквизитОбработки);
	СохранитьЗначениеНастройки(РеквизитОбработки, тз);
	
КонецПроцедуры

// Процедура удаляет из хранилища лишние (устаревшие) элементы. 
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 тз 	- ТаблицаЗначений - таблица элементов.
//
Процедура ВОТЗСократить(стррВО, тз)
	
	Если Не ЗначениеЗаполнено(стррВО.МаксКоличество) Тогда 
		Возврат;
	ИначеЕсли тз.Количество() <= стррВО.МаксКоличество Тогда 
		Возврат;
	КонецЕсли; 
	
	// нужно удалить устаревшие элементы
	Если стррВО.КорневойВид = "Документ" Тогда
		ВДокТЗСократить(стррВО, тз);
	Иначе // для справочников пока не предусмотрено удаление устаревших элементов
	КонецЕсли; 

КонецПроцедуры

// Функция находит строку в таблице элементов по идентификатору. 
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 ID 	- УникальныйИдентификатор - идентификатор объекта.
// Возвращаемое значение: СтрокаТаблицыЗначений  - найденная по идентификатору строка таблицы значений.
// 
Функция ВОТЗПолучитьСтроку(стррВО, ID)
	
	тз = ВОТЗЗагрузить(стррВО, Истина);
	Возврат тз.Найти(ID, "ID");
	
КонецФункции

// Функция находит строку в таблице элементов виртуального объекта по идентификатору и возвращает значение реквизита (колонки) в найденой строке. 
// Параметры: 
// 	 тз - ТаблицаЗначений - таблица элементов виртуального объекта.
// 	 ID - УникальныйИдентификатор - идентификатор объекта.
//   ИмяРеквизита - Строка - название реквизита (колонки таблицы значений)
// Возвращаемое значение: Значение реквизита (колонки) если строка найдена или Неопределено, если строка не найдена.
// 
Функция ВОТЗПолучитьЗначениеРеквизита(ВидОбъекта, ID, ИмяРеквизита)
	
	тз = ВОТЗЗагрузить(ВидОбъекта, Истина);
	СтрокаТ = тз.Найти(ID, "ID");
	Если СтрокаТ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокаТ[ИмяРеквизита];
	КонецЕсли; 
	
КонецФункции

// Функция возвращает коды иконок статуса элемента (виртуального объекта) для отображения на форме списка в первой колонке.
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 
// Возвращаемое значение:
//   Число  - код иконки статуса элемента.
// 	 
Функция ВОТЗИконкиСтатуса(стррВО)

	Если стррВО.КорневойВид = "Справочник" Тогда
		стррРезультат = Новый Структура("Записан,Помечен", 3, 4);
	ИначеЕсли стррВО.КорневойВид = "Документ" Тогда
		стррРезультат = Новый Структура("Записан,Проведен,Помечен", 0, 1, 2);	
	Иначе
		ВызватьИсключение("Функция ВОИконкиСтатуса() - неизсвестное значение свойства КорневойВид = " + стррВО.КорневойВид);
	КонецЕсли; 
	
	Возврат стррРезультат;

КонецФункции 

// ВиртуальныеОбъекты_Надстройка_ТЗ_Списка_Объектов
#КонецОбласти 

#Область ВиртуальныеОбъекты_Надстройка_Элементы
// Элементы виртуальных объектов (для справочников - элементы справочника, для документов - документы)

// Сохранение виртуального объекта в хранилище значений (и самого объекта и обновление таблицы виртуальных объектов данного вида). 
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 ID 	- УникальныйИдентификатор - идентификатор объекта.
// 	 стррОбъект - Структура - сохраняемый виртуальный объект.
//
Процедура ВОЭлементСохранить(стррВО, ID, стррОбъект) Экспорт

	// Этап 1. Сохранение самого элемента в хранилище.	
	СохранитьОбъектВХранилище(стррВО.Префикс, ID, стррОбъект);
	
	// Этап 2. Обновление в хранилище ТЗ списка элементов
	тз = ВОТЗЗагрузить(стррВО, Истина);
	
	СтрокаТ = тз.Найти(ID, "ID");
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = тз.Добавить();
		СтрокаТ.ID = ID;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТ, стррОбъект);
	
	ВОТЗСохранить(стррВО, тз);

КонецПроцедуры

// Функция загружает виртуальный объект из хранилища.
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 ID 	- УникальныйИдентификатор - идентификатор объекта.
// 	 
// Возвращаемое значение:
//   Структура  - виртуальный объект.
//
Функция ВОЭлементЗагрузить(стррВО, ID) Экспорт
	
	Возврат ПолучитьОбъектИзХранилища(стррВО.Префикс, ID);
	
КонецФункции 	

// Процедура удаляет виртуальные объекты из хранилища. Удаляются сами элементы 
// и обновляется таблица значений, ссылающиеся на элементы.
// Параметры: 
// 	 стррВО 		 - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 мИдентификаторы - Массив	 - массив значений типа УникальныйИдентификатор - идентификаторы удаляемых объектов.
// 	 ВключаяТЗ  	 - Булево    - удалять данные в т.ч. и в таблице значений.
//
Процедура ВОЭлементыУдалить(стррВО, мИдентификаторы, ВключаяТЗ = Истина) Экспорт
	
	УдалитьОбъектыИзХранилища(стррВО.Префикс, мИдентификаторы);
	
	Если ВключаяТЗ Тогда // нужно удалить записи из ТЗ списка элементов
		
		тз = ВОТЗЗагрузить(стррВО);
		Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли; 
		
		Для каждого ИдОбъекта Из мИдентификаторы Цикл
			СтрокаТ = тз.Найти(ИдОбъекта, "ID");
			Если СтрокаТ <> Неопределено Тогда
				тз.Удалить(СтрокаТ);
			КонецЕсли;
		КонецЦикла; 
		
		ВОТЗСохранить(стррВО, тз); // записываем измененную таблицу
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура помечает на удаление виртуальные объекты в хранилище. 
// Параметры: 
// 	 стррВО 		 - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 мИдентификаторы - Массив	 - массив значений типа УникальныйИдентификатор - идентификаторы помечаемых на удаление объектов.
//
Процедура ВОЭлементыПометитьНаУдаление(стррВО, мИдентификаторы) Экспорт
	
	тз = ВОТЗЗагрузить(стррВО);
	Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли; 
	
	стррИконки = ВОТЗИконкиСтатуса(стррВО);
	СтатусПомечен = стррИконки.Помечен;
	СтатусЗаписан = стррИконки.Записан;
	
	Для каждого ИдОбъекта Из мИдентификаторы Цикл
		СтрокаТ = тз.Найти(ИдОбъекта, "ID");
		Если СтрокаТ <> Неопределено Тогда
			СтрокаТ.Статус = ?(СтрокаТ.Статус <> СтатусПомечен, СтатусПомечен, СтатусЗаписан);
		КонецЕсли;
	КонецЦикла; 
		
	// записываем измененную таблицу
	ВОТЗСохранить(стррВО, тз);
	
КонецПроцедуры

// ВиртуальныеОбъекты_Надстройка_Элементы
#КонецОбласти

// ВиртуальныеОбъекты_Надстройка
#КонецОбласти 

#Область ВиртуальныеОбъекты_Документы

// Функция возвращает представление виртуального документа в виде строки
Функция ВДокПредставление(ВидДокумента, стзЖурнала) Экспорт
	
	Возврат СвойстваВидаОбъекта(ВидДокумента, "Вид", "Документ").Представление 
		+ ?(ЗначениеЗаполнено(стзЖурнала.Номер), " " + СокрЛП(стзЖурнала.Номер), "") + " от " + стзЖурнала.Дата;
	
КонецФункции 

Функция ВДокЭтоВиртуальныйДокумент(ВидДокумента) Экспорт
	
	Возврат Лев(ВидДокумента, 1) = "_"; // названия вида виртуальных документов начинаются с "_"
		
КонецФункции

// Процедура дополняет контекст формы виртуального документа (формы списка и формы документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВДокКонтекстФормыДополнить(СтррКонтекст)

	Если СтррКонтекст.ЭтоФормаСписка Тогда // процедура вызвана для формы списка документов
		//СтррКонтекст.Вставить("РедактироватьРеквизитыМТ", Истина); // признак разрешения редактирования координат		
		СтррКонтекст.Вставить("ДляВыбора", Ложь);
	Иначе // процедура вызвана для формы документа
		СтррКонтекст.Вставить("IDNew");
		СтррКонтекст.Вставить("ИспользоватьДоговоры", ВДокИспользоватьДоговоры(СтррКонтекст.ВО.ВидОбъекта));
	КонецЕсли; 
	
КонецПроцедуры

#Область ВиртуальныеОбъекты_Документы_Реквизиты

// Функция возвращает в виде строки список реквизтов шапки виртуального документа.
Функция ВДокРеквизитыШапки(ВидДокумента)

	Если ВидДокумента = "_Мерчендайзинг" Тогда
		Результат = "ID,Дата,Номер,Статус,Партнер,Контрагент,Организация,Менеджер,Комментарий,СуммаДокумента,ДокументОснование,ВремяНачала,ВремяОкончания,Широта,Долгота";
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		Результат = "ID,Дата,Номер,Статус,Партнер,Контрагент,Организация,Менеджер,Комментарий,РезультатПосещения,РезультатПосещения_Представление,ВремяНачала,ВремяОкончания,Широта,Долгота";
	ИначеЕсли ВидДокумента = "_Задание" Тогда //vd_190408	
		Результат = "ID,Дата,Номер,Статус,Партнер,Контрагент,Организация,Менеджер,Комментарий,ВремяНачала,ВремяОкончания,Широта,Долгота,ДатаТочкиТрека,НеИзменятьВМУ,СозданВЦБД";
	Иначе
		ВызватьИсключение("Функция ВДокРеквизитыШапки(): неизвестное значение параметра ВидДокумента = """ + ВидДокумента + """!");
	КонецЕсли; 	
	
	Возврат Результат;

КонецФункции

// Функция возвращает массив реквизитов шапки виртуального документа.
Функция ВДокРеквизитыШапкиМассив(ВидДокумента) Экспорт
	
	Возврат СтрРазделить_(ВДокРеквизитыШапки(ВидДокумента));
	
КонецФункции

// Процедура добавляет в виртуальный документ табличную часть.
Процедура ВДокРеквизитыТЧДобавить(ВидДокумента, стррДокумент)

	//vd_190408 Убрано в условиях
	//ОписаниеТипаКоличество  	= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3));
	//ОписаниеТипаСумма 			= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	//ОписаниеТипаЧислоЦелое		= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 0));
	//ТЗ = Новый ТаблицаЗначений;	
	
	Если ВидДокумента = "_Мерчендайзинг" Тогда
		ТЗ = Новый ТаблицаЗначений; //vd_190408	
		
		ОписаниеТипаКоличество  	= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3));
		ОписаниеТипаСумма 			= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
		ОписаниеТипаЧислоЦелое		= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 0));

		ТЗ.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗ.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТЗ.Колонки.Добавить("Упаковка",				Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТЗ.Колонки.Добавить("КоличествоУпаковок",	ОписаниеТипаКоличество);     
		ТЗ.Колонки.Добавить("Количество", 			ОписаниеТипаКоличество);
		ТЗ.Колонки.Добавить("Цена",					ОписаниеТипаСумма);
		ТЗ.Колонки.Добавить("Сумма",				ОписаниеТипаСумма);
		ТЗ.Колонки.Добавить("ДоляПолки",			ОписаниеТипаСумма); 	// доля занимаемой полки товара на витрине в процентах
		ТЗ.Колонки.Добавить("КоличествоФейсов",		ОписаниеТипаЧислоЦелое);// количество фейсов товара на витрине
		
		стррДокумент.Вставить("Товары", ТЗ);
		
	ИначеЕсли ВидДокумента = "_Задание" Тогда //vd_190408
			
		ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор");
		ОписаниеТипаСтрока			= Новый ОписаниеТипов("Строка");
		ОписаниеТипаБулево			= Новый ОписаниеТипов("Булево");
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("GUID",						ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("ВидЗадачи",				ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("ВидЗадачиПредставление",	ОписаниеТипаСтрока);
		ТЗ.Колонки.Добавить("Комментарий",				ОписаниеТипаСтрока);
		ТЗ.Колонки.Добавить("Обязательная",				ОписаниеТипаБулево);
		ТЗ.Колонки.Добавить("Результат");               //Произвольный
		ТЗ.Колонки.Добавить("РезультатПредставление",	ОписаниеТипаСтрока);
		стррДокумент.Вставить("Задачи", ТЗ);
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("GUID",						ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("ИдЗадачиДокумента",		ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("ФотоЗадачи",				ОписаниеТипаИдентификатор);
		стррДокумент.Вставить("СписокФото", ТЗ);
		
	КонецЕсли; 

КонецПроцедуры

// Функция возвращает признак - используются в виртуальном документе договоры/соглашения или нет.
Функция ВДокИспользоватьДоговоры(ВидДокумента) 
	
	Если ВидДокумента = "_Мерчендайзинг" Тогда
		Возврат Истина;	
		
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		Возврат Ложь;
		
	ИначеЕсли ВидДокумента = "_Задание" Тогда
		Возврат Ложь;
		
	Иначе
		ВызватьИсключение("Функция ВДокИспользоватьДоговоры(): неизвеcтное значение параметра ВидДокумента - " + ВидДокумента);
		
	КонецЕсли; 
	
КонецФункции

// ВиртуальныеОбъекты_Документы_Реквизиты
#КонецОбласти 

// Процедура удаляет из таблицы значений устаревшие документы. Обновленную таблицу записывает в хранилище. 
// Параметры: 
// 	 стррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 тз 	- ТаблицаЗначений - таблица документов.
//
Процедура ВДокТЗСократить(стррВО, тз)
	
	Если ЗначениеЗаполнено(стррВО.МаксКоличество) И тз.Количество() > стррВО.МаксКоличество Тогда // нужно удалить устаревшие документы
		
		КоличествоУдаляемых = тз.Количество() - стррВО.МаксКоличество;
		мИдентификаторы = Новый Массив;
		Для Шаг = 1 По КоличествоУдаляемых Цикл
			CтрокаТ = тз[0];
			Если Шаг = 1 Тогда
				ВремяНачала = CтрокаТ.Дата;
			ИначеЕсли Шаг = КоличествоУдаляемых Тогда
				ВремяОкончания = CтрокаТ.Дата;		
			КонецЕсли; 
			мИдентификаторы.Добавить(тз[0].ID);
			тз.Удалить(0);
		КонецЦикла;
		
		// записываем урезанную таблицу
		ВОТЗСохранить(стррВО, тз);

		// удаляем сами документы - по их идентификаторам
		ВОЭлементыУдалить(стррВО, мИдентификаторы, Ложь);
		
		Если КоличествоУдаляемых = 1 Тогда
			Текст = СтрШаблон_(НСтр("ru = 'Удален один устаревший документ от %1 для оптимизации журнала документов.'"), ВремяНачала);
		Иначе			
			стрУдалено = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоУдаляемых, НСтр("ru = 'документ, документа, документов'"));
			Текст = СтрШаблон_(НСтр("ru = 'Удалено %1 (с %2 по %3) для оптимизации журнала документов.'"), стрУдалено, ВремяНачала, ВремяОкончания);
		КонецЕсли; 
		
		Текст = Текст + " " + СтрШаблон_(НСтр("ru = 'Максимально допустимое количество документов в журнале: %1.'"), стррВО.МаксКоличество);
		Сообщить(Текст);
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 ВидСправочника - Строка - вид виртуального документа.
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (элементов виртуального документа).
//   
Функция ВДокТЗСоздать(ВидДокумента)

	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаДатаВремя     = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТипаСтрока  	  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаБулево  	  = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтатус  	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0));
	ОписаниеТипаКоордината 	  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ОписаниеТипаСумма 		  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ОписаниеТипаВсеДокументы  = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ID",  	 		 	ОписаниеТипаИдентификатор); // идентификатор документа
	ТЗ.Колонки.Добавить("Дата",  	 		ОписаниеТипаДатаВремя);
	ТЗ.Колонки.Добавить("Номер",			ОписаниеТипаСтрока);
	ТЗ.Колонки.Добавить("Статус",			ОписаниеТипаСтатус);
	ТЗ.Колонки.Добавить("Комментарий",		ОписаниеТипаСтрока);
	
	Если ВидДокумента = "_Мерчендайзинг" Тогда
		ТЗ.Колонки.Добавить("СуммаДокумента",		ОписаниеТипаСумма);	
		ТЗ.Колонки.Добавить("ДокументОснование", 	ОписаниеТипаВсеДокументы);
		
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		ТЗ.Колонки.Добавить("РезультатПосещения",				ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("РезультатПосещения_Представление",	ОписаниеТипаСтрока);
		
	//vd_190326	
	ИначеЕсли ВидДокумента = "_Задание" Тогда
		ТЗ.Колонки.Добавить("Категория",		ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("НеИзменятьВМУ",	ОписаниеТипаБулево);
		ТЗ.Колонки.Добавить("СозданВЦБД",		ОписаниеТипаБулево);
		ТЗ.Колонки.Добавить("Договор",			Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТЗ.Колонки.Добавить("Соглашение",		Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
		ТЗ.Колонки.Добавить("ДатаТочкиТрека",	ОписаниеТипаДатаВремя);		
		
	Иначе
		ВызватьИсключение("Функция ВДокСоздатьТЗЖурнала(ВидДокумента): неизвестное значение параметра: " + ВидДокумента);
	КонецЕсли; 
	
	ТЗ.Колонки.Добавить("ВремяНачала",		ОписаниеТипаДатаВремя);
	ТЗ.Колонки.Добавить("ВремяОкончания",	ОписаниеТипаДатаВремя);
	ТЗ.Колонки.Добавить("Широта",			ОписаниеТипаКоордината);
	ТЗ.Колонки.Добавить("Долгота",			ОписаниеТипаКоордината);
	
	ТЗ.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТЗ.Колонки.Добавить("Партнер",			Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗ.Колонки.Добавить("Контрагент",		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗ.Колонки.Добавить("Менеджер",			Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Возврат ТЗ;

КонецФункции

// ВиртуальныеОбъекты_Документы
#КонецОбласти

#Область ВиртуальныеОбъекты_Справочники

// Процедура дополняет контекст формы виртуального сроавочника (формы списка и формы документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ВидСправочника - Строка - вид виртуального справочника.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВСпрКонтекстФормыДополнить(СтррКонтекст)

	Если СтррКонтекст.ЭтоФормаСписка Тогда 
		СтррКонтекст.Вставить("ДляВыбора", Ложь);
	Иначе // процедура вызвана для формы элемента
		СтррКонтекст.Вставить("IDNew");	
	КонецЕсли; 
	
КонецПроцедуры

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 ВидСправочника - Строка - вид виртуального справочника.
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (элементов виртуального справочника).
//
Функция ВСпрТЗСоздать(ВидСправочника)
	
	ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаСтатус  		= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0));
	ОписаниеТипаСтрока  		= Новый ОписаниеТипов("Строка");
	ОписаниеТипаДата 			= Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)); //av_180811
	ОписаниеТипаБулево			= Новый ОписаниеТипов("Булево");

	ТЗ = Новый ТаблицаЗначений;
	
	Если ВидСправочника = "_РезультатыПосещений" Тогда
		ТЗ.Колонки.Добавить("ID",  	 		 	ОписаниеТипаИдентификатор); // идентификатор элемента
		ТЗ.Колонки.Добавить("Статус",			ОписаниеТипаСтатус);		
		ТЗ.Колонки.Добавить("Наименование",  	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ТЗ.Колонки.Добавить("ШаблонАнкеты",		ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("ШаблонАнкеты_Представление",	ОписаниеТипаСтрока);
		ТЗ.Колонки.Добавить("Комментарий",		ОписаниеТипаСтрока);
		
	ИначеЕсли ВидСправочника = "_ШаблоныАнкет" Тогда		
		ТЗ.Колонки.Добавить("ID",  	 		 	ОписаниеТипаИдентификатор); // идентификатор элемента
		ТЗ.Колонки.Добавить("Статус",			ОписаниеТипаСтатус);		
		ТЗ.Колонки.Добавить("Наименование",  	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ТЗ.Колонки.Добавить("Комментарий",		ОписаниеТипаСтрока);
		
	//((vd_190327	
	ИначеЕсли ВидСправочника = "_ВидыЗадач" Тогда		
		ТЗ.Колонки.Добавить("ID",  	 		 			ОписаниеТипаИдентификатор); // идентификатор элемента
		ТЗ.Колонки.Добавить("Статус",					ОписаниеТипаСтатус);
		ТЗ.Колонки.Добавить("Наименование",  			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ТЗ.Колонки.Добавить("ТипЗадачи",        		ОписаниеТипаИдентификатор);
		ТЗ.Колонки.Добавить("ТипЗадачиПредставление",   ОписаниеТипаСтрока);
		ТЗ.Колонки.Добавить("ВопросАнкеты",				ОписаниеТипаСтрока);
		ТЗ.Колонки.Добавить("Группа",     				ОписаниеТипаИдентификатор);
	//))vd_190327	
		
	//((av_180811	
	ИначеЕсли ВидСправочника = "_Фотографии" Тогда		
		ТЗ.Колонки.Добавить("ID", 							ОписаниеТипаИдентификатор); // идентификатор элемента
		ТЗ.Колонки.Добавить("ВладелецФайла",				ОписаниеТипаИдентификатор); // пока что документ "Мерчендайзинг	
		ТЗ.Колонки.Добавить("ДатаМодификацииУниверсальная", ОписаниеТипаДата); 
		ТЗ.Колонки.Добавить("ДатаСоздания", 				ОписаниеТипаДата); 
		ТЗ.Колонки.Добавить("Описание", 					ОписаниеТипаСтрока); 
		ТЗ.Колонки.Добавить("Наименование", 				ОписаниеТипаСтрока); 
		ТЗ.Колонки.Добавить("Расширение", 					ОписаниеТипаСтрока); 
		ТЗ.Колонки.Добавить("Размер", 						ОписаниеТипаСтатус);
		ТЗ.Колонки.Добавить("ХранимыйФайл", 				ОписаниеТипаСтрока); 		//Адрес картинки в каталоге
		ТЗ.Колонки.Добавить("Статус",						ОписаниеТипаСтатус);		
	//))av_180811	
		
	Иначе
		
		ВызватьИсключение("Функция ВСпрИмяТЗЭлементов(): неизвестное значение параметра ВидСправочника - " + ВидСправочника);
		
	КонецЕсли; 
	
	Возврат ТЗ;
	
КонецФункции

// ВиртуальныеОбъекты_Справочники
#КонецОбласти

// ВиртуальныеОбъекты
#КонецОбласти

#Область СлужебныеДанные

// Функция возвращает признак - хранить служебные данные в файлах (Истина) или в хранилище (Ложь)
Функция СДХранитьВФайлах()
	
	Если гСлужебныеДанныеВФайлах = Неопределено Тогда	
		гСлужебныеДанныеВФайлах = Ложь; // хранение в Хранилище подтверждений для загруженных: документов, справочников, треков. 
	КонецЕсли;
	
	Возврат гСлужебныеДанныеВФайлах;
	
КонецФункции

Функция СДИмяФайлаДляМУ(СсылкаМУ)
	
	Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_data.txt";
	
КонецФункции

// Чтение служебных данных
Функция СДПрочитать(Имя, СоздатьЕслиНетДанных = Ложь)
	
	Если СДХранитьВФайлах() Тогда
		стррДанные = СДОткрытьФайл(ПодкаталогДанных("Входящие") + Имя);
	Иначе
		стррДанные = ПрочитатьЗначениеНастройки(Имя);
	КонецЕсли;
	
	Если ТипЗнч(стррДанные) <> Тип("Структура") И СоздатьЕслиНетДанных Тогда
		стррДанные = Новый Структура;
	КонецЕсли; 
	
	Возврат стррДанные;
	
КонецФункции

// Сохранение служебных данных
Функция СДЗаписать(Имя, Данные)
	
	Если СДХранитьВФайлах() Тогда
		ИмяФайла = ПодкаталогДанных("Входящие") + Имя;
		Попытка
			ЗначениеВФайл(ИмяФайла, Данные);
		Исключение
			Текст = "Не удалось сохранить служебные данные в файл. Проверьте права доступа. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(Имя, Данные);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает прочитанные служебные данные.
Функция СДОткрытьФайл(ИмяФайла)
	
	Результат = Неопределено;	
	
	Если ФайлСуществует(ИмяФайла) Тогда
		
		Попытка
		    Данные = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = "Ошибка чтения файла служебных данных. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецПопытки;
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Результат = Данные;			
		Иначе
			Текст = "Файл служебных данных поврежден. Будет создан новый файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СДИдентификаторВИмяФайла(Идентификатор)
	
	Возврат СтрЗаменить(НРег(Строка(Идентификатор)), "-", "");
	
КонецФункции

// СлужебныеДанные
#КонецОбласти 

#Область СлужебныеТаблицыЗначений

// Функция загружает служебную таблицу из хранилища в память.
//
// Параметры:
//  стрИмяТаблицы	 - Строка - имя служебной таблицы
//  Принудительно	 - Булево - если Истина, то загружать ТЗ в память без проверки настроек использования служебной таблицы.
// 
// Возвращаемое значение:
//   - Булево - Истина, если таблица успешно загружена (или создана, если не была создана ранее).
//
Функция СТЗЗагрузить(стрИмяТаблицы)
	
	Если гКэшСлужебныхТаблиц = Неопределено Тогда
		гКэшСлужебныхТаблиц = Новый Структура;
	КонецЕсли; 
	
	Если стрИмяТаблицы = "СпрХарактеристикиНоменклатурыСлужебный" И Не ВыгружатьХарактеристикиНоменклатуры() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	тз = ПрочитатьЗначениеНастройки(стрИмяТаблицы);
	Если тз = Неопределено Тогда
		
		ОписаниеТипаИдентификатор 	 = Новый ОписаниеТипов("УникальныйИдентификатор");	
		стрОписаниеТипаИдентификатор = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));	
		
		тз = Новый ТаблицаЗначений;
		
	    Если стрИмяТаблицы = "СпрХарактеристикиНоменклатурыСлужебный" Тогда // соответствие характеристик номенклатуры в 1С и МТ
			
			тз.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);
			тз.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры")); // соответствующий элемент справочника в 1С			
			тз.Колонки.Добавить("Номенклатура",   	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			
		ИначеЕсли стрИмяТаблицы = "..." Тогда // добавить другие служебные таблицы сюда
			
			// ...
			
		Иначе
			ВызватьИсключение("Функция СТЗЗагрузить() - неизвестное значение параметра стрИмяТаблицы = " + стрИмяТаблицы);
		КонецЕсли; 
		
	КонецЕсли;
	
	гКэшСлужебныхТаблиц.Вставить(стрИмяТаблицы, тз);
	гКэшСлужебныхТаблиц.Вставить(стрИмяТаблицы + "_Изменен", Ложь); // признак, что ТЗ была изменена
	
	Возврат Истина;

КонецФункции

// Процедура сохраняет все измененные служебные таблицы в хранилище значений.
Процедура СТЗСохранить(ИмяТаблицы)
	
	Если гКэшСлужебныхТаблиц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТаблицы = "Все" Тогда // сохранение всех таблиц
		Для каждого Элемент из гКэшСлужебныхТаблиц Цикл
			Если Найти(Элемент.Ключ, "_Изменен") <> 0 И гКэшСлужебныхТаблиц[Элемент.Ключ] = Истина Тогда // в свойстве установлен признак изменения служебной таблице
				ИмяТЗ = СтрЗаменить(Элемент.Ключ, "_Изменен", "");
				СохранитьЗначениеНастройки(ИмяТЗ, гКэшСлужебныхТаблиц[ИмяТЗ]);
				гКэшСлужебныхТаблиц[Элемент.Ключ] = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли гКэшСлужебныхТаблиц[ИмяТаблицы + "_Изменен"] = Истина Тогда // сохранение конкретной таблицы
		СохранитьЗначениеНастройки(ИмяТаблицы, гКэшСлужебныхТаблиц[ИмяТаблицы]);
		гКэшСлужебныхТаблиц[ИмяТаблицы + "_Изменен"] = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Функция СТЗСсылкаНаЭлементБД1С(Идентификатор, ИмяТЗ)
	
	СтрокаТ = гКэшСлужебныхТаблиц[ИмяТЗ].Найти(Идентификатор, "Идентификатор");
	Если СтрокаТ <> Неопределено Тогда
		Возврат СтрокаТ.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция СТЗИдентификаторЭлементаДляМТ(стррПоиск, ИмяТЗ)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(стррПоиск.Ссылка) Тогда
		
		тз = гКэшСлужебныхТаблиц[ИмяТЗ];
		мСтроки = тз.НайтиСтроки(стррПоиск);
		Если мСтроки.Количество() <> 0 Тогда
			Результат = мСтроки[0].Идентификатор;
		Иначе
			СтрокаТ = тз.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТ, стррПоиск);
			Результат = Новый УникальныйИдентификатор;			
			СтрокаТ.Идентификатор   = Результат;
			гКэшСлужебныхТаблиц[ИмяТЗ + "_Изменен"] = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;		
	
КонецФункции

// СлужебныеТаблицыЗначений
#КонецОбласти 

//vd_190327 Добавлена
Функция ТипыЗадач() Экспорт
	
	сзРезультат = Новый СписокЗначений;
	сзРезультат.Добавить(Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26"), "Ввести дату");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("19661470-75A6-4EB4-BE94-44924664B3D1"), "Ввести число");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D"), "Ввести строку");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E"), "Выбрать ""Да"" или ""Нет""");
	//сзРезультат.Добавить(Новый УникальныйИдентификатор("B483E5F9-95E6-4E2D-B6B2-D5954FCC25AE"), "Сделать фото"); //Не реализовано
	сзРезультат.Добавить(Новый УникальныйИдентификатор("061879D3-E400-4CC8-B4F9-999C3399F47C"), "Совершить обмен");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("EADED006-5271-4497-9222-79541D23E3FA"), "Создать документ ""Заказ""");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("D6176C16-130D-40D8-AD70-13A39C957927"), "Создать документ ""Реализация""");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("57EC9BD4-C2EC-47E0-86C1-B06211735F32"), "Создать документ ""Перемещение""");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("79E5B0F6-B019-41FE-9214-C7A204E05974"), "Создать документ ""Поступление""");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("EC84CE42-A9C3-4936-94FB-595EC1E84AEF"), "Создать документ ""Возврат товаров""");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("2EC90B5A-56FF-4338-AEAA-2416B8923BF8"), "Создать документ ""ПКО""");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("8BED83C4-4428-4206-89D1-A31790130937"), "Создать документ ""РКО""");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("544B81FD-49DA-453E-9B9C-EEC549CBEF10"), "Создать документ ""Мерчендайзинг""");
	сзРезультат.Добавить(Новый УникальныйИдентификатор("2F7826F4-2665-49FA-95E7-E7C8CC6EBF0E"), "Создать документ ""Посещение""");
	//сзРезультат.Добавить(Новый УникальныйИдентификатор("FDDC6586-FC43-4DE2-9F8A-0F1EFDCE4B31"), "ВыбратьЗначениеИзСписка"); //Не реализовано
	
	Возврат сзРезультат;
КонецФункции

#Область ХарактеристикиНоменклатуры

Функция ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики)
	
	Если ИспользоватьХарактеристики Тогда
		
		Если ИдХарактеристики = Неопределено Или ЭтоПустойИдентификатор(ИдХарактеристики) Тогда
			Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе
			Результат = СТЗСсылкаНаЭлементБД1С(Новый УникальныйИдентификатор(ИдХарактеристики), "СпрХарактеристикиНоменклатурыСлужебный");
			Если Результат = Неопределено Тогда
				Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		
	Иначе 
		Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ХарактеристикиНоменклатуры
#КонецОбласти 

#Область ПодтвержденияДанных
// Процедуры и функции чтения и сохранения данных подтверждений.

// Функция возвращает таблицу значений с подтверждениями.
// Если параметр ДляЧтения = Истина и если файл подтверждений не существует или недоступен, то возвращается Неопределено.
// Если параметр ДляЧтения = Ложь и если файл подтверждений не существует или недоступен, то возвращается пустая таблица значений.
Функция ПодтвержденияОткрытьФайл(ИмяФайла, ДляЧтения)
	
	тз = Неопределено;	
	
	Если ФайлСуществует(ИмяФайла) Тогда
		
		Попытка
		    тз = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = "Ошибка чтения файла подтверждений. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецПопытки;
		
		ТекстСоздание = ?(ДляЧтения, "", "Будет создан новый файл.") + " Файл: ";
		
		Если ТипЗнч(тз) <> Тип("ТаблицаЗначений") Тогда
			Текст = "Файл подтверждений поврежден. " + ТекстСоздание + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		Иначе
			Колонки = "Дата,Идентификатор";
			Если Не тзЕстьКолонки(тз, Колонки) Тогда
				Текст = "Таблица в файле подтверждений не содержит колонок: " + Колонки + ". " + ТекстСоздание + ИмяФайла;
				ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат тз;
	
КонецФункции

// Функция сокращает количество записей в ТЗ подтверждений до заданного.
// Если удалялись лишние строки, то возвращается Истина.
Функция ПодтвержденияСократить(тз, МаксКоличествоСтрок)
	
	тз.Сортировать("Дата");  // сначала будут идти самые ранние строки по хронологии загрузки/обновления, их и будем удалять из подтверждений.
	Возврат тзСократитьДоКоличестваСтрок(тз, МаксКоличествоСтрок);
	
КонецФункции

// Сохранение всех подтверждений (для документов, справочников, фотографий) в хранилище на основе данных в структуре ЗагружаемыеОбъекты.
Процедура ПодтвержденияСохранитьВсе(СсылкаМУ, ЗагружаемыеОбъекты)
	
	МаксКоличествоСтрок = 200; // максимальное количество документов в буфере перед добавлением новых документов.
	
	тз = ПодтвержденияСДОткрыть("Документы", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ПодтвержденияСократить(тз, МаксКоличествоСтрок);
	
	ТекДата = ТекущаяДата();
	
	тзДокументы = ЗагружаемыеОбъекты.ТЗЗагруженныеДокументы;
	
	Для Каждого стзДокументы Из тзДокументы Цикл
		ИдДокумента = стзДокументы.Идентификатор; // gi_170830 это GUID
		СтрокаТ = тз.Найти(ИдДокумента, "Идентификатор");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = тз.Добавить();
			СтрокаТ.Идентификатор 	 = ИдДокумента; // gi_170830 это GUID
			СтрокаТ.ВидДокумента  	 = стзДокументы.ВидДокумента;
			СтрокаТ.ИдВидДокументаМТ = стзДокументы.ИдВидДокументаМТ; // gi_170830 это GUID
		КонецЕсли;
		СтрокаТ.Дата 		  = ТекДата;	// Если документ выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
		СтрокаТ.ДатаДокумента = стзДокументы.ДатаДокумента;	 // gi_180123 дата документа в МУ могла быть изменена
	КонецЦикла;
	
	ПодтвержденияСДСохранить("Документы", СсылкаМУ, тз);
	
	// sd_10082017 {
	тз = ПодтвержденияСДОткрыть("Справочники", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ПодтвержденияСократить(тз, МаксКоличествоСтрок);
	
	ТекДата = ТекущаяДата();
	
	тзСправочники = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники;
	
	Для Каждого стзСправочники Из тзСправочники Цикл
		ИдЭлементаСправочника = стзСправочники.Идентификатор; // gi_170902
		СтрокаТ = тз.Найти(ИдЭлементаСправочника, "Идентификатор");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = тз.Добавить();
			СтрокаТ.Идентификатор 	 	= ИдЭлементаСправочника;
			СтрокаТ.ИдВидСправочникаМТ 	= сТЗСправочники.ИдВидСправочникаМТ;
		КонецЕсли;
		СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
	КонецЦикла;
	
	//(( gi_180417 дополнительно добавляем подтверждения для справочника МТ "ФотоДокументов" и подтверждения для тэга PICTURES
	// строки добавляются в объекты тз и тзPictures	
	тзPictures = ПодтвержденияСДОткрыть("Фото", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ИзмененаТЗPictures  = ПодтвержденияСократить(тзPictures, МаксКоличествоСтрок);

	тзФотографии = ЗагружаемыеОбъекты.тзФотографии;
	СчетчикФотографий = 0; // количество загруженных фотографий для подтверждения
	
	ИдВидСправочникаМТ_ФотоДокументов = СвойстваВидаОбъекта("Справочник.ФотоДокументов", "ВидДляМТ").ИдентификаторВида; 
	Для Каждого стзФотографии Из тзФотографии Цикл
		Если стзФотографии.Загружено Тогда // подтверждения будут только для фото с загруженными изображениями
			
			// добавление в тз (подтверждения для справочников)
			ИдЭлементаСправочника = Новый УникальныйИдентификатор(стзФотографии.GUID);
			СтрокаТ = тз.Найти(ИдЭлементаСправочника, "Идентификатор");
			Если СтрокаТ = Неопределено Тогда
				СтрокаТ = тз.Добавить();
				СтрокаТ.Идентификатор 	 	= ИдЭлементаСправочника;
				СтрокаТ.ИдВидСправочникаМТ 	= ИдВидСправочникаМТ_ФотоДокументов;
			КонецЕсли;
			СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
			
			Если Не ПодтверждатьВсеФотографии Тогда // при подтверждении всех фотографий данные в тзPictures уже актуализированы в процедуре ЗагрузитьФотографииЭтап2()
			
				// добавление в тзPictures (подтверждения для картинок)
				ИдФото = Новый УникальныйИдентификатор(стзФотографии.ИдФото);
				СтрокаТ = тзPictures.Найти(ИдФото, "Идентификатор");
				Если СтрокаТ = Неопределено Тогда
					СтрокаТ = тзPictures.Добавить();
					СтрокаТ.Идентификатор = ИдФото;
				КонецЕсли;
				СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
				ИзмененаТЗPictures = Истина;				
			
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИзмененаТЗPictures Тогда
		ПодтвержденияСДСохранить("Фото", СсылкаМУ, тзPictures);
	КонецЕсли; 
	
	//)) gi_180417
	
	ПодтвержденияСДСохранить("Справочники", СсылкаМУ, тз);
	// } sd_10082017
	
КонецПроцедуры

Функция ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ)
	
	Если ВидДанных = "Документы" Тогда
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_doc.txt";
	ИначеЕсли ВидДанных = "Справочники" Тогда		
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_cat.txt";
	ИначеЕсли ВидДанных = "Фото" Тогда
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_pict.txt";
	Иначе
		ВызватьИсключение("Функция ИмяФайлаПодтверждений(): неизвестное значение параметра ВидДанных = """ + ВидДанных + """");
	КонецЕсли; 
	
КонецФункции

// Сохранение подтверждений в служебных данных (СД)
Функция ПодтвержденияСДСохранить(ВидДанных, СсылкаМУ, тз)
	
	ИмяФайла = ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ);
	
	Если СДХранитьВФайлах() Тогда // gi_170902		
		Попытка
			ЗначениеВФайл(ПодкаталогДанных("Входящие") + ИмяФайла, тз);
		Исключение
			Текст = "Не удалось сохранить файл подтверждений. Проверьте права доступа. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(ИмяФайла, тз);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Открытие подтверждений из служебных данных (СД)
Функция ПодтвержденияСДОткрыть(ВидДанных, СсылкаМУ, ДляЧтения) Экспорт 
	
	ИмяФайла = ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ);
	
	Если СДХранитьВФайлах() Тогда
		тз = ПодтвержденияОткрытьФайл(ПодкаталогДанных("Входящие") + ИмяФайла, ДляЧтения);
	Иначе
		тз = ПрочитатьЗначениеНастройки(ИмяФайла);
	КонецЕсли;
	
	Если тз = Неопределено Тогда // создаем пустую ТЗ
		
		ОписаниеТипаДата   			= Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор");
		ОписаниеТипаСтрока 			= Новый ОписаниеТипов("Строка");
		
		тз = Новый ТаблицаЗначений;
		
		Если ВидДанных = "Документы" Тогда
			
			тз.Колонки.Добавить("Дата", 			ОписаниеТипаДата);					
			тз.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор); // GUID подтверждаемого документа
			тз.Колонки.Добавить("ВидДокумента",  	ОписаниеТипаСтрока);
			тз.Колонки.Добавить("ИдВидДокументаМТ", ОписаниеТипаИдентификатор); // идентификатор (GUID) вида документа в МТ
			тз.Колонки.Добавить("ДатаДокумента", 	ОписаниеТипаДата); 			// gi_180123 добавлено фиксирование даты создания документа в МУ для более удобного отображения "Журнала обмена данными" для пользователя.
			
		ИначеЕсли ВидДанных = "Справочники" Тогда
			
			тз.Колонки.Добавить("Дата", 				ОписаниеТипаДата);
			тз.Колонки.Добавить("Идентификатор", 		ОписаниеТипаИдентификатор); // GUID подтверждаемого элемента справочника
			тз.Колонки.Добавить("ИдВидСправочникаМТ",	ОписаниеТипаИдентификатор); // gi_170830 идентификатор (GUID) справочника в МТ
			
		ИначеЕсли ВидДанных = "Фото" Тогда
			
			тз.Колонки.Добавить("Дата", 			ОписаниеТипаДата);
			тз.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор); // GUID подтверждаемого изображения

		Иначе
			ВызватьИсключение("Функция ПодтвержденияСДОткрыть(): неизвестное значение параметра ВидДанных = """ + ВидДанных + """");
		КонецЕсли; 

	КонецЕсли;
	
	Если ВидДанных = "Документы" Тогда
	
		Если тз.Колонки.Найти("ДатаДокумента") = Неопределено Тогда 
			ОписаниеТипаДата   = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
			тз.Колонки.Добавить("ДатаДокумента", ОписаниеТипаДата); // дата создания документа в МУ
			Если Не ДляЧтения Тогда
				ПодтвержденияСДСохранить(ВидДанных, СсылкаМУ, тз);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат тз;
	
КонецФункции

Процедура ПодтвержденияУдалить(ВидДанных, мСсылкиМУ = Неопределено) 
	
	Если мСсылкиМУ = Неопределено Тогда
		ТЗ = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТЗ = Неопределено Тогда
			Возврат;
		Иначе
			мСсылкиМУ = ТЗ.ВыгрузитьКолонку("ID");
		КонецЕсли;
	КонецЕсли;
	
	мИмена = Новый Массив;	
	
	Для Каждого СсылкаМУ Из мСсылкиМУ Цикл
		мИмена.Добавить(ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ));
	КонецЦикла;
	
	Если СДХранитьВФайлах() Тогда
		
		Каталог = ПодкаталогДанных("Входящие");
		Для Каждого ИмяФайла Из мИмена Цикл
			ПолныйПуть = Каталог + ИмяФайла;
			Попытка
				УдалитьФайлы(ПолныйПуть);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		
		УдалитьЗначенияНастроек(мИмена);	
		
	КонецЕсли;
	
КонецПроцедуры

// ПодтвержденияДанных
#КонецОбласти 

#Область ВыгрузкаДанных

Функция СоздатьФайлВыгрузкиДанных(ИмяФайлаВыгрузки)

	ДокОбмена = Новый ЗаписьXML();
	Попытка
		ДокОбмена.ОткрытьФайл(ИмяФайлаВыгрузки);
		ДокОбмена.ЗаписатьОбъявлениеXML();	
		ДокОбмена.ЗаписатьНачалоЭлемента("DATA");

		ДокОбмена.ЗаписатьАтрибут("DBVERSION", "1977");
		
		ДокОбмена.ЗаписатьАтрибут("DATASOURCENAME", "МобильнаяТорговля");
		ДокОбмена.ЗаписатьАтрибут("DATASOURCEVERSION", "1.0.1"); // Ратмир

		ДокОбмена.ЗаписатьАтрибут("CONFIG1CNAME", СокрЛП(Метаданные.Имя));
		ДокОбмена.ЗаписатьАтрибут("CONFIG1CVERSION", СокрЛП(Метаданные.Версия));

		Возврат ДокОбмена;
	Исключение
		Текст = НСтр("ru = 'Ошибка создания файла выгрузки по причине:'") + " " + ОписаниеОшибки();
		ОповеститьОСобытии(Текст, "ОшибкаОбмен", , "ТекущийАгент");
		Возврат Неопределено;
	КонецПопытки;

КонецФункции 

Процедура ЗакрытьФайлВыгрузки(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.Закрыть();

КонецПроцедуры

//vd_181024 Добавлен параметр МенеджерВТ, нужен для получения Основного плна прадаж
Процедура ВыгрузитьКонстанты(ДокОбмена, МенеджерВТ)     

	ДокОбмена.ЗаписатьНачалоЭлемента("CONSTANTS");
	ДобавитьПоле(ДокОбмена, "Comment", "Константы");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Агент = ВыбНастройкиАгента.Пользователь;

	// НаименованиеАгента
	ДобавитьКонстанту(ДокОбмена, "a2e1cc68-0624-45a6-8057-efd35259b9fe", СокрЛП(Агент)); 
	
	// ИдентификаторАгента
	ДобавитьКонстанту(ДокОбмена, "79c698db-3c55-465e-acfe-4741acdd5655", Агент.УникальныйИдентификатор());
	
	// Дата последней выгрузки данных из ЦБД
	ДобавитьКонстанту(ДокОбмена, "d0604fdf-b2a5-44b7-b84d-db2a9a691918", Формат(ТекущаяДата(), "ДФ=гггг-ММ-дд'T'ЧЧ:мм:сс"));

	// Константа измененной нумерации - только для УТ 8, ред. 11
	ДобавитьКонстанту(ДокОбмена, "c186c395-658c-4b42-b007-f50da543a9d8", "1");
	
	//vd_181217 Перенесена в настройки мобильного приложения.
	//// Константа ТорговляСКолес, при включенной настройке документ "Реализация" будет доступным для редактирования.  
	//ДобавитьКонстанту(ДокОбмена, "72889bff-cc95-4c2e-9c4e-0d28e2efbf7c", ТорговляСКолес);
	
	// Основная организация
	ДобавитьКонстанту(ДокОбмена, "13faf2a0-3d1e-469e-bc53-cdada6ac1375", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнаяОрганизация)); 
	
	// Основной склад
	ДобавитьКонстанту(ДокОбмена, "86ba5dad-16d0-46b8-9d8d-3eab2cf08685", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнойСклад));
	
	// Мобильный склад
	ДобавитьКонстанту(ДокОбмена, "448b6fab-5e21-479c-9a9a-63e8eced59b9", 
			//?(ТорговляСКолес И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), ИдентификаторСсылки(ВыбНастройкиАгента.МобильныйСклад), ""));
			?(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ТорговляCКолес.Значение И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), ИдентификаторСсылки(ВыбНастройкиАгента.МобильныйСклад), ""));
	
	// Основной тип цены
	ДобавитьКонстанту(ДокОбмена, "7bc85296-f536-411e-aaa9-74ad5c7adea2", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнойТипЦены)); 

	ВалютаУчета = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Если ВалютаУчета.Пустая() Тогда
		ВалютаУчета = КонстантыПолучитьЗначение("ВалютаУправленческогоУчета");
	КонецЕсли;
	ДобавитьКонстанту(ДокОбмена, "d2b5508c-7453-4a52-b803-a846992a485d", ВалютаУчета.Наименование);
	
	// Значение надписи поля "Код" в МУ
	ДобавитьКонстанту(ДокОбмена, "7268af8a-6532-4ad0-bc63-3832f3c0d96f", 
			?(РежимВыгрузкиКодовНоменклатуры = "АРТИКУЛ", "Артикул", "Код"));
	
	// 	Константа ЕдиницаИзмеренияВеса
	ДобавитьКонстанту(ДокОбмена, "13af34a5-664d-4aad-a29c-eefc04fefca9", КонстантыПолучитьЗначение("ЕдиницаИзмеренияВеса").Наименование);
	
	// Константа ИспользоватьХарактеристикиНоменклатуры
	ДобавитьКонстанту(ДокОбмена, "6e9470db-c618-4bf8-b510-d1e39e2217f6", 
			ЗначениеВСтрокуДляXML(КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики));
	
	// Пересчет в базовые единицы 
	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		ДобавитьКонстанту(ДокОбмена, "0d0b118f-a77d-4a90-adfb-c79e5eb08cdb", "0");
	КонецЕсли;
	
	// Точность цены, количества и скидки
	ДобавитьКонстанту(ДокОбмена, "27952ab3-1365-4b56-a0ef-34ec0133e5d3", "2");
	ДобавитьКонстанту(ДокОбмена, "5d54ed85-fdea-4027-8ecd-129c27bdbf64", "2");
	ДобавитьКонстанту(ДокОбмена, "a978f039-3f17-4705-b7f6-16c580c9ac5f", "2");
	
	//gi_180319 минимальный вид цены
	ДобавитьКонстанту(ДокОбмена, "0a253e8b-9043-414b-8026-0c9369f781ad", МинимальныйВидЦены());
	
	ДобавитьКонстанту(ДокОбмена, "b201164e-e265-4c1d-b3d0-0579bcd1fda6", ИспользоватьСоглашения() Или ИспользоватьДоговоры());
	
	// Использовать торговые точки //vd_180710 Добавлен РежимВыгрузкиРекомендуемый
	ДобавитьКонстанту(ДокОбмена, "8c52bbbf-8bbb-447d-b18b-06860d372818",РежимВыгрузкиРекомендуемый ИЛИ ИспользоватьПунктыРазгрузки Или ИспользоватьКонтрагентов Или ИспользоватьАдресаДоставки);	// В МТ - это константа "ИспользоватьТорговыеТочки" // sd_171107
	
	// Режим выгрузки в МУ //vd_180710 Добавлена
	ДобавитьКонстанту(ДокОбмена, "42daa32f-568b-4c20-9813-73caf7c0a764", РежимВыгрузкиРекомендуемый);
	
	// Использовать контрагентов для рекомендуемого режима выгрузки //vd_180710 Добавлена
	Если РежимВыгрузкиРекомендуемый Тогда 
		ДобавитьКонстанту(ДокОбмена, "325a12e0-9aa1-4899-a4e9-bb9896ff5795", ИспользоватьКонтрагентов);	
	КонецЕсли;

	// Фактический адрес
	ДобавитьКонстанту(ДокОбмена, "1b3d41b2-eb00-4f25-a476-6a668c5e69f0", ЗначениеВСтрокуДляXML(Справочники.ВидыКонтактнойИнформации.АдресПартнера));
	ДобавитьКонстанту(ДокОбмена, "0270b3d5-4213-419b-9e3a-48cba4caec04", ВыгружатьИсториюПродаж);

	Если ВыделятьЦветомПросроченныеДолги Тогда
		стрЦвет = ЦветВСтроку(ЦветПросроченныхДолгов);
		Если стрЦвет = "0,0,0" Тогда // Если не указан для агента определенный цвет, то по умолчанию выделяем красным
			стрЦвет = "255,0,0";
		КонецЕсли;
		// Цвет выделения просроченных долгов
		ДобавитьКонстанту(ДокОбмена, "9c60a778-7db0-4b3a-89d5-ebe6b56b1d7f", стрЦвет); // цвета передаем в виде строки R,G,B
	КонецЕсли;

	Если ИспользоватьПунктыРазгрузки Тогда 
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = "Пункт разгрузки";
		НадписьТорговыеТочки = "Пункты разгрузки";
		//vd_180425 Добавил Условие ИспользоватьКонтрагентов
		ДобавитьКонстанту(ДокОбмена, "f2e1afa7-292c-42d4-950d-7da550d2fda4", ?(ИспользоватьКонтрагентов, "Контрагент", "Партнер")); 
	ИначеЕсли ИспользоватьАдресаДоставки Тогда
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = "Адрес доставки";
		НадписьТорговыеТочки = "Адреса доставки";
	Иначе
		
		//vd_180710 Добавлено условие учета РежимВыгрузкиРекомендуемый
		
		// Значения надписи поля "Контрагент" в МУ
		НадписьКонтрагент  = ?(РежимВыгрузкиРекомендуемый, "Контрагент", "Партнер");
		НадписьКонтрагенты = ?(РежимВыгрузкиРекомендуемый, "Контрагенты", "Партнеры");
		
		ДобавитьКонстанту(ДокОбмена, "f2e1afa7-292c-42d4-950d-7da550d2fda4", НадписьКонтрагент);
		ДобавитьКонстанту(ДокОбмена, "cb188c72-9fbd-4b08-a321-440ab389e177", НадписьКонтрагенты);
			
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = ?(РежимВыгрузкиРекомендуемый, "Партнер", "Контрагент");
		НадписьТорговыеТочки = ?(РежимВыгрузкиРекомендуемый, "Партнеры", "Контрагенты");
			
	КонецЕсли;
	
	ДобавитьКонстанту(ДокОбмена, "5728ed47-0dbc-48a9-b37c-e7808766c48c", НадписьТорговаяТочка);
	ДобавитьКонстанту(ДокОбмена, "bcca6cef-853c-42f4-9b10-2ca02b1a5556", НадписьТорговыеТочки);
	
	Если ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" Тогда
		НадписьДоговор  = "Договор";
		НадписьДоговоры = "Договоры";
	Иначе 
		НадписьДоговор  = "Соглашение";
		НадписьДоговоры = "Соглашения";
	КонецЕсли;
	ДобавитьКонстанту(ДокОбмена, "57f7ae38-8fed-4ab4-aa22-6374403ac0ac", НадписьДоговор);
	ДобавитьКонстанту(ДокОбмена, "9102cd20-6414-42ba-86d1-ea32410e8d42", НадписьДоговоры);
	
	//vd_181106 добавлена константа ИспользоватьПланыПродажПоТоварнымКатегориям
	//vd_181024 убрано из условия гКэшОсновнойПланПродаж ,перделана логика
	//vd_180330 Использование планов продаж
	Если ИспользоватьПланыПродаж ИЛИ ИспользоватьПланыПродажПоТоварнымКатегориям Тогда 
		ОсновнойПланПродаж = ПолучитьОсновнойПланПродаж(МенеджерВТ);
		Если ОсновнойПланПродаж = Неопределено Тогда
			// Использование планов продаж по Номенклатуре
			ДобавитьКонстанту(ДокОбмена, "c26639d8-f729-4c9f-abb4-7154ae9c632b", 0);
			// Использование планов продаж по товарной категории
			ДобавитьКонстанту(ДокОбмена, "a053bb15-75bd-410c-894d-d11ab3499d35", 0);
		Иначе
			// Использование планов продаж по Номенклатуре
			ДобавитьКонстанту(ДокОбмена, "c26639d8-f729-4c9f-abb4-7154ae9c632b", ?(ИспользоватьПланыПродаж, 1, 0));
			// Использование планов продаж по товарной категории
			ДобавитьКонстанту(ДокОбмена, "a053bb15-75bd-410c-894d-d11ab3499d35", ?(ИспользоватьПланыПродажПоТоварнымКатегориям, 1, 0));
			// Основной план продаж
			ДобавитьКонстанту(ДокОбмена, "50f284e8-bcd6-47d4-8dd1-181d9592cb20", Строка(ОсновнойПланПродаж.УникальныйИдентификатор()));
		КонецЕсли;
	Иначе
		// Использование планов продаж по Номенклатуре
		ДобавитьКонстанту(ДокОбмена, "c26639d8-f729-4c9f-abb4-7154ae9c632b", 0);
		// Использование планов продаж по товарной категории
		ДобавитьКонстанту(ДокОбмена, "a053bb15-75bd-410c-894d-d11ab3499d35", 0);
	КонецЕсли;	
	
	// Служебные данные для МУ - в них хранится дата и время конца загруженного трека
	стррЗначения = СДПрочитать(СДИмяФайлаДляМУ(ВыбНастройкиАгента.СсылкаМУ)); // служебные данные для МУ
	Если Тип(стррЗначения) = Тип("Структура") И стррЗначения.Свойство("ПоследнееВремяТрека") Тогда
		ДобавитьКонстанту(ДокОбмена, "df297ad7-e2ce-478a-974e-fb399239e23e", стррЗначения.ПоследнееВремяТрека);
	КонецЕсли;
	
	//vd_180330 ВидыДоставки
	Если ИспользоватьВидыДоставки Тогда
		ДобавитьКонстанту(ДокОбмена, "ea614964-30b8-4065-bd65-940e38db1f31", 1);	
	КонецЕсли;
	
	//gi_180523 - новая константя для МТ релиза 20.4 - ЗапретитьПродажиБезУказанияЦены, см. макет "Версии"
	ДобавитьКонстанту(ДокОбмена, "b7f84ce4-5991-4393-8897-fec2c8d7fc69", ЗапретитьПродажиБезУказанияЦены);	

	//vd_181128 РазрешитьСоздаватьЗаявкуНаВозврат
	ДобавитьКонстанту(ДокОбмена, "432faa73-f1cf-4bfe-bb26-83d5da949202", РазрешитьСоздаватьЗаявкуНаВозврат);	
	
	//vd_190402 СозданиеЗаданий
	ДобавитьКонстанту(ДокОбмена, "4280ae75-b17c-48c2-9140-4fc09853a4ad", 0);	
	
	//vd_190402 РедактироватьЗаданияПослеЗавершения
	ДобавитьКонстанту(ДокОбмена, "bd5b958e-d8fe-4155-8975-f9f42f701175", 0);	
	
	//vd_190402 УчитыватьПорядокВыполненияЗадач
	ДобавитьКонстанту(ДокОбмена, "4ec26a86-9edb-432c-9e3e-3ffd8096c165", 0);	
	
	ВыгрузитьПерсональныеНастройкиАгента(ДокОбмена);

	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CONSTANTS

КонецПроцедуры

Процедура ВыгрузитьПерсональныеНастройкиАгента(ДокОбмена)

	Если Не ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения) Тогда
		
		ОповеститьОСобытии("Не указаны настройки мобильного приложения.");
		
	Иначе
		
		Для Каждого ЭлементНастройки Из ВыбНастройкиАгента.НастройкиМобильногоПриложения Цикл
			
			//((gi_180316
			Настройка = ЭлементНастройки.Значение;
			Если ПустаяСтрока(Настройка.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			//))gi_180316
			
			//vd_180312 Баг 31879 (Запрещено создание документов при выключенном GPS) Добавил условие. 
			Если ЭлементНастройки.Ключ = "ПоведениеДокументаБезКоординат" Тогда
				Если Настройка.Значение = "ЗапросПовторнойПопытки" Тогда
					Значение = "0"; 
				ИначеЕсли Настройка.Значение = "ПроводитьБезКоординат" Тогда
					Значение = "1";					
				ИначеЕсли Настройка.Значение = "ЗапрещатьПроводить" Тогда
					Значение = "2";					
				ИначеЕсли Настройка.Значение = "ЗапрещатьПроводитьИСохранять" Тогда
					Значение = "3";
				Иначе //gi_180316 + уведомление о неизвестном значении
					Текст = "Неизвестное значение у настройки ""ПоведениеДокументаБезКоординат"" = ""%1""!";
					ВызватьИсключение(СтрШаблон_(Текст, Настройка.Значение));
				КонецЕсли;
			ИначеЕсли ЭлементНастройки.Ключ = "ИспОграничениеСкидки" Тогда //vd_180320 Выгрузка ИспользоватьОграничениеСкидки
				Значение = ?(Настройка.Значение = 0, 0, 1);
			ИначеЕсли ЭлементНастройки.Ключ = "СписокЗакладокЖурнала" Тогда //vd_180814 Добавлено условие. При выгрузке выгружает представление списка значений, а нужно значение.
				Значение = Новый СписокЗначений;
				Для Каждого Элемент Из Настройка.Значение Цикл
					Значение.Добавить(Элемент.Значение);		
				КонецЦикла;
			Иначе
				Значение = Настройка.Значение;
			КонецЕсли;
			
			ДобавитьКонстанту(ДокОбмена, Настройка.Идентификатор, ЗначениеВСтрокуДляXML(Значение));
			
		КонецЦикла;

	КонецЕсли;
	
	ДобавитьКонстанту(ДокОбмена, "c21ed754-43d4-423d-bdb6-8d2f36b9f8d1", ВыбНастройкиАгента.Префикс);
	ВыгрузитьНастройкиФоновойПередачиТрека(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьНастройкиФоновойПередачиТрека(ДокОбмена)

	Если ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения) И 
		ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("РасписаниеВеденияТрека") Тогда 
		Расписание = ВыбНастройкиАгента.НастройкиМобильногоПриложения.РасписаниеВеденияТрека.Значение;
		Если СтруктураЕстьСвойства(Расписание, "ВремяНачала,ВремяОкончания,ДниНедели,ПериодЗаписи") Тогда
			РабочееВремя = Расписание.ВремяНачала + "-" + Расписание.ВремяОкончания;
			ДобавитьКонстанту(ДокОбмена, "1de1dae1-a088-4c5b-a68e-4d233b49683a", РабочееВремя);
			ДобавитьКонстанту(ДокОбмена, "428f867c-0bf1-45b2-b812-ef1d284d3e3f", Расписание.ДниНедели);
			ДобавитьКонстанту(ДокОбмена, "e38fe34e-f36a-44c9-9dbd-a29f7c925940", Расписание.ПериодЗаписи);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ЗапросыОбновления()

	Если Не ВременныеТаблицы.Свойство("ЗапросыМобильныхУстройств") Тогда // значит статусы партнеров не задавались
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат ВременныеТаблицы.ЗапросыМобильныхУстройств;
	КонецЕсли;
	
КонецФункции 

#Область ВыгрузкаПодтверждений

Процедура ВыгрузитьПодтверждения(ДокОбмена) 
	
	ВыгрузитьПодтвержденияСправочников(ДокОбмена);
	ВыгрузитьПодтвержденияДокументов(ДокОбмена);
	ВыгрузитьПодтвержденияФотографий(ДокОбмена); // gi_180418 - добавлено	
	
КонецПроцедуры

// sd_10082017 - выгрузка подтверждений для справочников
Процедура ВыгрузитьПодтвержденияСправочников(ДокОбмена)
	
	тз = ПодтвержденияСДОткрыть("Справочники", ВыбНастройкиАгента.СсылкаМУ, Истина);
	
	Если тз = Неопределено Тогда
		Возврат; // файл подтверждений или отсутствует или заблокирован, соответствующее предупреждение уже выведено
	КонецЕсли;      
	
	тз.Сортировать("ИдВидСправочникаМТ"); //vd_180918 тз.Сортировать("Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения справочников");
		
		СтррЗапись = Новый Структура("GUID");
		
		ИдВидСправочникаМТ = Неопределено;
		
		Для Каждого СтрокаТ Из тз Цикл
			
			//vd_180918 не выгружаеть нулевые идентификаторы
			Если СтрокаТ.ИдВидСправочникаМТ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТ.ИдВидСправочникаМТ <> ИдВидСправочникаМТ Тогда
												
				Если ИдВидСправочникаМТ <> Неопределено Тогда
					ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
					ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
				КонецЕсли;
								
				ИдВидСправочникаМТ = СтрокаТ.ИдВидСправочникаМТ;
				
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
				ДобавитьПоле(ДокОбмена, "GUID", ВРег(ИдВидСправочникаМТ));
				ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения справочника " + ВидОбъектаПоИдентификатору(ИдВидСправочникаМТ, Ложь, "Справочник"));
				ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
				    
			КонецЕсли;
			
			//(( gi_180417 - исправление ошибки - строки ниже вынесены из условия выше
			СтррЗапись.GUID = СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
			//))
			
		КонецЦикла;
		
		Если ИдВидСправочникаМТ <> Неопределено Тогда // закрываем открытые ранее теги
			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
			ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияДокументов(ДокОбмена)
	
	тз = ПодтвержденияСДОткрыть("Документы", ВыбНастройкиАгента.СсылкаМУ, Истина);

	стррТаблицыЖурналовВДок = Новый Структура; // кэш для таблиц журнала виртуальных документов - по этим таблицам проверяем наличие виртуального документа в БД.
	
	тз.Сортировать("ВидДокумента,Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
		ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения документов");
		
		стррЗапись 	 = Новый Структура("GUID"); 				 // структура полей для подтверждения документов
		стррЗаписьСФ = Новый Структура("GUID,dt,DocNumber,A01"); // структура полей для подтверждения Счетов-фактур
		
		ИдВидДокументаМТ = Неопределено;
		
		Для Каждого СтрокаТ Из тз Цикл
			
			Если СтрокаТ.ИдВидДокументаМТ <> ИдВидДокументаМТ Тогда
				
				Если ИдВидДокументаМТ <> Неопределено Тогда
					ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
					ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENT
				КонецЕсли;
				ИдВидДокументаМТ = СтрокаТ.ИдВидДокументаМТ;
				ВидДокументаМТ 	 = ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Ложь, "Документ");
				ЭтоСчетФактура   = (ВидДокументаМТ = "СчетФактура");
				ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
				ДобавитьПоле(ДокОбмена, "GUID", ВРег(ИдВидДокументаМТ));
				ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения документов " + ВидДокументаМТ);
				ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
				ДокМенеджер = ?(ВДокЭтоВиртуальныйДокумент(СтрокаТ.ВидДокумента), Неопределено, Документы[СтрокаТ.ВидДокумента]);
				// ^ Если ДокМенеджер = Неопределено, это значит, что нужно проверить наличие в БД виртуального документа.
				
			КонецЕсли;
			
			Если ПодтвержденияТолькоДляПроведенных 	// Нужно проверить - проведен документ или нет, если не проведен, то не включаем в выгрузку. 
				И Не ЭтоСчетФактура Тогда 			// Исключение для счетов-фактур, т.к. по счетам-фактурам важно передавать в МУ номера счетов-фактур
													// вне зависимости - проведен счет-фактура в УС или нет.
													
				Если ДокМенеджер = Неопределено Тогда // это виртуальный документ
					Если стррТаблицыЖурналовВДок.Свойство(СтрокаТ.ВидДокумента) Тогда
						тзЖурнала = стррТаблицыЖурналовВДок[СтрокаТ.ВидДокумента];
					Иначе
						тзЖурнала = ВОТЗЗагрузить(СтрокаТ.ВидДокумента, Истина);
						стррТаблицыЖурналовВДок.Вставить(СтрокаТ.ВидДокумента, тзЖурнала);
					КонецЕсли; 
					стзЖурнала = тзЖурнала.Найти(СтрокаТ.Идентификатор, "ID");
					Если стзЖурнала = Неопределено Тогда
					    Продолжить; // не выгружаем, документ отсуствтует в БД
					ИначеЕсли стзЖурнала.Статус <> 1 Тогда // документ не проведен (у проведенного документа статус = 1)
						Продолжить;
					КонецЕсли; 
				Иначе // это обычный документ
					СсылкаДок = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.Идентификатор));
					Если Не ЭтоСсылкаНаНайденныйОбъект(СсылкаДок) Тогда 
						Продолжить; // не выгружаем, документ удален в ЦБД
					ИначеЕсли Не СсылкаДок.Проведен Тогда
						Продолжить; // не выгружаем, документ не проведен
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоСчетФактура Тогда // подтверждение для счета-фактуры
				СсылкаДок = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.Идентификатор));
				стррЗаписьСФ.GUID 		= СтрокаТ.Идентификатор;
				стррЗаписьСФ.dt	  		= СсылкаДок.Дата;
				стррЗаписьСФ.DocNumber	= СсылкаДок.Номер;
				стррЗаписьСФ.A01		= СсылкаДок.ДокументОснование;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррЗаписьСФ);
			Иначе // подтверждение для остальных документов
				стррЗапись.GUID = СтрокаТ.Идентификатор;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррЗапись);
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ИдВидДокументаМТ <> Неопределено Тогда // закрываем открытые ранее теги
			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
			ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENT
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS
	
КонецПроцедуры

// gi_180418 выгрузка подтверждений для тэга PICTURES
Процедура ВыгрузитьПодтвержденияФотографий(ДокОбмена)
	
	тз = ПодтвержденияСДОткрыть("Фото", ВыбНастройкиАгента.СсылкаМУ, Истина);
	
	Если тз = Неопределено Тогда
		Возврат; // файл подтверждений или отсутствует или заблокирован, соответствующее предупреждение уже выведено
	КонецЕсли;
	
	тз.Сортировать("Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения фотографий");
	ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
	
	СтррЗапись = Новый Структура("GUID");
	
	Для Каждого СтрокаТ Из тз Цикл
		
		СтррЗапись.GUID = СтрокаТ.Идентификатор;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
	ДокОбмена.ЗаписатьКонецЭлемента(); //PICTURES
	
КонецПроцедуры

// ВыгрузкаПодтверждений
#КонецОбласти

#Область ВыгрузкаСправочников

// В параметре тзКартинки из процедуры возвращается ТЗ свойств картинок, 
// которые нужно выгрузить в МУ.
Процедура ВыгрузитьСправочники(ДокОбмена, МенеджерВТ, тзКартинки)

	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	ДобавитьПоле(ДокОбмена, "Comment", "Справочники");

	ВыгрузитьОрганизации(ДокОбмена, МенеджерВТ);
	ВыгрузитьВидыКонтактнойИнформации(ДокОбмена);
	ВыгрузитьВидыЦен(ДокОбмена, МенеджерВТ);
	ВыгрузитьСклады(ДокОбмена, МенеджерВТ);
	ВыгрузитьКатегорииДокументов(ДокОбмена);
	ВыгрузитьСтатусыПартнеров(ДокОбмена);                                                             
	ВыгрузитьЗапросыОбновления(ДокОбмена);
	ВыгрузитьМтКонтрагенты(ДокОбмена, МенеджерВТ);   
	ВыгрузитьМтТорговыеТочки(ДокОбмена, МенеджерВТ); 	
	ВыгрузитьСоответствияКонтрагентыПартнеры(ДокОбмена, МенеджерВТ); 	//vd_180711 Добавлена выгрузка справочника "Соответствия".
	ВыгрузитьКонтактныхЛицПартнеров(ДокОбмена, МенеджерВТ);
	ВыгрузитьКонтактнуюИнформацию(ДокОбмена, МенеджерВТ);
	ВыгрузитьМТДоговоры(ДокОбмена, МенеджерВТ); 						//vd_180713 Добавлена
	//ВыгрузитьДоговоры(ДокОбмена, МенеджерВТ);   						//vd_180713 Перенесена в ВыгрузитьмтДоговоры() // На самом деле договоры и соглашения одновременно не выгружаются - выгружаются
	//ВыгрузитьСоглашения(ДокОбмена, МенеджерВТ); 						//vd_180713 Перенесена в ВыгрузитьмтДоговоры() // или договоры, или соглашения - проверки в процедурах.
	ВыгрузитьСегментыПартнеров(ДокОбмена, МенеджерВТ);
		
	ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ);
	ВыгрузитьЕдиницыИзмерения(ДокОбмена, МенеджерВТ);
	ВыгрузитьХарактеристикиНоменклатуры(ДокОбмена, МенеджерВТ);
	ВыгрузитьПерсональныеЦены(ДокОбмена, МенеджерВТ);
	ВыгрузитьШтрихКоды(ДокОбмена, МенеджерВТ);
	ВыгрузитьРезультатыПосещений(ДокОбмена);
	ВыгрузитьПечатныеФормы(ДокОбмена);
	ВыгрузитьВидыОплат(ДокОбмена);
	ВыгрузитьВидыДоставки(ДокОбмена); 									//vd_180330 ВидыДоставки.
	ВыгрузитьмтПланыПродаж(ДокОбмена, МенеджерВТ); 						//vd_180718
	ВыгрузитьВидыЗадач(ДокОбмена);										//vd_190402	
	
	тзКартинки = ВыгрузитьСправочникИзображений(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьИсториюПродаж(ДокОбмена, МенеджерВТ);

	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS

КонецПроцедуры

Процедура ВыгрузитьОрганизации(ДокОбмена, МенеджерВТ)

	//МенеджерВТОрганизации(МенеджерВТ); //vd_190313
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Организации");
	стррПоля = Новый Структура("GUID,Name,A02,A03,A04,A05,A06,A07,A09,A010,A017,A018");
			
	Запрос = Новый Запрос(ТекстЗапросаВыгрузкиОрганизаций());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;	
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Ссылка = Выборка.Ссылка; // Организация
		
		КонтактнаяИнформация = КонтактнаяИнформацияОрганизации(Ссылка);
		
		//vd_180410 НДСДляУкраины
		Если гКонфигурация = "УТ_UA" Тогда
			ИспользоватьНДС = Справочники.Организации.ПлательщикНДС(Ссылка, ТекущаяДата());	
		Иначе
			НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Ссылка,, ТекущаяДата());
			ИспользоватьНДС    = (НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		КонецЕсли;	
		
		стррПоля.GUID 	= Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Ссылка.Наименование;
		стррПоля.A02 	= ИспользоватьНДС; // проставляем реквизит "ИспользоватьНДС"
		стррПоля.A03	= КонтактнаяИнформация.ЮрАдрес;
		стррПоля.A04	= КонтактнаяИнформация.Телефон;
		стррПоля.A05	= Выборка.ИНН;
		стррПоля.A06	= Выборка.КПП;
		стррПоля.A07	= Выборка.ОГРН;
		стррПоля.A09	= КонтактнаяИнформация.ФактАдрес;
		стррПоля.A010	= ПрефиксОрганизацииИБ(Выборка.Префикс);
		стррПоля.A017	= СокрЛП(Выборка.НаименованиеПолное);
		стррПоля.A018	= ИспользоватьНДС; // признак "использовать счета-фактуры" - приравниваем к использованию НДС
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьВидыКонтактнойИнформации(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыКонтактнойИнформации", Истина); //vd_180711 Добавлен третий параметр по аналогии с ПРОФ

	ТипыКИ 			 = ТипыКонтактнойИнформации();
	ВидыКИ 			 = ВидыКонтактнойИнформацииВыгрузки();
	СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
	стррПоля 		 = Новый Структура("GUID,Name,A02,A03");
	
	Для Каждого Элемент Из ВидыКИ Цикл
		стррПоля.GUID 	= Элемент.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Элемент.Наименование;
		стррПоля.A02	= ТипыКИ.Получить(Элемент.Тип);
		Если Элемент.Родитель = СправочникВидыКИ.СправочникПартнеры И Не ИспользоватьПунктыРазгрузки Тогда
			стррПоля.A03 = "Контрагенты";
		ИначеЕсли Элемент.Родитель = СправочникВидыКИ.СправочникКонтактныеЛицаПартнеров Тогда
			стррПоля.A03 = "КонтактныеЛица";
		ИначеЕсли Элемент.Родитель = СправочникВидыКИ.СправочникКонтрагенты Тогда 
			стррПоля.A03 =  ?(ИспользоватьПунктыРазгрузки, "Контрагенты", "ТорговыеТочки");
		ИначеЕсли ИспользоватьПунктыРазгрузки И Элемент.Родитель = СправочникВидыКИ.СправочникАлкПунктыРазгрузки Тогда
			стррПоля.A03 = "ТорговыеТочки";
		Иначе
			Продолжить;
		КонецЕсли;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

//vd_190313 Изменена логика
Процедура ВыгрузитьВидыЦен(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТипыЦен");
    стррПоля = Новый Структура("GUID,Name,Code,A02");
	
	Сч = 0;
	ВыборкаРезультат = ВидыЦенВыгрузки(МенеджерВТ);
	
	Пока ВыборкаРезультат.Следующий() Цикл
		стррПоля.GUID = ВыборкаРезультат.Ссылка.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаРезультат.Наименование;
		стррПоля.Code = Сч;
		стррПоля.A02  = ВыборкаРезультат.ЦенаВключаетНДС;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		Сч = Сч + 1;
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьСклады(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Склады");

	стррПоля = Новый Структура("GUID,Code,Name");	
	
	//((vd_190313
	//РезультатЗапроса = СкладыВыгрузки(МенеджерВТ, Ложь);
	//Выборка = РезультатЗапроса.Выбрать();
	Выборка = СкладыВыгрузки(МенеджерВТ);
	//))vd_190313
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Выборка.Ссылка.УникальныйИдентификатор();
		стррПоля.Code = Сч;
		стррПоля.Name = Выборка.Наименование;		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		Сч = Сч + 1;
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКатегорииДокументов(ДокОбмена)
	
	Если Не ВременныеТаблицы.Свойство("КатегорииДокументов") Тогда // значит категории документов не задавались
		Возврат;
	КонецЕсли;
	
	Категории = ВременныеТаблицы.КатегорииДокументов;

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КатегорииДокументов");
	
	СтррПоля = Новый Структура("GUID,Name,A02,A03");

	Для Каждого ЭлементКатегории Из Категории Цикл
		СтррПоля.GUID = ЭлементКатегории.Идентификатор;
		СтррПоля.Name = ЭлементКатегории.Наименование;
		СтррПоля.A02  = ЦветВСтроку(ЭлементКатегории.Цвет);
		СтррПоля.A03  = СтрСоединить_(ЭлементКатегории.СписокДокументов.ВыгрузитьЗначения(), ",");
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

//vd_
Процедура ВыгрузитьСтатусыПартнеров(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.СтатусыКонтрагентов");
	стррПоля = Новый Структура("GUID,Name,A02,A03"); // gi_170902 объявление структуры вынесено за цикл

	ВыгружаемыеСтатусы = СтатусыПартнеровВыгрузки();
	Для Каждого ЭлементСтатуса Из ВыгружаемыеСтатусы Цикл
		стррПоля.GUID = ВРег(ЭлементСтатуса.Идентификатор);
		стррПоля.Name = ЭлементСтатуса.Наименование;
		стррПоля.A02  = ЭлементСтатуса.Предупреждение;
		стррПоля.A03  = ЦветВСтроку(ЭлементСтатуса.Цвет);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьЗапросыОбновления(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Запросы");
	стррПоля = Новый Структура("GUID,Name"); // gi_170902 объявление структуры вынесено за цикл

	ВыгружаемыеЗапросы = ЗапросыОбновления();
	Для Каждого ЭлементЗапроса Из ВыгружаемыеЗапросы Цикл
		стррПоля.GUID = ЭлементЗапроса.Идентификатор;
		стррПоля.Name = ЭлементЗапроса.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

//vd_180709 Переименована из ВыгрузитьКлиентов в ВыгрузитьМтКонтрагенты
Процедура ВыгрузитьМтКонтрагенты(ДокОбмена, МенеджерВТ)
	
	//Для Алк прод режим выгрузки пока не доступен !!!
	
	Если гКонфигурация = "УТ_АП" И НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов Тогда 
		ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ); //vd_190314 ВыгрузитьКонтрагентов_УТАП(ДокОбмена, МенеджерВТ);
		
	ИначеЕсли гКонфигурация = "УТ_АП" И НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов Тогда
		ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ);
		
	ИначеЕсли НЕ РежимВыгрузкиРекомендуемый Тогда
		ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ);
		
	ИначеЕсли РежимВыгрузкиРекомендуемый И ИспользоватьКонтрагентов Тогда
		ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ);
		
	Иначе
		//Ничего не выгружаем
		
	КонецЕсли;
		
КонецПроцедуры

//vd_180709 Переименована ВыгрузитьКонтрагентов в ВыгрузитьмтТорговыеТочки И Переделана
Процедура ВыгрузитьМтТорговыеТочки(ДокОбмена, МенеджерВТ)

	Если НЕ РежимВыгрузкиРекомендуемый И гКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда 
		ВыгрузитьПунктыРазгрузки_УТАП(ДокОбмена, МенеджерВТ);                           				// Для алк продукции режим выгрузки рекомендуемый не доступен.
		
	ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ИспользоватьАдресаДоставки Тогда 
		ВыгрузитьАдресаДоставки(ДокОбмена, МенеджерВТ);  												// При использовании адресов доставки, режим выгрузки рекомендуемый не доступен.
		
	ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ИспользоватьКонтрагентов Тогда
		ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ);													// Выгружаем Контрагентов в справочник МТ Торговые точки
		
	ИначеЕсли РежимВыгрузкиРекомендуемый Тогда
		ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ); 														// Выгружаем Партнеров    в справочник МТ Торговые точки

	Иначе
		//Этой ситуации не должно быть.
		
	КонецЕсли;          	

КонецПроцедуры

//vd_180709 Доработан режим выгрузки рекомендуемый. Выгружает партнеров в справочник МТ: ТорговыеТочки или Контрагенты, зависит от режима выгрузки "РежимВыгрузкиРекомендуемый". 
Процедура ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ)   
	
	Если РежимВыгрузкиРекомендуемый Тогда
		ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки"); 
		стррПоля   = Новый Структура("GUID, Name, GrpId0, A07, A011, A020");	
		стррТЧ	   = Новый Структура("GUID, Comment", "34112818-d105-4a9c-adcd-40c19ba97951", "Сегменты");	
		стррПоляТЧ = Новый Структура("GUID, CtlgId, A01");
	Иначе
		ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Контрагенты"); 
		стррПоля   = Новый Структура("GUID, Name, GrpId0, A06, A012, A018, A023");	
		стррТЧ	   = Новый Структура("GUID, Comment", "321b0abd-951f-4c01-a77e-331d2dc91620", "Сегменты");	
		стррПоляТЧ = Новый Структура("GUID, CtlgId, A01");
	КонецЕсли;
	
	ВыгружатьСегменты = ИспользоватьСоглашения(); // Если выгружаем соглашения, то выгружаем и сегменты партнеров. Сегменты партнеров выгружаются справочнике "Контрагенты" в ТЧ "Сегменты" МТ.
	
	РезультатЗапроса = ДанныеПоПартнерамДляВыгрузки(МенеджерВТ);
	
	//((vd_190218 Выгрузка соглашений по умолчанию. Получение тз Соглашений По умолчанию. По умолчанию выбираются индивидуальные соглашения наиболее поздней даты.
	Если ВыгружатьСегменты Тогда 
		тзСоглашения = ПолучитьСоглашенияПоУмолчанию(МенеджерВТ, Истина);
		стррПоля.Вставить(?(РежимВыгрузкиРекомендуемый, "A023", "A08"));
	КонецЕсли;
	//))vd_190218	
		
	Выборка = ?(ВыгружатьСегменты, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), РезультатЗапроса.Выбрать());
	
	Если Не ВыгружатьСегменты Тогда // выгрузка без ТЧ "Сегменты"
		
		Пока Выборка.Следующий() Цикл
			ВыгрузитьПартнера(ДокОбмена, стррПоля, Выборка, Истина); 
		КонецЦикла;			
	
	Иначе // выгрузка с ТЧ "Сегемнты"
		
		ТекПартнер = Неопределено;
		ОткрытТэгТаблицы = Ложь;
		ИдПустойСегментПартнера = ИдПустойСегментПартнера();
		
		Пока Выборка.Следующий() Цикл
			
			ВыборкаСсылка = Выборка.Ссылка;
			
			Если ВыборкаСсылка <> ТекПартнер Тогда
				
				Если ОткрытТэгТаблицы Тогда
					ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
					ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие TABLES >
					ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие ITEM >
					ОткрытТэгТаблицы = Ложь;
				КонецЕсли; 
				ТекПартнер = ВыборкаСсылка;
				
				//((vd_190218 Выгрузка соглашений по умолчанию.
				Если РежимВыгрузкиРекомендуемый Тогда
					стррПоля.A023 = ПолучитьСоглашениеПоУмолчанию(тзСоглашения, Выборка.Ссылка);
				Иначе
					стррПоля.A08  = ПолучитьСоглашениеПоУмолчанию(тзСоглашения, Выборка.Ссылка); 				
				КонецЕсли;
				//))vd_190218 Выгрузка соглашений по умолчанию.
				
				ВыгрузитьПартнера(ДокОбмена, стррПоля, Выборка, Ложь); // Узел ITEM остается открытым

				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES"); // открытие TABLES
				ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧ); // выгружаем ТЧ для каждого партнера, т.к. если у него нет сегмента, выгружаем ссылку на пустой сегмент
				ОткрытТэгТаблицы = Истина;
				стррПоляТЧ.CtlgId = ВыборкаСсылка;				
				
			КонецЕсли;
			
			стррПоляТЧ.GUID   = Новый УникальныйИдентификатор();
			стррПоляТЧ.A01	  = ?(ЗначениеЗаполнено(Выборка.Сегмент), Выборка.Сегмент, ИдПустойСегментПартнера);
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
			
		КонецЦикла;
		
		Если ОткрытТэгТаблицы Тогда
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие TABLES >
			ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие ITEM >
		КонецЕсли;
	
	КонецЕсли; 

	ДокОбмена.ЗаписатьКонецЭлемента(); 
	
	ВыгрузитьГруппировкиПартнеров(ДокОбмена, МенеджерВТ);
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

// vd_190218 Добавлена
//  Возвращает тз индивидуальные соглашения для партнеров, по наиболее поздней дате(Справочники.СоглащенияСКлиентами.Дата)
//  Если Соглашения не выгружается, то возвращает Неопределено.
//
// Параметры:
//  МенеджерВТ	 - менеджер ВТ - 
//  флПартнер	 - Булево	   - Если истина то формируем тз для партнеров, если Ложь то для контрагентов.
// 
// Возвращаемое значение:
// тз/неопределено  - 
//
Функция ПолучитьСоглашенияПоУмолчанию(МенеджерВТ, флПартнер)
	
	тзСоглашения = Неопределено;
	
	ВТ_Соглашения = МенеджерВТ.Таблицы.Найти("ВТ_Соглашения");
	Если ВТ_Соглашения <> Неопределено Тогда
		Запрос = Новый Запрос;
		//Партнер в индивидуальных соглашениях всегда заполнен.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Соглашения.Ссылка КАК Соглашение,
		               |	ВТ_Соглашения.[ПартнерКонтрагент] КАК ПартнерКонтрагент,
		               |	ВТ_Соглашения.Дата КАК ДатаСоглашения
		               |ПОМЕСТИТЬ ВТ_СоглашенияИндивидуальные
		               |ИЗ
		               |	ВТ_Соглашения КАК ВТ_Соглашения
		               |ГДЕ
		               |	ВТ_Соглашения.Типовое = ЛОЖЬ [УсловиеПустыхКонтрагентов]
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент КАК ПартнерКонтрагент,
		               |	МАКСИМУМ(ВТ_СоглашенияИндивидуальные.ДатаСоглашения) КАК ДатаСоглашения
		               |ПОМЕСТИТЬ ВТ_МаксДата
		               |ИЗ
		               |	ВТ_СоглашенияИндивидуальные КАК ВТ_СоглашенияИндивидуальные
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МИНИМУМ(ВТ_СоглашенияИндивидуальные.Соглашение) КАК Соглашение,
		               |	ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент КАК ПартнерКонтрагент
		               |ИЗ
		               |	ВТ_СоглашенияИндивидуальные КАК ВТ_СоглашенияИндивидуальные
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксДата КАК ВТ_МаксДата
		               |		ПО ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент = ВТ_МаксДата.ПартнерКонтрагент
		               |			И ВТ_СоглашенияИндивидуальные.ДатаСоглашения = ВТ_МаксДата.ДатаСоглашения
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_СоглашенияИндивидуальные
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_МаксДата";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ПартнерКонтрагент]", ?(флПартнер, "Партнер", "Контрагент"));		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеПустыхКонтрагентов]", ?(флПартнер, "", "И НЕ ВТ_Соглашения.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка)"));
		
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ; 
		тзСоглашения = Запрос.Выполнить().Выгрузить();
	КонецЕсли;		
	
	Возврат тзСоглашения;
КонецФункции

// Функция - Получить соглашение по умолчанию
//
// Параметры:
//  тзСоглашения - ТаблицаЗначений		 - 2 колонки (Соглашение, партнер)
//  Партнер		 - Справочники.Партнеры  - Партнер
// 
// Возвращаемое значение:
//  гуид - идентификатор соглашения. Если индивидуальное соглашение не найдена,для партнера, то возвращается пустая строка. 
//
Функция ПолучитьСоглашениеПоУмолчанию(тзСоглашения, ПартнерКонтрагент)
	
	Соглашение = "";
	Если тзСоглашения <> Неопределено Тогда
		стзРезультат = тзСоглашения.Найти(ПартнерКонтрагент, "ПартнерКонтрагент");
		Если стзРезультат <> Неопределено Тогда
			Соглашение = стзРезультат.Соглашение.УникальныйИдентификатор();
			тзСоглашения.Удалить(стзРезультат); //Удаляем найденную строчку для ускорения поиска других партнеров
		КонецЕсли;
	КонецЕсли;
	
	Возврат Соглашение;	
КонецФункции

Процедура ВыгрузитьПартнера(ДокОбмена, стррПоля, Выборка, ЗакрытьУзел)
	
	ВыборкаСсылка = Выборка.Ссылка;
	стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
	стррПоля.Name = ВыборкаСсылка.Наименование;
	стррПоля.GrpId0 = ВыборкаСсылка.ГруппаДоступа; 
	
	Если РежимВыгрузкиРекомендуемый Тогда
		стррПоля.A07  = ВыборкаСсылка.Комментарий;
		стррПоля.A011 = Выборка.ИспользоватьПерсональныеЦены;
		стррПоля.A020 = ВРег(Выборка.Статус);
	Иначе
		стррПоля.A06  = ВРег(Выборка.Статус);
		стррПоля.A012 = СокрЛП(ВыборкаСсылка.НаименованиеПолное);
		стррПоля.A018 = Выборка.ИспользоватьПерсональныеЦены;
		стррПоля.A023 = ВыборкаСсылка.Комментарий;
	КонецЕсли;
	
	ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, ЗакрытьУзел); 

КонецПроцедуры

Процедура ВыгрузитьКонтактныхЛицПартнеров(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактныеЛица");

	//vd_180710 РежимВыгрузкиРекомендуемый
	Если РежимВыгрузкиРекомендуемый Тогда
		стррПоля = Новый Структура("GUID,Name,A04,A05");
	Иначе
		стррПоля = Новый Структура("GUID,Name,A03,A05");
	КонецЕсли;
	
	РезультатЗапроса = ДанныеПоКонтактнымЛицамПартнеровВыгрузки(МенеджерВТ);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыборкаСсылка = Выборка.Ссылка;
		стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаСсылка.Наименование;
		//vd_180710 РежимВыгрузкиРекомендуемый
		Если РежимВыгрузкиРекомендуемый Тогда
			стррПоля.A04  = Выборка.Партнер;
		Иначе
			стррПоля.A03  = Выборка.Партнер;
		КонецЕсли;
		стррПоля.A05  = Выборка.Комментарий;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Функция ИдПустойСегментПартнера() Экспорт
	
	Возврат "108E834B-33F5-4F8F-90C4-555E4199F974";
	
КонецФункции

Процедура ВыгрузитьСегментыПартнеров(ДокОбмена, МенеджерВТ)
	
	Если Не ИспользоватьСоглашения() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_СегментыПартнеров").ПолучитьДанные();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Сегменты");
	стррПоля   = Новый Структура("GUID,Name");
	стррТЧ	   = Новый Структура("GUID,Comment", "eebd884a-ed7c-49ca-8be9-0dd769fd13af", "Договоры");
	стррПоляТЧ = Новый Структура("GUID,CtlgId,A01");
	
	ТекСегмент = Неопределено;
	ОткрытТэгТаблицы = Ложь;
	
	Пока Выборка.Следующий() Цикл 
		
		Если ТекСегмент <> Выборка.Сегмент Тогда
			
			Если ОткрытТэгТаблицы Тогда
				ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
				ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие TABLES >
				ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие ITEM >
				ОткрытТэгТаблицы = Ложь;
			КонецЕсли;
			
			ТекСегмент = Выборка.Сегмент;
			ВыгрузитьСегментПартнера(ДокОбмена, стррПоля, Выборка);
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES"); // открытие TABLES
			ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧ); // выгружаем ТЧ для каждого партнера, т.к. если у него нет сегмента, выгружаем ссылку на пустой сегмент
			ОткрытТэгТаблицы = Истина;
			стррПоляТЧ.CtlgId = Выборка.Сегмент;				
		
		КонецЕсли; 
			
		стррПоляТЧ.GUID   = Новый УникальныйИдентификатор();
		стррПоляТЧ.A01	  = Выборка.Соглашение;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
		
	КонецЦикла; 
	
	Если ОткрытТэгТаблицы Тогда
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие TABLES >
		ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие ITEM >
		ОткрытТэгТаблицы = Ложь;
	КонецЕсли; 
		
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьСегментПартнера(ДокОбмена, стррПоля, Выборка)
	
	Если ЗначениеЗаполнено(Выборка.Сегмент) Тогда 
		стррПоля.GUID = Выборка.Сегмент;
		стррПоля.Name = Выборка.Сегмент.Наименование;
	Иначе 
		стррПоля.GUID = ИдПустойСегментПартнера();
		стррПоля.Name = "<Не указано>";
	КонецЕсли;
	
	ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь); // остается открытым узел ITEM	

КонецПроцедуры

//vd_190314 Добавлена выгрузка для Алк. прод. Перенесена логика из ВыгрузитьКонтрагентов_УТАП()
//vd_180709 Добавлена
Процедура ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ)
	
	//1. Оприделяем в какой справочник МТ записывать данные Контрагенты или ТорговыеТочки  			//vd_191314 Добавлены условия оприделения справочника мт Справочник.Контрагенты или Справочник.ТорговыеТочки
	Если (гКонфигурация = "УТ_АП" И НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов) Тогда
		флКонтрагенты = Истина;
		
	ИначеЕсли гКонфигурация = "УТ_АП" Тогда
		Возврат; 																					//Для алк продукции режим выгрузки рекомендуемый не доступен.
		
	ИначеЕсли РежимВыгрузкиРекомендуемый И ИспользоватьКонтрагентов Тогда
		флКонтрагенты = Истина;
		
	ИначеЕсли НЕ РежимВыгрузкиРекомендуемый Тогда
		флКонтрагенты = Ложь;
		
	Иначе
		Возврат; 																					//Не выгружаем Контрагентов
		
	КонецЕсли;
	
	//2. Персональные цены 																			//vd_190218 Выгрузка соглашений по умолчанию. Получение тз Соглашений По умолчанию. По умолчанию выбираются индивидуальные соглашения наиболее поздней даты.
	ИспользоватьПерсональныеЦены = ВыгружатьПерсональныеЦены(); 									//Признак использования персональных цен, требуется тестирование.
	Если ИспользоватьПерсональныеЦены Тогда
		тзСоглашения = ПолучитьСоглашенияПоУмолчанию(МенеджерВТ, Ложь);
	КонецЕсли;

	//3. Оприделяем стркутуру данных
	Если флКонтрагенты Тогда
		ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Контрагенты");    
		стррПоля = Новый Структура("GUID,Name,A012,A013,A018,A022,A023,A026"); 						//vd_190314 стррПоля = Новый Структура("GUID,Name,A013,A018,A026");
		Если ИспользоватьПерсональныеЦены Тогда
			стррПоля.Вставить("A08");
		КонецЕсли;
		
	Иначе
		ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки");
		стррПоля = Новый Структура("GUID,Name,A02,A07,A011");
		Если ИспользоватьПерсональныеЦены Тогда
			стррПоля.Вставить("A023");
		КонецЕсли;

	КонецЕсли;
	
	//4. Выборка 
	Выборка = ДанныеПоКонтрагентамДляВыгрузки(МенеджерВТ);

	//5. Заполнение
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID 	= Выборка.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Выборка.Наименование;
		
		Если флКонтрагенты Тогда
			стррПоля.A012	= Выборка.НаименованиеПолное; 											//vd_190314 НаименованиеПолное
			стррПоля.A013	= Выборка.ИНН + ?(ПустаяСтрока(Выборка.ИНН), "", "/") + Выборка.КПП;
			стррПоля.A018	= ИспользоватьПерсональныеЦены;
			стррПоля.A022	= Выборка.КодПоОКПО;													//vd_190314 КодПоОКПО
			стррПоля.A023	= Выборка.ДополнительнаяИнформация;                                     //vd_190314 Комментарий
			стррПоля.A026	= Выборка.ГоловнойКонтрагент;
			Если ИспользоватьПерсональныеЦены Тогда
				стррПоля.A08    = ПолучитьСоглашениеПоУмолчанию(тзСоглашения, Выборка.Ссылка); 		//vd_190218 Выгрузка соглашений по умолчанию.
			КонецЕсли;
		Иначе
			стррПоля.A02	= Выборка.Партнер;
			стррПоля.A07	= Выборка.ДополнительнаяИнформация;
			стррПоля.A011	= ИспользоватьПерсональныеЦены; 										//vd_180814 MOD-28 39387
			Если ИспользоватьПерсональныеЦены Тогда
				стррПоля.A023   = ПолучитьСоглашениеПоУмолчанию(тзСоглашения, Выборка.Ссылка); 		//vd_190218 Выгрузка соглашений по умолчанию.
			КонецЕсли;
		Конецесли;	
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);	
	
КонецПроцедуры
	
//vd_180711 Добавлена выгрузка справочника Соответствия. Справочник нужен для режима "Рекомендуемый".
Процедура ВыгрузитьСоответствияКонтрагентыПартнеры(ДокОбмена, МенеджерВТ)
	
	Если НЕ РежимВыгрузкиРекомендуемый  Тогда
		//Возможно нужно добавить условия, что выгружать соответствие если стоит признак использовать контрагентов, адреса доставки итд, н в ПРОФ этого нет, 
		//	выгружаются всегда, когда стоит режим рекомендуемый.
		Возврат; //Для режима "Совместимый" выгрузка этого справочника не требуется, требуется только для режима "Рекомендуемый"
	Конецесли;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Соответствия", Истина); 
	стррПоля = Новый Структура("GUID,A01,A02");
	
	//((vd_190314
	//РезультатВыборки = ДанныеПоСоответствиям(МенеджерВТ);
	//Выборка = РезультатВыборки.Выбрать();
	Выборка = МенеджерВТ.Таблицы.Найти("ВТ_Соответствия").ПолучитьДанные().Выбрать();
	//))vd_190314
	
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID 	= Новый УникальныйИдентификатор();
		стррПоля.A01 	= Выборка.Контрагент;
		стррПоля.A02 	= Выборка.Партнер;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);	
КонецПроцедуры

Процедура ВыгрузитьКонтактнуюИнформацию(ДокОбмена, МенеджерВТ)
	
	Если гКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда 
		ВыгрузитьКонтактнуюИнформацию_УТ_АП(ДокОбмена, МенеджерВТ);
	Иначе 
		ВыгрузитьКонтактнуюИнформацию_УТ(ДокОбмена, МенеджерВТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьКонтактнуюИнформацию_УТ(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактнаяИнформация", Истина); //vd_180711 добавлен 3 пареаметр = Истина

	ствТипыКИ = ТипыКонтактнойИнформации();
	стррПоля = Новый Структура("GUID,A01,A02,A03,A04,A05,A06");
	
	РезультатЗапроса = ДанныеПоКонтактамПартнеровИКонтактныхЛицВыгрузки(МенеджерВТ);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Новый УникальныйИдентификатор();
		//vd_180710 РежимВыгрузкиРекомендуемый
		Если РежимВыгрузкиРекомендуемый Тогда
			стррПоля.A01 = ?(ИспользоватьКонтрагентов, Выборка.Контрагент, "");
			стррПоля.A02 = Выборка.Партнер;
		Иначе
			стррПоля.A01 = Выборка.Партнер;
			стррПоля.A02 = ?(ИспользоватьКонтрагентов, Выборка.Контрагент, "");
		КонецЕсли;
		стррПоля.A03 = Выборка.КонтактноеЛицо;
		стррПоля.A04 = ствТипыКИ[Выборка.Тип];
		стррПоля.A05 = Выборка.Вид;
		стррПоля.A06 = Выборка.Представление;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

// vd_180713 Добавлена. Выгружает Договоры или соглашения в справочник МТ Договоры.
//
// Параметры:
//  ВыгружатьДоговоры	 - Булево	 - Если Истина, то в справочник МТ Договоры выгружаются договоры, если Ложь то в справочник МТ Договоры выгружаются соглашения.
//
Процедура ВыгрузитьМТДоговоры(ДокОбмена, МенеджерВТ, Знач ВыгружатьДоговоры = Неопределено)
	
	Если ВыгружатьДоговоры = Неопределено Тогда
		Если ИспользоватьДоговоры() Тогда
			ВыгружатьДоговоры = Истина;  //Выгружать договоры
		ИначеЕсли ИспользоватьСоглашения() Тогда
			ВыгружатьДоговоры = Ложь;    //Выгружать соглашения
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;		
		
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Договоры");
	стррПоля = Новый Структура("GUID,Name,A02,A03,A04,A05,A06,A07,A010");
	
	Если ВыгружатьДоговоры Тогда
		//Договоры
		МенеджерВТКонтрагенты(МенеджерВТ);
		МенеджерВТДоговоры(МенеджерВТ);
		РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_Договоры").ПолучитьДанные();
	Иначе
		//Соглашения
		МенеджерВТСоглашения(МенеджерВТ);
		РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_Соглашения").ПолучитьДанные();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Выборка.Ссылка;
		стррПоля.Name = Выборка.Наименование;
		
		Если РежимВыгрузкиРекомендуемый И (ВыгружатьДоговоры ИЛИ ИспользоватьКонтрагентов ИЛИ ИспользоватьПунктыРазгрузки) Тогда
			стррПоля.A02 = Выборка.мтТорговаяТочка;
		Иначе
			стррПоля.A02 = Выборка.мтКлиент; 
		КонецЕсли;	
			
		стррПоля.A03 = Выборка.Дата;
		стррПоля.A04 = Выборка.ДатаОкончанияДействия;
		стррПоля.A05 = Выборка.Организация;
		стррПоля.A06 = ?(ВыгружатьДоговоры, "", Выборка.ВидЦен); // ВидЦен отсутствует в справочнике ДоговорыКонтрагентов
		стррПоля.A07 = Выборка.ИспользоватьНДС;

		Если РежимВыгрузкиРекомендуемый Тогда
			стррПоля.A010 = Выборка.мтКлиент;	
		ИначеЕсли ИспользоватьКонтрагентов ИЛИ ИспользоватьПунктыРазгрузки Тогда
			стррПоля.A010 = Выборка.мтТорговаяТочка;
		КонецЕсли;	
			
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

//vd_190315 Полностью изменена логика
//Было:
//Процедура ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ)
//	
//	ВыгружатьХарактеристики = ВыгружатьХарактеристикиНоменклатуры();
//	КонстантаИспользоватьУпаковкиНоменклатуры = КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры");
//	СчЭлементов = 0;
//	//мВидыЦен = ВидыЦенВыгрузки(МенеджерВТ);        		//vd_190313
//	//мСклады  = СкладыВыгрузки(МенеджерВТ, Истина);        //vd_190313
//
//	КоличествоРеквизитовЦен = 10;
//	КоличествоРеквизитовОстатков = 5;
//	ВсегоВидовЦен = КоличествоВидыЦенВыгрузки(МенеджерВТ); 	//vd_190313 ВсегоВидовЦен = мВидыЦен.Количество();
//	ВсегоСкладов  = КоличествоСкладовВыгрузки(МенеджерВТ);	//vd_190313 ВсегоСкладов  = мСклады.Количество();
//	
//	// первая строка выгружается в заголовке
//	СтрокВТабличнойЧасти = ПолучитьКоличествоСтрокТЧНоменклатуры(ВсегоСкладов, КоличествоРеквизитовОстатков); //vd_180326 Баг 36047 Было: Цел(ВсегоСкладов/КоличествоРеквизитовОстатков);  
//	
//	Если СтрокВТабличнойЧасти = 0 Тогда
//		стррТЧОстатки = Неопределено;
//	Иначе
//		стррТЧОстатки = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
//		стррТЧОстатки.GUID	   		   	= "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d";
//		стррТЧОстатки.Comment	   	   	= "Остатки";	
//		стррТЧОстатки.КоличествоСтрок  	= СтрокВТабличнойЧасти;
//		стррТЧОстатки.ПолеВыгрузки 	   	= "A06";
//		стррТЧОстатки.КоличествоРеквизитов = КоличествоРеквизитовОстатков;
//		стррТЧОстатки.ИмяПоля 		   	= "Остаток";
//	КонецЕсли;
//	
//	СтрокВТабличнойЧасти = ПолучитьКоличествоСтрокТЧНоменклатуры(ВсегоВидовЦен, КоличествоРеквизитовЦен); //vd_180326 Баг 36047 Было:СтрокВТабличнойЧасти = Цел(ВсегоВидовЦен/КоличествоРеквизитовЦен);
//	Если СтрокВТабличнойЧасти = 0 Тогда
//		стррТЧЦены = Неопределено;
//	Иначе
//		стррТЧЦены = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
//		стррТЧЦены.GUID	   		   	  	= "7f72aed2-94f7-4165-b112-c7a69fea70cc";
//		стррТЧЦены.Comment	   	   		= "Цены";
//		стррТЧЦены.КоличествоСтрок 		= СтрокВТабличнойЧасти;
//		стррТЧЦены.ПолеВыгрузки 	  	= "A011";
//		стррТЧЦены.КоличествоРеквизитов = КоличествоРеквизитовЦен;
//		стррТЧЦены.ИмяПоля 		   		= "Цена";
//	КонецЕсли;
//	
//	ВыгружатьТабличныеЧасти = стррТЧОстатки <> Неопределено	Или стррТЧЦены <> Неопределено;
//	
//	
//	///////////////////////////////////////////////////
//	
//	
//	//{{vd_181101 Добавлено поле GrpId2 и убрано A02 и A05 
//	//стррПоля = Новый Структура("GUID,Name,Code,GrpId0,GrpId1,A02,A03,A04,A05,A06,A08,A011,A013,A014,A015,A035,A037,A041,A042,A043,A044,A045,A046,A048,A050,A053");
//	стррПоля = Новый Структура("GUID,Name,Code,GrpId0,GrpId1,A03,A04,A06,A08,A011,A013,A014,A015,A035,A037,A041,A042,A043,A044,A045,A046,A048,A050,A053");
//	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
//		стррПоля.Вставить("GrpId2", "");
//	КонецЕсли;
//	//}}vd_181101
//	
//	// !!! ЗАПРОС !!!
//	//Запрос = ЗапросПоНоменклатуре(МенеджерВТ); // gi_180525 - убран в параметрах массив мВидыЦен, т.к. виды цен уже есть в менеджере ВТ
//	
//	Запрос = ДанныеПоНоменклатуре(МенеджерВТ);
//	
//	Результаты = Запрос.ВыполнитьПакет();
//	
//	//{{vd_180320 Выгрузка ИспользоватьОграничениеСкидки 
//	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ИспОграничениеСкидки") Тогда
//		стррНастройка = ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспОграничениеСкидки;
//		Если НЕ ПустаяСтрока(стррНастройка.Идентификатор) И стррНастройка.Значение > 0 Тогда
//			стррПоля.Вставить("A036", стррНастройка.Значение);	
//		КонецЕсли;
//	КонецЕсли;
//	//}}vd_180320 
//	
//	//(( gi_180319
//	МинимальныйВидЦеныАгента = МинимальныйВидЦены();
//	ВыгружатьМинимальныйВидЦены = ЗначениеЗаполнено(МинимальныйВидЦеныАгента);
//	Если ВыгружатьМинимальныйВидЦены Тогда
//		стррПоля.Вставить("A040");
//		стррПоискМинЦены = Новый Структура("Номенклатура,ВидЦены", 
//			Неопределено, МинимальныйВидЦеныАгента); // заранее вне цикла готовим структуру для поиска минимальной цены товара
//		тзДляПоискаМинимальныхЦен = Результаты[4].Выгрузить(); // ТЗ для поиска минимальных цен			
//	КонецЕсли; 
//	//)) gi_180319
//	
//	ВыборкаОстатков = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	ВыборкаЦен = Результаты[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Номенклатура");
//	
//	ВключатьКодВНаименование = ВключатьКодыНоменклатурыВНаименование И ЗначениеЗаполнено(РежимВыгрузкиКодовНоменклатуры);
//
//	
//	мГруппыНоменклатуры = Новый Массив; //vd_180601 Баг 38343
//	мВидыНоменклатуры   = Новый Массив; //vd_180601 Баг 38343
//	мТоварнаяКатегория  = Новый Массив; //vd_181101
//	
//	Пока ВыборкаОстатков.Следующий() Цикл
//		ВыборкаЦен.Следующий();
//		СчЭлементов = СчЭлементов + 1;
//
//		ТекНоменклатура = ВыборкаОстатков.Номенклатура;
//		ЕдиницыИзмерения = ЕдиницыИзмеренияНоменклатуры(ТекНоменклатура, КонстантаИспользоватьУпаковкиНоменклатуры);
//
//		Если ВыгружатьХарактеристики Тогда
//			УчетПоХарактеристикам = ВыборкаОстатков.УчетПоХарактеристикам;
//		Иначе
//			УчетПоХарактеристикам = Ложь;
//		КонецЕсли;
//		
//		стррПоля.GUID = ТекНоменклатура.Ссылка.УникальныйИдентификатор();
//		Если ВключатьКодВНаименование Тогда
//			стррПоля.Name = ТекНоменклатура.Наименование + " " + СокрЛ(ВыборкаОстатков.Код);
//		Иначе
//			стррПоля.Name = ТекНоменклатура.Наименование;
//		КонецЕсли; 
//		стррПоля.Code = ВыборкаОстатков.Код;		
//		
//		//стррПоля.A02 = ВыборкаОстатков.Родитель; //vd_181106
//		//(( sk_181213
//		// стррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаОстатков.СтавкаНДС) * 100;
//		Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
//			стррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаОстатков.СтавкаНДС);
//		Иначе
//			стррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаОстатков.СтавкаНДС) * 100;
//		КонецЕсли;	
//		//)) sk_181213
//		
//		//стррПоля.A05 = ВыборкаОстатков.ВидНоменклатуры;  //vd_181106
//		// В реквизите A06 передается базовая единица измерения, относительно которой пересчитываются другие единицы
//		стррПоля.A06 = ЕдиницыИзмерения.БазоваяЕдиница;
//		стррПоля.A08 = УчетПоХарактеристикам;
//		стррПоля.A011 = ВыборкаОстатков.Остаток;
//		// В реквизите A013 указывается единица измерения, в которой отображаются остатки товаров в форме подбора в мобильном устройстве
//		стррПоля.A013 = ЕдиницыИзмерения.БазоваяЕдиница;
//		стррПоля.A014 = ВыборкаОстатков.Весовой;
//		стррПоля.A015 = ВыборкаОстатков.ЭтоУслуга;
//		стррПоля.A035 = ВыборкаОстатков.НаименованиеПолное;
//		стррПоля.A037 = ВыборкаОстатков.Остаток > 0;
//		стррПоля.A041 = ВыборкаОстатков.ОстатокМобСклада;
//		стррПоля.A042 = СокрЛП(ВыборкаОстатков.Описание);
//		стррПоля.A043 = ТекНоменклатура.ФайлКартинки;
//		стррПоля.A044 = СчЭлементов;
//		стррПоля.A045 = ""; //алкоголь
//		стррПоля.A046 = ""; //дата розлива
//		стррПоля.A048 = ВыборкаОстатков.ЦеноваяГруппа;
//		// В реквизите A050 передаем единицу цены. В эту единицу пересчитывается цена товара (относительно базовой) в форме подбора в МУ 
//		// Если ее не выгружать в файл обмена, то цены будут пересчитываться в базовые единицы
//		стррПоля.A050 = ЕдиницыИзмерения.БазоваяЕдиница; //единица цены
//		стррПоля.A053 = ЕдиницыИзмерения.НаборУпаковок;
//		
//		//(( gi_180319
//		Если ВыгружатьМинимальныйВидЦены Тогда
//			стррПоискМинЦены.Номенклатура = ТекНоменклатура;
//			мЦены = тзДляПоискаМинимальныхЦен.НайтиСтроки(стррПоискМинЦены);
//			Если мЦены.Количество() <> 0 Тогда
//				стррПоля.A040 = мЦены[0].Цена;
//			Иначе
//				стррПоля.A040 = 0;
//			КонецЕсли;
//		КонецЕсли;
//		//)) gi_180319
//
//		ДетальныеОстатки = ВыборкаОстатков.Выбрать();
//		ДетальныеЦены = ВыборкаЦен.Выбрать();
//		ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеЦены, КоличествоРеквизитовЦен, "Цена", "A02");
//		ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеОстатки, КоличествоРеквизитовОстатков, "Остаток", "A03");
//
//		
//		//{{vd_180601 Баг 38343
//		//стррПоля.GrpId0 = ?(ЗначениеЗаполнено(ВыборкаОстатков.Родитель), 		ВыборкаОстатков.Родитель, "");
//		//стррПоля.GrpId1 = ?(ЗначениеЗаполнено(ВыборкаОстатков.ВидНоменклатуры), ВыборкаОстатков.ВидНоменклатуры, "");
//
//		ГруппаНоменклатуры = ВыборкаОстатков.Родитель;
//		Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
//			стррПоля.GrpId0 = ГруппаНоменклатуры;
//			Если мГруппыНоменклатуры.Найти(ГруппаНоменклатуры) = Неопределено Тогда
//				мГруппыНоменклатуры.Добавить(ГруппаНоменклатуры);
//			КонецЕсли;
//		Иначе
//			стррПоля.GrpId0 = "";	
//		КонецЕсли;
//
//		ВидНоменклатуры = ВыборкаОстатков.ВидНоменклатуры;
//		Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
//			стррПоля.GrpId1 = ВидНоменклатуры;
//			Если мВидыНоменклатуры.Найти(ВидНоменклатуры) = Неопределено Тогда
//				мВидыНоменклатуры.Добавить(ВидНоменклатуры);
//			КонецЕсли;
//		Иначе
//			стррПоля.GrpId1 = "";	
//		КонецЕсли;
//		//}}
//		
//		//{{vd_181106
//		Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
//			ТоварнаяКатегория = ВыборкаОстатков.ТоварнаяКатегория;
//			Если ЗначениеЗаполнено(ТоварнаяКатегория) Тогда
//				стррПоля.GrpId2 = ТоварнаяКатегория;
//				Если мТоварнаяКатегория.Найти(ТоварнаяКатегория) = Неопределено Тогда
//					мТоварнаяКатегория.Добавить(ТоварнаяКатегория);
//				КонецЕсли;
//			Иначе
//				стррПоля.GrpId2 = "";	
//			КонецЕсли;
//		КонецЕсли;
//		//}}vd_181101		
//		
//		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);
//
//		Если ВыгружатьТабличныеЧасти Тогда
//			
//			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
//			
//			Если стррТЧОстатки <> Неопределено Тогда
//				ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧОстатки);
//				стррТЧОстатки.Номенклатура = ТекНоменклатура;
//				стррТЧОстатки.ВыборкаЭлементов = ДетальныеОстатки;
//				ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧОстатки);
//				ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
//			КонецЕсли;
//
//			Если стррТЧЦены <> Неопределено Тогда
//				ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧЦены);
//				стррТЧЦены.Номенклатура = ТекНоменклатура;
//				стррТЧЦены.ВыборкаЭлементов = ДетальныеЦены;
//				ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧЦены);
//				ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
//			КонецЕсли;
//			
//			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
//			
//		КонецЕсли;
//		
//		ДокОбмена.ЗаписатьКонецЭлемента();
//		
//	КонецЦикла;
//
//	ДокОбмена.ЗаписатьКонецЭлемента();
//	
//	//{{vd_181101
//	//ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ, мГруппыНоменклатуры, мВидыНоменклатуры); //vd_180601 Баг 38343 Добавлен 2 параметра мГруппыНоменклатуры и мВидыНоменклатуры
//	ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ, мГруппыНоменклатуры, мВидыНоменклатуры, мТоварнаяКатегория); 
//	//}}vd_181101
//	
//	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
Процедура ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ)
	
	ВключатьКодВНаименование 	= ВключатьКодыНоменклатурыВНаименование И ЗначениеЗаполнено(РежимВыгрузкиКодовНоменклатуры);
	
	// Структуры ТЧ Свойства: КоличествоОбщ, КоличествоТЧ, КоличествоАтрибутов, Выборка, стррТЧ, стррТЧПоследняя
	стррПараметрыТЧОстатки = ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, "Остатки"); 
	стррПараметрыТЧЦены    = ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, "Цены");
	
	// Выгружать ТЧ
	ВыгружатьТабличныеЧасти = ?(стррПараметрыТЧОстатки.КоличествоТЧ > 0 Или стррПараметрыТЧЦены.КоличествоТЧ > 0, Истина, Ложь);
		
	//++ стррПоля
	стррПоля = Новый Структура("GUID,Name,Code,GrpId0,GrpId1,A03,A04,A06,A08,A011,A013,A014,A015,A035,A037,A041,A042,A043,A044,A045,A046,A048,A050,A053");
	// Товарная категория (для группировки по товарным категориям)
	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		стррПоля.Вставить("GrpId2", "");
	КонецЕсли;
	// Остатки
	Для Счетчик = 0 По стррПараметрыТЧОстатки.КоличествоОбщ Цикл
		стррПоля.Вставить("A03" + Счетчик);
		Если Счетчик = стррПараметрыТЧОстатки.КоличествоАтрибутов - 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	 	
	// Цены
	Для Счетчик = 0 По стррПараметрыТЧЦены.КоличествоОбщ Цикл
		стррПоля.Вставить("A02" + Счетчик);
		Если Счетчик = стррПараметрыТЧЦены.КоличествоАтрибутов - 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	 
	// Ограничение скидки. 
	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ИспОграничениеСкидки") Тогда
		стррНастройка = ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспОграничениеСкидки;
		Если НЕ ПустаяСтрока(стррНастройка.Идентификатор) И стррНастройка.Значение > 0 Тогда
			стррПоля.Вставить("A036", стррНастройка.Значение);	
		КонецЕсли;
	КонецЕсли;
	// Минимальная цена 
	МинимальныйВидЦеныАгента = МинимальныйВидЦены();
	ВыгружатьМинимальныйВидЦены = ЗначениеЗаполнено(МинимальныйВидЦеныАгента);
	Если ВыгружатьМинимальныйВидЦены Тогда
		стррПоля.Вставить("A040");
		стррПоискМинЦены = Новый Структура("ВидЦены", МинимальныйВидЦеныАгента); // Сруктура для поиска минимальной цены товара
	КонецЕсли;
	// Мобильный Склад
	ВыгружатьМобильныйСклад = ?(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ТорговляCКолес.Значение И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), Истина, Ложь);
	Если ВыгружатьМобильныйСклад Тогда
		стррПоискМобильныйСклад = Новый Структура("Склад", ВыбНастройкиАгента.МобильныйСклад);	
	Иначе 
		стррПоля.A041 = 0;
	КонецЕсли;
	//-- стррПоля
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Номенклатура");
	
	//Групировки номенклатуры
	мГруппыНоменклатуры = Новый Массив; 
	мВидыНоменклатуры   = Новый Массив; 
	мТоварнаяКатегория  = Новый Массив; 
	
	МенеджерВТНоменклатура(МенеджерВТ); 	// Создает ВТ_Номенклатура
	МенеджерВТЦеныНоменклатуры(МенеджерВТ); // Создает ВТ_НоменклатураЦены

	ВыборкаНоменклатура = ДанныеПоНоменклатуре(МенеджерВТ).Выбрать();
	ВыборкаОстатки		= ДанныеПоОстаткамНоменклатуры(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаЦены			= ДанныеПоЦенамНоменклатуры(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СчетчикНоменклатуры = 0;
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		// Обход в том же цикле остатков и цен по выгружаемой номенклатуре
		ВыборкаОстатки.Следующий(); 	
		ВыборкаЦены.Следующий();
		
		// Групппировки
		ГруппировкиНоменклатурыМассивы(стррПоля, ВыборкаНоменклатура, мГруппыНоменклатуры, мВидыНоменклатуры, мТоварнаяКатегория);
				
		стррПоля.GUID = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
		Если ВключатьКодВНаименование Тогда
			стррПоля.Name = ВыборкаНоменклатура.Наименование + " " + СокрЛ(ВыборкаНоменклатура.Код);
		Иначе
			стррПоля.Name = ВыборкаНоменклатура.Наименование;
		КонецЕсли; 
		стррПоля.Code = ВыборкаНоменклатура.Код;
		
		Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
			стррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаНоменклатура.СтавкаНДС);
		Иначе
			стррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаНоменклатура.СтавкаНДС) * 100;
		КонецЕсли;	

		стррПоля.A06  = ВыборкаНоменклатура.БазоваяЕдиница;
		стррПоля.A08  = ВыборкаНоменклатура.УчетПоХарактеристикам;
		стррПоля.A013 = ВыборкаНоменклатура.БазоваяЕдиница; 									// Единица измерения, в которой отображаются остатки товаров в форме подбора в мобильном устройств
		стррПоля.A014 = ВыборкаНоменклатура.Весовой;
		стррПоля.A015 = ВыборкаНоменклатура.ЭтоУслуга;
		стррПоля.A035 = ВыборкаНоменклатура.НаименованиеПолное;
		стррПоля.A042 = СокрЛП(ВыборкаНоменклатура.Описание);
		стррПоля.A043 = ВыборкаНоменклатура.ФайлКартинки;
		
		СчетчикНоменклатуры = СчетчикНоменклатуры + 1; 											// Для A044
		стррПоля.A044 = СчетчикНоменклатуры;
		
		стррПоля.A045 = ""; //алкоголь
		стррПоля.A046 = ""; //дата розлива
		стррПоля.A048 = ВыборкаНоменклатура.ЦеноваяГруппа;
		стррПоля.A050 = ВыборкаНоменклатура.БазоваяЕдиница; 									// Единица цены, в которой отображается цена на товар в окне подбора товаров. В реквизите A050 передаем единицу цены. В эту единицу пересчитывается цена товара (относительно базовой) в форме подбора в МУ. Если ее не выгружать в файл обмена, то цены будут пересчитываться в базовые единицы 
		стррПоля.A053 = ВыборкаНоменклатура.НаборУпаковок;
		
		// ОСТАТКИ
		ВыборкаОстаткиДетальныеЗаписи = ВыборкаОстатки.Выбрать();
		стррПоля.A011 = ВыборкаОстатки.Остаток; 												// Общий остаток
		стррПоля.A037 = ВыборкаОстатки.Остаток > 0;                 							// Есть остатки
		Если ВыгружатьМобильныйСклад Тогда
			Если ВыборкаОстаткиДетальныеЗаписи.НайтиСледующий(стррПоискМобильныйСклад) Тогда
				стррПоля.A041 =	ВыборкаОстаткиДетальныеЗаписи.Остаток;							// Остаток Моб. склада
			КонецЕсли;
			ВыборкаОстаткиДетальныеЗаписи.Сбросить(); 					//Сброс указателя на начало группировки.	
		КонецЕсли;	

		// A030 - A034 
		Счетчик = 0;
		Пока ВыборкаОстаткиДетальныеЗаписи.Следующий() Цикл
			стррПоля["A03" + Счетчик] = ВыборкаОстаткиДетальныеЗаписи.Остаток;	// Остаток по складу	
			Если Счетчик = 4 Тогда
				Прервать;
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		стррПараметрыТЧОстатки.ВыборкаДетальныеЗаписи = ВыборкаОстаткиДетальныеЗаписи;
		
		// ЦЕНЫ
		ВыборкаЦеныДетальныеЗаписи = ВыборкаЦены.Выбрать();
		// Минимальный вид цены
		Если ВыгружатьМинимальныйВидЦены Тогда
			Если ВыборкаЦеныДетальныеЗаписи.НайтиСледующий(стррПоискМинЦены) Тогда
				стррПоля.A040 =	ВыборкаЦеныДетальныеЗаписи.Цена;
			Иначе
				стррПоля.A040 = 0;	
			КонецЕсли;
			ВыборкаЦеныДетальныеЗаписи.Сбросить(); //Сброс указателя на начало группировки.
		КонецЕсли;

		// A020 - A029 
		Счетчик = 0;
		Пока ВыборкаЦеныДетальныеЗаписи.Следующий() Цикл
			стррПоля["A02" + Счетчик] = ВыборкаЦеныДетальныеЗаписи.Цена;	// Остаток по складу	
			Если Счетчик = 9 Тогда
				Прервать;
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		стррПараметрыТЧЦены.ВыборкаДетальныеЗаписи = ВыборкаЦеныДетальныеЗаписи;

		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);
		
		//ТЧ
		Если ВыгружатьТабличныеЧасти Тогда 
			// Открытие тэга
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");     
			// CtlgID
			CtlgID = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
			// Остатки
			ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, стррПараметрыТЧОстатки, "Остаток", CtlgID);
			// Цены
			ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, стррПараметрыТЧЦены, "Цена", CtlgID);
			// Закрытие тэга
			ДокОбмена.ЗаписатьКонецЭлемента(); 				//TABLES
		КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента();					//ELEMENT
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); 						//ELEMENTS
	
	ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ, мГруппыНоменклатуры, мВидыНоменклатуры, мТоварнаяКатегория); 
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена); 				// CATALOG
	
КонецПроцедуры

//vd_190315 Полностью изменена логика
//Было:
//Процедура ВыгрузитьХарактеристикиНоменклатуры(ДокОбмена, МенеджерВТ)
//	
//	Возврат;
//	
//	Если Не ВыгружатьХарактеристикиНоменклатуры() Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	//ДоступныеВидыЦен = ВидыЦенВыгрузки(МенеджерВТ);         //vd_190313
//	//ДоступныеСклады  = СкладыВыгрузки(МенеджерВТ, Истина);  //vd_190313
//
//	КоличествоРеквизитовЦен = 10;
//	КоличествоРеквизитовОстатков = 5;
//	ВсегоВидовЦен = КоличествоВидыЦенВыгрузки(МенеджерВТ); 	 //vd_190313 ВсегоВидовЦен = ДоступныеВидыЦен.Количество();
//	ВсегоСкладов  = КоличествоСкладовВыгрузки(МенеджерВТ);	 //vd_190313 ВсегоСкладов  = ДоступныеСклады.Количество();
//	
//	// первая строка выгружается в заголовке
//	СтрокВТабличнойЧасти = ПолучитьКоличествоСтрокТЧНоменклатуры(ВсегоСкладов, КоличествоРеквизитовОстатков); //vd_180326 Баг 36047 Было: 	СтрокВТабличнойЧасти = Цел(ВсегоСкладов/КоличествоРеквизитовОстатков);  
//	
//	Если СтрокВТабличнойЧасти = 0 Тогда
//		стррТЧОстатки = Неопределено;
//	Иначе
//		стррТЧОстатки = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
//		стррТЧОстатки.GUID	   		   	= "19481e88-8575-4720-80e6-222816c754e4";
//		стррТЧОстатки.Comment	   	   	= "Остатки";	
//		стррТЧОстатки.КоличествоСтрок  	= СтрокВТабличнойЧасти;
//		стррТЧОстатки.ПолеВыгрузки 	   	= "A06";
//		стррТЧОстатки.КоличествоРеквизитов = КоличествоРеквизитовОстатков;
//		стррТЧОстатки.ИмяПоля 		   	= "Остаток";
//	КонецЕсли;
//	
//	СтрокВТабличнойЧасти = ПолучитьКоличествоСтрокТЧНоменклатуры(ВсегоВидовЦен, КоличествоРеквизитовЦен); //vd_180326 Баг 36047 Было: 	СтрокВТабличнойЧасти = СтрокВТабличнойЧасти = Цел(ВсегоВидовЦен/КоличествоРеквизитовЦен);  
//	
//	Если СтрокВТабличнойЧасти = 0 Тогда
//		стррТЧЦены = Неопределено;
//	Иначе
//		стррТЧЦены = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
//		стррТЧЦены.GUID	   		   	  	= "d91732e1-d4d8-4566-9f4f-bb1b0a043e6f";
//		стррТЧЦены.Comment	   	   		= "Цены";
//		стррТЧЦены.КоличествоСтрок 		= СтрокВТабличнойЧасти;
//		стррТЧЦены.ПолеВыгрузки 	  	= "A011";
//		стррТЧЦены.КоличествоРеквизитов = КоличествоРеквизитовЦен;
//		стррТЧЦены.ИмяПоля 		   		= "Цена";
//	КонецЕсли;
//	
//	ВыгружатьТабличныеЧасти = стррТЧОстатки <> Неопределено	Или стррТЧЦены <> Неопределено;
//	
//	стррПоля = Новый Структура("GUID,Name,A02,A04,A037,A039");
//	
//	//{{vd_180320 Выгрузка ИспользоватьОграничениеСкидки 
//	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ИспОграничениеСкидки") Тогда
//		стррНастройка = ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспОграничениеСкидки;
//		Если НЕ ПустаяСтрока(стррНастройка.Идентификатор) И стррНастройка.Значение > 0 Тогда
//			стррПоля.Вставить("A036", стррНастройка.Значение);	
//		КонецЕсли;
//	КонецЕсли;
//	//}}vd_180320  
//	
//	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
//	
//	Запрос = ЗапросПоХарактеристикамНомеклатуры(МенеджерВТ); // gi_180525 убран параметр ДоступныеВидыЦен
//	Результаты = Запрос.ВыполнитьПакет();
//	
//	ВыборкаОстатков = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	ВыборкаЦен 		= Результаты[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ХарактеристикиНоменклатуры");
//	
//	Пока ВыборкаОстатков.Следующий() Цикл
//		
//		ВыборкаЦен.Следующий();
//		ВыборкаОстатковХарактеристики 	= ВыборкаОстатков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		ВыборкаЦенХарактеристики 		= ВыборкаЦен.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // sd_180216 #37523
//		
//		Пока ВыборкаОстатковХарактеристики.Следующий() Цикл 
//			
//			ВыборкаЦенХарактеристики.Следующий(); // sd_180216 #37523
//			стррПоискХарактеристики.Номенклатура = ВыборкаОстатковХарактеристики.Номенклатура;
//			стррПоискХарактеристики.Ссылка  	 = ВыборкаОстатковХарактеристики.Характеристика;
//			ИдХарактеристики = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
//			
//			стррПоля.GUID	= ИдХарактеристики;
//			стррПоля.Name 	= ВыборкаОстатковХарактеристики.НаименованиеХарактеристики;
//			стррПоля.A02 	= ВыборкаОстатковХарактеристики.Номенклатура;
//			стррПоля.A04	= ВыборкаОстатковХарактеристики.Остаток;
//			стррПоля.A037	= ВыборкаОстатковХарактеристики.Остаток > 0;
//			стррПоля.A039	= ВыборкаОстатковХарактеристики.ОстатокМобСклада;
//			
//			ДетальныеОстатки 	= ВыборкаОстатковХарактеристики.Выбрать();
//			ДетальныеЦены 		= ВыборкаЦенХарактеристики.Выбрать(); // sd_180216 #37523
//			
//			ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеЦены, КоличествоРеквизитовЦен, "Цена", "A02");
//			ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеОстатки, КоличествоРеквизитовОстатков, "Остаток", "A03");
//			
//			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);
//			
//			Если ВыгружатьТабличныеЧасти Тогда
//				
//				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
//				
//				Если стррТЧОстатки <> Неопределено Тогда
//					ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧОстатки);
//					стррТЧОстатки.Номенклатура = ИдХарактеристики;
//					стррТЧОстатки.ВыборкаЭлементов = ДетальныеОстатки;
//					ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧОстатки);
//					ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
//				КонецЕсли;
//
//				Если стррТЧЦены <> Неопределено Тогда
//					ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧЦены);
//					стррТЧЦены.Номенклатура = ИдХарактеристики;
//					стррТЧЦены.ВыборкаЭлементов = ДетальныеЦены;
//					ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧЦены);
//					ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
//				КонецЕсли;
//				
//				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
//				
//			КонецЕсли;
//			
//			ДокОбмена.ЗаписатьКонецЭлемента();
//		КонецЦикла;
//	КонецЦикла;
//	
//	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
//	
//КонецПроцедуры
Процедура ВыгрузитьХарактеристикиНоменклатуры(ДокОбмена, МенеджерВТ)

	Если Не ВыгружатьХарактеристикиНоменклатуры() Тогда
		Возврат;
	КонецЕсли; 
	
	// Структуры ТЧ Свойства: КоличествоОбщ, КоличествоТЧ, КоличествоАтрибутов, ВыборкаДетальныеЗаписи, стррТЧ, стррТЧПоследняя, СтррТЧШапка
	стррПараметрыТЧОстатки = ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, "ОстаткиХарактеристика"); 
	стррПараметрыТЧЦены    = ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, "ЦеныХарактеристика");
	
	// Выгружать ТЧ
	ВыгружатьТабличныеЧасти = ?(стррПараметрыТЧОстатки.КоличествоТЧ > 0 Или стррПараметрыТЧЦены.КоличествоТЧ > 0, Истина, Ложь);
		
	//++ стррПоля
	стррПоля = Новый Структура("GUID,Name,A02,A04,A037,A039");
	// Остатки
	Для Счетчик = 0 По стррПараметрыТЧОстатки.КоличествоОбщ Цикл
		стррПоля.Вставить("A03" + Счетчик);
		Если Счетчик = стррПараметрыТЧОстатки.КоличествоАтрибутов - 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	 	
	// Цены
	Для Счетчик = 0 По стррПараметрыТЧЦены.КоличествоОбщ Цикл
		стррПоля.Вставить("A02" + Счетчик);
		Если Счетчик = стррПараметрыТЧЦены.КоличествоАтрибутов - 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	 
	// Ограничение скидки. 
	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ИспОграничениеСкидки") Тогда
		стррНастройка = ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспОграничениеСкидки;
		Если НЕ ПустаяСтрока(стррНастройка.Идентификатор) И стррНастройка.Значение > 0 Тогда
			стррПоля.Вставить("A036", стррНастройка.Значение);	
		КонецЕсли;
	КонецЕсли;
	// Мобильный Склад
	ВыгружатьМобильныйСклад = ?(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ТорговляCКолес.Значение И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), Истина, Ложь);
	Если ВыгружатьМобильныйСклад Тогда
		стррПоискМобильныйСклад = Новый Структура("Склад", ВыбНастройкиАгента.МобильныйСклад);	
	Иначе 
		стррПоля.A039 = 0;
	КонецЕсли;
	//-- стррПоля
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ХарактеристикиНоменклатуры");
	
	ВыборкаХарактеристика = ДанныеПоХарактеристикамНоменклатуры(МенеджерВТ).Выбрать();
	ВыборкаОстатки		  = ДанныеПоОстаткамХарактеристикНоменклатуры(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаЦены			  = ДанныеПоЦенамХарактеристикНоменклатуры(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаХарактеристика.Следующий() Цикл
		
		// Обход в том же цикле остатков и цен по выгружаемой номенклатуре
		ВыборкаОстатки.Следующий(); 	
		ВыборкаЦены.Следующий();
		
		стррПоля.GUID = ВыборкаХарактеристика.Характеристика.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаХарактеристика.Наименование;
		стррПоля.A02 = ВыборкаХарактеристика.Владелец; 
		
		// ОСТАТКИ
		ВыборкаОстаткиДетальныеЗаписи = ВыборкаОстатки.Выбрать();
		стррПоля.A04  = ВыборкаОстатки.Остаток; 												// Общий остаток
		стррПоля.A037 = ВыборкаОстатки.Остаток > 0;                 							// Есть остатки
		// Остаток Моб. склада
		Если ВыгружатьМобильныйСклад Тогда
			Если ВыборкаОстаткиДетальныеЗаписи.НайтиСледующий(стррПоискМобильныйСклад) Тогда
				стррПоля.A039 =	ВыборкаОстаткиДетальныеЗаписи.Остаток;							
			КонецЕсли;
			ВыборкаОстаткиДетальныеЗаписи.Сбросить(); //Сброс указателя на начало группировки.	
		КонецЕсли;	
		// A030 - A034 
		Счетчик = 0;
		Пока ВыборкаОстаткиДетальныеЗаписи.Следующий() Цикл
			стррПоля["A03" + Счетчик] = ВыборкаОстаткиДетальныеЗаписи.Остаток;		
			Если Счетчик = 4 Тогда
				Прервать;
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		стррПараметрыТЧОстатки.ВыборкаДетальныеЗаписи = ВыборкаОстаткиДетальныеЗаписи;
		
		// ЦЕНЫ
		ВыборкаЦеныДетальныеЗаписи = ВыборкаЦены.Выбрать();
		// A020 - A029 
		Счетчик = 0;
		Пока ВыборкаЦеныДетальныеЗаписи.Следующий() Цикл
			стррПоля["A02" + Счетчик] = ВыборкаЦеныДетальныеЗаписи.Цена;		
			Если Счетчик = 9 Тогда
				Прервать;
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		стррПараметрыТЧЦены.ВыборкаДетальныеЗаписи = ВыборкаЦеныДетальныеЗаписи;

		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);
		
		//ТЧ
		Если ВыгружатьТабличныеЧасти Тогда 
			// Открытие тэга
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");     
			// CtlgID
			CtlgID = ВыборкаХарактеристика.Владелец.УникальныйИдентификатор();
			// Остатки
			ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, стррПараметрыТЧОстатки, "Остаток", CtlgID);
			// Цены
			ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, стррПараметрыТЧЦены, "Цена", CtlgID);
			// Закрытие тэга
			ДокОбмена.ЗаписатьКонецЭлемента(); 				//TABLES
		КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента();					//ELEMENT
		
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена); 				// CATALOG
	
КонецПроцедуры

//vd_190320 Добавлена
// стррПараметрыТЧОстатки 	-Структура 
//		КоличествоОбщ 			- Число 	- Количество складов или видов цен, включая те которые выгружаются в блоке элемент
//		КоличествоТЧ        	- Число 	- Количество Табличных частей
//		КоличествоАтрибутов 	- Число 	- Количество атрибутов выгружаемых в ТЧ для Остаков = 5, для цен = 10
//  	ВыборкаДетальныеЗаписи  - Выборка 	- Выборка, указатель смещен на нужную позицию, в выгрузке блока элемента
//		стррТЧ              	- Структура	- Структура ТЧ 
//  	стррТЧПоследняя     	- Структура - Структура ТЧ, последней ТЧ (количество элементов может отличатся от КоличествоАтрибутов)
//		СтррТЧШапка				- Структура - Структура Шапки ТЧ
//
Процедура ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, стррПараметрыТЧ, КолонкаВыборки, CtlgID)
	
	Если стррПараметрыТЧ.КоличествоТЧ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ.СтррТЧШапка); // TABLE
	
	ВыборкаДетальныеЗаписи = стррПараметрыТЧ.ВыборкаДетальныеЗаписи;
	
	СчетчикКонечный = стррПараметрыТЧ.КоличествоОбщ - (стррПараметрыТЧ.КоличествоТЧ * стррПараметрыТЧ.КоличествоАтрибутов); 
	ТекущаяТЧ 		= 1;
	Счетчик 		= 1;
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// 1. Начало ТЧ
		Если Счетчик = 1 Тогда
			//Выбор структуры
			Если ТекущаяТЧ = стррПараметрыТЧ.КоличествоТЧ Тогда
				СтррПоля = стррПараметрыТЧ.стррТЧПоследняя;	
			Иначе                                                       
				СтррПоля = стррПараметрыТЧ.стррТЧ;
			КонецЕсли;
			//Заполение Основных атрибутов
			СтррПоля.GUID 	= Новый УникальныйИдентификатор();
			СтррПоля.CtlgID = CtlgID;
			СтррПоля["A0" + (стррПараметрыТЧ.КоличествоАтрибутов + 1)] = ТекущаяТЧ; //A06 или A011
		КонецЕсли;
		
		// 2. Заполнение Структуры
		СтррПоля["A0" + Счетчик] = ВыборкаДетальныеЗаписи[КолонкаВыборки];
		
		// 3. Окончание ТЧ
		Если Счетчик = стррПараметрыТЧ.КоличествоАтрибутов ИЛИ (ТекущаяТЧ = стррПараметрыТЧ.КоличествоТЧ И Счетчик = СчетчикКонечный) Тогда
			ТекущаяТЧ = ТекущаяТЧ + 1;
			Счетчик   = 0;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		КонецЕсли;
		
		// Счетчик
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена); // TABLE
	
КонецПроцедуры

//vd_190322 Добавлена
Процедура ГруппировкиНоменклатурыМассивы(стррПоля, ВыборкаНоменклатура, мГруппыНоменклатуры, мВидыНоменклатуры, мТоварнаяКатегория)

	//1. Группа
	Если ЗначениеЗаполнено(ВыборкаНоменклатура.Родитель) Тогда
		стррПоля.GrpId0 = ВыборкаНоменклатура.Родитель;
		Если мГруппыНоменклатуры.Найти(ВыборкаНоменклатура.Родитель) = Неопределено Тогда
			мГруппыНоменклатуры.Добавить(ВыборкаНоменклатура.Родитель);
		КонецЕсли;
	Иначе
		стррПоля.GrpId0 = "";	
	КонецЕсли;
	
    //2. Вид
	Если ЗначениеЗаполнено(ВыборкаНоменклатура.ВидНоменклатуры) Тогда
		стррПоля.GrpId1 = ВыборкаНоменклатура.ВидНоменклатуры;
		Если мВидыНоменклатуры.Найти(ВыборкаНоменклатура.ВидНоменклатуры) = Неопределено Тогда
			мВидыНоменклатуры.Добавить(ВыборкаНоменклатура.ВидНоменклатуры);
		КонецЕсли;
	Иначе
		стррПоля.GrpId1 = "";	
	КонецЕсли;
	
	//3. Категория
	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.ТоварнаяКатегория) Тогда
			стррПоля.GrpId2 = ВыборкаНоменклатура.ТоварнаяКатегория;
			Если мТоварнаяКатегория.Найти(ВыборкаНоменклатура.ТоварнаяКатегория) = Неопределено Тогда
				мТоварнаяКатегория.Добавить(ВыборкаНоменклатура.ТоварнаяКатегория);
			КонецЕсли;
		Иначе
			стррПоля.GrpId2 = "";	
		КонецЕсли;
	КонецЕсли; 		
	
КонецПроцедуры

Процедура ВыгрузитьШтрихКоды(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьШтрихКодыТоваров Тогда
		Возврат;
	КонецЕсли; 
	
	ВыгружатьХарактеристики = ВыгружатьХарактеристикиНоменклатуры();
	
	//((vd_190322
	//Было:
	//// Запрос получает штрихкоды только по выгруженной номенклатуре (из врем. таблицы ВТ_НоменклатураСУчетомОстатка).
	//// Если требуется выгрузить номенклатуру только в соответствии с условиями отбора, то брать данных из врем. таблицы ВТ_Ассортимент.
	//Если ВыгружатьХарактеристики Тогда
	//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	НоменклатураВыгрузки.Номенклатура КАК Номенклатура,
	//		|	Штрихкоды.Характеристика КАК Характеристика,
	//		|	Штрихкоды.Штрихкод КАК Наименование,
	//	   	|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения
	//	   	|ИЗ
	//	   	|	ВТ_НоменклатураСУчетомОстатка Как НоменклатураВыгрузки 
	//		|	ЛЕВОЕ СОЕДИНЕНИЕ 
	//		|		РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	//		|		ПО Штрихкоды.Номенклатура = НоменклатураВыгрузки.Номенклатура
	//	   	|";
	//	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");		
	//Иначе
	//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	НоменклатураВыгрузки.Номенклатура КАК Номенклатура,
	//		|	Штрихкоды.Штрихкод КАК Наименование,
	//       	|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения
	//       	|ИЗ
	//       	|	ВТ_НоменклатураСУчетомОстатка Как НоменклатураВыгрузки 
	//		|	ЛЕВОЕ СОЕДИНЕНИЕ 
	//		|		РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	//		|		ПО Штрихкоды.Номенклатура = НоменклатураВыгрузки.Номенклатура
	//	   	|";
	//КонецЕсли;
	//ВТ_Ассртимент отфильтрована по остаткам. По характеристике или номенклатуре оприделяется ниже(условие не нужно)
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ШтрихкодыНоменклатуры.Штрихкод КАК Наименование,
	               |	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	               |	ШтрихкодыНоменклатуры.Упаковка КАК ЕдиницаИзмерения
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
	               |		ПО ШтрихкодыНоменклатуры.Номенклатура = ВТ_Ассортимент.ссылка";
	
	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	//))vd_190322
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Штрихкоды", Истина); 

	стррПоля = Новый Структура("GUID,Name,A01,A02");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Наименование) Тогда
			Продолжить;
		КонецЕсли; 
		Если ВыгружатьХарактеристики Тогда
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда // номенклатура с характеристикой
				стррПоискХарактеристики.Номенклатура = Выборка.Номенклатура;
				стррПоискХарактеристики.Ссылка  	 = Выборка.Характеристика;
				ИдХарактеристики = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
				стррПоля.A01 	 = ИдХарактеристики;
			Иначе // номенклатура без характеристики
				стррПоля.A01 	 = Выборка.Номенклатура.УникальныйИдентификатор();
			КонецЕсли; 
		Иначе
			стррПоля.A01 = Выборка.Номенклатура.УникальныйИдентификатор();			
		КонецЕсли; 
		стррПоля.GUID 	 = Новый УникальныйИдентификатор();
		стррПоля.Name 	 = Выборка.Наименование; // Штрих-код
		ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = Выборка.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		стррПоля.A02	= ЕдиницаИзмерения;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьГруппировкиПартнеров(ДокОбмена, МенеджерВТ)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");

	// Элементы группировки по иерархии
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	
	//vd_180710 РежимВыгрузкиРекомендуемый
	Если РежимВыгрузкиРекомендуемый Тогда	
		ДобавитьПоле(ДокОбмена, "GUID", "CB26860D-E169-487E-A963-E7BAA5B61CB0"); // Для справочника МТ Партнеры
	Иначе
		ДобавитьПоле(ДокОбмена, "GUID", "1E18C8DB-08F6-47DA-874B-100D6E109AB8"); // Для справочника МТ Контрагенты
	КонецЕсли;	
	
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по группе доступа");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	стррПоля = Новый Структура("GUID,Name");
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиГруппПартнеров());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ВыборкаГрупп = Запрос.Выполнить().Выбрать();
	Пока ВыборкаГрупп.Следующий() Цикл 
		стррПоля.GUID = ВыборкаГрупп.Ссылка.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаГрупп.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

//vd_190322 Переименованна
//vd_181106 Добавлена выгрузка товарных категорий
//vd_181101 Добавлен параметр мТоварнаяКатегория
//vd_180601 Баг 38343 Добавлены параметры мГруппыНоменклатуры и мВидыНоменклатуры
Процедура ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ, мГруппыНоменклатуры, мВидыНоменклатуры, мТоварнаяКатегория)

	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");

	// Элементы группировки по иерархии
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "8E502A85-8DD4-41CF-A7A4-17AB50872D36");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по иерархии");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	//{{vd_181106 
	//Запрос = Новый Запрос(ТекстЗапросаВыборкиГруппНоменклатуры());
	//Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	//Запрос.УстановитьПараметр("мГруппыНоменклатуры", мГруппыНоменклатуры); //vd_180601 Баг 38343 Добавлен параметр мГруппыНоменклатуры
	//ДеревоГрупп = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//РекурсивноЗаписатьГруппуСправочника(ДокОбмена, ДеревоГрупп.Строки);
	ГруппировкиНоменклатурыЗаписать(ДокОбмена, "Номенклатура", мГруппыНоменклатуры);
	//}}vd_181106 
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();

	// Объявление группировки по видам номенклатуры
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "E42DA5B9-E29B-43E1-B7E3-9B500879D6B7");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по видам номенклатуры");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	//{{vd_181106 
	//Запрос = Новый Запрос(ТекстЗапросаВыборкиВидовНоменклатуры());
	//Запрос.УстановитьПараметр("мВидыНоменклатуры", мВидыНоменклатуры); //vd_180601 Баг 38343 Добавлен параметр мВидыНоменклатуры
	//дзГруппы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//РекурсивноЗаписатьГруппуСправочника(ДокОбмена, дзГруппы.Строки);
	ГруппировкиНоменклатурыЗаписать(ДокОбмена, "ВидыНоменклатуры", мВидыНоменклатуры);
	//}}vd_181106 
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();  
	
	// Объявление группировки по товарным категориям
	//{{vd_181106
	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
		ДобавитьПоле(ДокОбмена, "GUID", "8F2247D5-66E3-4564-8231-87D7CCD87F71");
		ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по товарным категориям");
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		ГруппировкиНоменклатурыЗаписать(ДокОбмена, "ТоварныеКатегории", мТоварнаяКатегория);
		ДокОбмена.ЗаписатьКонецЭлемента();
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;
	//}}vd_181101	

КонецПроцедуры

//vd_190322 Переименованна
//vd_190128 Добавлена
Процедура ГруппировкиНоменклатурыЗаписать(ДокОбмена, Справочник, Знач мОтбор)
	
	Если НЕ (ТипЗнч(мОтбор) = Тип("Массив") И мОтбор.Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	тзГруппы = Новый ТаблицаЗначений;
	тзГруппы.Колонки.Добавить("Ссылка");
	тзГруппы.Колонки.Добавить("Наименование");
	тзГруппы.Колонки.Добавить("Родитель"); 
	
	ГруппировкиНоменклатурыРекурсивноПолучить(Справочник, мОтбор, тзГруппы);
	
	//Запись элементов
	стррПоля = Новый Структура("GUID, Name, ParId");
	тзГруппы.Сортировать("Наименование");
	Для Каждого Элемент Из тзГруппы Цикл
		стррПоля.GUID = Элемент.Ссылка.УникальныйИдентификатор();
		стррПоля.Name = Элемент.Наименование;
		стррПоля.ParId = ?(ЗначениеЗаполнено(Элемент.Родитель), Элемент.Родитель.УникальныйИдентификатор(), "");
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);	
	КонецЦикла;
	
КонецПроцедуры	

//vd_190322 Переименованна
//vd_190128 Изменено название, логика
//vd_181106 Добавлена
Процедура ГруппировкиНоменклатурыРекурсивноПолучить(Справочник, мОтбор, тзГруппы)
	
	Если мОтбор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиНоменклатурыПолучитьРодителей(Справочник, мОтбор, тзГруппы);
	ГруппировкиНоменклатурыРекурсивноПолучить(Справочник, мОтбор, тзГруппы);	
	
КонецПроцедуры

//vd_190322 Переименованна
//vd_190128 Изменено название, логика
//vd_181106 Добавлена
Процедура ГруппировкиНоменклатурыПолучитьРодителей(Справочник, мОтбор, тзГруппы)
	
	
	//стррПоля 	= Новый Структура("GUID, Name, ParId");

	//1. Получить элемент без иерархии родителей.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СправочникГруппировки.Ссылка КАК Ссылка,
	                      |	СправочникГруппировки.Наименование КАК Наименование,
	                      |	СправочникГруппировки.Родитель.Ссылка КАК Родитель
	                      |ИЗ
	                      |	Справочник.[СправочникГруппировки] КАК СправочникГруппировки
	                      |ГДЕ
	                      |	СправочникГруппировки.Ссылка В(&мОтбор)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СправочникГруппировки]", Справочник);
	
	Запрос.УстановитьПараметр("мОтбор", мОтбор);
	ВыбркаЭлементов = Запрос.Выполнить().Выгрузить();
	
	//2. Очищаем массив родителей и далее его заполняем новыми значениями.
	мОтбор.Очистить();
	
	//4. перебор элементов
	Для каждого Элемент Из ВыбркаЭлементов Цикл
		//4.1 Добавляем запись в тзГруппы
		Если тзГруппы.Найти(Элемент.Ссылка, "Ссылка") = Неопределено Тогда
			НоваяСтрока = тзГруппы.Добавить();
			НоваяСтрока.Ссылка		 = Элемент.Ссылка;
			НоваяСтрока.Наименование = Элемент.Наименование;
			НоваяСтрока.Родитель     = Элемент.Родитель; 
		КонецЕсли;
		
		// 4.2 Добавляем элемент в массив родителей.
		Если ЗначениеЗаполнено(Элемент.Родитель) И мОтбор.Найти(Элемент.Родитель) = Неопределено И тзГруппы.Найти(Элемент.Родитель, "Ссылка") = Неопределено	Тогда
			мОтбор.Добавить(Элемент.Родитель);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////vd_181106 Не Используется. Старая.
//Процедура РекурсивноЗаписатьГруппуСправочника(ДокОбмена, Строки)

//	стррПоля = Новый Структура("GUID,Name,ParId");
//	
//	Для каждого ТекГруппа Из Строки Цикл
//		
//		Если ЗначениеЗаполнено(ТекГруппа.Родитель) И ТекГруппа.Ссылка = ТекГруппа.Родитель.Ссылка Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		стррПоля.GUID = ТекГруппа.Ссылка.УникальныйИдентификатор();
//		стррПоля.Name = ТекГруппа.Наименование;

//		Если ЗначениеЗаполнено(ТекГруппа.РодительЭл) Тогда
//			стррПоля.ParId = ТекГруппа.РодительЭл.УникальныйИдентификатор();
//		Иначе
//			стррПоля.ParId = "";
//		КонецЕсли; 

//		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
//		РекурсивноЗаписатьГруппуСправочника(ДокОбмена, ТекГруппа.Строки);
//		
//	КонецЦикла;

//КонецПроцедуры

Процедура ВыгрузитьЕдиницыИзмерения(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ЕдиницыИзмерения");

	Результат = ДанныеПоЕдиницамИзмеренияВыгрузки(МенеджерВТ);
	
	стррПоля = Новый Структура("GUID,Name,Code,A02,A03,A04,A05,A06,A07");
	
	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл
		// для номенклатуры без упаковок вместо ссылки единицы измерения подставляем ссылку номенклатуры
		// чтобы GUID'ы единиц измерения не пересекались и была возможность передавать вес в единицу измерения 
		Если Выборка.ЭтоЕдиницаНоменклатуры Тогда
			стррПоля.GUID = Выборка.Номенклатура.УникальныйИдентификатор();
		Иначе
			стррПоля.GUID = Выборка.Ссылка.УникальныйИдентификатор();
		КонецЕсли; 
		стррПоля.Name = Выборка.Наименование;
		стррПоля.Code = Выборка.КодОКЕИ;
		стррПоля.A02 = 	Выборка.Коэффициент;
		стррПоля.A03 = 	Выборка.Номенклатура;
		стррПоля.A04 = 	Выборка.Вес;
		стррПоля.A05 = 	Выборка.ЭтоНаборУпаковок;
		стррПоля.A06 = 	Выборка.ВладелецНаборУпаковок;
		стррПоля.A07 = 	Выборка.Классификатор;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Функция ТекстЗапросаВыгрузкиПерсональныхЦен()

	ТекстЗапроса = " 
		|ВЫБРАТЬ
		|	ПерсональныеЦеныТоваров.Соглашение,
		|	ПерсональныеЦеныТоваров.Номенклатура,
		|	[Характеристики]
		|	ПерсональныеЦеныТоваров.ВидЦены,
		|	ВЫРАЗИТЬ(
		|		ПерсональныеЦеныТоваров.Цена * 
		|			ВЫБОР
		|				КОГДА &Валюта <> ПерсональныеЦеныТоваров.Валюта
		|				ТОГДА 
		|					КурсыВалют.КурсКратный * &КурсКратный
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
		|ИЗ
		|	ВТ_ПерсональныеЦеныТоваров КАК ПерсональныеЦеныТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК КурсыВалют
		|	ПО ПерсональныеЦеныТоваров.Валюта = КурсыВалют.Валюта
		|";
	
	стррЛитералы = Новый Структура("Характеристики", "");
	Если ВыгружатьХарактеристикиНоменклатуры() Тогда
		стррЛитералы.Характеристики = "ПерсональныеЦеныТоваров.Характеристика,";
	КонецЕсли; 
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ВыгрузитьПерсональныеЦены(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьПерсональныеЦены() Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерВТКурсыВалют(МенеджерВТ);
	МенеджерВТПерсональныеЦеныТоваров(МенеджерВТ);
	
	ВалютаУчета 	= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	КурсВалюты 		= 1;
	КратностьВалюты = 1;
	
	Запрос = Новый Запрос(ТекстЗапросаВыгрузкиПерсональныхЦен());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
	Запрос.УстановитьПараметр("КурсКратный", КурсВалюты / КратностьВалюты);
	Запрос.УстановитьПараметр("Организации", ОрганизацииВыгрузки(МенеджерВТ)); // gi_180525 - добаоен параметр МенеджерВТ - для ускорения
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПерсональныеЦены", Истина);
	 
	Выборка = РезультатЗапроса.Выбрать();				
	Пока Выборка.Следующий() Цикл
		ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
		ДокОбмена.ЗаписатьАтрибут("GUID", ВРег(ЗначениеВСтрокуДляXML(Новый УникальныйИдентификатор)));
		ДокОбмена.ЗаписатьАтрибут("A01", ЗначениеВСтрокуДляXML(Выборка.Соглашение)); 	// ИдОбъекта
		ДокОбмена.ЗаписатьАтрибут("A02", ЗначениеВСтрокуДляXML(Выборка.Номенклатура));	// ИдТовара
		ДокОбмена.ЗаписатьАтрибут("A03", ЗначениеВСтрокуДляXML(Выборка.ВидЦены));		// ТипЦены
		ДокОбмена.ЗаписатьАтрибут("A04", ЗначениеВСтрокуДляXML(Выборка.Цена));			// Цена
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
		
КонецПроцедуры

Процедура ВыгрузитьИсториюПродаж(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьИсториюПродаж Или ГлубинаИсторииПродаж = 0 Или КоличествоИнтерваловИстории = 0 Тогда
		Возврат;
	КонецЕсли; 	
	
	//vd_180321 Баг 37963. Исправление ошибки выгрузки истории продаж в УТ 11.4. Удалил поставщика по примеру Проф версии.
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.НачалоИнтервала,
	    |	Интервалы.КонецИнтервала,
	    |	Интервалы.НомерИнтервала
	    |ПОМЕСТИТЬ Интервалы
	    |ИЗ
	    |	&Интервалы КАК Интервалы
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	ВЫБОР
	    |		КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	    |				И Таблица.День <= Интервалы.КонецИнтервала
	    |			ТОГДА Интервалы.НомерИнтервала
	    |		ИНАЧЕ 0
	    |	КОНЕЦ КАК НомерИнтервала,
	    |	Таблица.АналитикаУчетаПоПартнерамПартнер КАК Партнер,
	    |	Таблица.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	    |	СУММА(Таблица.Количество) КАК Количество,
	    |	СУММА(Таблица.Выручка) КАК Выручка
	    |ИЗ
	    |	(ВЫБРАТЬ
	    |		ЕСТЬNULL(Продажи.ЗаказКлиента.Сделка, ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)) КАК Сделка,
	    |		Продажи.ВидЗапасов КАК ВидЗапасов,
		//|		ВЫБОР
		//|			КОГДА Продажи.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		//|				ТОГДА Продажи.ВидЗапасов.Комитент
		//|			ИНАЧЕ Продажи.ВидЗапасов.Поставщик
		//|		КОНЕЦ КАК Поставщик,
	    |		Продажи.ВидЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	    |		ЕСТЬNULL(Продажи.ЗаказКлиента.Менеджер, НЕОПРЕДЕЛЕНО) КАК Менеджер,
	    |		Продажи.Регистратор КАК Регистратор,
	    |		ВЫБОР
	    |			КОГДА Продажи.ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
	    |					ИЛИ Продажи.ЗаказКлиента ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	    |				ТОГДА Продажи.ЗаказКлиента
	    |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	    |		КОНЕЦ КАК ЗаказКлиента,
	    |		Продажи.Подразделение КАК Подразделение,
	    |		Продажи.КоличествоОборот КАК Количество,
	    |		Продажи.СуммаВыручкиОборот КАК Выручка,
	    |		Продажи.ПериодДень КАК День,
	    |		Продажи.ПериодНеделя КАК Неделя,
	    |		Продажи.ПериодДекада КАК Декада,
	    |		Продажи.ПериодМесяц КАК Месяц,
	    |		Продажи.ПериодКвартал КАК Квартал,
	    |		Продажи.ПериодПолугодие КАК Полугодие,
	    |		Продажи.ПериодГод КАК Год,
	    |		Продажи.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	    |		Продажи.АналитикаУчетаПоПартнерам.Партнер КАК АналитикаУчетаПоПартнерамПартнер
	    |	{ВЫБРАТЬ
	    |		ЗаказКлиента.*,
	    |		Сделка.*,
	    |		Подразделение.*,
		//|		Поставщик.*,
	    |		Менеджер.*,
	    |		ВидЗапасов.*,
	    |		ГруппаФинансовогоУчета.*,
	    |		Регистратор,
	    |		День,
	    |		Неделя,
	    |		Декада,
	    |		Месяц,
	    |		Квартал,
	    |		Полугодие,
	    |		Год}
	    |	ИЗ
	    |		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	    |				&НачПериода {(&НачалоПериода)},
	    |				&КонПериода {(&ОкончаниеПериода)},
	    |				Авто,
	    |				АналитикаУчетаНоменклатуры.Номенклатура В ( ВЫБРАТЬ ВТ_Ассортимент.Ссылка ИЗ ВТ_Ассортимент )
	    |					И АналитикаУчетаПоПартнерам.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )) КАК Продажи
	    |	{ГДЕ
	    |		(ЕСТЬNULL(Продажи.ЗаказКлиента.Сделка, ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка))).* КАК Сделка}) КАК Таблица,
	    |	Интервалы КАК Интервалы
	    |ГДЕ
	    |	ВЫБОР
	    |			КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	    |					И Таблица.День <= Интервалы.КонецИнтервала
	    |				ТОГДА Интервалы.НомерИнтервала
	    |			ИНАЧЕ 0
	    |		КОНЕЦ > 0
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	Таблица.АналитикаУчетаНоменклатуры.Номенклатура,
	    |	Таблица.АналитикаУчетаПоПартнерамПартнер,
	    |	ВЫБОР
	    |		КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	    |				И Таблица.День <= Интервалы.КонецИнтервала
	    |			ТОГДА Интервалы.НомерИнтервала
	    |		ИНАЧЕ 0
	    |	КОНЕЦ
	    |ИТОГИ ПО
	    |	Партнер,
	    |	Номенклатура
		|"; 	  
	
	КонПериода = ТекущаяДата();
	НачПериода = НачалоДня(КонПериода - ГлубинаИсторииПродаж * 86400);
		
	тзИнтервалы = Новый ТаблицаЗначений;	
	тзИнтервалы.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата"));			
	тзИнтервалы.Колонки.Добавить("КонецИнтервала",  Новый ОписаниеТипов("Дата"));		
	тзИнтервалы.Колонки.Добавить("НомерИнтервала",  Новый ОписаниеТипов("Число"));
	
	РазмерИнтервала = Окр((КонПериода - НачПериода) / КоличествоИнтерваловИстории, 0, РежимОкругления.Окр15как20);
	
	НачалоИнтервала = НачПериода;
	Для Индекс = 1 По КоличествоИнтерваловИстории Цикл		
		КонецИнтервала = ?(Индекс < КоличествоИнтерваловИстории, НачалоИнтервала + РазмерИнтервала, КонПериода);
		СтрокаТ = тзИнтервалы.Добавить();
		СтрокаТ.НачалоИнтервала = НачалоИнтервала;
		СтрокаТ.КонецИнтервала  = КонецИнтервала;
		СтрокаТ.НомерИнтервала  = Индекс;
		НачалоИнтервала = КонецИнтервала;
	КонецЦикла;
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("НачПериода",	НачПериода);
	Запрос.УстановитьПараметр("КонПериода",	КонПериода);
	Запрос.УстановитьПараметр("Интервалы",	тзИнтервалы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ИсторияПродаж", Истина);
	
		стррПоля = Новый Структура("GUID,A02,A04,A07,A08");
		стррПоля.A08 = 0;
		
		стррПоиск = Новый Структура("НомерИнтервала");
	
		ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
		Пока ВыборкаПартнер.Следующий() Цикл
			
			ВыборкаНоменклатура = ВыборкаПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);				
			Пока ВыборкаНоменклатура.Следующий() Цикл
				 						
				ВыборкаДетали = ВыборкаНоменклатура.Выбрать();
				
				стрИстория = "";
				
				Для Индекс = 1 По КоличествоИнтерваловИстории Цикл
					стррПоиск.НомерИнтервала = Индекс;
					ВыборкаДетали.Сбросить();
					Если ВыборкаДетали.НайтиСледующий(стррПоиск) Тогда
						стрИстория = СтрИстория + Формат(ВыборкаДетали.Количество, "ЧГ=0") + " ";		
					Иначе
						стрИстория = СтрИстория + "0" + " ";		
					КонецЕсли;				
				КонецЦикла;
				
				стррПоля.GUID = Новый УникальныйИдентификатор();
				стррПоля.A02 = ВыборкаНоменклатура.Партнер;
				стррПоля.A04 = ВыборкаНоменклатура.Номенклатура;
				стррПоля.A07 = СокрЛП(стрИстория);
				
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);				
			КонецЦикла; //Пока ВыборкаНоменклатура.Следующий() Цикл  
					
		КонецЦикла; //Пока ВыборкаПартнер.Следующий() Цикл
			
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры //Процедура ВыгрузитьИсториюПродаж()

Функция ВыгрузитьСправочникИзображений(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьИзображенияТоваров И Не ВыгружатьИзображенияПартнеров Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	тзКартинки = Новый ТаблицаЗначений;
	тзКартинки.Колонки.Добавить("Ссылка");
	тзКартинки.Колонки.Добавить("Описание");
	тзКартинки.Колонки.Добавить("ИмяФайла");
	
	Текст = ТекстЗапросаПолученияИзображений();	
	Запрос = Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ФотоСправочников");
	
	стрРасширения = "bmp;gif;png;jpeg;dib;rle;tif;jpg;ico;wmf;emf";
	стррПоля = Новый Структура("GUID,Name,A01,A02,A03");
	
	ТипХранилищеЗначения	  = Тип("ХранилищеЗначения");
	ТипСправочникНоменклатура = Тип("СправочникСсылка.Номенклатура");
	ТипСправочникПартнеры 	  = Тип("СправочникСсылка.Партнеры");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 				
		
		Если ТипЗнч(Выборка.ХранимыйФайл) = ТипХранилищеЗначения Тогда
			Картинка = Выборка.ХранимыйФайл.Получить();
		Иначе
			Картинка = Неопределено;
		КонецЕсли;
		
		ВыборкаСсылка = Выборка.Ссылка;
		
		Если Найти(стрРасширения, Выборка.Расширение) = 0 Или (Картинка = Неопределено И ВыборкаСсылка.Том.Пустая()) Тогда
			Продолжить;
		КонецЕсли;	
		
		ВладелецФайла = Выборка.ВладелецФайла;
		
		Если ТипЗнч(ВладелецФайла) = ТипСправочникНоменклатура Тогда
			стррПоля.A02 = ВладелецФайла;
			стррПоля.A03 = Неопределено;
		ИначеЕсли ТипЗнч(ВладелецФайла) = ТипСправочникПартнеры Тогда
			стррПоля.A02 = Неопределено;
			стррПоля.A03 = ВладелецФайла;
		Иначе
			Продолжить;
		КонецЕсли;
		
		стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаСсылка.Наименование;		
		стррПоля.A01  = ВыборкаСсылка;
		
		СтрокаТ = тзКартинки.Добавить();
		СтрокаТ.Ссылка 	 = ВыборкаСсылка;
		СтрокаТ.Описание = Выборка.Описание;
		СтрокаТ.ИмяФайла = ВРег(стррПоля.GUID) + "." + Выборка.Расширение;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);	
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Возврат тзКартинки;

КонецФункции //Функция ВыгрузитьСправочникИзображений()

Процедура ВыгрузитьПечатныеФормы(ДокОбмена)
	
	стррВидыДокументов = Новый Структура(
		"Заказ,Реализация,ПКО",
		"e070d148-8c9c-4e5f-afda-2838d5be6618", "3b95d27f-7d6f-401c-aaf3-bd3dc78a1e82", "fcdd8d0b-6e35-401f-bc28-8527fd2f4d3a");
	
	тзПФД = Новый ТаблицаЗначений;
	тзПФД.Колонки.Добавить("Идентификатор");
	тзПФД.Колонки.Добавить("Наименование");
	тзПФД.Колонки.Добавить("Код");
	тзПФД.Колонки.Добавить("ВидДокумента");
	тзПФД.Колонки.Добавить("ЧислоКопий");
	тзПФД.Колонки.Добавить("Ориентация");
	тзПФД.Колонки.Добавить("ФорматФормы");
	
	ДобавитьПечатнуюФорму(тзПФД, "СчетНаОплату", "Счет", стррВидыДокументов.Заказ, "1", "0", "0");
	
	ДобавитьПечатнуюФорму(тзПФД, "Торг12", "ТОРГ-12", стррВидыДокументов.Реализация, "2", "0", "1");
	ДобавитьПечатнуюФорму(тзПФД, "РасходнаяНакладная", "Расходная накладная", стррВидыДокументов.Реализация, "1", "0", "1");
	ДобавитьПечатнуюФорму(тзПФД, "СчетФактура", "Счет-фактура", стррВидыДокументов.Реализация, "1", "1", "1");
	ДобавитьПечатнуюФорму(тзПФД, "ТТН", "ТТН", 	стррВидыДокументов.Реализация, "1", "0", "1");
	ДобавитьПечатнуюФорму(тзПФД, "СправкаБТТН", "Справка 'Б' к ТТН", стррВидыДокументов.Реализация, "1", "0", "0"); 
	ДобавитьПечатнуюФорму(тзПФД, "УПД", "УПД", 	стррВидыДокументов.Реализация, "1", "1", "1");
	
	ДобавитьПечатнуюФорму(тзПФД, "ПриходныйКассовыйОрдер", "ПКО", стррВидыДокументов.ПКО, "1", "0", "1");
	
	стррПоля = Новый Структура("GUID,Name,Code,A01,A02,A03,A04");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПечатныеФормыДокументов", Истина);
	
	Для Каждого СтрокаТ Из тзПФД Цикл 
		стррПоля.GUID	= СтрокаТ.Идентификатор;
		стррПоля.Name	= СтрокаТ.Наименование;
		стррПоля.Code	= СтрокаТ.Код;
		стррПоля.A01 	= СтрокаТ.ВидДокумента;
		стррПоля.A02 	= СтрокаТ.ЧислоКопий;
		стррПоля.A03 	= СтрокаТ.Ориентация;
		стррПоля.A04	= СтрокаТ.ФорматФормы;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	стррПоля = Новый Структура("GUID,A01,A02");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПечатныеФормыОрганизаций", Истина);
	
	мОрганизации = ОрганизацииВыгрузки(Неопределено);

	Для Каждого ОрганизацияСсылка Из мОрганизации Цикл
		
		Для Каждого СтрокаТ Из тзПФД Цикл 
			стррПоля.GUID	= Новый УникальныйИдентификатор();
			стррПоля.A01 	= ОрганизацияСсылка;
			стррПоля.A02 	= СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ДобавитьПечатнуюФорму(тз, Код, Наименование, ИдВидаДокумента, ЧислоКопий, Ориентация, ФорматФормы)
	
	СтрокаТ = тз.Добавить();
	СтрокаТ.Идентификатор 	= Новый УникальныйИдентификатор();
	СтрокаТ.Наименование	= Наименование; 
	СтрокаТ.Код				= Код;
	СтрокаТ.ВидДокумента 	= ВРег(ИдВидаДокумента); 
	СтрокаТ.ЧислоКопий 		= ЧислоКопий; 
	СтрокаТ.Ориентация 		= Ориентация; 
	СтрокаТ.ФорматФормы 	= ФорматФормы; // графическая или текстовая форма
	
КонецПроцедуры

Процедура ВыгрузитьВидыОплат(ДокОбмена)
	
	стррПоля = Новый Структура("GUID,Name,A01");
	
	ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", Неопределено); // вызов, чтобы проинициализировать структуру гТаблицыПеречислений с ее таблицами
	тз = гТаблицыПеречислений.ФормыОплаты;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыОплат", Истина);
	
	Для каждого СтрокаТ Из тз Цикл
		стррПоля.GUID = СтрокаТ.Идентификатор;
		стррПоля.Name = Строка(СтрокаТ.Значение);
		стррПоля.A01  = "Заказ,Реализация,ВозвратТоваров,Поступление";
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла; 
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

//vd_180330 ВидыДоставки
Процедура ВыгрузитьВидыДоставки(ДокОбмена)
	
	Если ИспользоватьВидыДоставки = Ложь Тогда 
		Возврат;	
	КонецЕсли;
	
	стррПоля = Новый Структура("GUID,Name");
	
	ПолучитьИдентификаторПеречисленияПоЗначению("СпособыДоставки", Неопределено); // вызов, чтобы проинициализировать структуру гТаблицыПеречислений с ее таблицами
	тз = гТаблицыПеречислений.СпособыДоставки;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыДоставки", Истина);
	
	Для каждого СтрокаТ Из тз Цикл
		стррПоля.GUID = СтрокаТ.Идентификатор;
		стррПоля.Name = Строка(СтрокаТ.Значение);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла; 
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);


КонецПроцедуры

//vd_181023 Изменена логика, убрана гКэшОсновнойПланПродаж
//vd_180718 Добавлена
Процедура ВыгрузитьмтПланыПродаж(ДокОбмена, МенеджерВТ)

	Если НЕ ИспользоватьПланыПродаж Тогда
		Возврат; //В настройках отключена опция "ИспользоватьПланыПродаж" 
	КонецЕсли;
	
	сзИдКонтрагентов = Неопределено; //используется для выгрузки Документы.ПланПродаж
	
	описаниеТипаГУИД	= Новый ОписаниеТипов("УникальныйИдентификатор");
	описаниеТипаЧисло 	= Новый ОписаниеТипов("Число");
	описаниеТипаДата	= Новый ОписаниеТипов("Дата");
	описаниеТипаБулево	= Новый ОписаниеТипов("Булево");
	
	//ПланыПродаж по номенклатуре
	тзПланПродаж = Новый ТаблицаЗначений;
	тзПланПродаж.Колонки.Добавить("гуидСсылка", 		описаниеТипаГУИД);
	тзПланПродаж.Колонки.Добавить("ПланПродаж", 		Новый ОписаниеТипов("ДокументСсылка.ПланПродаж"));
	тзПланПродаж.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзПланПродаж.Колонки.Добавить("ПланКоличество", 	описаниеТипаЧисло);
	тзПланПродаж.Колонки.Добавить("ПланСумма", 			описаниеТипаЧисло);
	тзПланПродаж.Колонки.Добавить("НачалоПериода", 		описаниеТипаДата);
	тзПланПродаж.Колонки.Добавить("ОкончаниеПериода",	описаниеТипаДата);
	тзПланПродаж.Колонки.Добавить("УчетПоСумме",		описаниеТипаБулево);
	тзПланПродаж.Колонки.Добавить("Валюта",				Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	тзПланПродаж.Колонки.Добавить("Партнер",			Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	тзПланПродаж.Колонки.Добавить("ФактКоличество", 	описаниеТипаЧисло);
	тзПланПродаж.Колонки.Добавить("ФактСумма", 			описаниеТипаЧисло);
	тзПланПродаж.Колонки.Добавить("ПроцентВыполнения", 	описаниеТипаЧисло);
	
	
	//ПланыПродажПоТоварнойКатегории
	тзПланПродажПоКатегориям = Новый ТаблицаЗначений;
	тзПланПродажПоКатегориям.Колонки.Добавить("гуидСсылка", 		описаниеТипаГУИД);
	тзПланПродажПоКатегориям.Колонки.Добавить("ПланПродаж", 		Новый ОписаниеТипов("ДокументСсылка.ПланПродажПоКатегориям"));
	тзПланПродажПоКатегориям.Колонки.Добавить("ТоварныеКатегории",	Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
	тзПланПродажПоКатегориям.Колонки.Добавить("ПланКоличество", 	описаниеТипаЧисло);
	тзПланПродажПоКатегориям.Колонки.Добавить("НачалоПериода", 		описаниеТипаДата);
	тзПланПродажПоКатегориям.Колонки.Добавить("ОкончаниеПериода",	описаниеТипаДата);
	тзПланПродажПоКатегориям.Колонки.Добавить("ФактКоличество", 	описаниеТипаЧисло);
	тзПланПродажПоКатегориям.Колонки.Добавить("ПроцентВыполнения", 	описаниеТипаЧисло);
	
	ВыгрузитьПланыПродаж(ДокОбмена, МенеджерВТ, тзПланПродаж, тзПланПродажПоКатегориям);
	ВыгрузитьСоставПланаПродаж(ДокОбмена, МенеджерВТ, тзПланПродаж, тзПланПродажПоКатегориям);
	
Конецпроцедуры

//vd_181025 Изменена логика
//vd_181024 Убран параметр мСписокПлановПродаж и сзИдКонтрагентов = Неопределено. Было ВыгрузитьПланыПродаж(ДокОбмена, МенеджерВТ, мСписокПлановПродаж, сзИдКонтрагентов = Неопределено)
// vd_180718 Добавлена
//
// Параметры:
//  ДокОбмена			 - 	 - 
//  МенеджерВТ			 - 	 - 
//  мСписокПлановПродаж	 - Массив	 		 - Массив Списка плана продаж для агент
//  сзИдКонтрагентов	 - СписокЗначений	 - Идентификаторы Контрагентов, которые потом нужно передать в СоставПланаПродаж. Перенесено из УТПроф
//
Процедура ВыгрузитьПланыПродаж(ДокОбмена, МенеджерВТ, тзПланПродаж, тзПланПродажПоКатегориям)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПланыПродаж", Истина);

	//////++ ПланыПродаж Документы.ПланПродаж//////
	//У агент есть планы продаж в Документы.ПланПродаж
	Если НЕ МенеджерВТ.Таблицы.Найти("ВТ_ПланПродаж") = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПланПродаж.Ссылка КАК Ссылка,
		               |	ПланПродаж.Сценарий.Наименование КАК НаименованиеПлана,
		               |	ПланПродаж.Номер КАК Номер,
		               |	ПланПродаж.НачалоПериода КАК НачалоПериода,
		               |	ПланПродаж.ОкончаниеПериода КАК ОкончаниеПериода,
		               |	ПланПродаж.Сценарий.ПланПродажПланироватьПоСумме КАК ПланированиеПоСумме,
					   |	ПланПродаж.Валюта КАК Валюта, 
		               |	ВЫБОР
		               |		КОГДА ПланПродаж.ВидПлана.ЗаполнятьПартнераВТЧ
		               |			ТОГДА ПланПродажТовары.Партнер
		               |		ИНАЧЕ ПланПродаж.Партнер
		               |	КОНЕЦ КАК Партнер,
		               |	ПланПродажТовары.Номенклатура КАК Номенклатура,
		               |	ПланПродажТовары.Количество КАК Количество,
		               |	ПланПродажТовары.Сумма КАК Сумма,
		               |	ПланПродажТовары.ДатаОтгрузки КАК ДатаОтгрузки
		               |ИЗ
		               |	Документ.ПланПродаж.Товары КАК ПланПродажТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПланПродаж КАК ВТ_ПланПродаж
		               |		ПО ПланПродажТовары.Ссылка = ВТ_ПланПродаж.Ссылка
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
		               |		ПО ПланПродажТовары.Ссылка = ПланПродаж.Ссылка
		               |ГДЕ
		               |	ПланПродажТовары.Отменено = ЛОЖЬ
		               |ИТОГИ
		               |	СУММА(Количество),
		               |	СУММА(Сумма)
		               |ПО
		               |	Ссылка,
		               |	Партнер,
		               |	Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПланПродаж";

		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		//ТестВыборка = Запрос.Выполнить().Выгрузить(); 
		
		//структура плана продаж
		стррПланПродаж 				= Новый Структура("GUID, Name, A02, A03, A04, A05, A06, A07, Партнер");
		//Структуры для оптимизации функции ВыгрузитьПланыПродажЗаписьЭлемента
		стррПланПродажБезПартнера   = Новый Структура("GUID, Name, A02, A03, A04, A05, A06, A07");
		стррПланПродажСПартнером	= Новый Структура("GUID, Name, A02, A03, A04, A05, A06, A07");
		стррПланПродажСПартнером.Вставить(?(РежимВыгрузкиРекомендуемый, "A09", "A08"));
		
		ТипПланирования	= "DC403B36-A935-4624-AA96-CF4B85097612"; // Планирование в разрезе номенклатуры
		
		ВыборкаПланыПродаж = Запрос.Выполнить();
		
		ВыборкаУровеньПланыПродаж = ВыборкаПланыПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаУровеньПланыПродаж.Следующий() Цикл			
			//Заполение плана продаж
			идПланПродаж = ВыборкаУровеньПланыПродаж.Ссылка.УникальныйИдентификатор();
			стррПланПродаж.GUID = идПланПродаж;	
			стррПланПродаж.Name = "План агента" + " " +  ВыборкаУровеньПланыПродаж.Номер;
			стррПланПродаж.A02  = ТипПланирования;
			стррПланПродаж.A03  = Истина; //планирование по количеству
			стррПланПродаж.A04  = ВыборкаУровеньПланыПродаж.ПланированиеПоСумме;
			стррПланПродаж.A05  = ВыборкаУровеньПланыПродаж.НачалоПериода;
			стррПланПродаж.A06  = ВыборкаУровеньПланыПродаж.ОкончаниеПериода;
			стррПланПродаж.A07  = Ложь;
			стррПланПродаж.Партнер = Справочники.Партнеры.ПустаяСсылка();
			
			ВыборкаУровеньПартнер 	= ВыборкаУровеньПланыПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КоличествоПартнеров 	= ВыборкаУровеньПартнер.Количество();
					
			Пока ВыборкаУровеньПартнер.Следующий() Цикл
				
				//Выгрузка ВсегоПланаПродаж 
				Если КоличествоПартнеров = 1 Тогда 
					Если ЗначениеЗаполнено(ВыборкаУровеньПартнер.Партнер) Тогда
						стррПланПродаж.Партнер = ВыборкаУровеньПартнер.Партнер;
					КонецЕсли;
					//Добавить в xml
					ВыгрузитьПланыПродажЗаписьЭлемента(стррПланПродаж, ДокОбмена, стррПланПродажБезПартнера, стррПланПродажСПартнером);
				КонецЕсли;
				
				//Выгрузка Планов продаж по партнерам из ВсегоПланаПродаж. 
				//Если у одного плана продаж используется несколько партнеров, то создаем еще отдельные планы продаж по каждому партнеру. 
				флДобавлятьПоКаждомуПартнеру = Ложь;
				Если КоличествоПартнеров > 1 И ЗначениеЗаполнено(ВыборкаУровеньПартнер.Партнер) Тогда
					идПланПродажПартнера= Новый УникальныйИдентификатор();
					стррПланПродаж.GUID = идПланПродажПартнера;
					стррПланПродаж.Name = Строка(ВыборкаУровеньПартнер.Номер) + " - " + Строка(ВыборкаУровеньПартнер.Контрагент);
					стррПланПродаж.A02  = ТипПланирования;
					стррПланПродаж.A03  = Истина; //планирование по количеству
					стррПланПродаж.A04  = ВыборкаУровеньПартнер.ПланированиеПоСумме;
					стррПланПродаж.A05  = ВыборкаУровеньПартнер.НачалоПериода;
					стррПланПродаж.A06  = ВыборкаУровеньПартнер.ОкончаниеПериода;
					стррПланПродаж.A07  = Ложь;
					стррПланПродаж.Партнер = ВыборкаУровеньПартнер.Партнер;
					//Добавить в xml
					ВыгрузитьПланыПродажЗаписьЭлемента(стррПланПродаж, ДокОбмена, стррПланПродажБезПартнера, стррПланПродажСПартнером);
					флДобавлятьПоКаждомуПартнеру = Истина;
				КонецЕсли;	
					
				ВыборкаУровеньНоменклатура = ВыборкаУровеньПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаУровеньНоменклатура.Следующий() Цикл
					//Для плана продаж
					стзПланПродаж = тзПланПродаж.Добавить();
					стзПланПродаж.гуидСсылка 		= идПланПродаж;
					стзПланПродаж.ПланПродаж 		= ВыборкаУровеньПланыПродаж.Ссылка;
					стзПланПродаж.НачалоПериода 	= ВыборкаУровеньНоменклатура.НачалоПериода;
					стзПланПродаж.ОкончаниеПериода 	= КонецДня(ВыборкаУровеньНоменклатура.ОкончаниеПериода);
					стзПланПродаж.Номенклатура 		= ВыборкаУровеньНоменклатура.Номенклатура;
					стзПланПродаж.ПланКоличество 	= ВыборкаУровеньНоменклатура.Количество;
					стзПланПродаж.ПланСумма      	= ВыборкаУровеньНоменклатура.Сумма;
					стзПланПродаж.УчетПоСумме       = ВыборкаУровеньНоменклатура.ПланированиеПоСумме;
					стзПланПродаж.Валюта            = ВыборкаУровеньНоменклатура.Валюта;
					стзПланПродаж.Партнер           = ВыборкаУровеньНоменклатура.Партнер;

					//Для плана продаж по каждому партнеру
					Если флДобавлятьПоКаждомуПартнеру = Истина Тогда
						стзПланПродаж = тзПланПродаж.Добавить();
						стзПланПродаж.гуидСсылка 		= идПланПродажПартнера;
						стзПланПродаж.ПланПродаж		= ВыборкаУровеньПланыПродаж.Ссылка;
						стзПланПродаж.НачалоПериода 	= ВыборкаУровеньНоменклатура.НачалоПериода;
						стзПланПродаж.ОкончаниеПериода 	= КонецДня(ВыборкаУровеньНоменклатура.ОкончаниеПериода);
						стзПланПродаж.Номенклатура 		= ВыборкаУровеньНоменклатура.Номенклатура;
						стзПланПродаж.ПланКоличество 	= ВыборкаУровеньНоменклатура.Количество;
						стзПланПродаж.ПланСумма      	= ВыборкаУровеньНоменклатура.Сумма;
						стзПланПродаж.УчетПоСумме       = ВыборкаУровеньНоменклатура.ПланированиеПоСумме;
						стзПланПродаж.Валюта            = ВыборкаУровеньНоменклатура.Валюта;
						стзПланПродаж.Партнер           = ВыборкаУровеньНоменклатура.Партнер;
						
					КонецЕсли;
					//////++Выборка по номенклатуре, детально ////// 
					//ВыборкаУровеньНоменклатура = ВыборкаУровеньПартнер.Выбрать(ОбходРезультатаЗапроса.Прямой);
					//Пока ВыборкаУровеньНоменклатура.Следующий() Цикл
					//	
					//КонецЦикла;
					//--Выборка по номенклатуре, детально //////
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//////-- ПланыПродаж//////
	

	//////++ ПланПродажПоКатегориям Документы.ПланПродажПоКатегориям//////
	//у агент есть планы продаж в Документы.ПланПродажПоКатегориям
	Если НЕ МенеджерВТ.Таблицы.Найти("ВТ_ПланПродажПоКатегориям") = Неопределено И Константы.ИспользоватьПланированиеПродажПоКатегориям.Получить() = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПланПродажПоКатегориям.Ссылка КАК Ссылка,
		               |	ПланПродажПоКатегориям.Номер КАК Номер,
		               |	ПланПродажПоКатегориям.НачалоПериода КАК НачалоПериода,
		               |	ПланПродажПоКатегориям.ОкончаниеПериода КАК ОкончаниеПериода,
		               |	ПланПродажТоварныеКатегории.ТоварнаяКатегория КАК ТоварнаяКатегория,
		               |	ПланПродажТоварныеКатегории.Количество КАК Количество
		               |ИЗ
		               |	Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ПланПродажТоварныеКатегории
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПланПродажПоКатегориям КАК ВТ_ПланПродажПоКатегориям
		               |		ПО ПланПродажТоварныеКатегории.Ссылка = ВТ_ПланПродажПоКатегориям.Ссылка
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
		               |		ПО ПланПродажТоварныеКатегории.Ссылка = ПланПродажПоКатегориям.Ссылка
		               |ГДЕ
		               |	ПланПродажТоварныеКатегории.Отменено = ЛОЖЬ
		               |ИТОГИ
		               |	СУММА(Количество)
		               |ПО
		               |	Ссылка,
		               |	ТоварнаяКатегория
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПланПродажПоКатегориям";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		стррПланПродаж 	= Новый Структура("GUID, Name, A02, A03, A04, A05, A06, A07");
		
		ТипПланирования = "7C2BCBA9-EEFB-410D-B41E-FFA4E680860A"; // Планирование в разрезе ТоварныеКатегории

		ВыборкаПланыПродаж = Запрос.Выполнить();
		
		ВыборкаУровеньПланыПродаж = ВыборкаПланыПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУровеньПланыПродаж.Следующий() Цикл			
			
			//Заполение ПланПродажПоКатегориям 
			стррПланПродаж.GUID = ВыборкаУровеньПланыПродаж.Ссылка.УникальныйИдентификатор();
			стррПланПродаж.Name = "План агента по категориям" + " " +  ВыборкаУровеньПланыПродаж.Номер;
			стррПланПродаж.A02  = ТипПланирования;
			стррПланПродаж.A03  = Истина; 	//планирование по количеству
			стррПланПродаж.A04  = Ложь;		//Планирование по сумме
			стррПланПродаж.A05  = ВыборкаУровеньПланыПродаж.НачалоПериода;
			стррПланПродаж.A06  = ВыборкаУровеньПланыПродаж.ОкончаниеПериода;
			стррПланПродаж.A07  = Ложь;
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПланПродаж);
		
			ВыборкаУровеньТоварнаяКатегория = ВыборкаУровеньПланыПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаУровеньТоварнаяКатегория.Следующий() Цикл
				
				//Заполнение тзПланПродажПоКатегориям
				стзПланПродажПоКатегориям = тзПланПродажПоКатегориям.Добавить();
				стзПланПродажПоКатегориям.гуидСсылка 		= стррПланПродаж.GUID;
				стзПланПродажПоКатегориям.ПланПродаж 		= ВыборкаУровеньПланыПродаж.Ссылка;
				стзПланПродажПоКатегориям.НачалоПериода 	= стррПланПродаж.A05;
				стзПланПродажПоКатегориям.ОкончаниеПериода 	= КонецДня(стррПланПродаж.A06);
				стзПланПродажПоКатегориям.ТоварныеКатегории	= ВыборкаУровеньТоварнаяКатегория.ТоварнаяКатегория;
				стзПланПродажПоКатегориям.ПланКоличество 	= ВыборкаУровеньТоварнаяКатегория.Количество;
				////++Выборка по номенклатуре, детально ////// 
				//ВыборкаУровеньНоменклатура = ВыборкаУровеньТоварнаяКатегория.Выбрать(ОбходРезультатаЗапроса.Прямой);
				//Пока ВыборкаУровеньНоменклатура.Следующий() Цикл
				//	
				//КонецЦикла;
				//--Выборка по номенклатуре, детально //////
					
				КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//////-- ПланПродажПоКатегориям //////

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);	
	
КонецПроцедуры

// vd_181024 Изменена логика.
// vd_180718 Добавлена
Процедура ВыгрузитьСоставПланаПродаж(ДокОбмена, МенеджерВТ, тзПланПродаж, тзПланПродажПоКатегориям)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.СоставПланаПродаж", Истина); //vd_181023
	
	//1.ПланыПродаж Документы.ПланПродаж
	Если тзПланПродаж.Количество() > 0 Тогда

		ЗаполнитьВыполнениеПланаПродаж(МенеджерВТ, тзПланПродаж);
		
		стррПоля = Новый Структура("GUID, A01, A02, A03, A04, A05, A06, A07");
		Для Каждого стзПланПродаж Из тзПланПродаж Цикл
			стррПоля.GUID = Новый УникальныйИдентификатор();
			стррПоля.A01  = стзПланПродаж.гуидСсылка;
			стррПоля.A02  = Строка(стзПланПродаж.Номенклатура.УникальныйИдентификатор());
			стррПоля.A03  = стзПланПродаж.ПланКоличество;
			стррПоля.A04  = стзПланПродаж.ПланСумма;
			стррПоля.A05  = стзПланПродаж.ФактКоличество;
			стррПоля.A06  = стзПланПродаж.ФактСумма;
			стррПоля.A07  = стзПланПродаж.ПроцентВыполнения;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		КонецЦикла;
		
	КонецЕсли;		
	
	//2. ПланПродажПоКатегориям Документы.ПланПродажПоКатегориям//////
	Если тзПланПродажПоКатегориям.Количество() > 0 Тогда
		
		ЗаполнитьВыполнениеПланаПродаж(МенеджерВТ, тзПланПродажПоКатегориям);
		
		стррПоля = Новый Структура("GUID, A01, A02, A03, A04, A05, A06, A07");
		Для Каждого стзПланПродаж Из тзПланПродажПоКатегориям Цикл
			стррПоля.GUID = Новый УникальныйИдентификатор();
			стррПоля.A01  = стзПланПродаж.гуидСсылка;
			стррПоля.A02  = Строка(стзПланПродаж.ТоварныеКатегории.УникальныйИдентификатор());
			стррПоля.A03  = стзПланПродаж.ПланКоличество;
			стррПоля.A04  = 0;
			стррПоля.A05  = стзПланПродаж.ФактКоличество;
			стррПоля.A06  = 0;
			стррПоля.A07  = стзПланПродаж.ПроцентВыполнения;
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		КонецЦикла;		
		
	КонецЕсли;
	////////-- ПланПродажПоКатегориям Документы.ПланПродажПоКатегориям//////

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

//vd_181025 Добавлена
//Для оптимизвции записи ЗаписатьЭлементВДокументОбмена(), если в стррПланПродаж заполнен/незаполнен Партнер, то используем стркутуру с соответствующими свойствами.  
Процедура ВыгрузитьПланыПродажЗаписьЭлемента(стррПланПродаж, ДокОбмена, стррПланПродажБезПартнера, стррПланПродажСПартнером)
	
	Если ЗначениеЗаполнено(стррПланПродаж.Партнер) Тогда
		стррПланПродажСПартнером.GUID 	= стррПланПродаж.GUID;
		стррПланПродажСПартнером.Name 	= стррПланПродаж.Name;
		стррПланПродажСПартнером.A02 	= стррПланПродаж.A02;
		стррПланПродажСПартнером.A03	= стррПланПродаж.A03;
		стррПланПродажСПартнером.A04 	= стррПланПродаж.A04;
		стррПланПродажСПартнером.A05 	= стррПланПродаж.A05;
		стррПланПродажСПартнером.A06 	= стррПланПродаж.A06;
		стррПланПродажСПартнером.A07 	= стррПланПродаж.A07;
		Если РежимВыгрузкиРекомендуемый Тогда
			стррПланПродажСПартнером.A09= стррПланПродаж.Партнер;
		Иначе
			стррПланПродажСПартнером.A08= стррПланПродаж.Партнер;
		КонецЕсли;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПланПродажСПартнером);
	Иначе
		стррПланПродажБезПартнера.GUID  = стррПланПродаж.GUID;
		стррПланПродажБезПартнера.Name  = стррПланПродаж.Name;
		стррПланПродажБезПартнера.A02 	= стррПланПродаж.A02;
		стррПланПродажБезПартнера.A03 	= стррПланПродаж.A03;
		стррПланПродажБезПартнера.A04 	= стррПланПродаж.A04;
		стррПланПродажБезПартнера.A05 	= стррПланПродаж.A05;
		стррПланПродажБезПартнера.A06 	= стррПланПродаж.A06;
		стррПланПродажБезПартнера.A07 	= стррПланПродаж.A07;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПланПродажБезПартнера);
	КонецЕсли;
	
КонецПроцедуры

// vd_181031 Добавлена
//Процедура заполняют в тзПланПродаж коноки ФактКоличество, ФактСумма, ПроцентВыполнения
//
// Параметры:
//  МенеджерВТ	 - Менеджер	 - 
//  тзПланПродаж - ТаблицаЗначение - Оприделяется в ВыгрузитьмтПланыПродаж()
//
Процедура ЗаполнитьВыполнениеПланаПродаж(МенеджерВТ, тзПланПродаж)

	//1.Оприделение типа Справочника ПланаПродаж
	
	Если тзПланПродаж.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		//В параметре тзПланПродаж используется таблица тзПланПродаж (оприделяется в ВыгрузитьмтПланыПродаж()) 
		флПланПродажПоНоменклатуре = Истина;
	ИначеЕсли тзПланПродаж.Колонки.Найти("ТоварныеКатегории") <> Неопределено Тогда
		//В параметре тзПланПродаж используется таблица тзПланПродажПоКатегориям (оприделяется в ВыгрузитьмтПланыПродаж())
		флПланПродажПоНоменклатуре = Ложь;
	Иначе
		//Ошибка
		Возврат;
	КонецЕсли;
	
	//2. Структуры, массив и переменые для отбора
		//мОтбора 			- Массив со значениями типа Справочник.Номенклатуры или Справочник.ТоварныеКатегории. Для формирования стррОтборЗапроса  
		//стррОтборПланПродаж  - Структура для формирвания мОтбора
		//стррОтборВыборки     - Структура для обработки результатов запроса
		//стррПарметрыЗапроса  - Структура с Параметрами для Запроса
	мОтбора = Новый Массив; //Значения  
	Если флПланПродажПоНоменклатуре Тогда 
		ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		стррОтборПланПродаж = Новый Структура("НачалоПериода, ОкончаниеПериода, Партнер");
		стррОтборВыборки 	= Новый Структура("НачалоПериода, ОкончаниеПериода, Номенклатура");
	Иначе
		стррОтборПланПродаж = Новый Структура("НачалоПериода, ОкончаниеПериода");
		стррОтборВыборки	= Новый Структура("НачалоПериода, ОкончаниеПериода, ТоварныеКатегории");
	КонецЕсли;
	стррПарметрыЗапроса		= Новый Структура("НачалоПериода, ОкончаниеПериода, мНоменклатура, мТоварныеКатегории, Партнер");
		
	//3. Периоды для отбора из РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты()  
	Если флПланПродажПоНоменклатуре Тогда
		тзПериоды = тзПланПродаж.Скопировать(, "НачалоПериода, ОкончаниеПериода, Партнер");
		тзПериоды.Свернуть("НачалоПериода, ОкончаниеПериода, Партнер");
	Иначе	
		тзПериоды = тзПланПродаж.Скопировать(, "НачалоПериода, ОкончаниеПериода");
		тзПериоды.Свернуть("НачалоПериода, ОкончаниеПериода");
	КонецЕсли;	
	
	//4. Обработка по периодам             
	Для Каждого стзПериоды Из тзПериоды Цикл
		
		мОтбора.Очистить();
			
		//5.1 Получение мОтбора для стррОтбор.мНоменклатура и стррОтбор.мТоварныеКатегории
		стррОтборПланПродаж.НачалоПериода 	= стзПериоды.НачалоПериода;
		стррОтборПланПродаж.ОкончаниеПериода= стзПериоды.ОкончаниеПериода;
		Если флПланПродажПоНоменклатуре Тогда  
			стррОтборПланПродаж.Партнер = стзПериоды.Партнер; 	
		КонецЕсли;
		мстзПланПродаж = тзПланПродаж.НайтиСтроки(стррОтборПланПродаж);
		Для Каждого стзПланПродаж Из мстзПланПродаж Цикл
			Если флПланПродажПоНоменклатуре И мОтбора.Найти(стзПланПродаж.Номенклатура) = Неопределено Тогда
				мОтбора.Добавить(стзПланПродаж.Номенклатура);
			ИначеЕсли мОтбора.Найти(стзПланПродаж.ТоварныеКатегории) = Неопределено Тогда
				мОтбора.Добавить(стзПланПродаж.ТоварныеКатегории);
			Конецесли;
		КонецЦикла;   		

		//5.2.1 стррОтбор.НачалоПериода
		стррПарметрыЗапроса.НачалоПериода		= стзПериоды.НачалоПериода;
		//5.2.2 стррОтбор.ОкончаниеПериода
		стррПарметрыЗапроса.ОкончаниеПериода	= стзПериоды.ОкончаниеПериода;
		//5.2.3 стррОтбор.мНоменклатура или стррОтбор.мТоварныеКатегории или стррОтбор.Партнер
		Если флПланПродажПоНоменклатуре Тогда
			стррПарметрыЗапроса.мНоменклатура 	    = мОтбора;
			стррПарметрыЗапроса.Партнер	 	    = стзПериоды.Партнер;
		Иначе
			стррПарметрыЗапроса.мТоварныеКатегории = мОтбора;
		КонецЕсли;

		//6. Получение КоличествоФакт и СуммаФакт
		//РегистрНакопления.ЗаказыКлиентов продажи по заказам (не используем)
		//РегистрНакопления.ВыручкаИСебестоимостьПродаж по Заказам и Реализациям.
		Запрос = Новый Запрос;
		Если флПланПродажПоНоменклатуре Тогда
			//6.1 ПланыПродаж
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДокументЗаказ.Ссылка КАК Ссылка
			               |ПОМЕСТИТЬ ВТ_ДокументыАгента
			               |ИЗ
			               |	Документ.ЗаказКлиента КАК ДокументЗаказ
			               |ГДЕ
			               |	ДокументЗаказ.Менеджер = &ВыбАгент
			               |	И ДокументЗаказ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			               |	И ДокументЗаказ.ПометкаУдаления = ЛОЖЬ
			               |	И ВЫБОР
			               |			КОГДА &ОтборПоПартнеру = ИСТИНА
			               |				ТОГДА ДокументЗаказ.Партнер = &Партнер
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ДокументРеализация.Ссылка
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг КАК ДокументРеализация
			               |ГДЕ
			               |	ДокументРеализация.Менеджер = &ВыбАгент
			               |	И ДокументРеализация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			               |	И ДокументРеализация.ПометкаУдаления = ЛОЖЬ
			               |	И ВЫБОР
			               |			КОГДА &ОтборПоПартнеру = ИСТИНА
			               |				ТОГДА ДокументРеализация.Партнер = &Партнер
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ссылка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	АналитикаУчетаНоменклатуры.КлючАналитики КАК КлючАналитики,
			               |	АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура
			               |ПОМЕСТИТЬ ВТ_СвязьКлючАналитикиИНоменклатура
			               |ИЗ
			               |	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			               |ГДЕ
			               |	АналитикаУчетаНоменклатуры.Номенклатура В(&мНоменклатура)
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	КлючАналитики
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			               |	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК КоличествоФакт,
			               |	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК СуммаФакт,
			               |	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиРеглОборот КАК СуммаФактВВалютеРегУчета
			               |ПОМЕСТИТЬ ВТ_ВыручкаИСебестоимостьПродаж
			               |ИЗ
			               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
			               |			&НачалоПериода,
			               |			&ОкончаниеПериода,
			               |			Регистратор,
			               |			АналитикаУчетаНоменклатуры В
			               |					(ВЫБРАТЬ
			               |						ВТ_СвязьКлючАналитикиИНоменклатура.КлючАналитики
			               |					ИЗ
			               |						ВТ_СвязьКлючАналитикиИНоменклатура КАК ВТ_СвязьКлючАналитикиИНоменклатура)
			               |				И ЗаказКлиента В
			               |					(ВЫБРАТЬ
			               |						ВТ_ДокументыАгента.Ссылка
			               |					ИЗ
			               |						ВТ_ДокументыАгента КАК ВТ_ДокументыАгента)) КАК ВыручкаИСебестоимостьПродажОбороты
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	АналитикаУчетаНоменклатуры
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_СвязьКлючАналитикиИНоменклатура.Номенклатура КАК НоменклатураФакт,
			               |	СУММА(ВыручкаИСебестоимостьПродаж.КоличествоФакт) КАК КоличествоФакт,
			               |	СУММА(ВыручкаИСебестоимостьПродаж.СуммаФактВВалютеРегУчета) КАК СуммаФактВВалютеРегУчета
			               |ИЗ
			               |	ВТ_ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвязьКлючАналитикиИНоменклатура КАК ВТ_СвязьКлючАналитикиИНоменклатура
			               |		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = ВТ_СвязьКлючАналитикиИНоменклатура.КлючАналитики
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ВТ_СвязьКлючАналитикиИНоменклатура.Номенклатура";

		Иначе
			//6.2 ПланыПродажПоКатегориям
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДокументЗаказ.Ссылка КАК Ссылка
			               |ПОМЕСТИТЬ ВТ_ДокументыАгента
			               |ИЗ
			               |	Документ.ЗаказКлиента КАК ДокументЗаказ
			               |ГДЕ
			               |	ДокументЗаказ.Менеджер = &ВыбАгент
			               |	И ДокументЗаказ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			               |	И ДокументЗаказ.ПометкаУдаления = ЛОЖЬ
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ДокументРеализация.Ссылка
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг КАК ДокументРеализация
			               |ГДЕ
			               |	ДокументРеализация.Менеджер = &ВыбАгент
			               |	И ДокументРеализация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			               |	И ДокументРеализация.ПометкаУдаления = ЛОЖЬ
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ссылка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Номенклатура.Ссылка КАК Номенклатура,
			               |	Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория
			               |ПОМЕСТИТЬ ВТ_СвязьНоменклатураИТоварнаяКатегория
			               |ИЗ
			               |	Справочник.Номенклатура КАК Номенклатура
			               |ГДЕ
			               |	Номенклатура.ТоварнаяКатегория В(&мТоварныеКатегории)
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Номенклатура
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	АналитикаУчетаНоменклатуры.КлючАналитики КАК КлючАналитики,
			               |	ВТ_СвязьНоменклатураИТоварнаяКатегория.ТоварнаяКатегория КАК ТоварнаяКатегория
			               |ПОМЕСТИТЬ ВТ_СвязьКлючАналитикиИТоварнаяКатегория
			               |ИЗ
			               |	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвязьНоменклатураИТоварнаяКатегория КАК ВТ_СвязьНоменклатураИТоварнаяКатегория
			               |		ПО АналитикаУчетаНоменклатуры.Номенклатура = ВТ_СвязьНоменклатураИТоварнаяКатегория.Номенклатура
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	КлючАналитики
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			               |	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК КоличествоФакт
			               |ПОМЕСТИТЬ ВТ_ВыручкаИСебестоимостьПродаж
			               |ИЗ
			               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
			               |			&НачалоПериода,
			               |			&ОкончаниеПериода,
			               |			Регистратор,
			               |			АналитикаУчетаНоменклатуры В
			               |					(ВЫБРАТЬ
			               |						ВТ_СвязьКлючАналитикиИТоварнаяКатегория.КлючАналитики
			               |					ИЗ
			               |						ВТ_СвязьКлючАналитикиИТоварнаяКатегория КАК ВТ_СвязьКлючАналитикиИТоварнаяКатегория)
			               |				И ЗаказКлиента В
			               |					(ВЫБРАТЬ
			               |						ВТ_ДокументыАгента.Ссылка
			               |					ИЗ
			               |						ВТ_ДокументыАгента КАК ВТ_ДокументыАгента)) КАК ВыручкаИСебестоимостьПродажОбороты
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	АналитикаУчетаНоменклатуры
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_СвязьКлючАналитикиИТоварнаяКатегория.ТоварнаяКатегория КАК НоменклатураФактТоварнаяКатегория,
			               |	СУММА(ВыручкаИСебестоимостьПродаж.КоличествоФакт) КАК КоличествоФакт
			               |ИЗ
			               |	ВТ_ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвязьКлючАналитикиИТоварнаяКатегория КАК ВТ_СвязьКлючАналитикиИТоварнаяКатегория
			               |		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = ВТ_СвязьКлючАналитикиИТоварнаяКатегория.КлючАналитики
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ВТ_СвязьКлючАналитикиИТоварнаяКатегория.ТоварнаяКатегория";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НачалоПериода",		стррПарметрыЗапроса.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода",	стррПарметрыЗапроса.ОкончаниеПериода);
		Запрос.УстановитьПараметр("ВыбАгент", 			ВыбАгент);
				
		Если флПланПродажПоНоменклатуре Тогда
			Запрос.УстановитьПараметр("мНоменклатура", 		стррПарметрыЗапроса.мНоменклатура);
			Если ЗначениеЗаполнено(стррПарметрыЗапроса.Партнер) Тогда
				Запрос.УстановитьПараметр("ОтборПоПартнеру",	Истина);
			Иначе
				Запрос.УстановитьПараметр("ОтборПоПартнеру",	Ложь);
			КонецЕсли;
			Запрос.УстановитьПараметр("Партнер", стррПарметрыЗапроса.Партнер);
		Иначе
			Запрос.УстановитьПараметр("мТоварныеКатегории", стррПарметрыЗапроса.мТоварныеКатегории);
		КонецЕсли;
		
		
		ВыборкаРезультат = Запрос.Выполнить().Выгрузить();			
			
		//7. Заполнение КоличествоФакт, СуммаФакт, ПроцентВыполнения в тзПланПродаж
		Для Каждого стзВыборкаРезультат Из ВыборкаРезультат Цикл 
			
			//8 стррОтборВыборки для поиска строк в тзПланПродаж
			стррОтборВыборки.НачалоПериода 		= стррПарметрыЗапроса.НачалоПериода;
			стррОтборВыборки.ОкончаниеПериода 	= стррПарметрыЗапроса.ОкончаниеПериода;
			Если флПланПродажПоНоменклатуре Тогда 
				стррОтборВыборки.Номенклатура 		= стзВыборкаРезультат.НоменклатураФакт;
			Иначе
				стррОтборВыборки.ТоварныеКатегории	= стзВыборкаРезультат.НоменклатураФактТоварнаяКатегория;
			КонецЕсли;

			//9 Изменение тзПланПродаж колонок ФактКоличество, ФактСумма, ПроцентВыполнения 
			мстзПланПродаж = тзПланПродаж.НайтиСтроки(стррОтборВыборки);
			Для Каждого стзПланПродаж Из мстзПланПродаж Цикл
				
				//9.1 ФактКоличество
				стзПланПродаж.ФактКоличество =  стзВыборкаРезультат.КоличествоФакт;
				
				//5.2 ФактСумма
				Если флПланПродажПоНоменклатуре Тогда
					стзПланПродаж.ФактСумма = стзВыборкаРезультат.СуммаФактВВалютеРегУчета;
					Если ЗначениеЗаполнено(стзПланПродаж.Валюта) И ЗначениеЗаполнено(ВалютаРегУчета) И стзПланПродаж.Валюта <> ВалютаРегУчета Тогда
						//Пересчет в валюту Плана продаж
						//	СуммаДокумента 	- Число - Текущая сумма документа
						//	ТекущаяВалюта 	- СправочникСсылка.Валюты - Текущая валюта документа
						//	НоваяВалюта 	- СправочникСсылка.Валюты - Новая валюта документа
						//	Дата - Дата 	- Дата документа.
						стзПланПродаж.ФактСумма = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(стзПланПродаж.ФактСумма, ВалютаРегУчета, стзПланПродаж.Валюта, стррПарметрыЗапроса.ОкончаниеПериода);
					КонецЕсли;
				КонецЕсли;
						
				// 5.3 ПроцентВыполнения
				ВыполнениеПоКоличеству = ?(стзПланПродаж.ПланКоличество = 0, 1, стзПланПродаж.ФактКоличество / стзПланПродаж.ПланКоличество);
				Если флПланПродажПоНоменклатуре Тогда
					Если стзПланПродаж.УчетПоСумме Тогда 								
						ВыполнениеПоСуммам = ?(стзПланПродаж.ПланСумма = 0, 1, стзПланПродаж.ФактСумма / стзПланПродаж.ПланСумма);
						Если стзПланПродаж.ПланКоличество = 0 Тогда
							ПроцентВыполнения = ВыполнениеПоСуммам;
						ИначеЕсли стзПланПродаж.ПланСумма = 0 Тогда
							ПроцентВыполнения = ВыполнениеПоКоличеству;
						ИначеЕсли стзПланПродаж.ПланКоличество = 0 И стзПланПродаж.ПланСумма = 0 Тогда 
							ПроцентВыполнения = 1;
						Иначе
							ПроцентВыполнения  = (ВыполнениеПоКоличеству + ВыполнениеПоСуммам) / 2;
						КонецЕсли;						
					Иначе
						ПроцентВыполнения  = ВыполнениеПоКоличеству;
					КонецЕсли;
				Иначе
					ПроцентВыполнения  = ВыполнениеПоКоличеству;	
				КонецЕсли;
				стзПланПродаж.ПроцентВыполнения	= Окр(ПроцентВыполнения * 100, 0, 1);

			КонецЦикла;
			
		КонецЦикла;			
		
	КонецЦикла;  	
	
КонецПроцедуры


//vd_181030 Не использыем
//vd_180719 Добавлена. Возвращает маасив документов. Функция пока не оприделяет загруженные документы не для ВыбАгент.
//Функция ПолучитьЗагруженныеДокументыАгентаЗаказИРеализация(Агент = Неопределено)
//	
//	мЗагруженныеДокументыАгента = Новый Массив;
//	
//	Если Агент = Неопределено Тогда
//		Агент = ВыбАгент;
//	КонецЕсли;
//	
//	Если Агент = ВыбАгент Тогда
//		СсылкаМУ = ВыбНастройкиАгента.СсылкаМУ;
//	Иначе
//		Возврат мЗагруженныеДокументыАгента; //Функция пока не оприделяет загруженные документы не для ВыбАгент.
//	КонецЕсли;
//	
//	тзЗагруженныеДокументыАгента = ПодтвержденияСДОткрыть("Документы", СсылкаМУ, Истина);
//	
//	ЭтоВиртуальныйДокумент = Ложь;
//	Для Каждого СтрокаТ Из тзЗагруженныеДокументыАгента Цикл
//		Если НЕ ВДокЭтоВиртуальныйДокумент(СтрокаТ.ВидДокумента) Тогда
//			Документ = Документы[СтрокаТ.ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.Идентификатор));
//			Если Документ.Пустая() ИЛИ Документ.ПолучитьОбъект() = Неопределено Тогда
//				Продолжить;
//			КонецЕсли;
//			мЗагруженныеДокументыАгента.Добавить(Документ);
//		КонецЕсли;		
//	КонецЦикла;
//	
//	Возврат мЗагруженныеДокументыАгента;	
//КонецФункции

// Процедура выгружает ветку картинок ("PICTURES") в файл выгрузки.
// Параметры:
//		ДокОбмена  - ЗаписьXML - XML-документ выгрузки.
//		тзКартинки - Неопределено, ТаблицаЗначений - таблица свойств картинок с колонками:
//			* Ссылка - СправочникСсылка.НоменклатураПрисоединенныеФайлы или СправочникСсылка.ПартнерыПрисоединенныеФайлы
// 			* Описание - Строка - описание картинки
//  		* ИмяФайла - Строка - имя файла для записи в zip-архив
Процедура ВыгрузитьИзображения(ДокОбмена, тзКартинки)
	
	Если тзКартинки = Неопределено Или тзКартинки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	стррПоля = Новый Структура("GUID,FileName,Description");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	ДобавитьПоле(ДокОбмена, "Comment", "Картинки");	
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Для каждого СтрокаТ Из тзКартинки Цикл
		стррПоля.GUID		 = ВРег(СтрокаТ.Ссылка.УникальныйИдентификатор());
		стррПоля.FileName	 = СтрокаТ.ИмяФайла;
		стррПоля.Description = СтрокаТ.Описание;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла; 	
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); // PICTURES
	
КонецПроцедуры

Процедура ВыгрузитьРезультатыПосещений(ДокОбмена)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.РезультатыПосещений");
	стррПоля = Новый Структура("GUID,Name,A01,A02"); // A01 - "Анкетирование", A02 - "ШаблонАнкеты"
	
	стррВО = ВОСвойстваОбъекта("_РезультатыПосещений"); // системные свойства виртуального объекта	
	ПометкаУдаления = ВОТЗИконкиСтатуса(стррВО).Помечен;
	
	тз = ВОТЗЗагрузить(стррВО, Истина);
	Для каждого СтрокаТ Из тз Цикл
		Если СтрокаТ.Статус = ПометкаУдаления Тогда
		    Продолжить;
		КонецЕсли; 
		стррПоля.GUID = СтрокаТ.ID;
		стррПоля.Name = СтрокаТ.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла; 
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

//vd_190402 Добавлена
Процедура ВыгрузитьВидыЗадач(ДокОбмена)
	
	стррВОЗадание 	= ВОСвойстваОбъекта("_ВидыЗадач");
	тзВидыЗадач		= ВОТЗЗагрузить(стррВОЗадание, Истина);
	ПометкаУдаления = ВОТЗИконкиСтатуса(стррВОЗадание).Помечен;
	стррПоля 		= Новый Структура("GUID,IsDeleted,Name,A01,A02,GrpID0");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыЗадач", Истина);

	Для каждого стзВидыЗадач Из тзВидыЗадач Цикл
		Если стзВидыЗадач.Статус = ПометкаУдаления Тогда
		    Продолжить;
		КонецЕсли;
		
		стррПоля.GUID		= стзВидыЗадач.ID;
		стррПоля.IsDeleted	= 0;
		стррПоля.Name       = стзВидыЗадач.Наименование;
		стррПоля.A01        = стзВидыЗадач.ТипЗадачи;
		стррПоля.A02        = "";
		стррПоля.GrpID0     = "00000000-0000-0000-0000-000000000001"; //стзВидыЗадач.Группа;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);				
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	//Группировки
	стррПоля = Новый Структура("GUID,Name,ParId");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "BEB1F064-F717-46F7-9426-8A82B81D9A6C");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по иерархии");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");

	стррПоля.GUID =     "00000000-0000-0000-0000-000000000001";
	стррПоля.Name =		"Все"; 	
	стррПоля.ParId = 	"";
	ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //GROUP
	ДокОбмена.ЗаписатьКонецЭлемента(); //GROUPS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG

	
КонецПроцедуры


// ВыгрузкаСправочников
#КонецОбласти

#Область ВыгрузкаДокументов

Процедура ВыгрузитьДокументы(ДокОбмена, МенеджерВТ)

	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	ДобавитьПоле(ДокОбмена, "Comment", "Документы");

	ВыгрузитьДокументыЗаказ(ДокОбмена, МенеджерВТ); 
	
	ВыгрузитьДокументыПродажи(ДокОбмена); 
	
	ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьДокументыПеремещения(ДокОбмена); // sd_22082017
	
	ВыгрузитьДокументыЗадание(ДокОбмена); // vd_190402
	
	
	ВыгрузитьМаршруты(ДокОбмена);

	Если ОчищатьДокументыПередЗагрузкой Тогда 
		// нужно выгрузить пустые тэги с атрибутом KillAll для невыгруженных видов документов, указанных в списке СписокОчищаемыхДокументов
		ИсключитьВидыДокументов = "Заказ,Долг,Реализация,Перемещение,СчетФактура"; // sd_22082017 добавил перемещение.
		ВыгрузитьТэгиУдаленияДокументов(ДокОбмена, СтрРазделить_(ИсключитьВидыДокументов));
	КонецЕсли;

	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS

КонецПроцедуры

Процедура ВыгрузитьТэгиУдаленияДокументов(ДокОбмена, мИсключитьВидыДокументов)
	
	Если ОчищатьДокументыПередЗагрузкой Тогда
		Для Каждого Элемент Из СписокОчищаемыхДокументов Цикл
			Если Неопределено = мИсключитьВидыДокументов.Найти(Элемент.Значение) Тогда
				ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ." + Элемент.Значение, 1); // с признаком удаления всех документов данного вида
				ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДокументыЗаказ(ДокОбмена, МенеджерВТ)

	Если ИнтервалВыгрузкиЗаказов = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Результат = ДанныеПоДокументамЗаказПокупателя(МенеджерВТ);
	ВыборкаДок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтррПоля = Новый Структура("GUID,dt,IsPost,A02,A03,A04,A05,A06,A07,A08,A09,A010,A011,A016,A019"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "0738E61B-F06F-464A-8483-4249E0254819", "Табличная часть 'Товары'");	
	стррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010,A011,A012,A015"); // ТЧ документа
	
	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	
	СписокЗаказов = Новый Массив;

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Заказ");
	Пока ВыборкаДок.Следующий() Цикл
		ВыборкаТабличнойЧасти = ВыборкаДок.Выбрать();
		ВыборкаТабличнойЧасти.Следующий();

		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаДокумента, ВыборкаТабличнойЧасти.Валюта, ВыборкаТабличнойЧасти.Дата);
		
		ЕстьПодчиненныеРеализацииДляЗаказа = ЕстьПодчиненныеРеализацииДляЗаказа(ВыборкаДок.Ссылка);
		Если ЕстьПодчиненныеРеализацииДляЗаказа Тогда 
			СписокЗаказов.Добавить(ВыборкаДок.Ссылка);
		КонецЕсли;
		
		СтррПоля.GUID = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt = ВыборкаДок.Ссылка.Дата;
		СтррПоля.IsPost = ВыборкаДок.Ссылка.Проведен;
		СтррПоля.A02 = ВыборкаТабличнойЧасти.Организация;
		//vd_180710
		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПоля.A03 = ?(ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки, ВыборкаТабличнойЧасти.Контрагент, "");
			СтррПоля.A04 = ВыборкаТабличнойЧасти.Клиент;
		Иначе
			СтррПоля.A03 = ВыборкаТабличнойЧасти.Клиент;
			СтррПоля.A04 = ?(ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки, ВыборкаТабличнойЧасти.Контрагент, "");
		КонецЕсли;
		
		СтррПоля.A05 = ВыборкаТабличнойЧасти.Соглашение;
		СтррПоля.A06 = "";
		СтррПоля.A07 = "";
		СтррПоля.A08 = СуммаДокумента;
		СтррПоля.A09 = ВыборкаТабличнойЧасти.Вес;
		СтррПоля.A010 = ВыборкаТабличнойЧасти.ЖелаемаяДатаОтгрузки;
		СтррПоля.A011 = ВыборкаТабличнойЧасти.Комментарий;
		СтррПоля.A016 = ЕстьПодчиненныеРеализацииДляЗаказа;
		СтррПоля.A019 = ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", ВыборкаДок.ФормаОплаты);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ВыборкаТабличнойЧасти.Сбросить();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ);
		Пока ВыборкаТабличнойЧасти.Следующий() Цикл
			Количество = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена = ВыборкаТабличнойЧасти.Цена;
			стррПоляТЧ.GUID = Новый УникальныйИдентификатор();
			стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			стррПоляТЧ.A01 = ВыборкаТабличнойЧасти.Номенклатура;
			
			стррПоискХарактеристики.Номенклатура = ВыборкаТабличнойЧасти.Номенклатура;
			стррПоискХарактеристики.Ссылка  	 = ВыборкаТабличнойЧасти.Характеристика;
			стррПоляТЧ.A02 = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
			
			стррПоляТЧ.A03 = ВыборкаТабличнойЧасти.Упаковка;
			стррПоляТЧ.A04 = Количество;
			стррПоляТЧ.A05 = СуммаВВалютеУчетаАгента(Цена, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A06 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A07 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A08 = ВыборкаТабличнойЧасти.Вес;
			стррПоляТЧ.A09 = ВыборкаТабличнойЧасти.ПроцентРучнойСкидки;
			//(( sk_181213
			// стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
				стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС);
			Иначе
				стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			КонецЕсли;	
			//)) sk_181213
			стррПоляТЧ.A011 = ВыборкаТабличнойЧасти.Склад;
			стррПоляТЧ.A012 = СуммаВВалютеУчетаАгента(Количество*Цена - СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата); //Сумма скидки
			стррПоляТЧ.A015 = ВыборкаТабличнойЧасти.ВидЦены;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Если СписокЗаказов.Количество() > 0 Тогда 
		гКэшСпискиОбъектов.Вставить("СписокЗаказов", СписокЗаказов);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьДокументыПродажи(ДокОбмена)

	Если ИнтервалВыгрузкиЗаказов = 0 Тогда  // это единый параметр для выгрузки заказов и реализаций
		Возврат;
	КонецЕсли; 
	
	Результат = ДанныеПоДокументамПродажи();
	ВыборкаДок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтррПоля = Новый Структура("GUID,dt,IsPost,A01,A02,A03,A04,A05,A06,A07,A08,A09,A011,A018"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "E4D61E0A-1D62-48D7-B70C-BCBA935D377A", "Табличная часть 'Товары'");	
	стррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010,A011,A012,A015"); // ТЧ документа
	
	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Реализация");
	Пока ВыборкаДок.Следующий() Цикл
		ВыборкаТабличнойЧасти = ВыборкаДок.Выбрать();
		ВыборкаТабличнойЧасти.Следующий();

		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаДокумента, ВыборкаТабличнойЧасти.Валюта, ВыборкаТабличнойЧасти.Дата);
		
		СтррПоля.GUID = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt = ВыборкаДок.Ссылка.Дата;
		СтррПоля.IsPost = ВыборкаДок.Ссылка.Проведен;
		СтррПоля.A01 = ВыборкаТабличнойЧасти.Организация;
		//vd_180710
		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПоля.A02 = ?(ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки, ВыборкаТабличнойЧасти.Контрагент, "");
			СтррПоля.A03 = ВыборкаТабличнойЧасти.Клиент;
		Иначе
			СтррПоля.A02 = ВыборкаТабличнойЧасти.Клиент;
			СтррПоля.A03 = ?(ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки, ВыборкаТабличнойЧасти.Контрагент, "");
		КонецЕсли;
		СтррПоля.A04 = ВыборкаТабличнойЧасти.Соглашение;
		СтррПоля.A05 = "";
		СтррПоля.A06 = "";
		СтррПоля.A07 = СуммаДокумента;
		СтррПоля.A08 = ВыборкаТабличнойЧасти.Вес;
		СтррПоля.A09 = ВыборкаТабличнойЧасти.Комментарий;
		СтррПоля.A011 = ВыборкаТабличнойЧасти.ДокументЗаказ;
		СтррПоля.A018 = ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", ВыборкаДок.ФормаОплаты);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ВыборкаТабличнойЧасти.Сбросить();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ);
		Пока ВыборкаТабличнойЧасти.Следующий() Цикл
			Количество = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена = ВыборкаТабличнойЧасти.Цена;
			стррПоляТЧ.GUID = Новый УникальныйИдентификатор();
			стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			стррПоляТЧ.A01 = ВыборкаТабличнойЧасти.Номенклатура;
			
			стррПоискХарактеристики.Номенклатура = ВыборкаТабличнойЧасти.Номенклатура;
			стррПоискХарактеристики.Ссылка  	 = ВыборкаТабличнойЧасти.Характеристика;
			стррПоляТЧ.A02 = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
			
			стррПоляТЧ.A03 = ВыборкаТабличнойЧасти.Упаковка;
			стррПоляТЧ.A04 = Количество;
			стррПоляТЧ.A05 = СуммаВВалютеУчетаАгента(Цена, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A06 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A07 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A08 = ВыборкаТабличнойЧасти.Вес;
			стррПоляТЧ.A09 = ВыборкаТабличнойЧасти.ПроцентРучнойСкидки;

			//(( sk_181213
			// стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
				стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС);
			Иначе
				стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			КонецЕсли;	
			//)) sk_181213
			стррПоляТЧ.A011 = ВыборкаТабличнойЧасти.Склад;
			стррПоляТЧ.A012 = СуммаВВалютеУчетаАгента(Количество*Цена - СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата); //Сумма скидки
			стррПоляТЧ.A015 = ВыборкаТабличнойЧасти.ВидЦены;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьМаршруты(ДокОбмена)
	
	Если Не ВыгружатьМаршруты Тогда
		Возврат;
	КонецЕсли; 
	
	стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ВыбНастройкиАгента.СсылкаСписокТТ); // получили список торговых точек
	Если стррОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СмещениеОтНачалаПлана = ДеньНедели(ТекущаяДата()) - 1;
	ПериодПлана = стррОбъект.ПериодГрафикаПлана;
	Если ПериодПлана > 7 И стррОбъект.ДатаНачала <> '00010101' Тогда
		Дней = (НачалоДня(ТекущаяДата()) - стррОбъект.ДатаНачала) / 86400;
		СмещениеОтНачалаПлана = Дней % стррОбъект.ПериодГрафикаПлана;
	КонецЕсли; 
	
	ИспользуетсяГрафик = Неопределено;
	ИспользуетсяПП 	   = Неопределено;
	Если Не СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик, ИспользуетсяПП) Тогда
	    Возврат;
	КонецЕсли; 
	
	ИспользуетсяКонтрагент 	= стррОбъект.Детализация.НайтиПоЗначению("Контрагент") <> Неопределено;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Маршрут", 1);  // с признаком удаления всех документов Маршрут
		
	стррПоля = Новый Структура("GUID,dt,IsPost");
	стррПоля.IsPost = Истина; // признак, что документ проведен
	стррПункт = Новый Структура("GUID,DocId,A01,A02,A03,A04"); // структура ТЧ "ТочкиМаршрута" документа "Маршрут" в МТ
	// структура ТЧ в МТ:
	// A01 - Контрагент (в 1С - это Партнер)
	// A02 - ТорговаяТочка (если включен режим ИспользоватьАдресаДоставки, то сюда выгружаем адрес доставки, иначе если включена детализация до контрагента, сюда выгружаем контрагента).
	// A03 - Время
	// A04 - Напоминание
	// A05 - Порядок
	
	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
	
	Если ИспользуетсяПП Тогда // если детализация по плану посещения - то выгружаем данные из плана посещения
		
		// Если включена детализация до контрагента, то нужно подготовить соответствие: Партнер -> Состав.Строка (соответствие партнеру строке из ТЗ Состав)
		// Это соответствие используется для выгрузки дополнительно контрагента для каждого пункта маршрута.
		Если ИспользуетсяКонтрагент Тогда 
			ствПартнеры = Новый Соответствие;
			тзСостав = СтррОбъект.Состав;
			Для каждого СтрокаТ Из тзСостав Цикл
				ТорговаяТочка = ?(ИспользоватьПунктыРазгрузки, СтрокаТ.ПунктРазгрузки, СтрокаТ.Партнер);
				Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
					ствПартнеры.Вставить(ТорговаяТочка, СтрокаТ);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		тзПланПосещений = СтррОбъект.ПланПосещений;
		тзПланПосещений.Сортировать("День,Порядок,Партнер");
		
		//(( gi_180302
		Если ИспользоватьАдресаДоставки И тзПланПосещений.Колонки.Найти("") <> Неопределено Тогда 
			ВыгружатьАдресаДоставки = Истина; // признак выгрузки адресов доставки из плана посещений
		Иначе
			ВыгружатьАдресаДоставки = Ложь;
		КонецЕсли; 
		//))  gi_180302

		мДниПлана = Новый Массив(ПериодПлана);
		ТекДень   = Неопределено;
		Для каждого СтрокаТ Из тзПланПосещений Цикл
			Если СтрокаТ.День <> ТекДень Тогда
				Если СтрокаТ.День > ПериодПлана Тогда // Такое возможно, если в списке ранее был создан план с бОльшим периодом, а потом был период изменен 
					Прервать; 						  // на меньший - пункты от бОльшего периода в списке на всякий случай сохраняются.
				КонецЕсли; 
				ТекДень = СтрокаТ.День;
				мДниПлана[ТекДень-1] = тзПланПосещений.Индекс(СтрокаТ);
			КонецЕсли; 
		КонецЦикла;
		
		ИспользоватьПорядок = СтррОбъект.ИспользоватьПорядок;
		
		КоличествоСтрокПлана = тзПланПосещений.Количество();
		
		Для ДеньПериода = 0 По ИнтервалВыгрузкиМаршрутов Цикл
			
			ИндексСтроки = мДниПлана[(ДеньПериода + СмещениеОтНачалаПлана) % ПериодПлана];
			Если ИндексСтроки = Неопределено Тогда // на этот день не запланировано посещений
				Продолжить;
			КонецЕсли; 
			
			// Открываем тэги нового дня (нового документа МТ "Маршрут")
			стррПоля.GUID = Новый УникальныйИдентификатор();
			стррПоля.dt   = ДатаНачалаВыгрузки + ДеньПериода * 86400;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь); //ITEM
			// Заполняем табличные части документа
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			// Заполняем табличную часть контрагентов маршрута		
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			ДобавитьПоле(ДокОбмена, "GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
			ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Точки маршрута'");
			
			Порядок = 0;
			
			ТекДень = тзПланПосещений[ИндексСтроки].День;
			
			Пока ИндексСтроки < КоличествоСтрокПлана Цикл
				
				СтрокаТ = тзПланПосещений[ИндексСтроки];
				Если СтрокаТ.День <> ТекДень Тогда
					Прервать;
				КонецЕсли;
				
				стррПункт.GUID  = Новый УникальныйИдентификатор();
				стррПункт.DocId = стррПоля.GUID;
				
				//vd_180710 Добавлены условия по РежимВыгрузкиРекомендуемый
				Если НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки Тогда
					стзСостав = ствПартнеры[СтрокаТ.Партнер];
					стррПункт.A01 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
					стррПункт.A02 = СтрокаТ.Партнер;
				ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ВыгружатьАдресаДоставки Тогда //gi_180302
					стррПункт.A01 = СтрокаТ.Партнер; 	 // в МТ - это поле "Контрагент"
					стррПункт.A02 = ВРег(СтрокаТ.ИдАдресаДоставки);
				ИначеЕсли НЕ РежимВыгрузкиРекомендуемый Тогда 
					стррПункт.A01 = СтрокаТ.Партнер;	 // в МТ - это поле "Контрагент"
					Если ИспользуетсяКонтрагент Тогда 
						стзСостав = ствПартнеры[СтрокаТ.Партнер];
						стррПункт.A02 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
					КонецЕсли;
				ИначеЕсли РежимВыгрузкиРекомендуемый Тогда
					Если ИспользуетсяКонтрагент Тогда 
						стзСостав = ствПартнеры[СтрокаТ.Партнер];
						стррПункт.A01 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
					КонецЕсли;
					стррПункт.A02 = СтрокаТ.Партнер;	 // в МТ - это поле "Контрагент"
				Иначе
					//Такого варианта не должно быть.
				КонецЕсли;
				
				
				стррПункт.A03 = СтрокаТ.Время;
				стррПункт.A04 = СтрокаТ.Комментарий;
				//Если ИспользоватьПорядок Тогда
				//	стррПункт.A05 = СтрокаТ.Порядок;
				//Иначе
				//	Порядок = Порядок + 1;					
				//	стррПункт.A05 = Порядок;
				//КонецЕсли;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПункт);	
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла; 
			
			// закрываем тэги текущего документа Маршрут
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE 
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			
		КонецЦикла; 
		
	Иначе // Детализация только по графику посещения, выгружаем данные из желательного графика посещений.
		
		тзСостав = стррОбъект.Состав;
		Пункт = Неопределено;
		
		Для ДеньПериода = 0 По ИнтервалВыгрузкиМаршрутов Цикл
			
			ОткрытТэгМаршрута = Ложь;
			
			Для каждого СтрокаТ Из тзСостав Цикл
				
				стррГрафик = СтрокаТ.График;
				Если стррГрафик = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				стррПункты = стррГрафик.Пункты;
				Если стррПункты = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ПериодГрафика = стррГрафик.ПериодГрафика;
				ДеньГрафика = (ДеньПериода + СмещениеОтНачалаПлана) % ПериодГрафика;
				УчитыватьВремяПосещения = стррГрафик.УчитыватьВремяПосещения;
				
				Если стррПункты.Свойство("П"+Строка(ДеньГрафика), Пункт) И Пункт.Выбран Тогда
					
					Если Не ОткрытТэгМаршрута Тогда
						ОткрытТэгМаршрута = Истина;
						Порядок = 0;
						// Открываем тэги нового дня (нового документа МТ "Маршрут")
						стррПоля.GUID = Новый УникальныйИдентификатор();
						стррПоля.dt   = ДатаНачалаВыгрузки + ДеньПериода * 86400;
						ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь); //ITEM
						// Заполняем табличные части документа
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						// Заполняем табличную часть контрагентов маршрута		
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
						ДобавитьПоле(ДокОбмена, "GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
						ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Точки маршрута'");
					КонецЕсли; 
					
					стррПункт.GUID  = Новый УникальныйИдентификатор();
					стррПункт.DocId = стррПоля.GUID;
					Если НЕ РежимВыгрузкиРекомендуемый Тогда //dm_181114
						Если ИспользоватьПунктыРазгрузки Тогда
							стзСостав = ствПартнеры[СтрокаТ.Партнер];
							стррПункт.A01 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
							стррПункт.A02 = СтрокаТ.Партнер;
						ИначеЕсли ИспользоватьАдресаДоставки Тогда
							стррПункт.A01 = СтрокаТ.Партнер; 	 // в МТ - это поле "Контрагент"
							стррПункт.A02 = ВРег(СтрокаТ.ИдАдресаДоставки);
						Иначе
							стррПункт.A01 = СтрокаТ.Партнер;	 // в МТ - это поле "Контрагент"
							Если ИспользуетсяКонтрагент Тогда 
								стррПункт.A02 = СтрокаТ.Контрагент;
							КонецЕсли;
						КонецЕсли;
					//{{dm_181114	
					Иначе
						стррПункт.A02 = СтрокаТ.Партнер;
						Если ИспользоватьКонтрагентов Тогда
							стррПункт.A01 = СтрокаТ.Контрагент;
						КонецЕсли;						
					КонецЕсли;
					//}}//dm_181114
					
					стррПункт.A03 = ?(УчитыватьВремяПосещения, Лев(Пункт.Время, 5), "");
					стррПункт.A04 = ""; // Комментарий
					//стррПункт.A05 = Порядок;
					//Порядок = Порядок + 1;					
					ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПункт);	
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если ОткрытТэгМаршрута Тогда
				// закрываем тэги текущего документа Маршрут
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE 
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
				ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; // Если ИспользуетсяПП Тогда
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

//vd_190227 Не используется
//Процедура ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ)

//	ТекущаяДата = ТекущаяДатаСеанса();
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ГрафикиОплатыЭтапы.Сдвиг КАК Сдвиг,
//	               |	ГрафикиОплатыЭтапы.Ссылка КАК СсылкаГОЭ
//	               |ИЗ
//	               |	Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы";
//	РезультатГрафикОплат = Запрос.Выполнить().Выгрузить();
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапросаПоВзаиморасчетам(СпособРасчетаПросроченныхДолгов);
//	Запрос.УстановитьПараметр("ДатаРасчета", ТекущаяДата);
//	Запрос.УстановитьПараметр("КолПросроченныхДней", ИнтервалПросроченныхДолгов);
//	Запрос.УстановитьПараметр("ТолькоПросроченные", ВыгружатьТолькоПросроченныеДолги);
//	Запрос.УстановитьПараметр("СписокОрганизаций", ОрганизацииВыгрузки(МенеджерВТ)); // gi_180525 добавлен параметр МенеджерВТ
//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//	Результат = Запрос.Выполнить();
//	
//	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Долг", 1);  // с признаком удаления всех документов Долг
//	
//	НеУчитыватьПросрочку = Не ЗначениеЗаполнено(СпособРасчетаПросроченныхДолгов) Или СпособРасчетаПросроченныхДолгов = "НеУчитывать";
//	
//	//vd_180710
//	//Если РежимВыгрузкиРекомендуемый Тогда
//	//	стррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A02,A04,A05,A06,A07,A08,A011,A014,A015");
//	//Иначе
//	//	стррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A02,A03,A05,A06,A07,A08,A011,A014,A015");
//	//КонецЕсли;
//	//{{dm_181114                                               
//	стррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A02,A03,A04,A05,A06,A07,A08,A011,A014,A015");
//	//}}dm_181114

//	
//	Выборка = Результат.Выбрать();
//	
//	ТипДокументЗаказ 		= Тип("ДокументСсылка.ЗаказКлиента"); 
//	ТипДокументРеализация 	= Тип("ДокументСсылка.РеализацияТоваровУслуг");
//	
//	стррДокумент = Новый Структура("Дата, Проведен, Номер, Ссылка");
//	

//	Если НеУчитыватьПросрочку Тогда
//		
//		Пока Выборка.Следующий() Цикл
//			Если Выборка.НашДолг > 0 Или Выборка.ДолгКлиента = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			СуммаДолга = Выборка.ДолгКлиента;			
//			Комментарий = "";
//			НомерДок = "";

//			ОбъектРасчетов = Выборка.ЗаказКлиента;
//			Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
//				
//				ДатаПлатежа = ОбъектРасчетов.Дата;
//				
//				Если ТипЗнч(ОбъектРасчетов) = ТипДокументЗаказ Или ТипЗнч(ОбъектРасчетов) = ТипДокументРеализация Тогда
//					Комментарий = ОбъектРасчетов.Комментарий;
//					НомерДок = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ОбъектРасчетов.Номер);
//					стррДокумент.Дата 		= ОбъектРасчетов.Дата;
//					стррДокумент.Проведен	= Истина; 
//					стррДокумент.Номер 		= ОбъектРасчетов.Номер; 
//					стррДокумент.Ссылка 	= ОбъектРасчетов;
//					СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(ОбъектРасчетов.СуммаДокумента, ОбъектРасчетов.Валюта, ОбъектРасчетов.Дата);
//					ПредставлениеДок = ОбъектРасчетов.Метаданные().Синоним + " №" + НомерДок + " от " + Формат(ОбъектРасчетов.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
//					ЗаполнитьОсновныеПоляДокументаДляВыгрузки(стррПоля, стррДокумент, Ложь, Истина);
//				Иначе
//					СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
//					ПредставлениеДок = "Договор с контрагентом" + " №" + СокрЛП(ОбъектРасчетов.Номер) + " от " + Формат(ОбъектРасчетов.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
//					стррПоля.GUID 		= Новый УникальныйИдентификатор();
//					стррПоля.dt 		= ДатаПлатежа;
//					стррПоля.IsPost 	= Истина;
//					стррПоля.DocNumber = "";
//				КонецЕсли;
//				
//			Иначе
//				
//				Если ЗначениеЗаполнено(Выборка.Соглашение) Тогда
//					ДатаПлатежа = Выборка.Соглашение.Дата;
//					Комментарий = "Дата платежа из даты Соглашения";
//				Иначе
//					ДатаПлатежа = НачалоМесяца(ТекущаяДата());
//					Комментарий = "Долг пересчитан на начало месяца";					
//				КонецЕсли; 
//				ДатаПлатежа = Неопределено;
//				СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
//				ПредставлениеДок = "Ввод начальных остатков ";
//				стррПоля.GUID 		= Новый УникальныйИдентификатор();
//				стррПоля.dt 		= ДатаПлатежа;
//				стррПоля.IsPost 	= Истина;
//				стррПоля.DocNumber = "";
//				
//			КонецЕсли;

//			стррПоля.A02 = Выборка.Организация;
//			
//			//vd_180710
//			//Если РежимВыгрузкиРекомендуемый Тогда
//			//	стррПоля.A04 = Выборка.Партнер;
//			//Иначе
//			//	стррПоля.A03 = Выборка.Партнер;
//			//КонецЕсли;
//			
//			//{{dm_181114
//			стррПоля.A03 = ?(РежимВыгрузкиРекомендуемый, ?(ИспользоватьКонтрагентов, Выборка.Контрагент, ""), Выборка.Партнер);
//			стррПоля.A04 = ?(РежимВыгрузкиРекомендуемый, Выборка.Партнер, ?(ИспользоватьКонтрагентов, Выборка.Контрагент, ""));
//			//}}dm_181114

//			стррПоля.A05 = Выборка.Соглашение;
//			стррПоля.A06 = ДатаПлатежа;
//			стррПоля.A08 = Комментарий;
//			Если ТипЗнч(ОбъектРасчетов) = ТипДокументЗаказ Или ТипЗнч(ОбъектРасчетов) = ТипДокументРеализация Тогда
//				стррПоля.A07  = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ОбъектРасчетов.Дата);
//				стррПоля.A011 = ОбъектРасчетов.Ссылка.УникальныйИдентификатор(); 
//			Иначе
//				стррПоля.A07  = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
//				стррПоля.A011 = Неопределено;
//			КонецЕсли;
//			стррПоля.A014 = Ложь;
//			стррПоля.A015 = ПредставлениеДок;
//			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
//			
//		КонецЦикла;
//	
//	Иначе // выгрузка долгов с учетом просрочки (НеУчитыватьПросрочку = Ложь)
//		
//		Пока Выборка.Следующий() Цикл
//			Если Выборка.НашДолг > 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ДатаПлатежа = ?(Выборка.ДатаПлатежа = Неопределено, '00010101', Выборка.ДатаПлатежа);
//			
//			Если ДатаПлатежа = '00010101' Тогда 
//				ТекущийГОЭ 	= ?(ТипЗнч(Выборка.ЗаказКлиентаСоглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами"), Выборка.ЗаказКлиентаСоглашение.ГрафикОплаты, Справочники.ГрафикиОплаты.ПустаяСсылка());
//				МассивГОЭ 	= РезультатГрафикОплат.НайтиСтроки(Новый Структура("СсылкаГОЭ", ТекущийГОЭ));
//				Если МассивГОЭ.Количество() <> 0 Тогда 
//					СдвигПоОплате = МассивГОЭ[0].Сдвиг;
//					ДатаПлатежа = Выборка.ЗаказКлиента.Дата + (СдвигПоОплате * 86400);
//				Иначе 
//					ДатаПлатежа = ТекущаяДата();
//				КонецЕсли;
//			КонецЕсли;
//			
//			Если СпособРасчетаПросроченныхДолгов = "ПоДоговору" Тогда
//				ДатаПросрочки = ДатаПлатежа;
//			Иначе
//				ДатаПросрочки = ДатаПлатежа + (ИнтервалПросроченныхДолгов * 86400);
//			КонецЕсли;
//			
//			Если ВыгружатьТолькоПросроченныеДолги И ТекущаяДата < ДатаПросрочки Тогда
//				Продолжить;
//			КонецЕсли;

//			ВыделитьЦветом = Ложь;
//			Комментарий = "";
//			НомерДок = "";
//			Если ВыгружатьТолькоПросроченныеДолги Тогда
//				СуммаДолга = Выборка.ДолгПросрочено;
//			Иначе
//				СуммаДолга = Выборка.ДолгКлиента;
//			КонецЕсли;
//			Если ДатаПросрочки < ТекущаяДата() И ВыделятьЦветомПросроченныеДолги Тогда
//				ВыделитьЦветом = Истина;
//			КонецЕсли;

//			ОбъектРасчетов = Выборка.ЗаказКлиента;
//			Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
//				
//				Если ЕстьРеквизитОбъекта("Соглашение", ОбъектРасчетов) Тогда
//					ДокСоглашение = ОбъектРасчетов.Соглашение;
//				КонецЕсли;
//				
//				Если ТипЗнч(ОбъектРасчетов) = ТипДокументЗаказ Или ТипЗнч(ОбъектРасчетов) = ТипДокументРеализация Тогда
//					Комментарий = ОбъектРасчетов.Комментарий;
//					НомерДок = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ОбъектРасчетов.Номер);
//					стррДокумент.Дата 		= ОбъектРасчетов.Дата;
//					стррДокумент.Проведен	= Истина; 
//					стррДокумент.Номер 		= ОбъектРасчетов.Номер; 
//					стррДокумент.Ссылка 	= ОбъектРасчетов;
//					СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(ОбъектРасчетов.СуммаДокумента, ОбъектРасчетов.Валюта, ОбъектРасчетов.Дата);
//					ПредставлениеДок = ОбъектРасчетов.Метаданные().Синоним + " №" + НомерДок + " от " + Формат(ОбъектРасчетов.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
//					ЗаполнитьОсновныеПоляДокументаДляВыгрузки(стррПоля, стррДокумент, Ложь, Истина);
//				Иначе
//					СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
//					ПредставлениеДок = "Договор с контрагентом" + " №" + СокрЛП(ОбъектРасчетов.Номер) + " от " + Формат(ОбъектРасчетов.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
//					стррПоля.GUID 		= Новый УникальныйИдентификатор();
//					стррПоля.dt 		= ДатаПлатежа;
//					стррПоля.IsPost 	= Истина;
//					стррПоля.DocNumber  = "";
//				КонецЕсли;
//				
//			Иначе
//				
//				СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
//				ПредставлениеДок = "Ввод начальных остатков ";
//				стррПоля.GUID 		= Новый УникальныйИдентификатор();
//				стррПоля.dt 		= ДатаПлатежа;
//				стррПоля.IsPost 	= Истина;
//				стррПоля.DocNumber  = "";
//				
//			КонецЕсли;

//			стррПоля.A02 = Выборка.Организация;
//			
//			//vd_180710
//			//Если РежимВыгрузкиРекомендуемый Тогда
//			//	стррПоля.A04 = Выборка.Партнер;
//			//Иначе
//			//	стррПоля.A03 = Выборка.Партнер;
//			//КонецЕсли;
//			
//			//{{dm_181114
//			стррПоля.A03 = ?(РежимВыгрузкиРекомендуемый, ?(ИспользоватьКонтрагентов, Выборка.Контрагент, ""), Выборка.Партнер);
//			стррПоля.A04 = ?(РежимВыгрузкиРекомендуемый, Выборка.Партнер, ?(ИспользоватьКонтрагентов, Выборка.Контрагент, ""));
//			//}}dm_181114
//	
//			
//			стррПоля.A05 = Выборка.ЗаказКлиентаСоглашение;
//			стррПоля.A06 = ДатаПлатежа;
//			стррПоля.A08 = Комментарий;
//			Если ТипЗнч(ОбъектРасчетов) = ТипДокументЗаказ Или ТипЗнч(ОбъектРасчетов) = ТипДокументРеализация Тогда
//				стррПоля.A07  = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ОбъектРасчетов.Дата);
//				стррПоля.A011 = ОбъектРасчетов.Ссылка.УникальныйИдентификатор(); 
//			Иначе
//				стррПоля.A07  = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
//				стррПоля.A011 = Неопределено;
//			КонецЕсли;
//			стррПоля.A014 = ВыделитьЦветом;
//			стррПоля.A015 = ПредставлениеДок;
//			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
//			
//		КонецЦикла;
//	
//	КонецЕсли; // Если НеУчитыватьПросрочку Тогда
//	
//	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
//
//КонецПроцедуры

//vd_190227 Полносью заменена логика.
Процедура ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ)
	
	//ВыборкаРезультат поля:
	//	Партнер                  - Спр 	 - Партнер
	//	Контрагент               - Спр 	 - Контрагент
	//	Договор                  - Спр   - Договор (не используем)
	//	ОбъектРасчетов           - Док   - Документ Заказ (создавший).
	//	РасчетныйДокумент        - Док   - Документ расчета Реализация (по которому считается расчет).
	//	КОплатеОстаток           - Число - Сумма оставшегося долга, уже пересчитанная в валюте учета.
	//	ДатаПлатежа              - Дата  - Дата до которой нужно оплатить.
	//	КоличествоДнейПросрочено - Число - Количество дней от даты платежа до текущей даты, может быть отрицательной  если долг не просрочен.
	ВыборкаРезультат 		= ДанныеПоДолгам(МенеджерВТ);
	
	ТипДокументЗаказ 		= Тип("ДокументСсылка.ЗаказКлиента"); 
	ТипДокументРеализация 	= Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ТипСправочникДоговор	= Тип("СправочникСсылка.ДоговорыКонтрагентов");
	ТипВсеДокументы 		= Документы.ТипВсеСсылки();
	стррПоля 				= Новый Структура("GUID,dt,IsPost,DocNumber,A02,A03,A04,A05,A06,A07,A08,A011,A014,A015");
	
	//Для оптимизвции.
	сзДокументовСКомментариями = Новый СписокЗначений;
	сзДокументовССоглашениями  = Новый СписокЗначений;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Долг", 1);  // С признаком удаления всех документов Долг
	
	Выборка = ВыборкаРезультат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КОплатеОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Только просроченные долги И Количество дней просроченных долгов
		Если ВыгружатьТолькоПросроченныеДолги И Выборка.КоличествоДнейПросрочено <= ИнтервалПросроченныхДолгов  Тогда
			Продолжить;
		КонецЕсли;
		                              
		//vd_190408
		Если ВыгружатьДолгиТолькоПоДокументамАгента И НЕ(Выборка.ОбъектРасчетов.Менеджер = ВыбАгент ИЛИ Выборка.РасчетныйДокумент.Менеджер = ВыбАгент) Тогда
			Продолжить;
		КонецЕсли;
	
		ДокументОснование = ?(ЗначениеЗаполнено(Выборка.ОбъектРасчетов), Выборка.ОбъектРасчетов, Выборка.РасчетныйДокумент);
		
		Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = ТипДокументЗаказ ИЛИ ТипЗнч(ДокументОснование) = ТипДокументРеализация Тогда
			//Документ Заказ или Реализация
			стррПоля.GUID = ДокументОснование.Ссылка.УникальныйИдентификатор(); //vd_190417
			стррПоля.dt 		= ДокументОснование.Дата;
			стррПоля.DocNumber 	= СокрП(ДокументОснование.Номер);
			//стррПоля.IsPost 	= ДокументОснование.Проведен;
			стррПоля.A05 		= ДокументОснование.Соглашение;
			стррПоля.A08 		= ДокументОснование.Комментарий;
			стррПоля.A011 		= ДокументОснование.Ссылка.УникальныйИдентификатор();	
			стррПоля.A015 		= ДокументОснование.Метаданные().Синоним + " №" + ДокументОснование.Номер + " от " + Формат(ДокументОснование.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(Выборка.КОплатеОстаток);
			
		Иначе
			//Справочники и другие документы. 
			стррПоля.GUID   = Новый УникальныйИдентификатор(); //vd_190417
			стррПоля.DocNumber  = "";                   // Номер документа создавший долг
			стррПоля.dt 		= Выборка.ДатаПлатежа;  // Дата документа создавший долг
			стррПоля.A05  		= ""; 					// Ссылка на документ логовора МТ (Соглашение)   ДокументОснование.Соглашение;
			стррПоля.A08  		= ""; 					// Комментарий		
			стррПоля.A011		= ""; 					// Ссылка на документ основания в МТ	
			
			//Номер, ДатаДокумента, Комментарий
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				стррПоля.DocNumber  = ДокументОснование.Номер;
				Если ТипВсеДокументы.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
					//Если это документ
					стррПоля.dt  = ДокументОснование.Дата;
					Если ОприделитьНаличиеРеквизита(ДокументОснование, "Соглашение", сзДокументовССоглашениями) Тогда
						стррПоля.A05 = ДокументОснование.Соглашение;
					КонецЕсли;
					Если ОприделитьНаличиеРеквизита(ДокументОснование, "Комментарий", сзДокументовСКомментариями) Тогда
						стррПоля.A08 = ДокументОснование.Комментарий;
					КонецЕсли;					  					
				КонецЕсли;
			КонецЕсли;
			
			//Представление
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				Если ТипЗнч(ДокументОснование) = ТипСправочникДоговор Тогда
					стррПоля.A015 =	"Договор с контрагентом" + " №" + СокрЛП(ДокументОснование.Номер) + " от " + Формат(ДокументОснование.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(Выборка.КОплатеОстаток);
				Иначе				
					стррПоля.A015 =	Строка(ДокументОснование) + " ∑: " + Строка(Выборка.КОплатеОстаток);
				КонецЕсли;
			Иначе
				стррПоля.A015 = "Задолжность " + Строка(?(РежимВыгрузкиРекомендуемый, Выборка.Партнер, Выборка.Контрагент)); 					
			КонецЕсли;
			
		КонецЕсли;
		
		//стррПоля.GUID   = Новый УникальныйИдентификатор(); //vd_190417
		стррПоля.IsPost = Истина;
		стррПоля.A02 = Выборка.Организация;                                                                                 
		стррПоля.A03 = ?(РежимВыгрузкиРекомендуемый, ?(ИспользоватьКонтрагентов, Выборка.Контрагент, ""), Выборка.Партнер);
		стррПоля.A04 = ?(РежимВыгрузкиРекомендуемый, Выборка.Партнер, ?(ИспользоватьКонтрагентов, Выборка.Контрагент, ""));
		стррПоля.A06 = Выборка.ДатаПлатежа;
		стррПоля.A07 = Выборка.КОплатеОстаток;
		
		// Выделять цветом просроченные долги
		Если ВыделятьЦветомПросроченныеДолги И Выборка.КоличествоДнейПросрочено > ИнтервалПросроченныхДолгов Тогда
			стррПоля.A014 = Истина;
		Иначе
			стррПоля.A014 = Ложь;
		КонецЕсли;
	 
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		
	КонецЦикла;
			
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьДокументыПеремещения(ДокОбмена) // sd_22082017
	
	Результат = ДанныеПоДокументамПеремещения();
	ВыборкаДок = Результат.Выбрать();
	
	СтррПоля = Новый Структура("GUID,dt,IsPost,A01,A03,A04,A05,A06,A07,A08,A09"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "3097F10A-BEE6-4A76-AD7A-D4663C9B73EC", "Табличная часть 'Товары'");	
	стррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06"); // ТЧ документа
	
	стррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Перемещение");
	
	Пока ВыборкаДок.Следующий() Цикл 
		Док = ВыборкаДок.Ссылка;
		СтррПоля.GUID = Док.УникальныйИдентификатор();
		СтррПоля.dt = Док.Дата;
		СтррПоля.IsPost = Док.Проведен;
		СтррПоля.A01 = Док.Организация;
		СтррПоля.A03 = Док.СкладОтправитель;
		СтррПоля.A04 = Док.СкладПолучатель;
		СтррПоля.A05 = 0; // СуммаДокумента
		СтррПоля.A06 = Док.Комментарий;
		СтррПоля.A07 = "";
		СтррПоля.A08 = "";
		СтррПоля.A09 = Док.ВидЦены;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		Если Док.Товары.Количество() > 0 Тогда 
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ);
			Для Каждого СтрокаТ Из Док.Товары Цикл 
				Номенклатура 		= СтрокаТ.Номенклатура;
				КоличествоУпаковок 	= СтрокаТ.КоличествоУпаковок;
				ЦенаНоменклатуры	= ПолучитьЦенуНоменклатуры(Номенклатура, Док.ВидЦены);
				стррПоляТЧ.GUID = Новый УникальныйИдентификатор();
				стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
				стррПоляТЧ.A01 = Номенклатура;
				
				стррПоискХарактеристики.Номенклатура = Номенклатура;
				стррПоискХарактеристики.Ссылка  	 = СтрокаТ.Характеристика;
				стррПоляТЧ.A02 = СТЗИдентификаторЭлементаДляМТ(стррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
				
				стррПоляТЧ.A03 = СтрокаТ.Упаковка;
				стррПоляТЧ.A04 = КоличествоУпаковок;
				стррПоляТЧ.A05 = ЦенаНоменклатуры;
				стррПоляТЧ.A06 = ЦенаНоменклатуры * КоличествоУпаковок;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
			КонецЦикла;
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
		КонецЕсли;
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

//vd_190402 Добавлена
Процедура ВыгрузитьДокументыЗадание(ДокОбмена) 
	
	// системные свойства виртуального объекта                                        	
	стррВОЗадание = ВОСвойстваОбъекта("_Задание");
	
	//Документ проведен	
	//Статусы: Записан,Проведен,ПомеченУдаления", 0, 1, 2) //ПометкаУдаления = ВОТЗИконкиСтатуса(стррВО).Помечен;
	СтатусПроведен = ВОТЗИконкиСтатуса(стррВОЗадание).Проведен; // 1
	
	// Структура документа
	СтррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A01,A02,A03,A04,A05,A06,A07,A08,A09,A010,A011,A012,A013"); 
	
	// Структура ТЧ Документа
	стррПараметрыТЧЗадачи 		= Новый Структура("GUID,Comment", "DF5A99C3-4778-4CFB-B5F2-877449E05D3B", "Табличная часть 'Задачи'");	
	стррПоляТЧЗадачи 			= Новый Структура("GUID,DocId,A01,A02,A03,A04");
	стррПараметрыТЧСписокФото 	= Новый Структура("GUID,Comment", "df5a99c3-4778-4cfb-b5f2-877449e05d3b", "Табличная часть 'Список фото'");
	стррПоляТЧСписокФото		= Новый Структура("GUID,DocId,A01,A02");
	
	// Все документы Задание
	тзЗадание = ВОТЗЗагрузить(стррВОЗадание, Истина);

	ВидЗадачиДата	= Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26");
	ВидЗадачиОбмен  = Новый УникальныйИдентификатор("061879D3-E400-4CC8-B4F9-999C3399F47C"); 
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Задание", Истина);	
	
	Для каждого стзЗадание Из тзЗадание Цикл
		
		//Только проведенные документы.
		Если НЕ стзЗадание.Статус = СтатусПроведен Тогда
		    Продолжить;
		КонецЕсли;
		
		стррОбьекта = ВОЭлементЗагрузить(стррВОЗадание, стзЗадание.ID);
		
		Если стррОбьекта.Задачи.Количество() = 0 Тогда
			Продолжить; //Документы без задач не выгружаем
		КонецЕсли;
		
		стррПоля.GUID		= стзЗадание.ID; 
		стррПоля.dt         = стррОбьекта.Дата;
		стррПоля.IsPost     = 1;
		стррПоля.DocNumber  = стррОбьекта.Номер;
		стррПоля.A01        = стррОбьекта.Организация.УникальныйИдентификатор();
		       		
		Если РежимВыгрузкиРекомендуемый И ЗначениеЗаполнено(стррОбьекта.Контрагент) Тогда
			стррПоля.A02    = стррОбьекта.Контрагент.УникальныйИдентификатор();
		ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ЗначениеЗаполнено(стррОбьекта.Партнер) Тогда
			стррПоля.A02    = стррОбьекта.Партнер.УникальныйИдентификатор();
		Иначе
			стррПоля.A02	= "";
		КонецЕсли;
		
		Если РежимВыгрузкиРекомендуемый И ЗначениеЗаполнено(стррОбьекта.Партнер) Тогда
			стррПоля.A03    = стррОбьекта.Партнер.УникальныйИдентификатор();
		ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ЗначениеЗаполнено(стррОбьекта.Контрагент) Тогда
			стррПоля.A03    = стррОбьекта.Контрагент.УникальныйИдентификатор();
		Иначе
			стррПоля.A03	= "";
		КонецЕсли;
		
		Если ИспользоватьСоглашения() И стррОбьекта.Свойство("Соглашение") И ЗначениеЗаполнено(стррОбьекта.Соглашение) Тогда
			стррПоля.A04    = стррОбьекта.Соглашение.УникальныйИдентификатор();
		ИначеЕсли ИспользоватьДоговоры() И ЗначениеЗаполнено(стррОбьекта.Договор) Тогда
			стррПоля.A04    = стррОбьекта.Договор.УникальныйИдентификатор();
		Иначе
			стррПоля.A04    = "";
		КонецЕсли;
		
		стррПоля.A05        = стррОбьекта.Комментарий;
		стррПоля.A06        = "";
		стррПоля.A07        = стррОбьекта.ВремяНачала;
		стррПоля.A08        = стррОбьекта.ВремяОкончания;
		

		стррПоля.A09        = стррОбьекта.НеИзменятьВМУ;
		стррПоля.A010       = стррОбьекта.СозданВЦБД;
		стррПоля.A011       = стррОбьекта.Широта;
		стррПоля.A012       = стррОбьекта.Долгота;
		стррПоля.A013       = стррОбьекта.ДатаТочкиТрека;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		
		// ТЧ Задание
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧЗадачи);	
		Для Каждого стзЗадача Из стррОбьекта.Задачи Цикл
			стррПоляТЧЗадачи.GUID 	  = стзЗадача.GUID;
			стррПоляТЧЗадачи.DocId    = стзЗадание.ID;
			стррПоляТЧЗадачи.A01      = стзЗадача.ВидЗадачи;
			стррПоляТЧЗадачи.A02      = стзЗадача.Комментарий;
			стррПоляТЧЗадачи.A03      = Число(стзЗадача.Обязательная);
			
			Если ЗначениеЗаполнено(стзЗадача.Результат) И (стзЗадача.ВидЗадачи = ВидЗадачиДата ИЛи стзЗадача.ВидЗадачи = ВидЗадачиОбмен) Тогда  
				стррПоляТЧЗадачи.A04 = Формат(стзЗадача.Результат, "ДФ=ггггММддЧЧммсс");
			Иначе
				стррПоляТЧЗадачи.A04 = стзЗадача.Результат;
			КонецЕсли;
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧЗадачи);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена); //TABLE
	
		// ТЧ Фото
		Если стррОбьекта.СписокФото.Количество() > 0 тогда
			ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧСписокФото);	
			Для Каждого стзСписокФото Из стррОбьекта.СписокФото Цикл
				стррПоляТЧСписокФото.GUID 	  = стзСписокФото.GUID;
				стррПоляТЧСписокФото.DocId    = стзЗадание.ID;
				стррПоляТЧСписокФото.A01      = стзСписокФото.ВидЗадачи;
				стррПоляТЧСписокФото.A02      = стзСписокФото.Комментарий;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧСписокФото);
			КонецЦикла;
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена); //TABLE
		КонецЕсли;
		
   		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS

	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

// ВыгрузкаДокументов
#КонецОбласти

#Область ОтборыВыгрузки

Функция ОрганизацииВыгрузки(МенеджерВТ)

	Значение = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки");
	Если Значение = Неопределено Тогда
		Если МенеджерВТ = Неопределено Тогда
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
		КонецЕсли; 
		МенеджерВТОрганизации(МенеджерВТ);
		Значение = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки");		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ВидыКонтактнойИнформацииВыгрузки()

	Возврат ВыборкаИзСправочника(ТекстЗапросаВыборкиВидовКонтактнойИнформации());
	
КонецФункции

// gi_180525 - функция переделана для использования МенеджерВТ
Функция ВидыЦенВыгрузки(МенеджерВТ)

	//((vd_190313
	//Было:
	//Значение = гКэшСпискиОбъектов.Получить("ВидыЦенВыгрузки");
	//Если Значение = Неопределено Тогда
	//	МенеджерВТВидыЦен(МенеджерВТ);
	//	Значение = гКэшСпискиОбъектов.Получить("ВидыЦенВыгрузки");		
	//КонецЕсли;
	//Возврат Значение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦен.Ссылка КАК Ссылка,
	               |	ВидыЦен.Наименование КАК Наименование,
	               |	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ВидыЦен
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыЦен КАК ВТ_ВидыЦен
	               |		ПО ВидыЦен.Ссылка = ВТ_ВидыЦен.ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		
	Возврат ВыборкаРезультат;
	
	//))vd_190313
	
КонецФункции

//vd_190313 
//Было:
//Функция СкладыВыгрузки(МенеджерВТ, ВернутьМассив)
//
//	Если ВернутьМассив И гмСкладыВыгрузки <> Неопределено Тогда
//		Возврат гмСкладыВыгрузки;
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ВТ_Склады.Ссылка КАК Ссылка,
//	               |	ВТ_Склады.Ссылка.Наименование КАК Наименование
//	               |ИЗ
//	               |	ВТ_Склады КАК ВТ_Склады
//	               |
//	               |УПОРЯДОЧИТЬ ПО
//	               |	Ссылка
//	               |АВТОУПОРЯДОЧИВАНИЕ";
//	
//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если гмСкладыВыгрузки = Неопределено Тогда
//		гмСкладыВыгрузки = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
//	КонецЕсли; 
//	
//	Если ВернутьМассив Тогда
//		Возврат гмСкладыВыгрузки;
//	Иначе
//		Возврат РезультатЗапроса;
//	КонецЕсли; 
//	
//КонецФункции
Функция СкладыВыгрузки(МенеджерВТ)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка КАК Ссылка,
	               |	Склады.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
	               |		ПО Склады.Ссылка = ВТ_Склады.ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		
	Возврат ВыборкаРезультат;
	
КонецФункции

// vd_190319 Добавлена
// Заполняет структуру для выгрузки ТЧ номенклатуры.
//
// Возвращаемое значение: Структура
// Свойства:
//		КоличествоОбщ 			- Число 	- Количество складов или видов цен, включая те которые выгружаются в блоке элемент
//		КоличествоТЧ        	- Число 	- Количество Табличных частей
//		КоличествоАтрибутов 	- Число 	- Количество атрибутов выгружаемых в ТЧ для Остаков = 5, для цен = 10
//  	ВыборкаДетальныеЗаписи  - Выборка 	- Неопределено. Заполняется далее.
//		стррТЧ              	- Структура	- Структура ТЧ 
//  	стррТЧПоследняя     	- Структура - Структура ТЧ, последней ТЧ (количество элементов может отличатся от КоличествоАтрибутов)
//		СтррТЧШапка				- Структура - Структура Шапки ТЧ
//
Функция ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, ИмяТЧ); 
	
	стррРезультат = Новый Структура("КоличествоОбщ, КоличествоТЧ, КоличествоАтрибутов, ВыборкаДетальныеЗаписи, стррТЧ, стррТЧПоследняя, СтррТЧШапка");
	
	//1. КоличествоОбщ, КоличествоТЧ
	Если ИмяТЧ = "Остатки" ИЛИ ИмяТЧ = "ОстаткиХарактеристика" Тогда
		КоличествоОбщ	= МенеджерВТ.Таблицы.Найти("ВТ_Склады").ПолучитьДанные().Выбрать().Количество();
		КоличествоАтрибутов = 5;
	ИначеЕсли ИмяТЧ = "Цены" ИЛИ ИмяТЧ = "ЦеныХарактеристика" Тогда
		КоличествоОбщ = МенеджерВТ.Таблицы.Найти("ВТ_ВидыЦен").ПолучитьДанные().Выбрать().Количество();
		КоличествоАтрибутов = 10;
	Иначе
		//Ошибка
		Возврат Неопределено;
	КонецЕсли;
	
	//2. КоличествоТЧ
	Если КоличествоОбщ <= КоличествоАтрибутов Тогда
		КоличествоТЧ = 0;
	Иначе
		Количество = (КоличествоОбщ - КоличествоАтрибутов) / КоличествоАтрибутов;
		Если Количество <= 1 Тогда
			КоличествоТЧ = 1;	
		Иначе
			ЦелаяЧасть = Цел(Количество); 
			ДробнаяЧасть = Количество - ЦелаяЧасть; 
			КоличествоТЧ = ?(ДробнаяЧасть = 0, ЦелаяЧасть, ЦелаяЧасть + 1);
		КонецЕсли;
	КонецЕсли;
	
	стррРезультат.КоличествоОбщ 		= КоличествоОбщ;
	стррРезультат.КоличествоТЧ 			= КоличествоТЧ;
	стррРезультат.КоличествоАтрибутов 	= КоличествоАтрибутов;
	
	//3. стррТЧ
	Если КоличествоТЧ > 1 Тогда
		стррТЧ = Новый Структура("GUID, CtlgID, " + "A0" + (КоличествоАтрибутов + 1));
		МаксимальныйАтрибут = КоличествоАтрибутов;
		Для Счетчик = 1 По МаксимальныйАтрибут Цикл
			стррТЧ.Вставить("A0" + Счетчик, 0);
		КонецЦикла;
		стррРезультат.стррТЧ = стррТЧ;
	Конецесли;		
	
	//4. стррТЧПоследняя	
	Если КоличествоТЧ > 0 Тогда
		стррТЧПоследняя = Новый Структура("GUID, CtlgID, " + "A0" + (КоличествоАтрибутов + 1));
		МаксимальныйАтрибут = КоличествоОбщ - (КоличествоТЧ * КоличествоАтрибутов);	
		Для Счетчик = 1 По МаксимальныйАтрибут Цикл
			стррТЧПоследняя.Вставить("A0" + Счетчик, 0);			
		КонецЦикла;
		стррРезультат.стррТЧПоследняя = стррТЧПоследняя;
	КонецЕсли;	
	
	//5. СтррТЧШапка
	Если КоличествоТЧ > 0 Тогда 
		СтррТЧШапка = Новый Структура("GUID,Comment");
		Если ИмяТЧ = "Остатки" Тогда
			СтррТЧШапка.GUID    = "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d";
			СтррТЧШапка.Comment = "Остатки";
		ИначеЕсли ИмяТЧ = "Цены" Тогда
			СтррТЧШапка.GUID    = "7f72aed2-94f7-4165-b112-c7a69fea70cc";
			СтррТЧШапка.Comment = "Цены";			
		ИначеЕсли ИмяТЧ = "ОстаткиХарактеристика" Тогда
			СтррТЧШапка.GUID    = "19481e88-8575-4720-80e6-222816c754e4";
			СтррТЧШапка.Comment = "Остатки";			
		ИначеЕсли ИмяТЧ = "ЦеныХарактеристика" Тогда
			СтррТЧШапка.GUID    = "d91732e1-d4d8-4566-9f4f-bb1b0a043e6f";
			СтррТЧШапка.Comment = "Цены";
		КонецЕсли;
		стррРезультат.СтррТЧШапка = СтррТЧШапка;
	КонецЕсли;
	
	Возврат стррРезультат;
	
КонецФункции	

Функция СтатусыПартнеровВыгрузки()

	Если Не ВременныеТаблицы.Свойство("СтатусыПартнеров") Тогда // значит статусы партнеров не задавались
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат ВременныеТаблицы.СтатусыПартнеров;
	КонецЕсли;
	
КонецФункции

// Функция возвращает признак - выгружать персональные цены или нет
Функция ВыгружатьПерсональныеЦены()

	Возврат ВыгружатьПерсональныеЦены И ИспользоватьСоглашения();

КонецФункции 

// Функция возвращает признак - выгружать характеристики номенклатуры или нет
Функция ВыгружатьХарактеристикиНоменклатуры()
	
	Возврат	КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;

КонецФункции 

Функция ИспользоватьСоглашения()
	
	Возврат ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" 
		И КонстантыПолучитьЗначение("ИспользованиеСоглашенийСКлиентами") <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать;

КонецФункции 
	
Функция ИспользоватьДоговоры()
	
	Возврат ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" 
		И КонстантыПолучитьЗначение("ИспользоватьДоговорыСКлиентами");

КонецФункции 

// Процедура заполняет список выбора значений для диалогового элемента.
Процедура ЗаполнитьСпособыВыгрузкиДоговоров(СписокВыбора) Экспорт

	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", 				НСтр("ru = 'Не использовать'"));
	Если Константы.ИспользоватьДоговорыСКлиентами.Получить() Тогда
		СписокВыбора.Добавить("ДОГОВОРЫ", 	НСтр("ru = 'Использовать договоры'"));
	КонецЕсли; 
	Если Константы.ИспользованиеСоглашенийСКлиентами.Получить() <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
		СписокВыбора.Добавить("СОГЛАШЕНИЯ", НСтр("ru = 'Использовать соглашения'"));
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет список выбора значений для диалогового элемента.
Процедура ЗаполнитьРежимыВыгрузкиКодовНоменклатуры(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", 		 НСтр("ru = 'Не выгружать'"));
	СписокВыбора.Добавить("КОД", 	 НСтр("ru = 'Выгружать коды'"));
	СписокВыбора.Добавить("АРТИКУЛ", НСтр("ru = 'Выгружать артикулы'"));

КонецПроцедуры

// Процедура заполняет список выбора значений для диалогового элемента.
Процедура ЗаполнитьРежимыВыгрузкиВУД(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", 		НСтр("ru = 'Не выгружать'"));
	СписокВыбора.Добавить("МУ", 	НСтр("ru = 'Принятые файлы из МУ'"));
	СписокВыбора.Добавить("МУиУС", 	НСтр("ru = 'Принятые файлы из МУ и отправленные в МУ'"));

КонецПроцедуры

// Процедура заполняет список выбора значений для диалогового элемента.
Процедура ЗаполнитьВариантыРегистровОстатковНоменклатуры(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("СвободныеОстатки", 	НСтр("ru = 'Свободные остатки'"));
	СписокВыбора.Добавить("ТоварыНаСкладах", 	НСтр("ru = 'Товары на складах'"));
	
КонецПроцедуры

// ОтборыВыгрузки
#КонецОбласти 

#Область ГенерацияXMLФайлаВыгрузки

//vd_190322 Не используется
//Процедура ВыгрузитьПоляВЭлемент(ПоляЭлемента, ВыборкаЭлементов, КоличествоРеквизитов, ИмяПоля, ПолеВыгрузки)

//	Счетчик = -1;
//	Пока ВыборкаЭлементов.Следующий() Цикл
//		Счетчик = Счетчик + 1;
//		ПоляЭлемента.Вставить(ПолеВыгрузки + Строка(Счетчик), ВыборкаЭлементов[ИмяПоля]);

//		Если Счетчик = КоличествоРеквизитов-1 Тогда
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;

//КонецПроцедуры

//vd_190322 Не используется
//Процедура ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррПараметры)

//	ВыборкаЭлементов = стррПараметры.ВыборкаЭлементов;
//	МаксЗначениеСчетчика = стррПараметры.КоличествоРеквизитов; //vd_180326 Баг 36047 Было: МаксЗначениеСчетчика = стррПараметры.КоличествоРеквизитов - 1;
//	
//	ИмяПоля = стррПараметры.ИмяПоля;	
//	ПолеВыгрузки = стррПараметры.ПолеВыгрузки;
//	
//	стррПоля = Новый Структура("GUID,CtlgId," + ПолеВыгрузки);
//	
//	Для СчСтрок = 1 По стррПараметры.КоличествоСтрок Цикл  
//		
//		стррПоля.GUID = Новый УникальныйИдентификатор();
//		стррПоля.CtlgId = стррПараметры.Номенклатура;
//		стррПоля[ПолеВыгрузки] = СчСтрок;
//		
//		Сч = 0;
//		Пока ВыборкаЭлементов.Следующий() Цикл
//			
//			Сч = Сч + 1;
//			
//			стррПоля.Вставить("A0" + Строка(Сч), ВыборкаЭлементов[ИмяПоля]);
//			
//			Если Сч = МаксЗначениеСчетчика Тогда
//				Прервать;
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		//vd_180326 Баг 36047. Удаление ненужных свойств с последней строчки ТЧ
//		Если СчСтрок = стррПараметры.КоличествоСтрок И стррПараметры.КоличествоСтрок > 1 Тогда 
//			МинЗначениеУдаления = Сч + 1;
//			Для СчУдаление = МинЗначениеУдаления По МаксЗначениеСчетчика Цикл
//				стррПоля.Удалить("A0" + Строка(СчУдаление));	
//			КонецЦикла;			
//		Конецесли;
//		
//		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
//		
//	КонецЦикла;

//КонецПроцедуры

Процедура ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG или DOCUMENT

КонецПроцедуры

Процедура ЗаписатьНачалоВеткиОбъекта(ДокОбмена, ВидОбъектаДляМТ, УдалитьВсе = Неопределено, ДополнительныйКомментарий = "")

	КорневойВид = Неопределено;
	СвойстваВида = СвойстваВидаОбъекта(ВидОбъектаДляМТ, "ВидДляМТ", КорневойВид);
	
	ДокОбмена.ЗаписатьНачалоЭлемента(?(КорневойВид = "Документ", "DOCUMENT", "CATALOG"));
	ДобавитьПоле(ДокОбмена, "GUID", ВРег(СвойстваВида.ИдентификаторВида));
	УстановитьПризнакОчисткиОбъекта(ДокОбмена, СвойстваВида.ВидДляМТ, КорневойВид, УдалитьВсе);
	Комментарий = ПредставлениеВида(КорневойВид, СвойстваВида);
	Если Не ПустаяСтрока(ДополнительныйКомментарий) Тогда
		Комментарий = Комментарий + ЗначениеВСтрокуДляXML(" ## " + ДополнительныйКомментарий);
	КонецЕсли; 
	ДобавитьПоле(ДокОбмена, "Comment", Комментарий);
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");

КонецПроцедуры

Процедура УстановитьПризнакОчисткиОбъекта(ДокОбмена, ВидДляМТ, КорневойВид, Принудительно)

	Если Принудительно = Истина Тогда // параметр Принудительно может быть со значением Неопределено
		ДобавитьПоле(ДокОбмена, "KILLALL", "1");
	ИначеЕсли Принудительно = Ложь Тогда 	
		Возврат;
	Иначе
		
		Если КорневойВид = "Документ" И ОчищатьДокументыПередЗагрузкой Тогда
			Список = СписокОчищаемыхДокументов;
		ИначеЕсли КорневойВид = "Справочник" И ОчищатьСправочникиПередЗагрузкой Тогда
			Список = СписокОчищаемыхСправочников;
		Иначе
			Возврат;
		КонецЕсли;
			
		ИскатьЗначение = ВРег(ВидДляМТ);
		Для Каждого Элемент Из Список Цикл
			Если ВРег(Элемент.Значение) = ИскатьЗначение Тогда // пометку элемента не проверяем, т.к. в списке у нас только очищаемые справочники
				ДобавитьПоле(ДокОбмена, "KILLALL", "1");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметры)

	ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	ДобавитьПоле(ДокОбмена, "GUID", СтррПараметры.GUID);
	ДобавитьПоле(ДокОбмена, "Comment", СтррПараметры.Comment);

КонецПроцедуры

Процедура ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE

КонецПроцедуры

Процедура ДобавитьКонстанту(ДокОбмена, Идентификатор, Значение)

	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	ДобавитьПоле(ДокОбмена, "GUID", ВРег(Идентификатор));
	ДобавитьПоле(ДокОбмена, "VALUE", Значение);
	ДокОбмена.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ДобавитьПоле(ДокОбмена, Имя, Значение)

	ДокОбмена.ЗаписатьАтрибут(Имя, ЗначениеВСтрокуДляXML(Значение));

КонецПроцедуры

Процедура ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтруктураПолей, ЗакрытьЭлемент = Истина)

	Если СтруктураПолей.Свойство("GUID") И Не ЗначениеЗаполнено(СтруктураПолей.GUID) Тогда
		Возврат;
	КонецЕсли;

	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	Для Каждого ТекЭлемент Из СтруктураПолей Цикл
		ДобавитьПоле(ДокОбмена, ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если ЗакрытьЭлемент Тогда
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;

КонецПроцедуры

// ГенерацияXMLФайлаВыгрузки
#КонецОбласти 

//vd_190322 Не используется
//vd_180326 Баг 36047. Добавил функцию.
//Функция ПолучитьКоличествоСтрокТЧНоменклатуры(КоличествоЕдиниц, КоличествоАтрибутов)
//	
//	Если КоличествоЕдиниц <= КоличествоАтрибутов Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	СтрокВТабличнойЧасти = КоличествоЕдиниц/КоличествоАтрибутов;

//	ЦелаяЧасть   = Цел(СтрокВТабличнойЧасти);
//	ДробнаяЧасть = СтрокВТабличнойЧасти - ЦелаяЧасть;
//	
//	Если ДробнаяЧасть = 0 Тогда
//		Возврат ЦелаяЧасть - 1;
//	Иначе
//		Возврат ЦелаяЧасть;
//	КонецЕсли;	
//	
//КонецФункции

Процедура ВставитьНомерДокументаВСтруктуру(стррПоля, Док)

	НомерДляXML = СокрП(Док.Номер);

	// Проверка последнего элемента номера
	Код = КодСимвола(Прав(НомерДляXML, 1));
	Если Код < 48 Или Код > 57 Тогда
		ОповеститьОСобытии("В номере документа '" + Строка(Док) + "' последний символ не цифра.", "ОшибкаПрочее", Док, "ТекущийАгент");
	КонецЕсли;

	стррПоля.Вставить("DocNumber", НомерДляXML);
	
КонецПроцедуры

Функция НачалоВыгрузкиДокументов(ИнтервалВыгрузки)

	Возврат НачалоДня(ТекущаяДата()) - ?(ИнтервалВыгрузки <> Неопределено, 86400 * ИнтервалВыгрузки, 0);
	
КонецФункции

//vd_190322 Не используется
//Функция ЕдиницыИзмеренияНоменклатуры(ЭлементНоменклатуры, КонстантаИспользоватьУпаковкиНоменклатуры)

//	Если КонстантаИспользоватьУпаковкиНоменклатуры Тогда
//		Если ЭлементНоменклатуры.ИспользоватьУпаковки Тогда
//			Если ЭлементНоменклатуры.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
//				БазоваяЕдиница = ЭлементНоменклатуры;
//				НаборУпаковок = "";
//			Иначе
//				НаборУпаковок = ЭлементНоменклатуры.НаборУпаковок;
//				БазоваяЕдиница = ЭлементНоменклатуры.НаборУпаковок.ЕдиницаИзмерения;
//			КонецЕсли;
//		Иначе
//			БазоваяЕдиница = ЭлементНоменклатуры;	//GUID базовой единицы измерения выгружается равным GUID номенклатуры, когда не используются упаковки номенклатуры (см. выгрузку ссылок для единиц измерения)
//			НаборУпаковок = "";
//		КонецЕсли; //Если ТекНоменклатура.ИспользоватьУпаковки Тогда
//	Иначе
//		БазоваяЕдиница = ЭлементНоменклатуры.ЕдиницаИзмерения;
//		НаборУпаковок = "";
//	КонецЕсли;

//	Возврат Новый Структура("БазоваяЕдиница,НаборУпаковок", БазоваяЕдиница, НаборУпаковок);
//КонецФункции // ЕдиницыИзмеренияНОменклатуры()

Функция ЕстьПодчиненныеРеализацииДляЗаказа(ЗаказСсылка)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.ЗаказКлиента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказСсылка";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПредопределенныеПоляДокумента(ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)

	СтруктураПолей = Новый Структура;

	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить("GUID", ТекДокумент.Ссылка.УникальныйИдентификатор());
	КонецЕсли;

	СтруктураПолей.Вставить("dt", ТекДокумент.Дата);
	СтруктураПолей.Вставить("IsPost", ТекДокумент.Проведен);
	Если ВыгружатьНомер Тогда
		ВставитьНомерДокументаВСтруктуру(СтруктураПолей, ТекДокумент.Ссылка);
	КонецЕсли;

	Возврат СтруктураПолей;
КонецФункции

Процедура ЗаполнитьОсновныеПоляДокументаДляВыгрузки(стррПоля, ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)

	Если СоздаватьИдентификатор Тогда
		стррПоля.GUID = Новый УникальныйИдентификатор();
	Иначе
		стррПоля.GUID = ТекДокумент.Ссылка.УникальныйИдентификатор();
	КонецЕсли;

	стррПоля.dt 	= ТекДокумент.Дата;
	стррПоля.IsPost = ТекДокумент.Проведен;
	Если ВыгружатьНомер Тогда
		ВставитьНомерДокументаВСтруктуру(стррПоля, ТекДокумент.Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция СуммаВВалютеУчетаАгента(Сумма, ВалютаДокумента, НаДату)

	СуммаПересчитанная = Сумма;
	ВалютаУчетаАгента = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");

	Если Не ВалютаДокумента = ВалютаУчетаАгента Тогда
		СуммаПересчитанная = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(Сумма, ВалютаДокумента, ВалютаУчетаАгента, НаДату);
	КонецЕсли;

	Возврат СуммаПересчитанная;
	
КонецФункции

Функция ПолучитьЦенуНоменклатуры(Номенклатура, ВидЦены, Характеристика = Неопределено) // sd_22082017
	
	стррОтбор = Новый Структура("Дата, Номенклатура, Характеристика, Упаковка, ВидЦены, Валюта");
	стррОтбор.Дата 				= ТекущаяДата();
	стррОтбор.Номенклатура 		= Номенклатура;
	стррОтбор.Характеристика	= ?(Характеристика = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика);
	стррОтбор.Упаковка 	    	= Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	стррОтбор.ВидЦены			= ВидЦены;
	стррОтбор.Валюта			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	ЦенаНоменклатуры = ПродажиСервер.ПолучитьЦенуПоОтбору(стррОтбор);
	
	Возврат ЦенаНоменклатуры;
	
КонецФункции

// gi_180319
// Функция возвращает минимальный вид цены, закрепленной за торговым агентом
Функция МинимальныйВидЦены()
	Возврат ?(ВыбНастройкиАгента.Свойство("МинимальныйТипЦены"), ВыбНастройкиАгента.МинимальныйТипЦены, Неопределено);	
КонецФункции


Функция ПрефиксОрганизацииИБ(Префикс)

	ПрефиксНачальный = Прав("00" + СокрЛП(Префикс), 2);
	ПрефиксИБ 		 = Прав("00" + СокрЛП(КонстантыПолучитьЗначение("ПрефиксУзлаРаспределеннойИнформационнойБазы")), 2);
	
	Возврат ПрефиксНачальный + ПрефиксИБ + "-";

КонецФункции 

Функция КонтактнаяИнформацияОрганизации(Организация)

	стррРезультат = Новый Структура("Телефон,ФактАдрес,ЮрАдрес");
	Для Каждого СтрокаКИ Из Организация.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			стррРезультат.Телефон = СокрЛП(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			стррРезультат.ФактАдрес = СокрЛП(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			стррРезультат.ЮрАдрес = СокрЛП(СтрокаКИ.Представление);
		КонецЕсли;
	КонецЦикла;

	Возврат стррРезультат;
	
КонецФункции // КонтактнаяИнформацияОрганизации()

Функция ТипыКонтактнойИнформации()

	ствРезультат = Новый Соответствие;
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, ВРег("a4d0f540-64ed-4f3e-b2bb-818da38f5ab2"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВРег("52477200-af54-405b-9888-14b8bded0e19"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, ВРег("2c2cfc86-e2a0-414d-a116-5acadac53437"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, ВРег("e45419b3-0cfd-47ce-8b24-7037a1e86aed"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, ВРег("8fc8f351-14f0-48eb-952a-38bb313b28d5"));

	Возврат ствРезультат;
	
КонецФункции

Функция ДатаВремяВФорматXMLИз1СМТ(лДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт

	ДатаВремя = ?(лДатаВремя = Неопределено, ТекущаяДата(), лДатаВремя);
	НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	НужноеВремя = Формат(ДатаВремя, "ДФ=""ЧЧ:мм:сс""");

	Если Тип = "Дата" Тогда
		НужноеЗначение = НужнаяДата;
	ИначеЕсли Тип = "Время" Тогда
		НужноеЗначение = НужноеВремя;
	Иначе
		Если ПустаяСтрока(НужнаяДата) или  ПустаяСтрока(НужноеВремя) Тогда
			Возврат "";
		КонецЕсли;
		НужноеЗначение = НужнаяДата + "T" + НужноеВремя;
	КонецЕсли;
	
	Возврат НужноеЗначение;
КонецФункции //ДатаВремяВФорматXMLИз1СМТ()

Функция СписокЗначенийВСтрокуМТ20(Список)
	
	Стр = Строка(Список);
	Возврат СтрЗаменить(Стр, "; ", ",");
	
КонецФункции

Функция ЗначениеВСтрокуДляXML(Значение)

	Тип = ТипЗнч(Значение);
	
	Если Тип = Тип("Строка") Тогда
		
		Возврат XMLСтрока(Значение);
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		Если Значение = 0 Тогда
			Возврат "0";
		Иначе
			Возврат Формат(Значение, "ЧГ=0;ЧРД='.'");
		КонецЕсли; 
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат ВРег(Значение);
		
	ИначеЕсли Тип = Тип("Булево") Тогда       
		
		Если Значение Тогда
			Возврат "1";
		Иначе
			Возврат "0";	
		КонецЕсли; 
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		Возврат ДатаВремяВФорматXMLИз1СМТ(Значение);
		
	ИначеЕсли Тип = Тип("СписокЗначений") Тогда 
		
		Возврат XMLСтрока(СписокЗначенийВСтрокуМТ20(Значение));
		
	ИначеЕсли Тип = Тип("Цвет") Тогда
		
		Возврат ЦветВСтроку(Значение);
		
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		
		Возврат "";
		
	Иначе // тип Справочник или Документ
		
		Возврат ВРег(XMLСтрока(Значение.Ссылка));
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеИзСтрокиXML(Значение, Тип)

	Если Тип = Тип("Строка") Тогда
		
		Возврат Значение;
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		Возврат ?(ЗначениеЗаполнено(Значение), Число(Значение), 0);
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		Возврат ДатаВремяXMLВФормат1С(Значение);
		
	ИначеЕсли Тип = Тип("Булево") Тогда
		
		Возврат ?(ЗначениеЗаполнено(Значение), Булево(Число(Значение)), Ложь);
		
	ИначеЕсли Тип = Тип("Цвет") Тогда
		
		Возврат ЦветИзСтроки(Значение);
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат Новый УникальныйИдентификатор(Значение);
		
	Иначе 
		
		Возврат Значение;
		
	КонецЕсли;
	
КонецФункции

Функция СформированныйМакетКомпоновкиДанных(Отбор, ТекстЗапроса)

	СхемаКомпоновки = СхемаКомпоновкиДанныхДляОбъекта(ТекстЗапроса);
	НастройкиКомпоновки = КомпоновщикНастроекАгента(СхемаКомпоновки);
	Если ТипЗнч(Отбор) <> Тип("Массив")  Тогда
		ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, Отбор);
	Иначе	
		 Для каждого Элемент Из Отбор Цикл
			ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, Элемент);
		 КонецЦикла; 
	КонецЕсли; 
	
	МакетКомпоновки = КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);

	Возврат МакетКомпоновки;

КонецФункции 

#Область ВыборкиДанныхПоСправочникам

Функция ДанныеПоПартнерамДляВыгрузки(МенеджерВТ)

	Если ВыгружатьПерсональныеЦены() Тогда 
		// нужно выгружать сегменты партнеров, используемых в типовых соглашениях
		// Заранее для каждого партнера указываем признак использования персональных цен, т.к. персональные цены могут быть в типовом договоре, 
		// а типовой договор может быть закреплен за сегментом, который принадлежит нескольким или всем партнерам (в т.ч. и когда нет сегментов вообще).
		
		МенеджерВТПерсональныеЦеныТоваров(МенеджерВТ);
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	СтатусыПартнеров.Партнер,
			|	СтатусыПартнеров.Статус
			|ПОМЕСТИТЬ СтатусыПартнеров
			|ИЗ
			|	&СтатусыПартнеров КАК СтатусыПартнеров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Партнеры.Ссылка КАК Ссылка,
			|	СтатусыПартнеров.Статус КАК Статус,
			|	ИСТИНА КАК ИспользоватьПерсональныеЦены,
			|	регПартнерыСегмента.Сегмент КАК Сегмент
			|ИЗ
			|	ВТ_Партнеры КАК ВТ_Партнеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПартнеров КАК СтатусыПартнеров
			|		ПО ВТ_Партнеры.Ссылка = СтатусыПартнеров.Партнер
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК регПартнерыСегмента
			|		ПО регПартнерыСегмента.Партнер = ВТ_Партнеры.Ссылка		
			|УПОРЯДОЧИТЬ ПО
			|	ВТ_Партнеры.Ссылка.Наименование, ВТ_Партнеры.Ссылка, регПартнерыСегмента.Сегмент
			|";
		
	Иначе // не используются персональные цены
		
		Если ИспользоватьСоглашения() Тогда // нужно выгружать сегменты партнеров, используемых в типовых соглашениях
			ТекстЗапроса = "
				|ВЫБРАТЬ
				|	СтатусыПартнеров.Партнер,
				|	СтатусыПартнеров.Статус
				|ПОМЕСТИТЬ СтатусыПартнеров
				|ИЗ
				|	&СтатусыПартнеров КАК СтатусыПартнеров
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Партнеры.Ссылка КАК Ссылка,
				|	СтатусыПартнеров.Статус КАК Статус,
				|	ЛОЖЬ КАК ИспользоватьПерсональныеЦены,
				|	регПартнерыСегмента.Сегмент КАК Сегмент
				|ИЗ
				|	ВТ_Партнеры КАК ВТ_Партнеры
				|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПартнеров КАК СтатусыПартнеров
				|		ПО ВТ_Партнеры.Ссылка = СтатусыПартнеров.Партнер
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК регПартнерыСегмента
				|		ПО регПартнерыСегмента.Партнер = ВТ_Партнеры.Ссылка		
				|УПОРЯДОЧИТЬ ПО
				|	ВТ_Партнеры.Ссылка.Наименование, ВТ_Партнеры.Ссылка, регПартнерыСегмента.Сегмент
				|";
		Иначе // Не ВыгружатьСоглашения() - не нужно выгружать сегменты партнеров
			ТекстЗапроса = "
				|ВЫБРАТЬ
				|	СтатусыПартнеров.Партнер,
				|	СтатусыПартнеров.Статус
				|ПОМЕСТИТЬ СтатусыПартнеров
				|ИЗ
				|	&СтатусыПартнеров КАК СтатусыПартнеров
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Партнеры.Ссылка КАК Ссылка,
				|	СтатусыПартнеров.Статус КАК Статус,
				|	ЛОЖЬ КАК ИспользоватьПерсональныеЦены
				|ИЗ
				|	ВТ_Партнеры КАК ВТ_Партнеры
				|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПартнеров КАК СтатусыПартнеров
				|		ПО ВТ_Партнеры.Ссылка = СтатусыПартнеров.Партнер
				|УПОРЯДОЧИТЬ ПО
				|	ВТ_Партнеры.Ссылка.Наименование
				|";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СтатусыПартнеров", СтатусыПартнеровИзНастроек());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтрагентамДляВыгрузки(МенеджерВТ)

	//vd_180815 Для украинской УТ
	Если гКонфигурация = "УТ_UA" Тогда
		ИНН = "Контрагенты.ИННПлательщикаНДС";
		КПП = """""";
	иначе
		ИНН = "Контрагенты.ИНН";
		КПП = "Контрагенты.КПП";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	Контрагенты.Партнер КАК Партнер,
		//{{vd_180710
		|	[ИНН] КАК ИНН,
		|   [КПП] КАК КПП,
		|   Контрагенты.ГоловнойКонтрагент,
		//}}vd_180710
		//((vd_190314
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
		|	Контрагенты.КодПоОКПО КАК КодПоОКПО
		//}}vd_190314
		|ИЗ
		|	ВТ_Партнеры КАК ВТ_Партнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТ_Партнеры.Ссылка = Контрагенты.Партнер
		|ГДЕ
		|	Не Контрагенты.ПометкаУдаления";
			
	//vd_180815
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИНН]", ИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[КПП]", КПП);
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить().Выбрать();;
	
КонецФункции

//vd_190314 Не используется
//vd_180711 Добавлена функция
//Функция ДанныеПоСоответствиям(МенеджерВТ)

//	МенеджерВТКонтрагенты(МенеджерВТ);
//	
//	Запрос = Новый Запрос;
//	
//	//vd_180730 Нужно выгружать помимо связки Контрагент - Партнер, еще связку Контрагент - ПотомокПартнера (партнер у которого Родительпартнер связаны с контрагентом, тоесть партнер находится в группе партнера который связан с контрагентом)
//	//Запрос.Текст = "ВЫБРАТЬ
//	//               |	Контрагенты.Ссылка КАК Ссылка,
//	//               |	Контрагенты.Партнер КАК Партнер
//	//               |ПОМЕСТИТЬ ВТ_КонтрагентПартнер
//	//               |ИЗ
//	//               |	ВТ_Контрагенты КАК ВТ_Контрагенты
//	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
//	//               |		ПО ВТ_Контрагенты.Ссылка = Контрагенты.Ссылка
//	//               |ГДЕ
//	//               |	НЕ Контрагенты.Ссылка = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	//               |	И НЕ Контрагенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
//	//               |
//	//               |ИНДЕКСИРОВАТЬ ПО
//	//               |	Партнер
//	//               |;
//	//               |
//	//               |////////////////////////////////////////////////////////////////////////////////
//	//               |ВЫБРАТЬ
//	//               |	ВТ_КонтрагентПартнер.Ссылка КАК Контрагент,
//	//               |	ВТ_КонтрагентПартнер.Партнер КАК Партнер
//	//               |ИЗ
//	//               |	ВТ_Партнеры КАК ВТ_Партнеры
//	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонтрагентПартнер КАК ВТ_КонтрагентПартнер
//	//               |		ПО ВТ_Партнеры.ссылка = ВТ_КонтрагентПартнер.Партнер  
//	//               |;
//	//               |
//	//               |////////////////////////////////////////////////////////////////////////////////
//	//               |УНИЧТОЖИТЬ ВТ_КонтрагентПартнер";
//	
//	
//	// Помимо связки Контрагент - Партнер, нужно выгружать еще связку Контрагент - ПотомокПартнера (партнер у которого Родительпартнер связаны с контрагентом, 
//	//		то есть партнер находится в группе партнера который связан с контрагентом)

//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ВТ_Партнеры.Ссылка КАК Партнер,
//	               |	Партнеры.Родитель КАК Родитель
//	               |ПОМЕСТИТЬ ВТ_ПартнерРодитель
//	               |ИЗ
//	               |	ВТ_Партнеры КАК ВТ_Партнеры
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
//	               |		ПО ВТ_Партнеры.Ссылка = Партнеры.Ссылка
//	               |
//	               |ИНДЕКСИРОВАТЬ ПО
//	               |	Родитель
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	ВТ_Контрагенты.Ссылка КАК Контрагент,
//	               |	Контрагенты.Партнер КАК Партнер
//	               |ПОМЕСТИТЬ ВТ_КонтрагентПартнер
//	               |ИЗ
//	               |	ВТ_Контрагенты КАК ВТ_Контрагенты
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
//	               |		ПО ВТ_Контрагенты.Ссылка = Контрагенты.Ссылка
//	               |ГДЕ
//	               |	НЕ Контрагенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
//	               |
//	               |ИНДЕКСИРОВАТЬ ПО
//	               |	Партнер
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	ВТ_КонтрагентПартнер.Контрагент КАК Контрагент,
//	               |	ВТ_КонтрагентПартнер.Партнер КАК Партнер
//	               |ИЗ
//	               |	ВТ_КонтрагентПартнер КАК ВТ_КонтрагентПартнер
//	               |
//	               |ОБЪЕДИНИТЬ
//	               |
//	               |ВЫБРАТЬ
//	               |	ВТ_КонтрагентПартнер.Контрагент,
//	               |	ВТ_ПартнерРодитель.Партнер
//	               |ИЗ
//	               |	ВТ_КонтрагентПартнер КАК ВТ_КонтрагентПартнер
//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПартнерРодитель КАК ВТ_ПартнерРодитель
//	               |		ПО ВТ_КонтрагентПартнер.Партнер = ВТ_ПартнерРодитель.Родитель
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |УНИЧТОЖИТЬ ВТ_ПартнерРодитель
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |УНИЧТОЖИТЬ ВТ_КонтрагентПартнер";
//			
//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//			
//	Результат = Запрос.Выполнить();
//	
//	//Тест = Результат.Выгрузить();
//			
//	Возврат Результат;
//	
//КонецФункции

Функция ДанныеПоКонтактнымЛицамПартнеровВыгрузки(МенеджерВТ)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка,
	|	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
	|	КонтактныеЛицаПартнеров.Наименование,
	|	КонтактныеЛицаПартнеров.Комментарий
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ПО ВТ_Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
	|";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтактамПартнеровИКонтактныхЛицВыгрузки(МенеджерВТ)
	
	Текстзапроса =
	"ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	NULL КАК КонтактноеЛицо,
	|	NULL КАК Контрагент,
	|	ПартнерыКонтактнаяИнформация.Тип,
	|	ПартнерыКонтактнаяИнформация.Вид,
	|	ПартнерыКонтактнаяИнформация.Представление
	|ПОМЕСТИТЬ КИПартнеров
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ПО ВТ_Партнеры.Ссылка = ПартнерыКонтактнаяИнформация.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	NULL,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|		ПО ВТ_Партнеры.Ссылка = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	КонтрагентыКонтактнаяИнформация.Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Тип,
	|	КонтрагентыКонтактнаяИнформация.Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
	|			ПО (ВТ_Партнеры.Ссылка = Контрагенты.Партнер)
	|		ПО КонтрагентыКонтактнаяИнформация.Ссылка = Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КИПартнеров.Партнер, """") КАК Партнер,
	|	ЕСТЬNULL(КИПартнеров.КонтактноеЛицо, """") КАК КонтактноеЛицо,
	|	ЕСТЬNULL(КИПартнеров.Контрагент, """") КАК Контрагент,
	|	КИПартнеров.Тип,
	|	КИПартнеров.Вид,
	|	КИПартнеров.Представление
	|ИЗ
	|	КИПартнеров КАК КИПартнеров";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции

//vd_190315 Добавлена
//ВТ_НоменклатураОстатки	
//	Номенклатура    - Спр
//	Характеристика  - Спр
//	Склад           - Спр
//	Остаток			- Число
//
//ВТ_КурсыВалют	
//	КурсКратный		- Число
//	Валюта	        - Спр
//
Процедура МенеджерВТНоменклатура(МенеджерВТ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_НоменклатураОстатки.Номенклатура КАК Номенклатура,
	               |	ВТ_НоменклатураОстатки.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_НоменклатураХарактеристика
	               |ИЗ
	               |	ВТ_НоменклатураОстатки КАК ВТ_НоменклатураОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НоменклатураОстатки.Номенклатура,
	               |	ВТ_НоменклатураОстатки.Характеристика
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураХарактеристика.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	ВТ_НоменклатураХарактеристика КАК ВТ_НоменклатураХарактеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НоменклатураХарактеристика.Номенклатура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |";
	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();
	
	Если ВыгружатьХарактеристикиНоменклатуры() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_НоменклатураХарактеристика.Характеристика КАК Характеристика
		               |ПОМЕСТИТЬ ВТ_Характеристика
		               |ИЗ
		               |	ВТ_НоменклатураХарактеристика КАК ВТ_НоменклатураХарактеристика
		               |ГДЕ
		               |	ВТ_НоменклатураХарактеристика.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяССылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_НоменклатураХарактеристика.Характеристика
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Характеристика";
		
		Запрос.Выполнить();		
	КонецЕсли;
	
КонеЦПроцедуры

Процедура МенеджерВТЦеныНоменклатуры(МенеджерВТ)
	
	ВалютаУчета	= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	Если ПоколениеКонфигурации("<УТ_11.2") Тогда
		КоэффициентУпаковки = "ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Коэффициент, 1)";
	Иначе 
		КоэффициентУпаковки = "
			|	ЕСТЬNULL(ВЫБОР
			|		КОГДА УпаковкиЕдиницыИзмерения.Числитель = 0 ИЛИ УпаковкиЕдиницыИзмерения.Знаменатель = 0
			|			ТОГДА 1			
			|		ИНАЧЕ УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
			|	КОНЕЦ, 1)"; 
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	               |	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / &ЛитералКоэффициентУпаковки * ВЫБОР
	               |			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	               |				ТОГДА ВТ_КурсыВалют.КурсКратный
	               |			ИНАЧЕ 1
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	               |ПОМЕСТИТЬ ВТ_НоменклатураЦены
	               |ИЗ
	               |	ВТ_НоменклатураХарактеристика КАК ВТ_НоменклатураСУчетомОстатка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ) КАК ЦеныНоменклатуры
	               |		ПО ВТ_НоменклатураСУчетомОстатка.Номенклатура = ЦеныНоменклатуры.Номенклатура
	               |			И ВТ_НоменклатураСУчетомОстатка.Характеристика = ЦеныНоменклатуры.Характеристика
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыЦен КАК ВТ_ВидыЦен
	               |		ПО (ЦеныНоменклатуры.ВидЦены = ВТ_ВидыЦен.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК ВТ_КурсыВалют
	               |		ПО (ВТ_КурсыВалют.Валюта = ЦеныНоменклатуры.Валюта)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |		ПО (ЦеныНоменклатуры.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЦеныНоменклатуры.Номенклатура,
	               |	ЦеныНоменклатуры.Характеристика,
	               |	ЦеныНоменклатуры.ВидЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураХарактеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЛитералКоэффициентУпаковки", КоэффициентУпаковки);
	
	Запрос.УстановитьПараметр("Валюта",	ВалютаУчета);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();

	
КонецПроцедуры

//vd_190318 Добавлена
Функция ДанныеПоНоменклатуре(МенеджерВТ)
	
	КонстантаИспользоватьУпаковкиНоменклатуры = КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры");
	ВыгружатьХарактеристики 				  = ВыгружатьХарактеристикиНоменклатуры();

	Если ПоколениеКонфигурации("<УТ_11.2") Тогда
		Весовой = "ВЫБОР КОГДА Номенклатура.Вес > 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";	
	Иначе
		Весовой = "Номенклатура.ВесИспользовать";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	//GUID базовой единицы измерения выгружается равным GUID номенклатуры, когда не используются упаковки номенклатуры (см. выгрузку ссылок для единиц измерения)
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	               |	СпрНоменклатура.Родитель КАК Родитель,
	               |	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	СпрНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
	               |	СпрНоменклатура.Наименование КАК Наименование,
	               |	СпрНоменклатура.Код КАК Код,
	               |	СпрНоменклатура.Артикул КАК Артикул,
	               |	СпрНоменклатура.СтавкаНДС КАК СтавкаНДС,
	               |	ВЫБОР
	               |		КОГДА &КонстантаИспользоватьУпаковкиНоменклатуры
	               |			ТОГДА ВЫБОР
	               |					КОГДА СпрНоменклатура.ИспользоватьУпаковки = ЛОЖЬ
	               |							ИЛИ СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	               |						ТОГДА СпрНоменклатура.Ссылка
	               |					ИНАЧЕ НаборыУпаковок.ЕдиницаИзмерения
	               |				КОНЕЦ
	               |		ИНАЧЕ СпрНоменклатура.ЕдиницаИзмерения
	               |	КОНЕЦ КАК БазоваяЕдиница,
	               |	ВЫБОР
	               |		КОГДА &КонстантаИспользоватьУпаковкиНоменклатуры
	               |				И СпрНоменклатура.ИспользоватьУпаковки
	               |				И СпрНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	               |			ТОГДА СпрНоменклатура.НаборУпаковок
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК НаборУпаковок,
	               |	&СтрЗаменитьВесовой КАК Весовой,
	               |	ВЫБОР
	               |		КОГДА &ВыгружатьХарактеристики
	               |				И ВидыНоменклатуры.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	               |			ТОГДА Истина
	               |		ИНАЧЕ Ложь
	               |	КОНЕЦ КАК УчетПоХарактеристикам,
	               |	ВЫБОР
	               |		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоУслуга,
	               |	СпрНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
	               |	СпрНоменклатура.Описание КАК Описание,
	               |	СпрНоменклатура.ФайлКартинки КАК ФайлКартинки,
	               |	СпрНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВТ_Номенклатура.Номенклатура = СпрНоменклатура.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
	               |		ПО (СпрНоменклатура.НаборУпаковок = НаборыУпаковок.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрЗаменитьВесовой", Весовой); 	
	
	Запрос.УстановитьПараметр("КонстантаИспользоватьУпаковкиНоменклатуры", 	КонстантаИспользоватьУпаковкиНоменклатуры);
	Запрос.УстановитьПараметр("ВыгружатьХарактеристики", 					ВыгружатьХарактеристики);	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

//vd_190322 Добавлена
Функция ДанныеПоХарактеристикамНоменклатуры(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Характеристика.Характеристика КАК Характеристика,
  	               |	СпрХарактеристикиНоменклатуры.Наименование КАК Наименование,
				   |	СпрХарактеристикиНоменклатуры.Владелец КАК Владелец
	               |ИЗ
	               |	ВТ_Характеристика КАК ВТ_Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
	               |		ПО ВТ_Характеристика.Характеристика = СпрХарактеристикиНоменклатуры.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Характеристика
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;	
КонецФункции

//vd_190318 Добавлена
Функция ДанныеПоОстаткамНоменклатуры(МенеджерВТ)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	               |	ВТ_Склады.Ссылка КАК Склад
	               |ПОМЕСТИТЬ ВТ_НоменклатураСклады
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура,
	               |	ВТ_Склады КАК ВТ_Склады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_Номенклатура.Номенклатура,
	               |	ВТ_Склады.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураСклады.Номенклатура КАК Номенклатура,
	               |	ВТ_НоменклатураСклады.Склад КАК Склад,
	               |	СУММА(ЕСТЬNULL(ВТ_НоменклатураОстатки.Остаток, 0)) КАК Остаток
	               |ИЗ
	               |	ВТ_НоменклатураСклады КАК ВТ_НоменклатураСклады
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураОстатки КАК ВТ_НоменклатураОстатки
	               |		ПО ВТ_НоменклатураСклады.Номенклатура = ВТ_НоменклатураОстатки.Номенклатура
	               |			И ВТ_НоменклатураСклады.Склад = ВТ_НоменклатураОстатки.Склад
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НоменклатураСклады.Номенклатура,
	               |	ВТ_НоменклатураСклады.Склад
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_НоменклатураСклады.Номенклатура,
	               |	ВТ_НоменклатураСклады.Склад
	               |ИТОГИ
	               |	СУММА(Остаток)
	               |ПО
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураСклады";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ ВыгружатьХарактеристикиНоменклатуры() Тогда
		ЗапросВТ = Новый Запрос;
		ЗапросВТ.Текст = "УНИЧТОЖИТЬ ВТ_НоменклатураОстатки";
		ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросВТ.Выполнить();		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//vd_190323 Добавлена
Функция ДанныеПоОстаткамХарактеристикНоменклатуры(МенеджерВТ)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Характеристика.Характеристика КАК Характеристика,
	               |	ВТ_Склады.Ссылка КАК Склад
	               |ПОМЕСТИТЬ ВТ_ХарактеристикаСклады
	               |ИЗ
	               |	ВТ_Характеристика КАК ВТ_Характеристика,
	               |	ВТ_Склады КАК ВТ_Склады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_Характеристика.Характеристика,
	               |	ВТ_Склады.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ХарактеристикаСклады.Характеристика КАК Характеристика,
	               |	ВТ_ХарактеристикаСклады.Склад КАК Склад,
	               |	СУММА(ЕСТЬNULL(ВТ_НоменклатураОстатки.Остаток, 0)) КАК Остаток
	               |ИЗ
	               |	ВТ_ХарактеристикаСклады КАК ВТ_ХарактеристикаСклады
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураОстатки КАК ВТ_НоменклатураОстатки
	               |		ПО ВТ_ХарактеристикаСклады.Характеристика = ВТ_НоменклатураОстатки.Характеристика
	               |			И ВТ_ХарактеристикаСклады.Склад = ВТ_НоменклатураОстатки.Склад
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ХарактеристикаСклады.Характеристика,
	               |	ВТ_ХарактеристикаСклады.Склад
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_ХарактеристикаСклады.Характеристика,
	               |	ВТ_ХарактеристикаСклады.Склад
	               |ИТОГИ
	               |	СУММА(Остаток)
	               |ПО
	               |	Характеристика
	               |АВТОУПОРЯДОЧИВАНИЕ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ХарактеристикаСклады
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураОстатки";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

//vd_190318 Добавлена
Функция ДанныеПоЦенамНоменклатуры(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	               |	ВТ_ВидыЦен.Ссылка КАК ВидЦены
	               |ПОМЕСТИТЬ ВТ_НоменклатураВидЦены
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура,
	               |	ВТ_ВидыЦен КАК ВТ_ВидыЦен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_Номенклатура.Номенклатура,
	               |	ВТ_ВидыЦен.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураЦены.Номенклатура КАК Номенклатура,
	               |	ВТ_НоменклатураЦены.ВидЦены КАК ВидЦены,
	               |	МАКСИМУМ(ВТ_НоменклатураЦены.Цена) КАК Цена
	               |ПОМЕСТИТЬ ВТ_НоменклатураЦеныБезХарактеристик
	               |ИЗ
	               |	ВТ_НоменклатураЦены КАК ВТ_НоменклатураЦены
	               |ГДЕ
	               |	ВТ_НоменклатураЦены.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НоменклатураЦены.Номенклатура,
	               |	ВТ_НоменклатураЦены.ВидЦены
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_НоменклатураЦены.Номенклатура,
	               |	ВТ_НоменклатураЦены.ВидЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураВидЦены.Номенклатура КАК Номенклатура,
	               |	ВТ_НоменклатураВидЦены.ВидЦены КАК ВидЦены,
	               |	ЕСТЬNULL(ВТ_НоменклатураЦены.Цена, 0) КАК Цена
	               |ИЗ
	               |	ВТ_НоменклатураВидЦены КАК ВТ_НоменклатураВидЦены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураЦеныБезХарактеристик КАК ВТ_НоменклатураЦены
	               |		ПО ВТ_НоменклатураВидЦены.Номенклатура = ВТ_НоменклатураЦены.Номенклатура
	               |			И ВТ_НоменклатураВидЦены.ВидЦены = ВТ_НоменклатураЦены.ВидЦены
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_НоменклатураВидЦены.Номенклатура,
	               |	ВТ_НоменклатураВидЦены.ВидЦены
	               |ИТОГИ
	               |	СУММА(Цена)
	               |ПО
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураЦеныБезХарактеристик";
	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ ВыгружатьХарактеристикиНоменклатуры() Тогда
		ЗапросВТ = Новый Запрос;
		ЗапросВТ.Текст = "УНИЧТОЖИТЬ ВТ_НоменклатураЦены";
		ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросВТ.Выполнить();		
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции

//vd_190318 Добавлена
Функция ДанныеПоЦенамХарактеристикНоменклатуры(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Характеристика.Характеристика КАК Характеристика,
	               |	ВТ_ВидыЦен.Ссылка КАК ВидЦены
	               |ПОМЕСТИТЬ ВТ_ХарактеристикаВидЦены
	               |ИЗ
	               |	ВТ_Характеристика КАК ВТ_Характеристика,
	               |	ВТ_ВидыЦен КАК ВТ_ВидыЦен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_Характеристика.Характеристика,
	               |	ВТ_ВидыЦен.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураЦены.Характеристика КАК Характеристика,
	               |	ВТ_НоменклатураЦены.ВидЦены КАК ВидЦены,
	               |	МАКСИМУМ(ВТ_НоменклатураЦены.Цена) КАК Цена
	               |ПОМЕСТИТЬ ВТ_НоменклатураЦеныХарактеристик
	               |ИЗ
	               |	ВТ_НоменклатураЦены КАК ВТ_НоменклатураЦены
	               |ГДЕ
	               |	ВТ_НоменклатураЦены.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НоменклатураЦены.Характеристика,
	               |	ВТ_НоменклатураЦены.ВидЦены
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_НоменклатураЦены.Характеристика,
	               |	ВТ_НоменклатураЦены.ВидЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ХарактеристикаВидЦены.Характеристика КАК Характеристика,
	               |	ВТ_ХарактеристикаВидЦены.ВидЦены КАК ВидЦены,
	               |	ЕСТЬNULL(ВТ_НоменклатураЦены.Цена, 0) КАК Цена
	               |ИЗ
	               |	ВТ_ХарактеристикаВидЦены КАК ВТ_ХарактеристикаВидЦены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураЦеныХарактеристик КАК ВТ_НоменклатураЦены
	               |		ПО ВТ_ХарактеристикаВидЦены.Характеристика = ВТ_НоменклатураЦены.Характеристика
	               |			И ВТ_ХарактеристикаВидЦены.ВидЦены = ВТ_НоменклатураЦены.ВидЦены
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_ХарактеристикаВидЦены.Характеристика,
	               |	ВТ_ХарактеристикаВидЦены.ВидЦены
	               |ИТОГИ
	               |	СУММА(Цена)
	               |ПО
	               |	Характеристика
	               |АВТОУПОРЯДОЧИВАНИЕ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураЦеныХарактеристик";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

//vd_190315 Не используется
//Функция ЗапросПоНоменклатуре(МенеджерВТ) //gi_180525 убран параметр ДоступныеВидыЦен

//	ВалютаУчета 	= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
//	КурсВалюты 		= 1;
//	КратностьВалюты = 1;
//	
//	МенеджерВТКурсыВалют(МенеджерВТ); // добавляем в МенеджерВТ таблицу ВТ_КурсыВалют, если ее еще нет.
//	//МенеджерВТВидыЦен(МенеджерВТ);    //vd_180601 Добавляем в МенеджерВТ таблицу ВТ_ВидыЦен, если ее еще нет. //vd_190313 Перенесена в МенеджерВТПолучить()
//	
//	Запрос = Новый Запрос(ТекстЗапросаВыгрузкиНоменклатуры());
//	Запрос.УстановитьПараметр("УчитыватьРезервы", УчитыватьРезервы);
//	Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
//	Запрос.УстановитьПараметр("КурсКратный", КурсВалюты / КратностьВалюты);
//	//Запрос.УстановитьПараметр("ВидыЦен", ДоступныеВидыЦен); // gi_180525 - убрано
//	Запрос.УстановитьПараметр("ВыгружатьТоварыСНулевымОстатком", ВыгружатьТоварыСНулевымОстатком);
//	Запрос.УстановитьПараметр("РежимВыгрузкиКодов", РежимВыгрузкиКодовНоменклатуры);
//	
//	МобильныйСклад = Неопределено;
//	ВыбНастройкиАгента.Свойство("МобильныйСклад", МобильныйСклад);
//	Запрос.УстановитьПараметр("МобильныйСклад", МобильныйСклад);
//	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;           // МенеджерВТ.Таблицы.Найти("ВТ_КурсыВалют").ПолучитьДанные().Выгрузить()

//	Возврат Запрос;
//	
//КонецФункции 

//vd_190322 Не используется
//Функция ЗапросПоХарактеристикамНомеклатуры(МенеджерВТ) // gi_180525 убран параметр ДоступныеВидыЦен

//	ВалютаУчета 	= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
//	КурсВалюты 		= 1;
//	КратностьВалюты = 1;

//	Запрос = Новый Запрос(ТекстЗапросаПолученияХарактеристикНоменклатуры());
//	Запрос.УстановитьПараметр("УчитыватьРезервы", УчитыватьРезервы);
//	Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
//	//Запрос.УстановитьПараметр("КратностьВалюты", КратностьВалюты);
//	//Запрос.УстановитьПараметр("КурсВалюты", КурсВалюты);
//	Запрос.УстановитьПараметр("КурсКратный", КурсВалюты / КратностьВалюты);
//	//Запрос.УстановитьПараметр("ВидыЦен", ДоступныеВидыЦен); // gi_180525 виды цен уже есть в менеджере ВТ
//	Запрос.УстановитьПараметр("ВыгружатьТоварыСНулевымОстатком", ВыгружатьТоварыСНулевымОстатком);
//	Запрос.УстановитьПараметр("РежимВыгрузкиКодов", РежимВыгрузкиКодовНоменклатуры);
//	Запрос.УстановитьПараметр("МобильныйСклад", ВыбНастройкиАгента.МобильныйСклад);

//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

//	Возврат Запрос;

//КонецФункции 

//vd_190321 В Функцию перенесен запрос. Запрос изменен, исправлены ошибки связанные с изменением выгрузки номенклатуры (убраны поля из ВТ_Ассортимент).
Функция ДанныеПоЕдиницамИзмеренияВыгрузки(МенеджерВТ)

	стррЛитералы = Новый Структура("НоменклатураВес,УпаковкиЕдиницыИзмерения,УпаковкиКоэффициент,Упаковки,НоменклатураНаборУпаковок,ИспользоватьУпаковки"); //dm_180524	
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		
		стррЛитералы.НоменклатураВес = 
			"ВЫБОР
			|	КОГДА Номенклатура.Ссылка.ВесЗнаменатель > 0
			|		ТОГДА Номенклатура.Ссылка.ВесЧислитель / Номенклатура.Ссылка.ВесЗнаменатель
			|	ИНАЧЕ 0
			|КОНЕЦ";
			
		стррЛитералы.УпаковкиКоэффициент = 
			"ВЫБОР
			|	КОГДА Упаковки.Знаменатель > 0
			|		ТОГДА Упаковки.Числитель / Упаковки.Знаменатель
			|	ИНАЧЕ 0
			|КОНЕЦ";
		//стррЛитералы.УпаковкиКоэффициент		= "Упаковки.Числитель / Упаковки.Знаменатель";
		стррЛитералы.Упаковки					= "УпаковкиЕдиницыИзмерения";
		
	Иначе // УТ 11.1
		
		стррЛитералы.УпаковкиКоэффициент		= "Упаковки.Коэффициент";
		стррЛитералы.Упаковки					= "УпаковкиНоменклатуры";
		стррЛитералы.НоменклатураВес 			= "Номенклатура.Вес";
		стррЛитералы.УпаковкиЕдиницыИзмерения   = "ЕдиницыИзмерения";
		
	КонецЕсли;
	
	//vd_180504 Баг найденый Макеевым Дмитрием
	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		стррЛитералы.НоменклатураНаборУпаковок = 
			"И Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)";
		стррЛитералы.ИспользоватьУпаковки = "Номенклатура.ИспользоватьУпаковки = Истина"; //dm_180524 
	Иначе
		стррЛитералы.НоменклатураНаборУпаковок = "";
		стррЛитералы.ИспользоватьУпаковки = "ИСТИНА"; //dm_180524
	КонецЕсли;        
	
	
	Запрос = Новый Запрос;
	
	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
			|	"""" КАК КодОКЕИ,
			|	Номенклатура.ЕдиницаИзмерения.Наименование КАК Наименование,
			|	1 КАК Коэффициент,
			|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
			|	[НоменклатураВес] Как Вес,
			|	ЛОЖЬ КАК ЭтоНаборУпаковок,
			|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
			|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
			|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
			|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
			|ИЗ
			|	ВТ_Ассортимент КАК ВТ_Ассортимент
			|	Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|	ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
			|ГДЕ
			|	(НЕ Номенклатура.ИспользоватьУпаковки
			|			ИЛИ Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
			|	И Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ 
			|
			|ВЫБРАТЬ
			|	Упаковки.Ссылка,
			|	"""",
			|	Упаковки.Наименование,
			|	[УпаковкиКоэффициент],
			|	Упаковки.Владелец,
			|	Упаковки.Вес,
			|	ЛОЖЬ,
			|	&ПустойНаборУпаковок,
			|	Упаковки.ЕдиницаИзмерения,
			|	ЛОЖЬ
			|ИЗ
			|	Справочник.[Упаковки] КАК Упаковки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
			|		ПО Упаковки.Владелец = ВТ_Ассортимент.Ссылка
			|	Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|	ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
			|ГДЕ
			|	Номенклатура.ИспользоватьУпаковки
			|	И Номенклатура.НаборУпаковок = &ИндивидуальныйНаборУпаковок
			|
			|ОБЪЕДИНИТЬ ВСЕ 
			|
			|ВЫБРАТЬ
			|	Упаковки.Ссылка,
			|	"""",
			|	Упаковки.Наименование,
			|	[УпаковкиКоэффициент],
			|	&ПустаяНоменклатура,
			|	Упаковки.Вес,
			|	ИСТИНА,
			|	Упаковки.Владелец,
			|	Упаковки.ЕдиницаИзмерения,
			|	ЛОЖЬ
			|ИЗ
			|	ВТ_Ассортимент КАК ВТ_Ассортимент
			|		Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.[Упаковки] КАК Упаковки 
			|       ПО Упаковки.Владелец = Номенклатура.НаборУпаковок 
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
			|		ПО Упаковки.Владелец = НаборыУпаковок.Ссылка
			|ГДЕ
			|	Номенклатура.ИспользоватьУпаковки
			|	И Номенклатура.НаборУпаковок <> &ИндивидуальныйНаборУпаковок";
		
	Иначе // не используются упаковки номенклатуры
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
			|	"""" КАК КодОКЕИ,
			|	Номенклатура.ЕдиницаИзмерения.Наименование КАК Наименование,
			|	1 КАК Коэффициент,
			|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
			|	[НоменклатураВес] КАК Вес,
			|	ЛОЖЬ КАК ЭтоНаборУпаковок,
			|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
			|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
			|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
			|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
			|ИЗ
			|	ВТ_Ассортимент КАК ВТ_Ассортимент
			|	Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|	ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
			|ГДЕ
			|	Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)";
		
	КонецЕсли; // ПолучитьЗначениеКонстанты("ИспользоватьУпаковкиНоменклатуры")
	
	Запрос.Текст = Запрос.Текст + ";
		|
		|////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕдиницыБезКлассификаторов.Ссылка КАК Ссылка,
		|	ЕдиницыБезКлассификаторов.КодОКЕИ КАК КодОКЕИ,
		|	ЕдиницыБезКлассификаторов.Наименование КАК Наименование,
		|	ЕдиницыБезКлассификаторов.Коэффициент КАК Коэффициент,
		|	ЕдиницыБезКлассификаторов.Номенклатура КАК Номенклатура,
		|	ЕдиницыБезКлассификаторов.Вес КАК Вес,
		|	ЕдиницыБезКлассификаторов.ЭтоНаборУпаковок КАК ЭтоНаборУпаковок,
		|	ЕдиницыБезКлассификаторов.ВладелецНаборУпаковок КАК ВладелецНаборУпаковок,
		|	ЕдиницыБезКлассификаторов.Классификатор КАК Классификатор,
		|	ЕдиницыБезКлассификаторов.ЭтоЕдиницаНоменклатуры КАК ЭтоЕдиницаНоменклатуры
		|ИЗ
		|	ЕдиницыБезКлассификаторов КАК ЕдиницыБезКлассификаторов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Классификатор.Ссылка,
		|	Классификатор.Код,
		|	Классификатор.Наименование,
		|	1,
		|	&ПустаяНоменклатура,
		|	0,
		|	ЛОЖЬ,
		|	&ПустойНаборУпаковок,
		|	&ПустойНаборУпаковок,
		|	ЛОЖЬ КАК ЭтоЕдиницаНоменклатуры
		|ИЗ
		|	Справочник.[УпаковкиЕдиницыИзмерения] КАК ТАБ_Классификатор
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЕдиницыБезКлассификаторов КАК ТАБ_ЕдиницыБезКлассификаторов
		|		ПО ТАБ_Классификатор.Ссылка = ТАБ_ЕдиницыБезКлассификаторов.Классификатор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Классификатор.Ссылка,
		|	Классификатор.Код,
		|	Классификатор.Наименование,
		|	1,
		|	&ПустаяНоменклатура,
		|	0,
		|	ЛОЖЬ,
		|	&ПустойНаборУпаковок,
		|	&ПустойНаборУпаковок,
		|	ЛОЖЬ КАК ЭтоЕдиницаНоменклатуры
		|ИЗ
		|	Справочник.[УпаковкиЕдиницыИзмерения] КАК ТАБ_Классификатор
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		(ВЫБРАТЬ
		|			Номенклатура.ЕдиницаИзмерения КАК Классификатор
		|		ИЗ
		|			ВТ_Ассортимент КАК ВТ_Ассортимент
		|				Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|				ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
		|		ГДЕ
		|			[ИспользоватьУпаковки]
		|			[НоменклатураНаборУпаковок]
		|			И Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
		|		) КАК ТАБ_Асортимент
		|		ПО ТАБ_Классификатор.Ссылка = ТАБ_Асортимент.Классификатор
		|"; 
		
	ЗаменитьЛитералы(Запрос.Текст, стррЛитералы);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПустойНаборУпаковок", Справочники.НаборыУпаковок.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИндивидуальныйНаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ДанныеПоЕдиницамИзмеренияВыгрузки()

#КонецОбласти

#Область ВыборкиДанныхПоДокументам           

Функция ДанныеПоДокументамЗаказПокупателя(МенеджерВТ)

	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовЗаказПокупателя(ВыгружатьЗаказыПоПартнерамАгента));
	Если ВыгружатьЗаказыПоПартнерамАгента Тогда // запрос с отбором документов по партнерам торгового агента
		МенеджерВТПартнеров(МенеджерВТ);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	КонецЕсли; 
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
	Запрос.УстановитьПараметр("Агент", ВыбАгент);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДанныеПоДокументамПродажи()

	Если гКэшСпискиОбъектов.Получить("СписокЗаказов") = Неопределено Тогда 
		СписокЗаказов = "";
	Иначе 
		СписокЗаказов = гКэшСпискиОбъектов.Получить("СписокЗаказов");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовРеализация());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Запрос.УстановитьПараметр("Агент", ВыбАгент);

	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДанныеПоДокументамПеремещения() // sd_22082017
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовПеремещение());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиПеремещений));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	МобильныйСклад = Неопределено;
	ВыбНастройкиАгента.Свойство("МобильныйСклад", МобильныйСклад);
	Запрос.УстановитьПараметр("Склад", МобильныйСклад);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПеремещенийТоваров.Принято);
	Запрос.УстановитьПараметр("Агент", ВыбАгент);

	Возврат Запрос.Выполнить();
	
КонецФункции

#Область ДанныеПоВзаиморасчетам 

//vd_190227 Добавлена
Функция ДанныеПоДолгам(МенеджерВТ)	
	
	//1. Параметры
	ДатаОтчета   = ТекущаяДата();                                            		// Дата       - Дата отчета
	ДатаОстатков = Новый Граница(КонецДня(ДатаОтчета), ВидГраницы.Включая);   		// Граница    - Дата отчета, вспомогательная.
	Валюта		 = Константы.ВалютаРегламентированногоУчета.Получить();            	// Справочник - Валюта отчета(регл или упр) 
	
	Запрос = Новый Запрос;
	
	//2. Отборы
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики,
	               |	АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	АналитикаУчетаПоПартнерам.Договор КАК Договор
	               |ПОМЕСТИТЬ ВТ_ОтборПоСегментуПартнеров
	               |ИЗ
	               |	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
	               |		ПО АналитикаУчетаПоПартнерам.Организация = ВТ_Организации.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
	               |		ПО АналитикаУчетаПоПартнерам.Партнер = ВТ_Партнеры.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КлючАналитики
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КурсВалюты.Валюта КАК Валюта,
	               |	КурсВалюты.Курс * КурсВалютыОтчета.Кратность / (КурсВалюты.Кратность * КурсВалютыОтчета.Курс) КАК КоэффициентПересчета
	               |ПОМЕСТИТЬ ВТ_КурсВалютыУчета
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, ) КАК КурсВалюты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, Валюта = &Валюта) КАК КурсВалютыОтчета
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	КурсВалюты.Кратность <> 0
	               |	И КурсВалютыОтчета.Курс <> 0";
	
	//В УТ 11.1 нет измерения РегистрСведений.АналитикаУчетаПоПартнерам.Договор
	Если ПоколениеКонфигурации("<УТ_11.2") Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АналитикаУчетаПоПартнерам.Договор", "ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();
	
	//3. Получение данных по долгам и дату платежа
	Если Метаданные.ФункциональныеОпции.Найти("НоваяАрхитектураВзаиморасчетов") <> Неопределено И ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Запрос.Текст ="ВЫБРАТЬ
		              |	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		              |	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
		              |	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		              |	РасчетыСКлиентамиПоСрокамОстатки.Валюта КАК Валюта,
		              |	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток КАК КОплатеОстаток,
		              |	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлатежа
		              |ПОМЕСТИТЬ ВТ_Долги
		              |ИЗ
		              |	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ДатаОстатков, ) КАК РасчетыСКлиентамиПоСрокамОстатки";					
		
	Иначе
		
		Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
			Запрос.Текст ="ВЫБРАТЬ
			              |	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			              |	РасчетыСКлиентами.ЗаказКлиента КАК ОбъектРасчетов,
			              |	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК РасчетныйДокумент,
			              |	РасчетыСКлиентами.Валюта КАК Валюта,
			              |	МАКСИМУМ(РасчетыСКлиентами.КОплатеОстаток) КАК КОплатеОстаток,
			              |	МАКСИМУМ(РасчетыСКлиентамиПоДокументам.ДатаПлатежа) КАК ДатаПлатежа
			              |ПОМЕСТИТЬ ВТ_Долги
			              |ИЗ
			              |	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОстатков, ) КАК РасчетыСКлиентами
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтборПоСегментуПартнеров КАК ВТ_ОтборПоСегментуПартнеров
			              |		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = ВТ_ОтборПоСегментуПартнеров.КлючАналитики
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
			              |		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам
			              |			И РасчетыСКлиентами.ЗаказКлиента = РасчетыСКлиентамиПоДокументам.ЗаказКлиента
			              |			И РасчетыСКлиентами.Валюта = РасчетыСКлиентамиПоДокументам.Валюта
			              |ГДЕ
			              |	РасчетыСКлиентамиПоДокументам.Долг > 0
			              |	И РасчетыСКлиентами.КОплатеОстаток > 0
			              |
			              |СГРУППИРОВАТЬ ПО
			              |	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
			              |	РасчетыСКлиентами.ЗаказКлиента,
			              |	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент,
			              |	РасчетыСКлиентами.Валюта";
			
		Иначе //ПоколениеКонфигурации("<УТ_11.2") Тогда
			//Возможно требуется пересчет валюты. Пересчет происходит по валюте текущего курса, а в типовых отчетах долг отображается по ДолгУпр или ДолгРегл
			Запрос.Текст ="ВЫБРАТЬ
			              |	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			              |	РасчетыСКлиентамиПоДокументам.ЗаказКлиента КАК ОбъектРасчетов,
			              |	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент,
			              |	РасчетыСКлиентамиПоДокументам.Валюта КАК Валюта,
			              |	РасчетыСКлиентамиПоДокументам.ДолгОстаток КАК КОплатеОстаток,
			              |	РасчетыСКлиентамиПоДокументам.ДатаПлатежа КАК ДатаПлатежа
			              |ПОМЕСТИТЬ ВТ_Долги
			              |ИЗ
			              |		РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ДатаОстатков, ) КАК РасчетыСКлиентамиПоДокументам
			              |ГДЕ
			              | РасчетыСКлиентамиПоДокументам.ДолгОстаток > 0";
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Выполнить();
					  
	//4. Получение итогового результата
	Запрос.Текст ="ВЫБРАТЬ
	              |	ВТ_ОтборПоСегментуПартнеров.Организация КАК Организация,
	              |	ВТ_ОтборПоСегментуПартнеров.Партнер КАК Партнер,
	              |	ВТ_ОтборПоСегментуПартнеров.Контрагент КАК Контрагент,
	              |	ВТ_ОтборПоСегментуПартнеров.Договор КАК Договор,
	              |	ВТ_Долги.ОбъектРасчетов КАК ОбъектРасчетов,
	              |	ВТ_Долги.РасчетныйДокумент КАК РасчетныйДокумент,
	              |	ВТ_Долги.КОплатеОстаток * ВТ_КурсВалютыУчета.КоэффициентПересчета КАК КОплатеОстаток,
	              |	ВТ_Долги.ДатаПлатежа КАК ДатаПлатежа,
	              |	ВЫБОР
	              |		КОГДА ВТ_Долги.ДатаПлатежа < &ДатаОтчета
	              |			ТОГДА РАЗНОСТЬДАТ(ВТ_Долги.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ КАК КоличествоДнейПросрочено
	              |ИЗ
	              |	ВТ_Долги КАК ВТ_Долги
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КурсВалютыУчета КАК ВТ_КурсВалютыУчета
	              |		ПО ВТ_Долги.Валюта = ВТ_КурсВалютыУчета.Валюта
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтборПоСегментуПартнеров КАК ВТ_ОтборПоСегментуПартнеров
	              |		ПО ВТ_Долги.АналитикаУчетаПоПартнерам = ВТ_ОтборПоСегментуПартнеров.КлючАналитики
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Партнер,
	              |	Контрагент";
	
	
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	
	ВыбркаРезультат = Запрос.Выполнить();
	
	//5. Удаление временных таблиц
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ОтборПоСегментуПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_КурсВалютыУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Долги";
	Запрос.Выполнить();
	
	Возврат ВыбркаРезультат;
	
КонецФункции	

//vd_190227 Добавлена
//Обновление регистра накоплений "Расчеты с клиентами по документам"
Процедура ОбновлениеРегистрРасчетыСКлиентамиПоДокументам()
	
	//УТ_11.4	-  РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе()
	//УТ_11.3	-  РаспределениеВзаиморасчетов.РассчитатьВсе()
	//УТ_11.1	-  ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами()
	Если ПоколениеКонфигурации(">=УТ_11.4") Тогда
		МодульВзаиморасчетов = Вычислить("РаспределениеВзаиморасчетовВызовСервера");
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.2") Тогда
		МодульВзаиморасчетов = Вычислить("РаспределениеВзаиморасчетов");
	Иначе //ПоколениеКонфигурации("<УТ_11.2")
		Попытка
			МодульВзаиморасчетов = Вычислить("ВзаиморасчетыСервер");
			МодульВзаиморасчетов.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами();
		Исключение	
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ФункциональныеОпции.Найти("НоваяАрхитектураВзаиморасчетов") = Неопределено ИЛИ НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса()) + 1;
		Попытка
			МодульВзаиморасчетов.РассчитатьВсе(КонецРасчета, Неопределено);
		Исключение
			Попытка
				АналитикиРасчета =  Новый Структура("АналитикиУчетаПоПартнерам, Организации", Неопределено, Неопределено);
				МодульВзаиморасчетов.РассчитатьВсе(КонецРасчета, АналитикиРасчета);
			Исключение
				мОрганизации = Новый Массив;
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	Организации.Ссылка КАК Ссылка
				               |ИЗ
				               |	Справочник.Организации КАК Организации";
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					мОрганизации.Добавить(Выборка.Ссылка);
				КонецЦикла;
				Попытка
					АналитикиРасчета =  Новый Структура("АналитикиУчетаПоПартнерам, Организации", Неопределено, мОрганизации);
					МодульВзаиморасчетов.РассчитатьВсе(КонецРасчета, АналитикиРасчета);
				Исключение
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "При обновлении регистра накоплений ""Расчеты с клиентами по документам"" произошла ошибка: " + ОписаниеОшибки();
					Сообщение.Сообщить();
				КонецПопытки;
			КонецПопытки;
		Конецпопытки;
	КонецЕсли;
Конецпроцедуры   

// vd_190227 Добавлена
//
// Параметры:
//  СсылкаДок	 - СсылаДокумент  - Ссылка на документ
//  стрРеквизит	 - Строка 		  - Имя реквизита
//  сзДокументов - СписокЗначений - Для оптимизации 
// 
// Возвращаемое значение:
//  Былево - Истина, если есть реквизит
//
Функция ОприделитьНаличиеРеквизита(СсылкаДок, стрРеквизит, сзДокументов = Неопределено)

	Если НЕ ЗначениеЗаполнено(СсылкаДок) ИЛИ НЕ ЗначениеЗаполнено(стрРеквизит) Тогда
		Возврат Ложь;
	КонецЕсли;

	Результат = Неопределено;
	типДок    = ТипЗнч(СсылкаДок);
	
	Если сзДокументов <> Неопределено Тогда
		Поиск = сзДокументов.НайтиПоЗначению(типДок);
		Если Поиск <> Неопределено Тогда
			Результат = Поиск.Пометка;
		КонецЕсли;		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Если СсылкаДок.Метаданные().Реквизиты.Найти(стрРеквизит) = Неопределено Тогда
			Результат = Ложь;
		Иначе
			Результат = Истина;
		КонецЕсли;
		сзДокументов.Добавить(типДок, ,Результат);		
	КонецЕсли;
		
	Возврат Результат;
КонецФункции


#КонецОбласти

#КонецОбласти

Функция СтатусыПартнеровИзНастроек()

	тзРезультат = Новый ТаблицаЗначений;
	тзРезультат.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	тзРезультат.Колонки.Добавить("Статус",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36))); // вынуждены использовать УникальныйИдентификатор как строку, чтобы такая ТЗ обрабатывалась в запросе
	тзСтатусы = СтатусыПартнеровВыгрузки();
	
	Для Каждого стзСтатусы Из тзСтатусы Цикл
		сзПартнерыСтауса = стзСтатусы.Партнеры;
		стрИдСтатуса = стзСтатусы.Идентификатор;
		Если сзПартнерыСтауса <> Неопределено Тогда
			Для Каждого ЭлементСЗ Из сзПартнерыСтауса Цикл
				СтрокаТ = тзРезультат.Добавить();
				СтрокаТ.Партнер = ЭлементСЗ.Значение;
				СтрокаТ.Статус  = стрИдСтатуса; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат тзРезультат;
	
КонецФункции 

Функция СтавкаНДСЧислом(Знач СтавкаНДС, НДСпоСтавкам4и2 = Ложь) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		
		Возврат ?(НДСпоСтавкам4и2, 0.02, 0.1);
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		
		Возврат ?(НДСпоСтавкам4и2, 0.04, 0.18);
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаВыгрузкиОрганизаций()

	стррЛитералы = Новый Структура("ИНН_ИПрочее,Соединение");
	Если гКонфигурация = "УТ_UA" Тогда
		стррЛитералы.ИНН_ИПрочее = "
			|	УчетнаяПолитикаОрганизацийСрезПоследних.ИННПлательщикаНДС КАК ИНН,
			|	УчетнаяПолитикаОрганизацийСрезПоследних.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельства,
			|	УчетнаяПолитикаОрганизацийСрезПоследних.ИнформацияОСтатусеПлательщикаНалогов КАК ИнформацияОСтатусеПлательщикаНалогов,
			|	"""" КАК КПП,
			|	"""" КАК ОГРН";
		стррЛитералы.Соединение = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
			|		ПО Организации.Ссылка = УчетнаяПолитикаОрганизацийСрезПоследних.Организация
			|";
	Иначе
		стррЛитералы.ИНН_ИПрочее = "
			|	СправочникОрганизации.ИНН КАК ИНН,
			|	СправочникОрганизации.КПП КАК КПП,
			|	СправочникОрганизации.ОГРН КАК ОГРН";
		стррЛитералы.Соединение = "";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	СправочникОрганизации.Наименование КАК Наименование,
		|	СправочникОрганизации.НаименованиеПолное КАК НаименованиеПолное,		
		|	СправочникОрганизации.Префикс КАК Префикс,
		|	[ИНН_ИПрочее]
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	ВТ_Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
		|		ПО Организации.Ссылка = СправочникОрганизации.Ссылка
		|		[Соединение]
		|
		|УПОРЯДОЧИТЬ ПО
		|	СправочникОрганизации.Наименование
		|";
		
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);   
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыборкиВидовКонтактнойИнформации()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип.Ссылка КАК ТипКИ,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель";

	Возврат ТекстЗапроса;
КонецФункции


//vd_180425 Запрос доработан для УТ_АП
Функция ТекстЗапросаОтбораСоглашений(ВключитьОтборПоОрганизациям)
	
	
	//vd_180622 Баг с НДС. Обьединил запросы из условий	
	//vd_180503 Оптимизация запроса.
	Если НЕ ИспользоватьПунктыРазгрузки ИЛИ (ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов) Тогда 
		
		// При ИспользоватьПунктыРазгрузки = Истина:
		// Если ИспользоватьКонтрагентов = Ложь, тогда используем Партнеров для Пуктов разгузки 
		// (В справочник МТ контрагенты - выгружаются Партнеры, а в справочник МТ ТорговыеТочки - выгружаются Пункты Разгрузки)
		
		//Это не совсем верно.
		Если ПоколениеКонфигурации(">=УТ_11.4.5.24") Тогда
			ЦенаВключаетНДС = "ЦенаВключаетНДС";
			ИспользоватьНДС = "ВЫБОР КОГДА ВТ_СоглашенияБезТорговыхТочек.ЦенаВключаетНДС ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ"; //vd_180713
		Иначе
			ЦенаВключаетНДС = "ЦенаВключаетНДС";
			ИспользоватьНДС = "ВЫБОР КОГДА ВТ_СоглашенияБезТорговыхТочек.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ"; //vd_180713
		Конецесли;
		 		
    	ТекстЗапроса = "ВЫБРАТЬ
    	               |	Соглашения.Ссылка КАК Ссылка,
    	               |	Соглашения.Номер КАК Номер,
    	               |	Соглашения.Дата КАК Дата,
    	               |	Соглашения.Типовое КАК Типовое,
    	               |	Соглашения.ВидЦен КАК ВидЦен,
    	               |	Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
    	               |	Соглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
    	               |	Соглашения.Наименование КАК Наименование,
    	               |	Соглашения.Организация КАК Организация,
    	               |	Соглашения.СегментПартнеров КАК СегментПартнеров,
    	               |	Соглашения.[ЦенаВключаетНДС] КАК [ЦенаВключаетНДС],
    	               |	Соглашения.Контрагент КАК Контрагент,
    	               |	Соглашения.Партнер КАК Партнер
    	               |ПОМЕСТИТЬ ВТ_СоглашенияБезТорговыхТочек
    	               |ИЗ
    	               |	Справочник.СоглашенияСКлиентами КАК Соглашения
    	               |ГДЕ
    	               |	НЕ Соглашения.ПометкаУдаления
    	               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
    	               |	И Соглашения.Типовое = ИСТИНА
    	               |	И Соглашения.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
    	               |
    	               |ОБЪЕДИНИТЬ ВСЕ
    	               |
    	               |ВЫБРАТЬ
    	               |	Соглашения.Ссылка,
    	               |	Соглашения.Номер,
    	               |	Соглашения.Дата,
    	               |	Соглашения.Типовое,
    	               |	Соглашения.ВидЦен,
    	               |	Соглашения.ДатаНачалаДействия,
    	               |	Соглашения.ДатаОкончанияДействия,
    	               |	Соглашения.Наименование,
    	               |	Соглашения.Организация,
    	               |	Соглашения.СегментПартнеров,
    	               |	Соглашения.[ЦенаВключаетНДС],
    	               |	Соглашения.Контрагент,
    	               |	Соглашения.Партнер
    	               |ИЗ
    	               |	Справочник.СоглашенияСКлиентами КАК Соглашения
    	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СегментыПартнеров КАК ВТ_СегментыПартнеров
    	               |		ПО Соглашения.СегментПартнеров = ВТ_СегментыПартнеров.Сегмент
    	               |ГДЕ
    	               |	НЕ Соглашения.ПометкаУдаления
    	               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
    	               |	И Соглашения.Типовое = ИСТИНА
    	               |
    	               |ОБЪЕДИНИТЬ ВСЕ
    	               |
    	               |ВЫБРАТЬ
    	               |	Соглашения.Ссылка,
    	               |	Соглашения.Номер,
    	               |	Соглашения.Дата,
    	               |	Соглашения.Типовое,
    	               |	Соглашения.ВидЦен,
    	               |	Соглашения.ДатаНачалаДействия,
    	               |	Соглашения.ДатаОкончанияДействия,
    	               |	Соглашения.Наименование,
    	               |	Соглашения.Организация,
    	               |	Соглашения.СегментПартнеров,
    	               |	Соглашения.[ЦенаВключаетНДС],
    	               |	Соглашения.Контрагент,
    	               |	Соглашения.Партнер
    	               |ИЗ
    	               |	Справочник.СоглашенияСКлиентами КАК Соглашения
    	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
    	               |		ПО Соглашения.Партнер = ВТ_Партнеры.Ссылка
    	               |ГДЕ
    	               |	НЕ Соглашения.ПометкаУдаления
    	               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
    	               |	И Соглашения.Типовое = ЛОЖЬ
    	               |;
    	               |
    	               |////////////////////////////////////////////////////////////////////////////////
    	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
    	               |	ВТ_СоглашенияБезТорговыхТочек.Ссылка КАК Ссылка,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Номер КАК Номер,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Дата КАК Дата,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Типовое КАК Типовое,
    	               |	ВТ_СоглашенияБезТорговыхТочек.ВидЦен КАК ВидЦен,
    	               |	ВТ_СоглашенияБезТорговыхТочек.ДатаНачалаДействия КАК ДатаНачалаДействия,
    	               |	ВТ_СоглашенияБезТорговыхТочек.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Наименование КАК Наименование,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Организация КАК Организация,
    	               |	ВТ_СоглашенияБезТорговыхТочек.СегментПартнеров КАК СегментПартнеров,
					   |	ВТ_СоглашенияБезТорговыхТочек.[ЦенаВключаетНДС] КАК [ЦенаВключаетНДС],
					   |	[ИспользоватьНДС] КАК ИспользоватьНДС,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Партнер КАК Партнер,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Контрагент КАК Контрагент,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Партнер КАК мтКлиент,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Контрагент КАК мтТорговаяТочка
    	               |ПОМЕСТИТЬ ВТ_Соглашения
    	               |ИЗ
    	               |	ВТ_СоглашенияБезТорговыхТочек КАК ВТ_СоглашенияБезТорговыхТочек";
		
		Если ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов Тогда
			ТекстЗапроса = ТекстЗапроса + "
					   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
		               |		ПО ВТ_СоглашенияБезТорговыхТочек.Партнер = ВТ_ПунктыРазгрузки.Клиент";
		КонецЕсли;					
 
		Если ВключитьОтборПоОрганизациям Тогда
			ТекстЗапроса = ТекстЗапроса + " 
					   |ГДЕ ВТ_СоглашенияБезТорговыхТочек.Организация В (&Организации)";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ЦенаВключаетНДС]", ЦенаВключаетНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИспользоватьНДС]", ЦенаВключаетНДС);
												  
	ИначеЕсли ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов Тогда
		
		// Если ИспользоватьКонтрагентов = Истина, тогда используем Контрагентов для Пуктов разгузки 
		//(В справочник МТ контрагенты - выгружаются Контрагенты, а в справочник МТ ТорговыеТочки - выгружаются Пункты Разгрузки)
		
		//НЕ реализовано. 
		//Выгружаем только индивидуальные соглашения и типовые без учета СегментПартнеров. 
		//(Для учета сегментов требуется доработать выгрузку справочника <CATALOG GUID="B08784C4-5B74-4685-88B5-A17EA105AE48" Comment="Справочник.Сегменты (*Сегменты)"> и табличной части справочника <CATALOG GUID="9450980F-FB59-47E3-BAE2-AA3C58441B1A" Comment="Справочник.Контрагенты (Партнеры)"> )
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Соглашения.Ссылка КАК Ссылка,
		               |	Соглашения.Номер КАК Номер,
		               |	Соглашения.Дата КАК Дата,
		               |	Соглашения.Типовое КАК Типовое,
		               |	Соглашения.ВидЦен КАК ВидЦен,
		               |	Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
		               |	Соглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		               |	Соглашения.Наименование КАК Наименование,
		               |	Соглашения.Организация КАК Организация,
		               |	Соглашения.СегментПартнеров КАК СегментПартнеров,
		               |	Соглашения.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	Соглашения.Контрагент КАК Контрагент,
		               |	Соглашения.Партнер КАК Партнер
		               |ПОМЕСТИТЬ ВТ_СоглашенияБезТорговыхТочек
		               |ИЗ
		               |	Справочник.СоглашенияСКлиентами КАК Соглашения
		               |ГДЕ
		               |	НЕ Соглашения.ПометкаУдаления
		               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		               |	И Соглашения.Типовое = ИСТИНА
		               |	И Соглашения.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Соглашения.Ссылка,
		               |	Соглашения.Номер,
		               |	Соглашения.Дата,
		               |	Соглашения.Типовое,
		               |	Соглашения.ВидЦен,
		               |	Соглашения.ДатаНачалаДействия,
		               |	Соглашения.ДатаОкончанияДействия,
		               |	Соглашения.Наименование,
		               |	Соглашения.Организация,
		               |	Соглашения.СегментПартнеров,
		               |	Соглашения.НалогообложениеНДС,
		               |	Соглашения.Контрагент,
		               |	Соглашения.Партнер
		               |ИЗ
		               |	Справочник.СоглашенияСКлиентами КАК Соглашения
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
		               |		ПО Соглашения.Контрагент = ВТ_Контрагенты.Ссылка
		               |ГДЕ
		               |	НЕ Соглашения.ПометкаУдаления
		               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		               |	И Соглашения.Типовое = ЛОЖЬ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_СоглашенияБезТорговыхТочек.Ссылка КАК Ссылка,
		               |	ВТ_СоглашенияБезТорговыхТочек.Номер КАК Номер,
		               |	ВТ_СоглашенияБезТорговыхТочек.Дата КАК Дата,
		               |	ВТ_СоглашенияБезТорговыхТочек.Типовое КАК Типовое,
		               |	ВТ_СоглашенияБезТорговыхТочек.ВидЦен КАК ВидЦен,
		               |	ВТ_СоглашенияБезТорговыхТочек.ДатаНачалаДействия КАК ДатаНачалаДействия,
		               |	ВТ_СоглашенияБезТорговыхТочек.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		               |	ВТ_СоглашенияБезТорговыхТочек.Наименование КАК Наименование,
		               |	ВТ_СоглашенияБезТорговыхТочек.Организация КАК Организация,
		               |	ВТ_СоглашенияБезТорговыхТочек.СегментПартнеров КАК СегментПартнеров,
		               |	ВТ_СоглашенияБезТорговыхТочек.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	ВТ_СоглашенияБезТорговыхТочек.Контрагент КАК мтКлиент,
		               |	ВТ_ПунктыРазгрузки.Ссылка КАК мтТорговаяТочка
		               |ПОМЕСТИТЬ ВТ_Соглашения
		               |ИЗ
		               |	ВТ_СоглашенияБезТорговыхТочек КАК ВТ_СоглашенияБезТорговыхТочек
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
		               |		ПО ВТ_СоглашенияБезТорговыхТочек.Партнер = ВТ_ПунктыРазгрузки.Клиент";
		
		Если ВключитьОтборПоОрганизациям Тогда
			ТекстЗапроса = ТекстЗапроса + "
					  |	ГДЕ ВТ_СоглашенияБезТорговыхТочек.Организация В (&Организации)";
		КонецЕсли;
		
	Иначе

		//Заглушка
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Соглашения.Ссылка КАК Ссылка,
		               |	Соглашения.Номер КАК Номер,
		               |	Соглашения.Дата КАК Дата,
		               |	Соглашения.Типовое КАК Типовое,
		               |	Соглашения.ВидЦен КАК ВидЦен,
		               |	Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
		               |	Соглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		               |	Соглашения.Наименование КАК Наименование,
		               |	Соглашения.Организация КАК Организация,
		               |	Соглашения.СегментПартнеров КАК СегментПартнеров,
		               |	Соглашения.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	Соглашения.Контрагент КАК Контрагент,
		               |	Соглашения.Партнер КАК Партнер
		               |ПОМЕСТИТЬ ВТ_СоглашенияБезТорговыхТочек
		               |ИЗ
		               |	Справочник.СоглашенияСКлиентами КАК Соглашения
		               |ГДЕ
		               |	ИСТИНА = ЛОЖЬ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_СоглашенияБезТорговыхТочек.Ссылка КАК Ссылка,
		               |	ВТ_СоглашенияБезТорговыхТочек.Номер КАК Номер,
		               |	ВТ_СоглашенияБезТорговыхТочек.Дата КАК Дата,
		               |	ВТ_СоглашенияБезТорговыхТочек.Типовое КАК Типовое,
		               |	ВТ_СоглашенияБезТорговыхТочек.ВидЦен КАК ВидЦен,
		               |	ВТ_СоглашенияБезТорговыхТочек.ДатаНачалаДействия КАК ДатаНачалаДействия,
		               |	ВТ_СоглашенияБезТорговыхТочек.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		               |	ВТ_СоглашенияБезТорговыхТочек.Наименование КАК Наименование,
		               |	ВТ_СоглашенияБезТорговыхТочек.Организация КАК Организация,
		               |	ВТ_СоглашенияБезТорговыхТочек.СегментПартнеров КАК СегментПартнеров,
		               |	ВТ_СоглашенияБезТорговыхТочек.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	ВТ_СоглашенияБезТорговыхТочек.Партнер КАК мтКлиент,
		               |	ВТ_СоглашенияБезТорговыхТочек.Ссылка КАК мтТорговаяТочка
		               |ПОМЕСТИТЬ ВТ_Соглашения
		               |ИЗ
		               |	ВТ_СоглашенияБезТорговыхТочек КАК ВТ_СоглашенияБезТорговыхТочек";

	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
					   |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
                       |	УНИЧТОЖИТЬ ВТ_СоглашенияБезТорговыхТочек";
	
	Возврат ТекстЗапроса;
	
КонецФункции 

//vd_180425 Доработан для УТ_АП и исправлена ошибка выгрузки договоров для версии <УТ_11.3
Функция ТекстЗапросаОтбораДоговоров(ВключитьОтборПоОрганизациям)
	
	Если ПоколениеКонфигурации(">=УТ_11.3") И гКонфигурация <> "УТ_АП" Тогда
		СтавкаНДС = "ДоговорыКонтрагентов.СтавкаНДС";
		ИспользоватьНДС = "ВЫБОР КОГДА ДоговорыКонтрагентов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) ТОГДА ЛОЖЬ КОГДА ДоговорыКонтрагентов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ"; //vd_180713
	ИначеЕсли гКонфигурация = "УТ_АП" Тогда
		СтавкаНДС = "ЛОЖЬ";
	КонецЕсли;
	
	
	Если НЕ ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов Тогда
		// используются Контрагенты и Партнеры. (В справочник МТ контрагенты - выгружаются Партнеры, а в справочник МТ ТорговыеТочки - выгружаются Контрагенты)   
		ТекстЗапроса = "
		   |ВЫБРАТЬ
           |	ДоговорыКонтрагентов.Ссылка,
           |	ДоговорыКонтрагентов.Номер,
           |	ДоговорыКонтрагентов.Наименование,
           |	ДоговорыКонтрагентов.Контрагент,
           |	ДоговорыКонтрагентов.Партнер,
           |	ДоговорыКонтрагентов.Партнер КАК мтКлиент,
           |	ДоговорыКонтрагентов.Контрагент КАК мтТорговаяТочка,
           |	ДоговорыКонтрагентов.Дата,
           |	ДоговорыКонтрагентов.ДатаНачалаДействия,
           |	ДоговорыКонтрагентов.ДатаОкончанияДействия,
           |	ДоговорыКонтрагентов.Организация,
           |	[СтавкаНДС] КАК СтавкаНДС,
		   |	[ИспользоватьНДС] КАК ИспользоватьНДС
		   |ПОМЕСТИТЬ ВТ_Договоры
           |ИЗ
           |	ВТ_Контрагенты КАК ВТ_Контрагенты
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
           |		ПО ВТ_Контрагенты.Ссылка = ДоговорыКонтрагентов.Контрагент
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
           |		ПО (ВТ_Партнеры.Ссылка = ДоговорыКонтрагентов.Партнер)
           |ГДЕ
           |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
           |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)"; 
		
	ИначеЕсли НЕ ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов Тогда   
		// Используются только Партнеры. (В справочник МТ контрагенты - выгружаются Партнеры, а в справочник МТ ТорговыеТочки - Пустой)
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка,
			|	ДоговорыКонтрагентов.Номер,
			|	ДоговорыКонтрагентов.Наименование,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,	
			|	ДоговорыКонтрагентов.Партнер,
            |	ДоговорыКонтрагентов.Партнер КАК мтКлиент,
            |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК мтТорговаяТочка,
			|	ДоговорыКонтрагентов.Дата,
			|	ДоговорыКонтрагентов.ДатаНачалаДействия,
			|	ДоговорыКонтрагентов.ДатаОкончанияДействия,
			|	ДоговорыКонтрагентов.Организация,
			|	[СтавкаНДС] КАК СтавкаНДС,
			|	[ИспользоватьНДС] КАК ИспользоватьНДС
			|ПОМЕСТИТЬ ВТ_Договоры
			|ИЗ
			|	ВТ_Партнеры КАК ВТ_Партнеры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|		ПО ВТ_Партнеры.Ссылка = ДоговорыКонтрагентов.Партнер
			|ГДЕ
			|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
			|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
			|";
		
	ИначеЕсли ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов Тогда
		
		// Если ИспользоватьКонтрагентов = Истина, тогда используем Контрагентов для Пуктов разгузки 
		//(В справочник МТ контрагенты - выгружаются Контрагенты, а в справочник МТ ТорговыеТочки - выгружаются Пункты Разгрузки)
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка,
		               |	ДоговорыКонтрагентов.Номер,
		               |	ДоговорыКонтрагентов.Наименование,
		               |	ДоговорыКонтрагентов.Контрагент,
		               |	ДоговорыКонтрагентов.Партнер,
           			   |	ДоговорыКонтрагентов.Контрагент КАК мтКлиент,
                       |	ВТ_ПунктыРазгрузки.Ссылка КАК мтТорговаяТочка,
		               |	ДоговорыКонтрагентов.Дата,
		               |	ДоговорыКонтрагентов.ДатаНачалаДействия,
		               |	ДоговорыКонтрагентов.ДатаОкончанияДействия,
		               |	ДоговорыКонтрагентов.Организация,
					   |	[СтавкаНДС] КАК СтавкаНДС,
					   |	[ИспользоватьНДС] КАК ИспользоватьНДС
		               |ПОМЕСТИТЬ ВТ_Договоры
		               |ИЗ
		               |	ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |		ПО ВТ_ПунктыРазгрузки.Клиент = ДоговорыКонтрагентов.Контрагент
		               |ГДЕ
		               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)"; 
	
		   
	ИначеЕсли ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов Тогда

		// Если ИспользоватьКонтрагентов = Ложь, тогда используем Партнеров для Пуктов разгузки   
		//(В справочник МТ контрагенты - выгружаются Партнеры, а в справочник МТ ТорговыеТочки - выгружаются Пункты Разгрузки)
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка,
		               |	ДоговорыКонтрагентов.Номер,
		               |	ДоговорыКонтрагентов.Наименование,
		               |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		               |	ДоговорыКонтрагентов.Партнер,
           			   |	ДоговорыКонтрагентов.Партнер КАК мтКлиент,
                       |	ВТ_ПунктыРазгрузки.Ссылка КАК мтТорговаяТочка,
		               |	ДоговорыКонтрагентов.Дата,
		               |	ДоговорыКонтрагентов.ДатаНачалаДействия,
		               |	ДоговорыКонтрагентов.ДатаОкончанияДействия,
		               |	ДоговорыКонтрагентов.Организация,
					   |	[СтавкаНДС] КАК СтавкаНДС,
					   |	[ИспользоватьНДС] КАК ИспользоватьНДС
		               |ПОМЕСТИТЬ ВТ_Договоры
		               |ИЗ
		               |	ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |		ПО ВТ_ПунктыРазгрузки.Клиент = ДоговорыКонтрагентов.Партнер
		               |ГДЕ
		               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)"; 

		
	КонецЕсли; 
	
	Если ВключитьОтборПоОрганизациям Тогда
		ТекстЗапроса = ТекстЗапроса + " И ДоговорыКонтрагентов.Организация В (&Организации)";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СтавкаНДС]", СтавкаНДС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИспользоватьНДС]", ИспользоватьНДС);
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаОтбораНоменклатуры()

	//((vd_190315
	//Было:
	//стррЛитералы = Новый Структура("НоменклатураВес,Валюта,ВалютаАлиас", "Номенклатура.Вес", "", "");
	//
	//Если ПоколениеКонфигурации(">=УТ_11.2") Тогда	
	//	стррЛитералы.НоменклатураВес = 
	//		"ВЫБОР
	//		|	КОГДА Номенклатура.ВесЗнаменатель > 0
	//		|		ТОГДА Номенклатура.ВесЧислитель / Номенклатура.ВесЗнаменатель
	//		|	ИНАЧЕ 0
	//		|КОНЕЦ";
	//КонецЕсли;
	//
	//
	//ТекстЗапроса = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	|	Номенклатура.Ссылка КАК Ссылка,
	//	|	[НоменклатураВес] КАК Вес,
	//	|	[Валюта]
	//	|	Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	//	|	Номенклатура.НаборУпаковок КАК НаборУпаковок,
	//	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//	|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	//	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	//	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	//	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	//	|	ВЫБОР
	//	|		КОГДА Номенклатура.НаборУпаковок = &ИндивидуальныйНаборУпаковок
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ИндивидуальныйНабор
	//	|ПОМЕСТИТЬ ВТ_Ассортимент
	//	|{ВЫБРАТЬ
	//	|	Ссылка.*,
	//	|	Вес,
	//	|	[ВалютаАлиас]
	//	|	ИспользоватьУпаковки,
	//	|	НаборУпаковок.*,
	//	|	ЕдиницаИзмерения.*,
	//	|	ЕдиницаИзмеренияНаименование,
	//	|	ТипНоменклатуры.*,
	//	|	ВидНоменклатуры.*,
	//	|	ПометкаУдаления,
	//	|	ИндивидуальныйНабор}
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК Номенклатура
	//	|ГДЕ
	//	|	НЕ Номенклатура.ЭтоГруппа
	//	|{ГДЕ
	//	|	Номенклатура.Ссылка.* КАК Номенклатура,
	//	|	[НоменклатураВес] КАК Вес,
	//	|	[Валюта]		
	//	|	Номенклатура.ИспользоватьУпаковки,
	//	|	Номенклатура.НаборУпаковок.*,
	//	|	Номенклатура.ЕдиницаИзмерения.*,
	//	|	Номенклатура.ЕдиницаИзмерения.Наименование,
	//	|	Номенклатура.ТипНоменклатуры.*,
	//	|	Номенклатура.ВидНоменклатуры.*,		
	//	|	Номенклатура.ПометкаУдаления,
	//	|	(ВЫБОР
	//	|			КОГДА Номенклатура.НаборУпаковок = &ИндивидуальныйНаборУпаковок
	//	|				ТОГДА ИСТИНА
	//	|			ИНАЧЕ ЛОЖЬ
	//	|		КОНЕЦ) КАК ИндивидуальныйНабор}
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Ссылка
	//	|";
	//ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);

ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Ассортимент
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|{ГДЕ
		|	Номенклатура.Ссылка.* КАК Номенклатура,
		|	Номенклатура.ВидНоменклатуры.*,
		|	Номенклатура.ГруппаДоступа.*,
		|	Номенклатура.ЦеноваяГруппа.*}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	//))vd_190315	
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВыборкиНоменклатуры()

Процедура ЗаменитьЛитералы(Шаблон, стррЛитералы)
	
	//(( gi_180306 // литералы в тексте запроса могут указываться в виде строки "[Литерал]" или "//[Литерал]"
	Если Найти(Шаблон, "//[") <> 0 Тогда 
	    стрНачалоВставки = "//[";
	Иначе
		стрНачалоВставки = "[";
	КонецЕсли; 
	//)) gi_180306
	
	Для Каждого Литерал Из стррЛитералы Цикл
		Шаблон = СтрЗаменить(Шаблон, стрНачалоВставки + Литерал.Ключ + "]", 
			?(Литерал.Значение <> Неопределено, Литерал.Значение, Литерал.Ключ)); // если значение литерала не указано, заменяем его на наименование литерала
	КонецЦикла
	
КонецПроцедуры

//vd_190315 Не используется
//Функция ТекстЗапросаВыгрузкиНоменклатуры()

//	стррЛитералы = Новый Структура("Весовой,Коэффициент,ВРезервеСоСкладаОстаток,РегистрНакопленияОстатков");
//	
//	Если ПоколениеКонфигурации("<УТ_11.2") Тогда
//		
//		стррЛитералы.Весовой = "
//			|	ВЫБОР
//			|		КОГДА ВТ_НоменклатураСклады.Номенклатура.Вес > 0
//			|			ТОГДА ИСТИНА
//			|		ИНАЧЕ ЛОЖЬ
//			|	КОНЕЦ";
//		стррЛитералы.Коэффициент = "ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1)";
//		
//		Если ПоколениеКонфигурации("<=УТ_11.1.2") Тогда
//			стррЛитералы.ВРезервеСоСкладаОстаток = "ВРезервеОстаток";
//		КонецЕсли;
//		
//	Иначе // УТ 11.2 и выше
//		
//		стррЛитералы.Весовой 	 = "ВТ_НоменклатураСклады.Номенклатура.ВесИспользовать";
//		стррЛитералы.Коэффициент = "
//			|	ЕСТЬNULL(ВЫБОР
//			|		КОГДА ЦеныНоменклатуры.Упаковка.Числитель = 0 ИЛИ ЦеныНоменклатуры.Упаковка.Знаменатель = 0
//			|			ТОГДА 1			
//			|		ИНАЧЕ ЦеныНоменклатуры.Упаковка.Числитель / ЦеныНоменклатуры.Упаковка.Знаменатель
//			|	КОНЕЦ, 1)"; // sd_171101 Исправление бага 35938
//		
//	КонецЕсли;
//	
//	Если РегистрОстатковТоваров = "СвободныеОстатки" Тогда
//		стррЛитералы.РегистрНакопленияОстатков = "СвободныеОстатки";
//	Иначе 
//		стррЛитералы.РегистрНакопленияОстатков 	= "ТоварыНаСкладах";
//		стррЛитералы.ВРезервеСоСкладаОстаток 	= "КОтгрузкеОстаток";
//	КонецЕсли;
//	
//	ТекстЗапроса = "
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ВТ_Ассортимент.Ссылка КАК Номенклатура
//		|ПОМЕСТИТЬ ВТ_НоменклатураСУчетомОстатка
//		|ИЗ
//		|	ВТ_Ассортимент
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
//		|		ПО ВТ_Ассортимент.Ссылка = СвободныеОстаткиТоваров.Номенклатура
//		|ГДЕ
//		|	ВЫБОР
//		|			КОГДА &ВыгружатьТоварыСНулевымОстатком
//		|				ТОГДА ИСТИНА
//		|			ИНАЧЕ ЕСТЬNULL(ВЫБОР
//		|						КОГДА &УчитыватьРезервы
//		|							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
//		|						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
//		|					КОНЕЦ, 0) > 0
//		|		КОНЕЦ
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Номенклатура
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_НоменклатураСУчетомОстатка.Номенклатура КАК Номенклатура,
//		|	ВТ_Склады.Ссылка КАК Склад
//		|ПОМЕСТИТЬ ВТ_НоменклатураСклады
//		|ИЗ
//		|	ВТ_НоменклатураСУчетомОстатка КАК ВТ_НоменклатураСУчетомОстатка,
//		|	ВТ_Склады КАК ВТ_Склады
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Номенклатура,
//		|	Склад
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_НоменклатураСклады.Номенклатура КАК Номенклатура,
//		|	ВТ_НоменклатураСклады.Склад КАК Склад,
//		|	ЕСТЬNULL(ВЫБОР
//		|			КОГДА &УчитыватьРезервы
//		|				ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
//		|			ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
//		|		КОНЕЦ, 0) КАК Остаток,
//		|	ВТ_НоменклатураСклады.Склад.Наименование КАК НаименованиеСклада,
//		|	ВЫБОР
//		|		КОГДА &РежимВыгрузкиКодов = ""КОД""
//		|			ТОГДА ВТ_НоменклатураСклады.Номенклатура.Код
//		|		КОГДА &РежимВыгрузкиКодов = ""АРТИКУЛ""
//		|			ТОГДА ВТ_НоменклатураСклады.Номенклатура.Артикул
//		|		ИНАЧЕ """"
//		|	КОНЕЦ КАК Код,
//		|	ВТ_НоменклатураСклады.Номенклатура.Наименование КАК Наименование,
//		|	ВТ_НоменклатураСклады.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
//		|	[Весовой] Как Весовой,
//		|	ВТ_НоменклатураСклады.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
//		//vd_181101 Добавлена ТоварныеКатегории
//		|	ВТ_НоменклатураСклады.Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория, 
//		|	ВТ_НоменклатураСклады.Номенклатура.СтавкаНДС КАК СтавкаНДС,
//		|	ВТ_НоменклатураСклады.Номенклатура.Описание КАК Описание,
//		|	ВТ_НоменклатураСклады.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
//		|	ВТ_НоменклатураСклады.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
//		|	ВЫБОР
//		//dm_180222 Было: КОГДА ВТ_НоменклатураСклады.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
//		|		КОГДА ВТ_НоменклатураСклады.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
//		|			ТОГДА ИСТИНА
//		|		ИНАЧЕ ЛОЖЬ
//		|	КОНЕЦ КАК ЭтоУслуга,
//		|	ВТ_НоменклатураСклады.Номенклатура.Родитель КАК Родитель,
//		|	ВЫБОР
//		|		КОГДА ВТ_НоменклатураСклады.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
//		|			ТОГДА ЛОЖЬ
//		|		ИНАЧЕ ИСТИНА
//		|	КОНЕЦ КАК УчетПоХарактеристикам,
//		|	ВЫБОР
//		|		КОГДА ВТ_НоменклатураСклады.Склад = &МобильныйСклад
//		|			ТОГДА ЕСТЬNULL(ВЫБОР
//		|						КОГДА &УчитыватьРезервы
//		|							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
//		|						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
//		|					КОНЕЦ, 0)
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК ОстатокМобСклада
//		|ИЗ
//		|	ВТ_НоменклатураСклады КАК ВТ_НоменклатураСклады
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
//		|		ПО (СвободныеОстаткиТоваров.Номенклатура = ВТ_НоменклатураСклады.Номенклатура)
//		|			И (СвободныеОстаткиТоваров.Склад = ВТ_НоменклатураСклады.Склад)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Номенклатура,
//		|	НаименованиеСклада
//		|ИТОГИ
//		|	СУММА(Остаток),
//		|	СУММА(ОстатокМобСклада)
//		|ПО
//		|	Номенклатура
//		|;
//		|
//		// gi_180525 - убрано
//		//|////////////////////////////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ
//		//|	ВидыЦен.Ссылка КАК ВидЦены   
//		//|ПОМЕСТИТЬ ВТ_ВидыЦен
//		//|ИЗ
//		//|	Справочник.ВидыЦен КАК ВидыЦен
//		//|ГДЕ
//		//|	ВидыЦен.Ссылка В(&ВидыЦен)
//		//|
//		//|ИНДЕКСИРОВАТЬ ПО
//		//|	ВидЦены
//		//|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_НоменклатураСУчетомОстатка.Номенклатура КАК Номенклатура,
//		|	ВТ_ВидыЦен.Ссылка КАК ВидЦены
//		|ПОМЕСТИТЬ ВТ_НоменклатураВидыЦен
//		|ИЗ
//		|	ВТ_НоменклатураСУчетомОстатка,
//		|	ВТ_ВидыЦен
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Номенклатура,
//		|	ВидЦены
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_НоменклатураВидыЦен.Номенклатура КАК Номенклатура,
//		|	ВТ_НоменклатураВидыЦен.ВидЦены КАК ВидЦены,
//		|	ВЫРАЗИТЬ(
//		|		ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / [Коэффициент] * ВЫБОР
//		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
//		|				ТОГДА КурсыВалют.КурсКратный * &КурсКратный
//		|				ИНАЧЕ 1
//		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
//		|	ВТ_НоменклатураВидыЦен.ВидЦены.Наименование КАК НаименованиеВидаЦены
//		|ИЗ
//		|	ВТ_НоменклатураВидыЦен КАК ВТ_НоменклатураВидыЦен
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ) КАК ЦеныНоменклатуры
//		|		ПО (ЦеныНоменклатуры.Номенклатура = ВТ_НоменклатураВидыЦен.Номенклатура)
//		|			И (ЦеныНоменклатуры.ВидЦены = ВТ_НоменклатураВидыЦен.ВидЦены)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК КурсыВалют
//		|		ПО КурсыВалют.Валюта = ЦеныНоменклатуры.Валюта
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Номенклатура,
//		|	НаименованиеВидаЦены
//		|ИТОГИ ПО
//		|	Номенклатура";	
//		
//	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции 

//vd_190322 Не используется
//Функция ТекстЗапросаПолученияХарактеристикНоменклатуры()

//	стррЛитералы = Новый Структура("Коэффициент,ВРезервеСоСкладаОстаток,РегистрНакопленияОстатков");
//	
//	Если ПоколениеКонфигурации("<УТ_11.2") Тогда
//		
//		стррЛитералы.Коэффициент = "ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1)";
//		
//		Если ПоколениеКонфигурации("<=УТ_11.1.2") Тогда
//			стррЛитералы.ВРезервеСоСкладаОстаток = "ВРезервеОстаток";
//		КонецЕсли;
//		
//	Иначе // УТ 11.2 и выше
//		
//		стррЛитералы.Коэффициент = "ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Числитель / ЦеныНоменклатуры.Упаковка.Знаменатель, 1)";
//		
//	КонецЕсли;
//	
//	Если РегистрОстатковТоваров = "СвободныеОстатки" Тогда 
//		стррЛитералы.РегистрНакопленияОстатков = "СвободныеОстатки";
//	Иначе 
//		стррЛитералы.РегистрНакопленияОстатков 	= "ТоварыНаСкладах";
//		стррЛитералы.ВРезервеСоСкладаОстаток 	= "КОтгрузкеОстаток";
//	КонецЕсли;
//	
//	ТекстЗапроса = "
//		|ВЫБРАТЬ
//		|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
//		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
//		|ПОМЕСТИТЬ ВТ_Характеристики
//		|ИЗ
//		|	ВТ_Ассортимент КАК ВТ_Ассортимент
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
//		|		ПО ВТ_Ассортимент.Ссылка = ХарактеристикиНоменклатуры.Владелец
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ВТ_Ассортимент.Ссылка,
//		|	ХарактеристикиНоменклатуры.Ссылка
//		|ИЗ
//		|	ВТ_Ассортимент КАК ВТ_Ассортимент
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
//		|		ПО ВТ_Ассортимент.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Номенклатура,
//		|	Характеристика
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ВТ_Характеристики.Номенклатура КАК Номенклатура,
//		|	ВТ_Характеристики.Характеристика КАК Характеристика
//		|ПОМЕСТИТЬ ВТ_НоменклатураСУчетомОстаткаХ
//		|ИЗ
//		|	ВТ_Характеристики КАК ВТ_Характеристики
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
//		|		ПО ВТ_Характеристики.Номенклатура = СвободныеОстаткиТоваров.Номенклатура
//		|		   И ВТ_Характеристики.Характеристика = СвободныеОстаткиТоваров.Характеристика 
//		|ГДЕ
//		|	ВЫБОР
//		|			КОГДА &ВыгружатьТоварыСНулевымОстатком
//		|				ТОГДА ИСТИНА
//		|			ИНАЧЕ ЕСТЬNULL(ВЫБОР
//		|						КОГДА &УчитыватьРезервы
//		|							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
//		|						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
//		|					КОНЕЦ, 0) > 0
//		|	КОНЕЦ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_НоменклатураСУчетомОстаткаХ.Номенклатура КАК Номенклатура,
//		|	ВТ_НоменклатураСУчетомОстаткаХ.Характеристика КАК Характеристика,
//		|	ВТ_Склады.Ссылка КАК Склад
//		|ПОМЕСТИТЬ ВТ_НоменклатураСкладыХ
//		|ИЗ
//		|	ВТ_НоменклатураСУчетомОстаткаХ КАК ВТ_НоменклатураСУчетомОстаткаХ,
//		|	ВТ_Склады КАК ВТ_Склады
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Номенклатура,
//		|	Характеристика,		
//		|	Склад
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_НоменклатураСкладыХ.Номенклатура КАК Номенклатура,
//		|	ВТ_НоменклатураСкладыХ.Характеристика КАК Характеристика,
//		|	ВТ_НоменклатураСкладыХ.Склад КАК Склад,
//		|	ЕСТЬNULL(ВЫБОР
//		|			КОГДА &УчитыватьРезервы
//		|				ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
//		|			ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
//		|		КОНЕЦ, 0) КАК Остаток,
//		|	ВТ_НоменклатураСкладыХ.Склад.Наименование КАК НаименованиеСклада,
//		|	ВТ_НоменклатураСкладыХ.Номенклатура.Наименование КАК Наименование,
//		|	ВТ_НоменклатураСкладыХ.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристики,
//		|	ВЫБОР
//		|		КОГДА ВТ_НоменклатураСкладыХ.Склад = &МобильныйСклад
//		|			ТОГДА ЕСТЬNULL(ВЫБОР
//		|						КОГДА &УчитыватьРезервы
//		|							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
//		|						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
//		|					КОНЕЦ, 0)
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК ОстатокМобСклада
//		|ИЗ
//		|	ВТ_НоменклатураСкладыХ КАК ВТ_НоменклатураСкладыХ
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
//		|		ПО (СвободныеОстаткиТоваров.Номенклатура = ВТ_НоменклатураСкладыХ.Номенклатура)
//		|			И (СвободныеОстаткиТоваров.Характеристика = ВТ_НоменклатураСкладыХ.Характеристика)
//		|			И (СвободныеОстаткиТоваров.Склад = ВТ_НоменклатураСкладыХ.Склад)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Номенклатура,
//		|	Характеристика,		
//		|	НаименованиеСклада
//		|ИТОГИ
//		|	СУММА(Остаток),
//		|	СУММА(ОстатокМобСклада)		
//		|ПО
//		|	Номенклатура,
//		|	Характеристика
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_НоменклатураСУчетомОстаткаХ.Номенклатура КАК Номенклатура,
//		|	ВТ_НоменклатураСУчетомОстаткаХ.Характеристика КАК Характеристика,
//		|	ВТ_ВидыЦен.Ссылка КАК ВидЦены
//		|ПОМЕСТИТЬ ВТ_НоменклатураВидыЦенХ
//		|ИЗ
//		|	ВТ_НоменклатураСУчетомОстаткаХ КАК ВТ_НоменклатураСУчетомОстаткаХ,
//		|	ВТ_ВидыЦен КАК ВТ_ВидыЦен
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Номенклатура,
//		|	Характеристика,
//		|	ВидЦены
//		|
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_НоменклатураВидыЦенХ.Номенклатура КАК Номенклатура,
//		|	ВТ_НоменклатураВидыЦенХ.Характеристика КАК Характеристика,
//		|	ВТ_НоменклатураВидыЦенХ.ВидЦены КАК ВидЦены,
//		|	ВЫРАЗИТЬ(		
//		|		ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / [Коэффициент] * ВЫБОР
//		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
//		|				ТОГДА КурсыВалют.КурсКратный * &КурсКратный
//		|				ИНАЧЕ 1
//		|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
//		|	ВТ_НоменклатураВидыЦенХ.ВидЦены.Наименование КАК НаименованиеВидаЦены
//		|ИЗ
//		|	ВТ_НоменклатураВидыЦенХ КАК ВТ_НоменклатураВидыЦенХ
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатуры
//		|		ПО  ЦеныНоменклатуры.Номенклатура = ВТ_НоменклатураВидыЦенХ.Номенклатура
//		|			И ЦеныНоменклатуры.Характеристика = ВТ_НоменклатураВидыЦенХ.Характеристика
//		|			И ЦеныНоменклатуры.ВидЦены = ВТ_НоменклатураВидыЦенХ.ВидЦены
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК КурсыВалют
//		|		ПО КурсыВалют.Валюта = ЦеныНоменклатуры.Валюта
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Номенклатура,
//		|	Характеристика,
//		|	НаименованиеВидаЦены
//		|ИТОГИ ПО
//		|	Номенклатура,
//		|	Характеристика
//		|";	
//		
//	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции 

//vd_190321 Запрос перенесен в ДанныеПоЕдиницамИзмеренияВыгрузки()
//Функция ТекстЗапросаВыборкиЕдиницИзмерения()

//	//стррЛитералы = Новый Структура("НоменклатураВес,УпаковкиЕдиницыИзмерения,УпаковкиКоэффициент,Упаковки,НоменклатураНаборУпаковок");
//	стррЛитералы = Новый Структура("НоменклатураВес,УпаковкиЕдиницыИзмерения,УпаковкиКоэффициент,Упаковки,НоменклатураНаборУпаковок,ИспользоватьУпаковки"); //dm_180524	
//	
//	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
//		
//		стррЛитералы.НоменклатураВес = 
//			"ВЫБОР
//			|	КОГДА Номенклатура.Ссылка.ВесЗнаменатель > 0
//			|		ТОГДА Номенклатура.Ссылка.ВесЧислитель / Номенклатура.Ссылка.ВесЗнаменатель
//			|	ИНАЧЕ 0
//			|КОНЕЦ";
//			
//		стррЛитералы.УпаковкиКоэффициент = 
//			"ВЫБОР
//			|	КОГДА Упаковки.Знаменатель > 0
//			|		ТОГДА Упаковки.Числитель / Упаковки.Знаменатель
//			|	ИНАЧЕ 0
//			|КОНЕЦ";
//		//стррЛитералы.УпаковкиКоэффициент		= "Упаковки.Числитель / Упаковки.Знаменатель";
//		стррЛитералы.Упаковки					= "УпаковкиЕдиницыИзмерения";
//		
//	Иначе // УТ 11.1
//		
//		стррЛитералы.УпаковкиКоэффициент		= "Упаковки.Коэффициент";
//		стррЛитералы.Упаковки					= "УпаковкиНоменклатуры";
//		стррЛитералы.НоменклатураВес 			= "Номенклатура.Вес";
//		стррЛитералы.УпаковкиЕдиницыИзмерения   = "ЕдиницыИзмерения";
//		
//	КонецЕсли;
//	
//	//vd_180504 Баг найденый Макеевым Дмитрием
//	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
//		стррЛитералы.НоменклатураНаборУпаковок = 
//			"И Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)";
//		стррЛитералы.ИспользоватьУпаковки = "Номенклатура.ИспользоватьУпаковки = Истина"; //dm_180524 
//	Иначе
//		стррЛитералы.НоменклатураНаборУпаковок = "";
//		стррЛитералы.ИспользоватьУпаковки = "ИСТИНА"; //dm_180524
//	КонецЕсли;        
//	
//	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
//		ТекстЗапроса = 
//			"ВЫБРАТЬ
//			|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
//			|	"""" КАК КодОКЕИ,
//			|	Номенклатура.ЕдиницаИзмеренияНаименование КАК Наименование,
//			|	1 КАК Коэффициент,
//			|	Номенклатура.Ссылка КАК Номенклатура,
//			|	[НоменклатураВес] Как Вес,
//			|	ЛОЖЬ КАК ЭтоНаборУпаковок,
//			|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
//			|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
//			|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
//			|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
//			|ИЗ
//			|	ВТ_Ассортимент КАК Номенклатура
//			|ГДЕ
//			|	(НЕ Номенклатура.ИспользоватьУпаковки
//			|			ИЛИ Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
//			|	И Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
//			|
//			//vd_180412 Баг 38261. Общий набор упаковок. Оптимизация запроса
//			//|ОБЪЕДИНИТЬ
//			|ОБЪЕДИНИТЬ ВСЕ 
//			|
//			|ВЫБРАТЬ
//			|	Упаковки.Ссылка,
//			|	"""",
//			|	Упаковки.Наименование,
//			|	[УпаковкиКоэффициент],
//			|	Упаковки.Владелец,
//			|	Упаковки.Вес,
//			|	ЛОЖЬ,
//			|	&ПустойНаборУпаковок,
//			|	Упаковки.ЕдиницаИзмерения,
//			|	ЛОЖЬ
//			|ИЗ
//			|	Справочник.[Упаковки] КАК Упаковки
//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК Номенклатура
//			|		ПО Упаковки.Владелец = Номенклатура.Ссылка
//			|ГДЕ
//			|	Номенклатура.ИспользоватьУпаковки
//			|	И Номенклатура.ИндивидуальныйНабор
//			|
//			//vd_180412 Баг 38261. Общий набор упаковок. Оптимизация запроса
//			//|ОБЪЕДИНИТЬ
//			|ОБЪЕДИНИТЬ ВСЕ 
//			|
//			|ВЫБРАТЬ
//			|	Упаковки.Ссылка,
//			|	"""",
//			|	Упаковки.Наименование,
//			|	[УпаковкиКоэффициент],
//			|	&ПустаяНоменклатура,
//			|	Упаковки.Вес,
//			|	ИСТИНА,
//			|	Упаковки.Владелец,
//			|	Упаковки.ЕдиницаИзмерения,
//			|	ЛОЖЬ
//			|ИЗ
//			|	Справочник.[Упаковки] КАК Упаковки
//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
//			|		ПО Упаковки.Владелец = НаборыУпаковок.Ссылка
//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК Номенклатура
//			|		ПО (НаборыУпаковок.Ссылка = Номенклатура.НаборУпаковок)
//			|ГДЕ
//			|	Номенклатура.ИспользоватьУпаковки
//			|	И НЕ Номенклатура.ИндивидуальныйНабор";
//		
//	Иначе // не используются упаковки номенклатуры
//		
//		ТекстЗапроса = 
//			"ВЫБРАТЬ
//			|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
//			|	"""" КАК КодОКЕИ,
//			|	Номенклатура.ЕдиницаИзмеренияНаименование КАК Наименование,
//			|	1 КАК Коэффициент,
//			|	Номенклатура.Ссылка КАК Номенклатура,
//			|	[НоменклатураВес] КАК Вес,
//			|	ЛОЖЬ КАК ЭтоНаборУпаковок,
//			|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
//			|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
//			|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
//			|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
//			|ИЗ
//			|	ВТ_Ассортимент КАК Номенклатура
//			|ГДЕ
//			|	Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)";
//		
//	КонецЕсли; // ПолучитьЗначениеКонстанты("ИспользоватьУпаковкиНоменклатуры")
//	
//	ТекстЗапроса = ТекстЗапроса + ";
//		|
//		|////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ЕдиницыБезКлассификаторов.Ссылка КАК Ссылка,
//		|	ЕдиницыБезКлассификаторов.КодОКЕИ КАК КодОКЕИ,
//		|	ЕдиницыБезКлассификаторов.Наименование КАК Наименование,
//		|	ЕдиницыБезКлассификаторов.Коэффициент КАК Коэффициент,
//		|	ЕдиницыБезКлассификаторов.Номенклатура КАК Номенклатура,
//		|	ЕдиницыБезКлассификаторов.Вес КАК Вес,
//		|	ЕдиницыБезКлассификаторов.ЭтоНаборУпаковок КАК ЭтоНаборУпаковок,
//		|	ЕдиницыБезКлассификаторов.ВладелецНаборУпаковок КАК ВладелецНаборУпаковок,
//		|	ЕдиницыБезКлассификаторов.Классификатор КАК Классификатор,
//		|	ЕдиницыБезКлассификаторов.ЭтоЕдиницаНоменклатуры КАК ЭтоЕдиницаНоменклатуры
//		|ИЗ
//		|	ЕдиницыБезКлассификаторов КАК ЕдиницыБезКлассификаторов
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	Классификатор.Ссылка,
//		|	Классификатор.Код,
//		|	Классификатор.Наименование,
//		|	1,
//		|	&ПустаяНоменклатура,
//		|	0,
//		|	ЛОЖЬ,
//		|	&ПустойНаборУпаковок,
//		|	&ПустойНаборУпаковок,
//		|	ЛОЖЬ КАК ЭтоЕдиницаНоменклатуры
//    	//vd_180412 Баг 38261. Общий набор упаковок. Оптимизация запроса
//		//|ИЗ
//		//|	Справочник.[УпаковкиЕдиницыИзмерения] КАК Классификатор
//		//|ГДЕ
//		//|	Классификатор.Ссылка В
//		//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		//|				ЕдиницыБезКлассификаторов.Классификатор
//		//|			ИЗ
//		//|				ЕдиницыБезКлассификаторов КАК ЕдиницыБезКлассификаторов)
//		|ИЗ
//		|	Справочник.[УпаковкиЕдиницыИзмерения] КАК ТАБ_Классификатор
//		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЕдиницыБезКлассификаторов КАК ТАБ_ЕдиницыБезКлассификаторов
//		|		ПО ТАБ_Классификатор.Ссылка = ТАБ_ЕдиницыБезКлассификаторов.Классификатор
//		|
//		//vd_180412 Баг 38261. Общий набор упаковок. Добавил еще одно обьединение.   
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	Классификатор.Ссылка,
//		|	Классификатор.Код,
//		|	Классификатор.Наименование,
//		|	1,
//		|	&ПустаяНоменклатура,
//		|	0,
//		|	ЛОЖЬ,
//		|	&ПустойНаборУпаковок,
//		|	&ПустойНаборУпаковок,
//		|	ЛОЖЬ КАК ЭтоЕдиницаНоменклатуры
//		|ИЗ
//		|	Справочник.[УпаковкиЕдиницыИзмерения] КАК ТАБ_Классификатор
//		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
//		|		(ВЫБРАТЬ
//		|			Номенклатура.ЕдиницаИзмерения КАК Классификатор
//		|		ИЗ
//		|			ВТ_Ассортимент КАК Номенклатура
//		|		ГДЕ
//		// dm_180524 добавил литерал, чтобы не возникала ошибка при выключенной опции "Использовать упаковки номенклатуры"
//		//|			Номенклатура.ИспользоватьУпаковки = Истина
//		|			[ИспользоватьУпаковки]
//		|			[НоменклатураНаборУпаковок]
//		//|			И Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
//		|			И Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
//		|		) КАК ТАБ_Асортимент
//		|		ПО ТАБ_Классификатор.Ссылка = ТАБ_Асортимент.Классификатор
//		|"; 
//		
//	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ТекстЗапросаВsборкиЕдиницИзмерения()

Функция ТекстЗапросаВыборкиГруппПартнеров()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Партнеры.ГруппаДоступа.Наименование КАК Наименование,
	|	Партнеры.ГруппаДоступа КАК Ссылка
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО ВТ_Партнеры.Ссылка = Партнеры.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
КонецФункции

//vd_181106 Не Используем
//Функция ТекстЗапросаВыборкиГруппНоменклатуры()

//	//vd_180601 Баг 38343 Добавлен параметр мГруппыНоменклатуры

//	//Старый запрос		   
//	//ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//	//           |	Номенклатура.Родитель КАК Родитель
//	//           |ПОМЕСТИТЬ РодителиТоваров
//	//           |ИЗ
//	//           |	Справочник.Номенклатура КАК Номенклатура
//	//           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
//	//           |		ПО Номенклатура.Ссылка = ВТ_Ассортимент.Ссылка
//	//           |;
//	//           |
//	//           |////////////////////////////////////////////////////////////////////////////////
//	//           |ВЫБРАТЬ
//	//           |	Номенклатура.Ссылка КАК Ссылка,
//	//           |	Номенклатура.Наименование КАК Наименование,
//	//           |	Номенклатура.Родитель КАК РодительЭл
//	//           |ИЗ
//	//           |	Справочник.Номенклатура КАК Номенклатура
//	//           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РодителиТоваров КАК РодителиТоваров
//	//           |		ПО Номенклатура.Ссылка = РодителиТоваров.Родитель
//	//           |ГДЕ
//	//           |	Номенклатура.ЭтоГруппа
//	//		   //|	И Номенклатура.Ссылка В(&мГруппыНоменклатуры)
//	//           |
//	//           |УПОРЯДОЧИТЬ ПО
//	//           |	Наименование
//	//           |ИТОГИ ПО
//	//           |	Ссылка ИЕРАРХИЯ";

//	
//	ТекстЗапроса = "ВЫБРАТЬ 
//	               |	Номенклатура.Ссылка КАК Ссылка,
//	               |	Номенклатура.Наименование КАК Наименование,
//	               |	Номенклатура.Родитель КАК РодительЭл
//	               |ИЗ
//	               |	Справочник.Номенклатура КАК Номенклатура
//	               |ГДЕ
//	               |	Номенклатура.ЭтоГруппа
//				   |	И Номенклатура.Ссылка В(&мГруппыНоменклатуры)
//	               |
//	               |УПОРЯДОЧИТЬ ПО
//	               |	Наименование
//	               |ИТОГИ ПО
//	               |	Ссылка ИЕРАРХИЯ"; 		   
//				   

//	Возврат ТекстЗапроса;
//	
//КонецФункции // ТекстЗапросаВыборкиГруппНоменклатуры()

//vd_181106 Не используем
//Функция ТекстЗапросаВыборкиВидовНоменклатуры()

//	//vd_180601 Баг 38343 Добавлен параметр мВидыНоменклатуры
//	
//	ТекстЗапроса = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	| ВидыНоменклатуры.Ссылка КАК Ссылка,
//	| ВидыНоменклатуры.Наименование КАК Наименование,
//	| ВидыНоменклатуры.Родитель.Ссылка КАК РодительЭл
//	|ИЗ
//	| Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
//	|ГДЕ
//    |	ВидыНоменклатуры.Ссылка В(&мВидыНоменклатуры)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	| Наименование
//	|АВТОУПОРЯДОЧИВАНИЕ";
//	
//	//Старый запрос
//	//ТекстЗапроса = 
//	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	//| ВидыНоменклатуры.Ссылка КАК Ссылка,
//	//| ВидыНоменклатуры.Наименование КАК Наименование,
//	//| ВидыНоменклатуры.Родитель.Ссылка КАК РодительЭл
//	//|ИЗ
//	//| Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
//	//|
//	//|УПОРЯДОЧИТЬ ПО
//	//| Наименование
//	//|АВТОУПОРЯДОЧИВАНИЕ";

//	Возврат ТекстЗапроса;
//КонецФункции 

Функция ТекстЗапросаВыборкиДокументовЗаказПокупателя(ОтборЗаказовПоПартнерамАгента)

	стррЛитералы = Новый Структура("ЗаказКлиентаТоварыВес,УсловиеОтбораЗаказа");		
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда 
		стррЛитералы.ЗаказКлиентаТоварыВес = 
			"ВЫБОР
			|	КОГДА ЗаказКлиентаТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|				КОГДА ЗаказКлиентаТовары.Номенклатура.ВесЗнаменатель = 0
			|					ТОГДА 0
			|				ИНАЧЕ ЗаказКлиентаТовары.Номенклатура.ВесЧислитель / ЗаказКлиентаТовары.Номенклатура.ВесЗнаменатель
			|			КОНЕЦ
			|	ИНАЧЕ ЗаказКлиентаТовары.Упаковка.Вес
			|КОНЕЦ";
			
	Иначе // УТ11.1
		стррЛитералы.ЗаказКлиентаТоварыВес = 
			"ВЫБОР
			|	КОГДА ЗаказКлиентаТовары.Упаковка.Вес = 0
			|	ТОГДА
			|		ЗаказКлиентаТовары.Номенклатура.Вес
			|	ИНАЧЕ ЗаказКлиентаТовары.Упаковка.Вес
			|КОНЕЦ";
			
	КонецЕсли;
	
	Если гКонфигурация = "УТ_АП"  Тогда 
		стррЛитералы.Вставить("ЗаказКлиентаТоварыКонтрагент");
		стррЛитералы.ЗаказКлиентаТоварыКонтрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьПунктыРазгрузки
			|			ТОГДА ЗаказКлиентаТовары.Ссылка.алкПунктРазгрузки
			|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Контрагент
			|	КОНЕЦ";
	Иначе 
		стррЛитералы.Вставить("ЗаказКлиентаТоварыКонтрагент");
		стррЛитералы.ЗаказКлиентаТоварыКонтрагент = "ЗаказКлиентаТовары.Ссылка.Контрагент";
	КонецЕсли;
	
	Если ОтборЗаказовПоПартнерамАгента Тогда 
		стррЛитералы.УсловиеОтбораЗаказа = "ЗаказКлиентаТовары.Ссылка.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )";
	Иначе
		стррЛитералы.УсловиеОтбораЗаказа = "ЗаказКлиентаТовары.Ссылка.Менеджер = &Агент"; // отбор по менеджеру в документе
	КонецЕсли; 
	
	//vd_180606 38810 Выгружать только проведенные заказы и перемещения. Добавлено условие проведенные
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТовары.Ссылка.Дата КАК Дата,
		|	ЗаказКлиентаТовары.Ссылка.Номер,
		|	ЗаказКлиентаТовары.Ссылка.Проведен,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ЗаказКлиентаТовары.Ссылка.Контрагент
		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Партнер
		|	КОНЕЦ КАК Клиент,
		|	[ЗаказКлиентаТоварыКонтрагент] КАК Контрагент,
		|	ЗаказКлиентаТовары.Ссылка.Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ЗаказКлиентаТовары.Ссылка.Договор
		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Соглашение
		|	КОНЕЦ КАК Соглашение,
		|	ЗаказКлиентаТовары.Ссылка.Валюта КАК Валюта,
		|	ЗаказКлиентаТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказКлиентаТовары.Склад,
		|	ЗаказКлиентаТовары.Ссылка.ФормаОплаты КАК ФормаОплаты,
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Характеристика,
		|	ЗаказКлиентаТовары.Упаковка,
		|	ЗаказКлиентаТовары.КоличествоУпаковок КАК Количество,
		|	ЗаказКлиентаТовары.ВидЦены,
		|	ЗаказКлиентаТовары.Цена,
		|	ЗаказКлиентаТовары.Сумма,
		|	ЗаказКлиентаТовары.СтавкаНДС,
		|	ЗаказКлиентаТовары.СуммаНДС,
		|	ЗаказКлиентаТовары.СуммаСНДС,
		|	ЗаказКлиентаТовары.ПроцентРучнойСкидки,
		|	ЗаказКлиентаТовары.СуммаРучнойСкидки,
		|	[ЗаказКлиентаТоварыВес] КАК Вес,
		|	ЗаказКлиентаТовары.Ссылка.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	ЗаказКлиентаТовары.Ссылка.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказКлиентаТовары.Ссылка.ПометкаУдаления
		|	И ЗаказКлиентаТовары.Ссылка.Проведен
		|	И [УсловиеОтбораЗаказа]
		|ИТОГИ
		|	СУММА(Вес)
		|ПО
		|	Ссылка";
		
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
		
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаВыборкиДокументовРеализация()
	
	стррЛитералы = Новый Структура("РеализацияТоваровВес");		
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		стррЛитералы.РеализацияТоваровВес = 
			"ВЫБОР
			|	КОГДА РеализацияТоваровУслугТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|				КОГДА РеализацияТоваровУслугТовары.Номенклатура.ВесЗнаменатель = 0
			|					ТОГДА 0
			|				ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ВесЧислитель / РеализацияТоваровУслугТовары.Номенклатура.ВесЗнаменатель
			|			КОНЕЦ
			|	ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес
			|КОНЕЦ";
			
	Иначе // УТ11.1
		стррЛитералы.РеализацияТоваровВес = 
			"ВЫБОР
			|	КОГДА РеализацияТоваровУслугТовары.Упаковка.Вес = 0
			|	ТОГДА
			|		РеализацияТоваровУслугТовары.Номенклатура.Вес
			|	ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес
			|КОНЕЦ";
			
	КонецЕсли;
	
	Если гКонфигурация = "УТ_АП"  Тогда 
		стррЛитералы.Вставить("РеализацияТоваровКонтрагент");
		стррЛитералы.РеализацияТоваровКонтрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьПунктыРазгрузки
			|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.алкПунктРазгрузки
			|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Контрагент
			|	КОНЕЦ";
	Иначе 
		стррЛитералы.Вставить("РеализацияТоваровКонтрагент");
		стррЛитералы.РеализацияТоваровКонтрагент = "РеализацияТоваровУслугТовары.Ссылка.Контрагент";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыРеализация.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыПродажи
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		ВЫРАЗИТЬ(РеализацияТоваровУслуг.ЗаказКлиента КАК Документ.ЗаказКлиента) В (&СписокЗаказов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Менеджер = &Агент) КАК ДокументыРеализация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПродажи.Ссылка КАК Ссылка,
		|	ДокументыПродажи.Ссылка.Дата КАК Дата,
		|	ДокументыПродажи.Ссылка.Номер,
		|	ДокументыПродажи.Ссылка.Проведен,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ДокументыПродажи.Ссылка.Контрагент
		|		ИНАЧЕ ДокументыПродажи.Ссылка.Партнер
		|	КОНЕЦ КАК Клиент,
		|	[РеализацияТоваровКонтрагент] КАК Контрагент,
		|	ДокументыПродажи.Ссылка.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ДокументыПродажи.Ссылка.Договор
		|		ИНАЧЕ ДокументыПродажи.Ссылка.Соглашение
		|	КОНЕЦ КАК Соглашение,
		|	ДокументыПродажи.Ссылка.Валюта КАК Валюта,
		|	ДокументыПродажи.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ДокументыПродажи.Ссылка.Склад КАК Склад,
		|	ДокументыПродажи.Ссылка.ФормаОплаты КАК ФормаОплаты,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика,
		|	РеализацияТоваровУслугТовары.Упаковка,
		|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК Количество,
		|	РеализацияТоваровУслугТовары.ВидЦены,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС,
		|	РеализацияТоваровУслугТовары.СуммаСНДС,
		|	РеализацияТоваровУслугТовары.ПроцентРучнойСкидки,
		|	РеализацияТоваровУслугТовары.СуммаРучнойСкидки,
		|	[РеализацияТоваровВес] КАК Вес,
		|	РеализацияТоваровУслугТовары.Ссылка.Комментарий,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ДокументЗаказ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПродажи КАК ДокументыПродажи
		|		ПО (ДокументыПродажи.Ссылка = РеализацияТоваровУслугТовары.Ссылка)
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
		|ИТОГИ
		|	СУММА(Вес)
		|ПО
		|	Ссылка";
	
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыборкиДокументовПеремещение() // sd_22082017
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	НЕ ПеремещениеТоваров.ПометкаУдаления
	               |	И ПеремещениеТоваров.Проведен
	               |	И ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (ПеремещениеТоваров.СкладПолучатель = &Склад
	               |			ИЛИ ПеремещениеТоваров.СкладОтправитель = &Склад)
	               |	И ПеремещениеТоваров.Статус = &Статус
				   |	И ПеремещениеТоваров.Ответственный = &Агент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПеремещениеТоваров.МоментВремени
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//vd_190228 Не используется
//Функция ТекстЗапросаПоВзаиморасчетам(СпособРасчета)
//	
//	Если Не ЗначениеЗаполнено(СпособРасчета) Или (СпособРасчета = "НеУчитывать")  Тогда
//		
//			Если ПоколениеКонфигурации(">УТ_11.2") Тогда
//			
//			ТекстЗапроса = "
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ДанныеДокумента.Ссылка КАК Ссылка,
//			|	ДанныеДокумента.Статус КАК Статус,
//			|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//			|	ДанныеДокумента.Партнер КАК Партнер,
//			|	ДанныеДокумента.Соглашение КАК Соглашение,
//			|	ДанныеДокумента.Договор КАК Договор,
//			|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//			|	ДанныеДокумента.Валюта КАК Валюта,
//			|	ДанныеДокумента.Организация КАК Организация,
//			|	ДанныеДокумента.Контрагент КАК Контрагент,
//			|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
//			|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
//			|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
//			|ПОМЕСТИТЬ ОбъектыРасчетов
//			|ИЗ
//			|	Документ.ЗаказКлиента КАК ДанныеДокумента
//			|
//			|ОБЪЕДИНИТЬ ВСЕ
//			|
//			|ВЫБРАТЬ
//			|	ДанныеДокумента.Ссылка КАК Ссылка,
//			|	ДанныеДокумента.Статус КАК Статус,
//			|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//			|	ДанныеДокумента.Партнер КАК Партнер,
//			|	ДанныеДокумента.Соглашение КАК Соглашение,
//			|	ДанныеДокумента.Договор КАК Договор,
//			|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//			|	ДанныеДокумента.Валюта КАК Валюта,
//			|	ДанныеДокумента.Организация КАК Организация,
//			|	ДанныеДокумента.Контрагент КАК Контрагент,
//			|	ДанныеДокумента.СуммаЗамены КАК СуммаДокумента,
//			|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
//			|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
//			|ИЗ
//			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
//			|
//			|ОБЪЕДИНИТЬ ВСЕ
//			|
//			|ВЫБРАТЬ
//			|	ДанныеДокумента.Ссылка КАК Ссылка,
//			|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
//			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
//			|	ИНАЧЕ
//			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
//			|	КОНЕЦ КАК Статус,
//			|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//			|	ДанныеДокумента.Партнер КАК Партнер,
//			|	ДанныеДокумента.Соглашение КАК Соглашение,
//			|	ДанныеДокумента.Договор КАК Договор,
//			|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//			|	ДанныеДокумента.Валюта КАК Валюта,
//			|	ДанныеДокумента.Организация КАК Организация,
//			|	ДанныеДокумента.Контрагент КАК Контрагент,
//			|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаДокумента,
//			|	0 КАК СуммаАвансаДоОбеспечения,
//			// |	ДанныеДокумента.СуммаПредоплаты КАК СуммаПредоплатыДоОтгрузки
//			|	[СуммаПредоплаты] КАК СуммаПредоплатыДоОтгрузки
//			|ИЗ 
//			// |	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
//			|	[РеализацияТоваровУслуг]
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//			|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
//			|			ТОГДА РасчетыСКлиентами.ЗаказКлиента
//			|		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.Договор
//			|	КОНЕЦ КАК Договор,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
//			|			ТОГДА ИСТИНА
//			|		ИНАЧЕ ЛОЖЬ
//			|	КОНЕЦ КАК РасчетыПоДоговору,
//			|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
//			|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//			|	РасчетыСКлиентами.Валюта КАК Валюта,
//			|	АналитикаПоПартнерам.Партнер КАК Партнер,
//			|	АналитикаПоПартнерам.Организация КАК Организация,
//			|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
//			|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК ДолгКлиента,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
//			|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК НашДолг,
//			|	РасчетыСКлиентами.СуммаКонечныйОстаток КАК СальдоДолга,
//			|	РасчетыСКлиентами.ОплачиваетсяКонечныйОстаток КАК Оплачивается,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток > 0
//			|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК КОплате,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток < 0
//			|			И (РасчетыСКлиентами.ЗаказКлиента Ссылка Документ.ВозвратТоваровОтКлиента
//			|				ИЛИ РасчетыСКлиентами.ЗаказКлиента Ссылка Документ.ЗаявкаНаВозвратТоваровОтКлиента)
//			|			ТОГДА -РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК КВозвратуДС,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.КОтгрузкеКонечныйОстаток < 0
//			|			ТОГДА -РасчетыСКлиентами.КОтгрузкеКонечныйОстаток
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК КОтгрузке,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток > 0
//			|			ТОГДА РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК Отгружается,
//			|	ВЫБОР
//			|		КОГДА ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0) > 0
//			|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|					< ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения,0)
//			|			ТОГДА Заказ.СуммаАвансаДоОбеспечения - (РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК АвансДоОбеспечения,
//			|	ВЫБОР
//			|		КОГДА ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
//			|				И ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0) > 0
//			|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|					< ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
//			|			ТОГДА Заказ.СуммаПредоплатыДоОтгрузки
//			|		КОГДА ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
//			|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|					< ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
//			|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|					>= ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
//			|			ТОГДА Заказ.СуммаПредоплатыДоОтгрузки + Заказ.СуммаАвансаДоОбеспечения - (РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК ПредоплатаДоОтгрузки,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
//			|				И Заказ.Ссылка ЕСТЬ NULL 
//			|				И РасчетыСКлиентами.КОплатеКонечныйОстаток > 0
//			|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|		КОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
//			|				- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
//			|			И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток <=
//			|				ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
//			|			ТОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
//			|					- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0)
//			|		КОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
//			|				- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
//			|			И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|				> ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
//			|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК КредитПослеОтгрузки
//			|	
//			|ИЗ
//			|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, ) КАК РасчетыСКлиентами
//			|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
//			|		ПО РасчетыСКлиентами.ЗаказКлиента = Заказ.Ссылка
//			|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
//			|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
//			|ГДЕ
//			|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
//			|	И АналитикаПоПартнерам.Организация В (&СписокОрганизаций)
//			|	И АналитикаПоПартнерам.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
//			|	И (РасчетыСКлиентами.КОплатеКонечныйОстаток <> 0 
//			|			ИЛИ РасчетыСКлиентами.КОтгрузкеКонечныйОстаток <> 0
//			|			ИЛИ РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток <> 0)
//			|
//			|ОБЪЕДИНИТЬ ВСЕ
//			|
//			|ВЫБРАТЬ
//			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//			|	ОбъектыРасчетов.Ссылка КАК ЗаказКлиента,
//			|	ВЫБОР
//			|		КОГДА ОбъектыРасчетов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
//			|			ТОГДА ОбъектыРасчетов.Ссылка
//			|		ИНАЧЕ ОбъектыРасчетов.Договор
//			|	КОНЕЦ КАК Договор,
//			|	ВЫБОР
//			|		КОГДА ОбъектыРасчетов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
//			|			ТОГДА ИСТИНА
//			|		ИНАЧЕ ЛОЖЬ
//			|	КОНЕЦ КАК РасчетыПоДоговору,
//			|	ОбъектыРасчетов.Соглашение КАК Соглашение,
//			|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//			|	ОбъектыРасчетов.Валюта КАК Валюта,
//			|	ОбъектыРасчетов.Партнер КАК Партнер,
//			|	ОбъектыРасчетов.Организация КАК Организация,
//			|	ОбъектыРасчетов.Контрагент КАК Контрагент,
//			|	ВЫБОР
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.СуммаКонечныйОстаток, 0) > 0
//			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.СуммаКонечныйОстаток, 0)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК ДолгКлиента,
//			|	ВЫБОР
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.СуммаКонечныйОстаток, 0) < 0
//			|			ТОГДА ЕСТЬNULL(-РасчетыСКлиентами.СуммаКонечныйОстаток, 0)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК НашДолг,
//			|	ЕСТЬNULL(РасчетыСКлиентами.СуммаКонечныйОстаток, 0) КАК СальдоДолга,
//			|	ЕСТЬNULL(РасчетыСКлиентами.ОплачиваетсяКонечныйОстаток, 0) КАК Оплачивается,
//			|	ВЫБОР
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0) > 0
//			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0)
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0) = 0 И ЕСТЬNULL(РасчетыСКлиентами.КОплатеОборот, 0) = 0
//			|			ТОГДА ОбъектыРасчетов.СуммаДокумента
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0) < 0
//			|			ТОГДА ОбъектыРасчетов.СуммаДокумента + ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК КОплате,
//			|	ВЫБОР
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < 0
//			|			И ОбъектыРасчетов.Ссылка Ссылка Документ.ЗаявкаНаВозвратТоваровОтКлиента
//			|			ТОГДА ЕСТЬNULL(-РасчетыСКлиентами.КОплатеКонечныйОстаток,0)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК КВозвратуДС,
//			|	ВЫБОР
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОтгрузкеКонечныйОстаток,0) < 0
//			|			ТОГДА ЕСТЬNULL(-РасчетыСКлиентами.КОтгрузкеКонечныйОстаток,0)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК КОтгрузке,
//			|	ВЫБОР
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток,0) > 0
//			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток,0)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК Отгружается,
//			|	ВЫБОР
//			|		КОГДА ОбъектыРасчетов.СуммаАвансаДоОбеспечения > 0
//			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < ОбъектыРасчетов.СуммаАвансаДоОбеспечения
//			|			ТОГДА ОбъектыРасчетов.СуммаАвансаДоОбеспечения - (ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0))
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК АвансДоОбеспечения,
//			|	ВЫБОР
//			|		КОГДА ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки > 0
//			|				И ОбъектыРасчетов.СуммаАвансаДоОбеспечения > 0
//			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < ОбъектыРасчетов.СуммаАвансаДоОбеспечения
//			|			ТОГДА ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки
//			|		КОГДА ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки > 0
//			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки + ОбъектыРасчетов.СуммаАвансаДоОбеспечения
//			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход, 0)- ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) >= ОбъектыРасчетов.СуммаАвансаДоОбеспечения
//			|			ТОГДА ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки + ОбъектыРасчетов.СуммаАвансаДоОбеспечения - (ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0))
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК ПредоплатаДоОтгрузки,
//			|	ВЫБОР
//			|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
//			|				И ОбъектыРасчетов.Ссылка ЕСТЬ NULL 
//			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) > 0
//			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0)
//			|		КОГДА ОбъектыРасчетов.СуммаДокумента - (ОбъектыРасчетов.СуммаАвансаДоОбеспечения + ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки) > 0
//			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < ОбъектыРасчетов.СуммаДокумента - (ОбъектыРасчетов.СуммаАвансаДоОбеспечения + ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки)
//			|			ТОГДА ОбъектыРасчетов.СуммаДокумента - (ОбъектыРасчетов.СуммаАвансаДоОбеспечения + ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки)
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ОбъектыРасчетов.СуммаАвансаДоОбеспечения - ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки > 0
//			|			И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) <= ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки + ОбъектыРасчетов.СуммаАвансаДоОбеспечения
//			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ОбъектыРасчетов.СуммаАвансаДоОбеспечения - ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки
//			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ОбъектыРасчетов.СуммаАвансаДоОбеспечения - ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки > 0
//			|			И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) > ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки + ОбъектыРасчетов.СуммаАвансаДоОбеспечения
//			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0)
//			|		ИНАЧЕ 0
//			|	КОНЕЦ КАК КредитПослеОтгрузки
//			|
//			|ИЗ
//			|	ОбъектыРасчетов КАК ОбъектыРасчетов
//			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты() КАК РасчетыСКлиентами
//			|		ПО РасчетыСКлиентами.ЗаказКлиента = ОбъектыРасчетов.Ссылка
//			|ГДЕ
//			|	(ОбъектыРасчетов.Ссылка ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
//			|		ИЛИ ОбъектыРасчетов.Ссылка ССЫЛКА Документ.ЗаказКлиента)
//			|	И ОбъектыРасчетов.СуммаДокумента <> 0
//			|";		
//			
//			//(( sk_181213 Изменяем способ расчета поля "СуммаПредоплатыДоОтгрузки" в документе "РеализацияТоваровУслуг" (MOD-191) 
//			// В УТ 11.4.6.166 помечен на удаление реквизит "СуммаПредоплаты" в документе "РеализацияТоваровУслуг"
//			Если ПоколениеКонфигурации(">УТ_11.4.5")  Тогда
//				стрСуммаПредоплаты = 
//					"	ВЫБОР
//					|		КОГДА РасчетыСКлиентами.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)
//					|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплате, 0)
//					|		КОНЕЦ";
//				
//				стрРеализацияТоваровУслуг =
//					"	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
//					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
//					|		ПО РасчетыСКлиентами.ЗаказКлиента = ДанныеДокумента.Ссылка";
//			Иначе
//				стрСуммаПредоплаты 		  = "	ДанныеДокумента.СуммаПредоплаты"; 	
//				стрРеализацияТоваровУслуг =	"	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента";
//			КонецЕсли;
//			 
//			стррЛитералы = Новый Структура;
//			стррЛитералы.Вставить("СуммаПредоплаты", 	    стрСуммаПредоплаты);
//			стррЛитералы.Вставить("РеализацияТоваровУслуг", стрРеализацияТоваровУслуг);
//			ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
//			//)) sk_181213
//			
//		ИначеЕсли ПоколениеКонфигурации("=УТ_11.2") Тогда
//			
//			ТекстЗапроса = 	
//				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	ДанныеДокумента.Ссылка КАК Ссылка,
//				|	ДанныеДокумента.Статус КАК Статус,
//				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//				|	ДанныеДокумента.Партнер КАК Партнер,
//				|	ДанныеДокумента.Соглашение КАК Соглашение,
//				|	ДанныеДокумента.Договор КАК Договор,
//				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//				|	ДанныеДокумента.Валюта КАК Валюта,
//				|	ДанныеДокумента.Организация КАК Организация,
//				|	ДанныеДокумента.Контрагент КАК Контрагент,
//				|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
//				|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
//				|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
//				|ПОМЕСТИТЬ ОбъектыРасчетов
//				|ИЗ
//				|	Документ.ЗаказКлиента КАК ДанныеДокумента
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	ДанныеДокумента.Ссылка КАК Ссылка,
//				|	ДанныеДокумента.Статус КАК Статус,
//				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//				|	ДанныеДокумента.Партнер КАК Партнер,
//				|	ДанныеДокумента.Соглашение КАК Соглашение,
//				|	ДанныеДокумента.Договор КАК Договор,
//				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//				|	ДанныеДокумента.Валюта КАК Валюта,
//				|	ДанныеДокумента.Организация КАК Организация,
//				|	ДанныеДокумента.Контрагент КАК Контрагент,
//				|	ДанныеДокумента.СуммаЗамены КАК СуммаДокумента,
//				|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
//				|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
//				|ИЗ
//				|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	ДанныеДокумента.Ссылка КАК Ссылка,
//				|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
//				|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
//				|	ИНАЧЕ
//				|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
//				|	КОНЕЦ КАК Статус,
//				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//				|	ДанныеДокумента.Партнер КАК Партнер,
//				|	ДанныеДокумента.Соглашение КАК Соглашение,
//				|	ДанныеДокумента.Договор КАК Договор,
//				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//				|	ДанныеДокумента.Валюта КАК Валюта,
//				|	ДанныеДокумента.Организация КАК Организация,
//				|	ДанныеДокумента.Контрагент КАК Контрагент,
//				|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаДокумента,
//				|	0 КАК СуммаАвансаДоОбеспечения,
//				|	ДанныеДокумента.СуммаПредоплаты КАК СуммаПредоплатыДоОтгрузки
//				|ИЗ
//				|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
//				|;
//				|
//				|////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//				|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
//				|	ВЫБОР
//				|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
//				|			ТОГДА ИСТИНА
//				|		ИНАЧЕ ЛОЖЬ
//				|	КОНЕЦ КАК РасчетыПоДоговору,
//				|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
//				|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//				|	РасчетыСКлиентами.Валюта КАК Валюта,
//				|	АналитикаПоПартнерам.Партнер КАК Партнер,
//				|	АналитикаПоПартнерам.Организация КАК Организация,
//				|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
//				|	АналитикаПоПартнерам.Договор КАК Договор,
//				|	ВЫБОР
//				|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
//				|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
//				|		ИНАЧЕ 0
//				|	КОНЕЦ КАК ДолгКлиента,
//				|	ВЫБОР
//				|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
//				|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
//				|		ИНАЧЕ 0
//				|	КОНЕЦ КАК НашДолг
//				|ИЗ
//				|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, ) КАК РасчетыСКлиентами
//				|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
//				|		ПО РасчетыСКлиентами.ЗаказКлиента = Заказ.Ссылка
//				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
//				|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
//				|ГДЕ
//				|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
//				|	И АналитикаПоПартнерам.Организация В (&СписокОрганизаций)
//				|	И АналитикаПоПартнерам.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
//				|	И (РасчетыСКлиентами.КОплатеКонечныйОстаток <> 0 
//				|			ИЛИ РасчетыСКлиентами.КОтгрузкеКонечныйОстаток <> 0
//				|			ИЛИ РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток <> 0
//				|			ИЛИ РасчетыСКлиентами.СуммаКонечныйОстаток <> 0)
//				|";
//				
//		Иначе //ПоколениеКонфигурации("=УТ_11.1")
//			
//			ТекстЗапроса = 	
//				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	ДанныеДокумента.Ссылка КАК Ссылка,
//				|	ДанныеДокумента.Статус КАК Статус,
//				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//				|	ДанныеДокумента.Партнер КАК Партнер,
//				|	ДанныеДокумента.Соглашение КАК Соглашение,
//				//|	ДанныеДокумента.Договор КАК Договор,
//				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//				|	ДанныеДокумента.Валюта КАК Валюта,
//				|	ДанныеДокумента.Организация КАК Организация,
//				|	ДанныеДокумента.Контрагент КАК Контрагент,
//				|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
//				|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
//				|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
//				|ПОМЕСТИТЬ ОбъектыРасчетов
//				|ИЗ
//				|	Документ.ЗаказКлиента КАК ДанныеДокумента
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	ДанныеДокумента.Ссылка КАК Ссылка,
//				|	ДанныеДокумента.Статус КАК Статус,
//				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//				|	ДанныеДокумента.Партнер КАК Партнер,
//				|	ДанныеДокумента.Соглашение КАК Соглашение,
//				//|	ДанныеДокумента.Договор КАК Договор,
//				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//				|	ДанныеДокумента.Валюта КАК Валюта,
//				|	ДанныеДокумента.Организация КАК Организация,
//				|	ДанныеДокумента.Контрагент КАК Контрагент,
//				|	ДанныеДокумента.СуммаЗамены КАК СуммаДокумента,
//				|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
//				|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
//				|ИЗ
//				|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	ДанныеДокумента.Ссылка КАК Ссылка,
//				|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
//				|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
//				|	ИНАЧЕ
//				|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
//				|	КОНЕЦ КАК Статус,
//				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
//				|	ДанныеДокумента.Партнер КАК Партнер,
//				|	ДанныеДокумента.Соглашение КАК Соглашение,
//				//|	ДанныеДокумента.Договор КАК Договор,
//				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//				|	ДанныеДокумента.Валюта КАК Валюта,
//				|	ДанныеДокумента.Организация КАК Организация,
//				|	ДанныеДокумента.Контрагент КАК Контрагент,
//				|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаДокумента,
//				|	0 КАК СуммаАвансаДоОбеспечения,
//				|	ДанныеДокумента.СуммаПредоплаты КАК СуммаПредоплатыДоОтгрузки
//				|ИЗ
//				|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
//				|;
//				|
//				|////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//				|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
//				|	ВЫБОР
//				|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
//				|			ТОГДА ИСТИНА
//				|		ИНАЧЕ ЛОЖЬ
//				|	КОНЕЦ КАК РасчетыПоДоговору,
//				|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
//				|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
//				|	РасчетыСКлиентами.Валюта КАК Валюта,
//				|	АналитикаПоПартнерам.Партнер КАК Партнер,
//				|	АналитикаПоПартнерам.Организация КАК Организация,
//				|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
//				//|	АналитикаПоПартнерам.Договор КАК Договор,
//				|	ВЫБОР
//				|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
//				|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
//				|		ИНАЧЕ 0
//				|	КОНЕЦ КАК ДолгКлиента,
//				|	ВЫБОР
//				|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
//				|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
//				|		ИНАЧЕ 0
//				|	КОНЕЦ КАК НашДолг
//				|ИЗ
//				|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, ) КАК РасчетыСКлиентами
//				|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
//				|		ПО РасчетыСКлиентами.ЗаказКлиента = Заказ.Ссылка
//				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
//				|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
//				|ГДЕ
//				|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
//				|	И АналитикаПоПартнерам.Организация В (&СписокОрганизаций)
//				|	И АналитикаПоПартнерам.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
//				|	И (РасчетыСКлиентами.КОплатеКонечныйОстаток <> 0 
//				|			ИЛИ РасчетыСКлиентами.КОтгрузкеКонечныйОстаток <> 0
//				//|			ИЛИ РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток <> 0
//				|			ИЛИ РасчетыСКлиентами.СуммаКонечныйОстаток <> 0)
//				|";
//		
//		КонецЕсли; 
//		
//			
//	Иначе // Если Не ЗначениеЗаполнено(СпособРасчета) Или (СпособРасчета = "НеУчитывать")  Тогда 
//		
//		//vd_180615 Убраны условия по версиям, тк запросы отличаются только Измерением НаправлениеДеятельности в регистре АналитикаУчетаПоПартнерам. Уничтожены ВТ.
//		
//		// УТ Укр НаправлениеДеятельности нет. Возможно группировка по этому полю не нужна, тк в самой процедуре этот реквизит некуда не выгружается и не используется.
//		Если Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам.Измерения.Найти("НаправлениеДеятельности") = Неопределено Тогда
//        	НаправлениеДеятельности = "NULL";
//		Иначе
//			НаправлениеДеятельности = "АналитикаУчета.НаправлениеДеятельности";
//		КонецЕсли;
//		
//		//В типовой конф УТ Укр долг считается сразу после отгрузки, а в типовой УТ через сутки после отгрузки
//		Если гКонфигурация = "УТ_UA" Тогда 
//			ДатаРасчетаДляРегистра = "";
//		Иначе
//			ДатаРасчетаДляРегистра = "&ДатаРасчета";
//		КонецЕсли;  

//		//vd_180529 Добавлена выгрузка не только просроченных долгов.
//		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//		               |	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
//		               |ПОМЕСТИТЬ ОтборАналитикиПартнеров
//		               |ИЗ
//		               |	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
//		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
//		               |		ПО АналитикаУчетаПоПартнерам.Партнер = ВТ_Партнеры.Ссылка
//		               |ГДЕ
//		               |	АналитикаУчетаПоПартнерам.Организация В(&СписокОрганизаций)
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//		               |	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента,
//		               |	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
//		               |	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток,
//		               |	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстатокНаКонецПериода,
//		               |	&ДатаРасчета КАК ДатаПлатежа,
//		               |	ДОБАВИТЬКДАТЕ(&ДатаРасчета, СЕКУНДА, 1) КАК Период
//		               |ПОМЕСТИТЬ ТаблицаОстатковКлиентов
//		               |ИЗ
//		               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
//		               |			[ДатаРасчетаДляРегистра],
//		               |			АналитикаУчетаПоПартнерам В
//		               |				(ВЫБРАТЬ
//		               |					ОтборАналитикиПартнеров.КлючАналитики
//		               |				ИЗ
//		               |					ОтборАналитикиПартнеров КАК ОтборАналитикиПартнеров)) КАК РасчетыСКлиентамиОстатки
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		               |	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//		               |	Расчеты.ЗаказКлиента КАК ЗаказКлиента,
//		               |	Расчеты.Валюта КАК Валюта,
//		               |	МАКСИМУМ(Расчеты.ДатаПлатежа) КАК ДатаПлатежа,
//		               |	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ)) КАК Период
//		               |ПОМЕСТИТЬ ТаблицаПериодовКлиентов
//		               |ИЗ
//		               |	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
//		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
//		               |		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
//		               |			И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
//		               |			И Расчеты.Валюта = ТаблицаОстатков.Валюта
//		               |			И (ТаблицаОстатков.КОплатеОстаток <> 0)
//		               |ГДЕ
//		               |	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		               |	И Расчеты.Активность
//		               |	И Расчеты.КОплате <> 0
//		               |
//		               |СГРУППИРОВАТЬ ПО
//		               |	Расчеты.АналитикаУчетаПоПартнерам,
//		               |	Расчеты.ЗаказКлиента,
//		               |	Расчеты.Валюта
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		               |	Периоды.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//		               |	Периоды.ЗаказКлиента КАК ЗаказКлиента,
//		               |	Периоды.Валюта КАК Валюта,
//		               |	Периоды.Период КАК Период,
//		               |	Периоды.ДатаПлатежа КАК ДатаПлатежа,
//		               |	СУММА(ЕСТЬNULL(Расчеты.КОплате, 0)) КАК КОплате
//		               |ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
//		               |ИЗ
//		               |	ТаблицаПериодовКлиентов КАК Периоды
//		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
//		               |		ПО Периоды.АналитикаУчетаПоПартнерам = Расчеты.АналитикаУчетаПоПартнерам
//		               |			И Периоды.ЗаказКлиента = Расчеты.ЗаказКлиента
//		               |			И Периоды.Валюта = Расчеты.Валюта
//		               |			И Периоды.ДатаПлатежа = Расчеты.ДатаПлатежа
//		               |			И (Расчеты.Активность)
//		               |			И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
//		               |			И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
//		               |
//		               |СГРУППИРОВАТЬ ПО
//		               |	Периоды.АналитикаУчетаПоПартнерам,
//		               |	Периоды.ЗаказКлиента,
//		               |	Периоды.Валюта,
//		               |	Периоды.Период,
//		               |	Периоды.ДатаПлатежа
//		               |;
//	                   |
//   		               |////////////////////////////////////////////////////////////////////////////////
//		               |УНИЧТОЖИТЬ ТаблицаПериодовКлиентов
//		               |;
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ
//		               |	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//		               |	Остатки.ЗаказКлиента КАК ЗаказКлиента,
//		               |	Остатки.Валюта КАК Валюта,
//		               |	ВЫБОР
//		               |		КОГДА Остатки.КОплатеОстаток > ЕСТЬNULL(Отгрузки.КОплате, 0)
//		               |			ТОГДА Остатки.КОплатеОстаток - ЕСТЬNULL(Отгрузки.КОплате, 0)
//		               |		ИНАЧЕ 0
//		               |	КОНЕЦ КАК НовыйКОплатеОстаток,
//		               |	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода,
//		               |	Остатки.Период КАК Период,
//		               |	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
//		               |ПОМЕСТИТЬ НовыеОстаткиКлиентов
//		               |ИЗ
//		               |	ТаблицаОстатковКлиентов КАК Остатки
//		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов КАК Отгрузки
//		               |		ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
//		               |			И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
//		               |			И Остатки.Валюта = Отгрузки.Валюта
//		               |			И (Остатки.КОплатеОстаток <> 0)
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
//		               |	НовыеОстаткиКлиентов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
//		               |	НовыеОстаткиКлиентов.ЗаказКлиента КАК ЗаказКлиента,
//		               |	НовыеОстаткиКлиентов.Валюта КАК Валюта,
//		               |	НовыеОстаткиКлиентов.Период КАК Период,
//		               |	НовыеОстаткиКлиентов.ДатаПлатежа КАК ДатаПлатежа,
//		               |	НовыеОстаткиКлиентов.НовыйКОплатеОстаток КАК НовыйКОплатеОстаток,
//		               |	НовыеОстаткиКлиентов.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода
//		               |ПОМЕСТИТЬ ТаблицаОстатковКлиентов
//		               |ИЗ
//		               |	НовыеОстаткиКлиентов КАК НовыеОстаткиКлиентов
//		               |
//		               |ИНДЕКСИРОВАТЬ ПО
//		               |	АналитикаУчетаПоПартнерам,
//		               |	ЗаказКлиента,
//		               |	Валюта
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |УНИЧТОЖИТЬ НовыеОстаткиКлиентов
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		               |	ВЫБОР
//		               |		КОГДА Расчеты.СуммаОстаток < 0
//		               |			ТОГДА 0 - Расчеты.СуммаОстаток
//		               |		ИНАЧЕ 0
//		               |	КОНЕЦ КАК НашДолг,
//		               |	ВЫБОР
//		               |		КОГДА Расчеты.СуммаОстаток > 0
//		               |			ТОГДА Расчеты.СуммаОстаток
//		               |		ИНАЧЕ 0
//		               |	КОНЕЦ КАК ДолгКлиента,
//		               |	ВЫБОР
//		               |		КОГДА Расчеты.СуммаОстаток > 0
//		               |			ТОГДА ВЫБОР
//		               |					КОГДА Расчеты.СуммаОстаток < Расчеты.КОплатеОстаток
//		               |						ТОГДА Расчеты.СуммаОстаток
//		               |					ИНАЧЕ Расчеты.КОплатеОстаток
//		               |				КОНЕЦ
//		               |		ИНАЧЕ 0
//		               |	КОНЕЦ КАК ДолгКлиентаПросрочено,
//		               |	ВЫБОР
//		               |		КОГДА Остатки.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
//		               |			ТОГДА 0
//		               |		ИНАЧЕ ВЫБОР
//		               |				КОГДА РАЗНОСТЬДАТ(Остатки.ДатаПлатежа, &ДатаРасчета, ДЕНЬ) > 0
//		               |					ТОГДА РАЗНОСТЬДАТ(Остатки.ДатаПлатежа, &ДатаРасчета, ДЕНЬ)
//		               |				ИНАЧЕ 0
//		               |			КОНЕЦ
//		               |	КОНЕЦ КАК ПросроченоДней,
//		               |	АналитикаУчета.Партнер КАК Партнер,
//					   //(( dm_181214
//		               |	АналитикаУчета.Контрагент КАК Контрагент,
//					   //)) dm_181214
//		               |	АналитикаУчета.Партнер.БизнесРегион КАК БизнесРегион,
//		               |	АналитикаУчета.Организация КАК Организация,
//		               |	[НаправлениеДеятельности] КАК НаправлениеДеятельности,
//					   |	&ДатаРасчета КАК ДатаРасчета,
//		               |	Расчеты.ЗаказКлиента.Менеджер КАК Менеджер,
//		               |	Расчеты.Валюта КАК Валюта,
//		               |	ЕСТЬNULL(Расчеты.ЗаказКлиента.Соглашение, ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)) КАК ЗаказКлиентаСоглашение,
//		               |	Расчеты.ЗаказКлиента КАК ЗаказКлиента,
//		               |	Остатки.ДатаПлатежа КАК ДатаПлатежа
//		               |ПОМЕСТИТЬ РезультатДоОтбора
//		               |ИЗ
//		               |	РегистрНакопления.РасчетыСКлиентами.Остатки(, ) КАК Расчеты
//		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
//		               |		ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
//		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК Остатки
//		               |		ПО Расчеты.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
//		               |			И Расчеты.ЗаказКлиента = Остатки.ЗаказКлиента
//		               |			И Расчеты.Валюта = Остатки.Валюта
//		               |ГДЕ
//		               |	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
//					   //(( dm_181214
//					   //vd_180114 Долги с этим условием вообще не аыгружаеются.
//		               //|	И АналитикаУчета.Партнер = АналитикаУчета.Контрагент.Партнер
//					   //)) dm_181214
//		               |	И Расчеты.АналитикаУчетаПоПартнерам В
//		               |			(ВЫБРАТЬ
//		               |				ОтборАналитикиПартнеров.КлючАналитики
//		               |			ИЗ
//		               |				ОтборАналитикиПартнеров КАК ОтборАналитикиПартнеров)
//		               |;
//		               |
//					   |////////////////////////////////////////////////////////////////////////////////
//		               |УНИЧТОЖИТЬ ОтборАналитикиПартнеров
//		               |;
//		               |
//  		               |////////////////////////////////////////////////////////////////////////////////
//		               |УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
//		               |;
//					   |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ
//		               |	СУММА(РезультатДоОтбора.НашДолг) КАК НашДолг,
//		               |	СУММА(РезультатДоОтбора.ДолгКлиента) КАК ДолгКлиента,
//		               |	СУММА(РезультатДоОтбора.ДолгКлиентаПросрочено) КАК ДолгПросрочено,
//		               |	РезультатДоОтбора.ПросроченоДней КАК ПросроченоДней,
//		               |	РезультатДоОтбора.Партнер КАК Партнер,
//					   //(( dm_181214
//		               |	РезультатДоОтбора.Контрагент КАК Контрагент,
//					   //)) dm_181214
//		               |	РезультатДоОтбора.БизнесРегион КАК БизнесРегион,
//		               |	РезультатДоОтбора.Организация КАК Организация,
//		               |	РезультатДоОтбора.НаправлениеДеятельности КАК НаправлениеДеятельности,
//		               |	РезультатДоОтбора.ДатаРасчета КАК ДатаРасчета,
//		               |	РезультатДоОтбора.Менеджер КАК Менеджер,
//		               |	РезультатДоОтбора.Валюта КАК Валюта,
//		               |	РезультатДоОтбора.ЗаказКлиентаСоглашение КАК ЗаказКлиентаСоглашение,
//		               |	РезультатДоОтбора.ЗаказКлиента КАК ЗаказКлиента,
//		               |	РезультатДоОтбора.ДатаПлатежа КАК ДатаПлатежа
//		               |ИЗ
//		               |	РезультатДоОтбора КАК РезультатДоОтбора
//		               |ГДЕ
//		               |	ВЫБОР
//		               |			КОГДА &ТолькоПросроченные
//		               |				ТОГДА РезультатДоОтбора.ПросроченоДней > &КолПросроченныхДней
//		               |			ИНАЧЕ ИСТИНА
//		               |		КОНЕЦ
//		               |	И РезультатДоОтбора.ДолгКлиента > 0
//		               |
//		               |СГРУППИРОВАТЬ ПО
//		               |	РезультатДоОтбора.Партнер,
//					   //(( dm_181214
//		               |	РезультатДоОтбора.Контрагент,
//					   //)) dm_181214
//		               |	РезультатДоОтбора.БизнесРегион,
//		               |	РезультатДоОтбора.Организация,
//		               |	РезультатДоОтбора.НаправлениеДеятельности,
//		               |	РезультатДоОтбора.Менеджер,
//		               |	РезультатДоОтбора.Валюта,
//		               |	РезультатДоОтбора.ЗаказКлиентаСоглашение,
//		               |	РезультатДоОтбора.ЗаказКлиента,
//		               |	РезультатДоОтбора.ПросроченоДней,
//		               |	РезультатДоОтбора.ДатаРасчета,
//		               |	РезультатДоОтбора.ДатаПлатежа
//					   |;
//					   |
//					   |////////////////////////////////////////////////////////////////////////////////
//		               |УНИЧТОЖИТЬ РезультатДоОтбора
//					   |;
//		               |";
//			
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[НаправлениеДеятельности]", НаправлениеДеятельности); 
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДатаРасчетаДляРегистра]", ДатаРасчетаДляРегистра);	
//	
//	КонецЕсли; // Если Не ЗначениеЗаполнено(СпособРасчета) Или (СпособРасчета = "НеУчитывать")  Тогда 
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ТекстЗапросаПоВзаиморасчетам()

//vd_180319_Баг 37912 Ошибка при выгрузке данных. Добавлено условие Если ПоколениеКонфигурации(">УТ_11.3") Тогда
Функция ТекстЗапросаПолученияИзображений()
	
	Если Не ВыгружатьИзображенияТоваров И Не ВыгружатьИзображенияПартнеров Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	стрОбласть = "";
	
	Если ВыгружатьИзображенияТоваров Тогда
		
		стрОбласть = стрОбласть + "
		    |ВЫБРАТЬ
		    |	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
		    |	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		    |	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
		    |	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
		    |	НоменклатураПрисоединенныеФайлы.Описание КАК Описание,
		    |	НоменклатураПрисоединенныеФайлы.ФайлХранилище КАК ФайлХранилище
		    |ИЗ
		    |	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		    |ГДЕ
		    |	НоменклатураПрисоединенныеФайлы.ВладелецФайла В ( ВЫБРАТЬ ВТ_Ассортимент.Ссылка ИЗ ВТ_Ассортимент )
		    |	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		    |	И НЕ НоменклатураПрисоединенныеФайлы.Зашифрован
			|";	
		
	КонецЕсли; 
	
	Если ВыгружатьИзображенияПартнеров Тогда
		
		стрОбласть = стрОбласть + ?(стрОбласть = "", "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		    |ВЫБРАТЬ
		    |	ПартнерыПрисоединенныеФайлы.Ссылка,
		    |	ПартнерыПрисоединенныеФайлы.ВладелецФайла,
		    |	ПартнерыПрисоединенныеФайлы.Наименование,
		    |	ПартнерыПрисоединенныеФайлы.Расширение,
		    |	ПартнерыПрисоединенныеФайлы.Описание,
		    |	ПартнерыПрисоединенныеФайлы.ФайлХранилище
		    |ИЗ
		    |	Справочник.ПартнерыПрисоединенныеФайлы КАК ПартнерыПрисоединенныеФайлы
		    |ГДЕ
		    |	ПартнерыПрисоединенныеФайлы.ВладелецФайла В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
		    |	И НЕ ПартнерыПрисоединенныеФайлы.ПометкаУдаления
		    |	И НЕ ПартнерыПрисоединенныеФайлы.Зашифрован
			|";	
		
	КонецЕсли; 
	
	стррРегистрСведенийИзображений = Новый Структура("Регистр, Измерение, Ресурс");
	//vd_180919 Изменено условие "Если". Было: Если ПоколениеКонфигурации(">УТ_11.3") Тогда
	//КА 2.4.3.127 - ДвоичныеДанныеФайлов
	//КА 2.4.5.33  - ДвоичныеДанныеФайлов 
	//СравнитьВерсии() больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.- 
	Если ПоколениеКонфигурации(">УТ_11.3") ИЛИ (гКонфигурация = "КА" И СравнитьВерсии(гКонфигурацияВерсия, "2.4.3") >= 0) Тогда
		стррРегистрСведенийИзображений.Регистр   = "ДвоичныеДанныеФайлов";
		стррРегистрСведенийИзображений.Измерение = "Файл";
		стррРегистрСведенийИзображений.Ресурс    = "ДвоичныеДанныеФайла";
	Иначе
		стррРегистрСведенийИзображений.Регистр   = "ПрисоединенныеФайлы";
		стррРегистрСведенийИзображений.Измерение = "ПрисоединенныйФайл";
		стррРегистрСведенийИзображений.Ресурс    = "ХранимыйФайл";
	КонецЕсли;                                    
	
	//{{vd_181126 Замена СтрЗаменить() на ЗаменитьЛитералы()
	//Текст = "
	//	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//    |	ПрисоединенныеФайлы.[РегистрСведенийИзображенийРесурс] КАК ХранимыйФайл,
	//    |	ФайлыСправочников.Ссылка,
	//    |	ФайлыСправочников.ВладелецФайла,
	//    |	ФайлыСправочников.Наименование,
	//    |	ФайлыСправочников.Расширение,
	//    |	ФайлыСправочников.Описание
	//    |ИЗ
	//    |	([Область]) КАК ФайлыСправочников
	//    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.[РегистрСведенийИзображенийРегистр] КАК ПрисоединенныеФайлы
	//    |		ПО ФайлыСправочников.Ссылка = ПрисоединенныеФайлы.[РегистрСведенийИзображенийИзмерение]
	//	|";
	
	//Текст = СтрЗаменить(Текст, "[Область]", стрОбласть);
	//Текст = СтрЗаменить(Текст, "[РегистрСведенийИзображенийРегистр]"   , стррРегистрСведенийИзображений.Регистр);
	//Текст = СтрЗаменить(Текст, "[РегистрСведенийИзображенийИзмерение]" , стррРегистрСведенийИзображений.Измерение);
	//Текст = СтрЗаменить(Текст, "[РегистрСведенийИзображенийРесурс]"    , стррРегистрСведенийИзображений.Ресурс);
	
	Текст = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	ПрисоединенныеФайлы.[Ресурс] КАК ХранимыйФайл,
	    |	ФайлыСправочников.Ссылка,
	    |	ФайлыСправочников.ВладелецФайла,
	    |	ФайлыСправочников.Наименование,
	    |	ФайлыСправочников.Расширение,
	    |	ФайлыСправочников.Описание
	    |ИЗ
	    |	([Область]) КАК ФайлыСправочников
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.[Регистр] КАК ПрисоединенныеФайлы
	    |		ПО ФайлыСправочников.Ссылка = ПрисоединенныеФайлы.[Измерение]
		|";
	
	стррРегистрСведенийИзображений.Вставить("Область", стрОбласть);
	ЗаменитьЛитералы(Текст, стррРегистрСведенийИзображений);	
	//}}vd_181126
	
	Возврат Текст; 
	
КонецФункции

// ТекстыЗапросов
#КонецОбласти

#Область ФормированиеВремеменныхТаблиц

Функция МенеджерВТПодготовитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса)
	
	Если ТипЗнч(ОтборыСКД) = Тип("ЭлементОтбораКомпоновкиДанных") И ОтборыСКД.Использование Тогда
		ИспользоватьМакетКомпоновки = Истина;
	ИначеЕсли ТипЗнч(ОтборыСКД) = Тип("Массив") Тогда
		ИспользоватьМакетКомпоновки = Истина;
	Иначе
		ИспользоватьМакетКомпоновки = Ложь;
	КонецЕсли; 
	
	Если ИспользоватьМакетКомпоновки Тогда
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ОтборыСКД, ТекстЗапроса);
		Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.НаборДанных.Запрос);
		Для Каждого ЭлементОтбора Из МакетКомпоновки.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
	КонецЕсли; 
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Возврат Запрос;
	
КонецФункции

Процедура МенеджерВТВыполнитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса)
	
	Запрос = МенеджерВТПодготовитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса);
	Запрос.Выполнить();
	
КонецПроцедуры

// vd_181024 Изменена логика, добавлено формирование ВТ_СписокПланПродажПоКатегориям и преименована ВТ_СписокПлановПродаж в ВТ_ПланПродаж
// vd_180719 Добавлена
//
// Создает ВТ_ПланПродаж и ВТ_ПланПродажПоКатегориям
Процедура МенеджерВТПланыПродажПоНомеклатуреИКатегории(МенеджерВТ)

	Если ИспользоватьПланыПродаж И МенеджерВТ.Таблицы.Найти("ВТ_ПланПродаж") = Неопределено Тогда
		//1. ПланыПродаж по Номенклатуре
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		               |	ПланПродаж.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ПланПродаж
		               |ИЗ
		               |	Документ.ПланПродаж КАК ПланПродаж
		               |ГДЕ
		               |	ПланПродаж.Ответственный = &Агент
		               |	И ПланПродаж.ВидПлана.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродаж)
		               |	И ПланПродаж.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
					   |	И &ТекущаяДата МЕЖДУ НАЧАЛОПЕРИОДА(ПланПродаж.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(ПланПродаж.ОкончаниеПериода, ДЕНЬ)
		               |	И ПланПродаж.Проведен
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка";
								  
		Запрос.УстановитьПараметр("Агент", 	ВыбАгент);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	Конецесли;
	
	//2. ПланыПродаж по товарной категории
	Если ИспользоватьПланыПродажПоТоварнымКатегориям И МенеджерВТ.Таблицы.Найти("ВТ_ПланПродажПоКатегориям") = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПланПродажПоКатегориям.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ПланПродажПоКатегориям
		               |ИЗ
		               |	Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
		               |ГДЕ
		               |	ПланПродажПоКатегориям.Ответственный = &Агент
		               |	И ПланПродажПоКатегориям.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
					   |	И &ТекущаяДата МЕЖДУ НАЧАЛОПЕРИОДА(ПланПродажПоКатегориям.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(ПланПродажПоКатегориям.ОкончаниеПериода, ДЕНЬ)
		               |	И ПланПродажПоКатегориям.Проведен
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка";

		Запрос.УстановитьПараметр("Агент", 	ВыбАгент);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	КонецЕсли;		
		
КонецПроцедуры	
	
//vd_181024 Добавлена Получить Основной ПланПродаж
// Основным планом продаж может быть план из Документ.ПланПродаж или Документ.ПланПродажПоКатегориям
// Основном планом продаж считается последний созданный документ в учетной системе из Документ.ПланПродаж и Документ.ПланПродажПоКатегориям.
Функция ПолучитьОсновнойПланПродаж(МенеджерВТ)
	
	Результат = Неопределено;
	
	//Запрос = Новый Запрос;
	////Для сортировке берется Дата документа, раньше сортировка происходила по МоментВремени
	//
	//////Без категории, при добавлении категорий удалить и взять запрос выше
	////Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	////               |	ПланПродажВСЕ.Ссылка КАК Ссылка
	////               |ИЗ
	////               |	(ВЫБРАТЬ
	////               |		ПланПродаж.Ссылка КАК Ссылка,
	////               |		ПланПродаж.Дата КАК Дата
	////               |	ИЗ
	////               |		ВТ_ПланПродаж КАК ВТ_ПланПродаж
	////               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
	////               |			ПО ВТ_ПланПродаж.Ссылка = ПланПродаж.Ссылка) КАК ПланПродажВСЕ
	////               |
	////               |УПОРЯДОЧИТЬ ПО
	////               |	ПланПродажВСЕ.Дата УБЫВ"; 
	//
	//////Вместе с катигорией	
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	ПланПродажВСЕ.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	(ВЫБРАТЬ
	//               |		ПланПродаж.Ссылка КАК Ссылка,
	//               |		ПланПродаж.Дата КАК Дата
	//               |	ИЗ
	//               |		ВТ_ПланПродаж КАК ВТ_ПланПродаж
	//               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
	//               |			ПО ВТ_ПланПродаж.Ссылка = ПланПродаж.Ссылка
	//               |	
	//               |	ОБЪЕДИНИТЬ ВСЕ
	//               |	
	//               |	ВЫБРАТЬ
	//               |		ПланПродажПоКатегориям.Ссылка,
	//               |		ПланПродажПоКатегориям.Дата
	//               |	ИЗ
	//               |		ВТ_ПланПродажПоКатегориям КАК ВТ_ПланПродажПоКатегориям
	//               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
	//               |			ПО ВТ_ПланПродажПоКатегориям.Ссылка = ПланПродажПоКатегориям.Ссылка) КАК ПланПродажВСЕ
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ПланПродажВСЕ.Дата УБЫВ";
	//
	//	
	//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	//	ВыборкаРезультат = Запрос.Выполнить().Выбрать();

	//	Пока ВыборкаРезультат.Следующий() Цикл 
	//		//Первый элемент в отсортированом списке по дате
	//		Результат = ВыборкаРезультат.Ссылка;
	//		Прервать;
	//	КонецЦикла;
	//	Возврат Результат;

	Если НЕ ИспользоватьПланыПродаж И НЕ ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	тзРезультат = Новый ТаблицаЗначений;
	тзРезультат.Колонки.Добавить("ПланПродаж");
	тзРезультат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	//1. ОсновнойПланПродажПономенклатуре	
	Если ИспользоватьПланыПродаж Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПланПродаж.Ссылка КАК Ссылка,
		               |	ПланПродаж.Дата КАК Дата
		               |ИЗ
		               |	ВТ_ПланПродаж КАК ВТ_ПланПродаж
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
		               |		ПО ВТ_ПланПродаж.Ссылка = ПланПродаж.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПланПродаж.Дата УБЫВ";
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() = 1 Тогда
			стзРезультат = тзРезультат.Добавить();
			стзРезультат.ПланПродаж = Выборка[0].Ссылка;
			стзРезультат.Дата = Выборка[0].Дата;
		КонецЕсли;
	КонецЕсли;
	
	//2. ОсновнойПланПродажПоКатегории
	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПланПродажПоКатегориям.Ссылка КАК Ссылка,
		               |	ПланПродажПоКатегориям.Дата КАК Дата
		               |ИЗ
		               |	ВТ_ПланПродажПоКатегориям КАК ВТ_ПланПродажПоКатегориям
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
		               |		ПО ВТ_ПланПродажПоКатегориям.Ссылка = ПланПродажПоКатегориям.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПланПродажПоКатегориям.Дата УБЫВ";
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() = 1 Тогда
			стзРезультат = тзРезультат.Добавить();
			стзРезультат.ПланПродаж = Выборка[0].Ссылка;
			стзРезультат.Дата = Выборка[0].Дата;
		КонецЕсли;
	КонецЕсли;
	
	//3. ОсновнойПланПродаж
	Количество = тзРезультат.Количество();
	Если Количество = 1 Тогда
		Результат = тзРезультат[0].ПланПродаж;
	ИначеЕсли Количество = 2 Тогда
		тзРезультат.Сортировать("Дата"); 
		Результат = тзРезультат[1].ПланПродаж;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
	
// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_Организации (если такой еще не добавлено).
// Дополнительно обновляет кэш значений гКэшСпискиОбъектов - добавляет в свойство "ОрганизацииВыгрузки" массив выгружаемых организаций.
Процедура МенеджерВТОрганизации(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_Организации") = Неопределено Тогда 	
	
		Отбор = ЭлементОтбораПоЛевомуЗначению("Организации");
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Организации.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_Организации
			|{ВЫБРАТЬ
			|	Ссылка.*}
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ 
			|	Не Организации.ПометкаУдаления
			|{ГДЕ
			|	Организации.Ссылка.* КАК Организации}
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|";
			
		МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отбор, ТекстЗапроса);
		
		ВключенОтборПоОрганизациям = ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") И Отбор.Использование И ЗначениеЗаполнено(Отбор.ПравоеЗначение);
		
		// Помещаем массив организаций в кэш
		РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_Организации").ПолучитьДанные();			
		гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки_ВключенОтбор", ВключенОтборПоОрганизациям); // признак, что в настройках агента включен отбор по организациям
		
	КонецЕсли;
	
КонецПроцедуры

// gi_180525 - новая процедура
// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_ВидыЦен (если такой еще не добавлено).
// Дополнительно обновляет кэш значений гКэшСпискиОбъектов - добавляет в свойство "ВидыЦенВыгрузки" массив выгружаемых видов цен. //vd_190313 Больше не выгружается в кэш
Процедура МенеджерВТВидыЦен(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_ВидыЦен") = Неопределено Тогда
		
		Отборы = ЭлементОтбораПоЛевомуЗначению("ВидыЦен", "ТолькоВидыЦенИзСоглашений", МенеджерВТ); // gi_180525 "ТолькоВидыЦенИзСоглашений"
		
		//((vd_190321 Убрано упорядочивание
		// gi_180525 вынуждены включать в выборку ограничение ПЕРВЫЕ - из-за требований использования ПОМЕСТИТЬ совместно с УПОРЯДОЧИТЬ
		//ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 3000
		//               |	ВидыЦен.Ссылка КАК Ссылка
		//               |ПОМЕСТИТЬ ВТ_ВидыЦен
		//               |{ВЫБРАТЬ
		//               |	Ссылка.*}
		//               |ИЗ
		//               |	Справочник.ВидыЦен КАК ВидыЦен
		//               |{ГДЕ
		//               |	ВидыЦен.Ссылка.* КАК ВидыЦен}
		//               |
		//               |УПОРЯДОЧИТЬ ПО
		//               |	ВидыЦен.Наименование";
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВидыЦен.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ВидыЦен
		               |{ВЫБРАТЬ
		               |	Ссылка.*}
		               |ИЗ
		               |	Справочник.ВидыЦен КАК ВидыЦен
		               |{ГДЕ
		               |	ВидыЦен.Ссылка.* КАК ВидыЦен}";
		//))vd_190321
		
		МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);
		
		//vd_190313 Больше не выгружается в кэш
		// помещаем массив видов цен в кэш
		//РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_ВидыЦен").ПолучитьДанные();			
		//гКэшСпискиОбъектов.Вставить("ВидыЦенВыгрузки", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_КурсыВалют (если такой еще не добавлено)
Процедура МенеджерВТКурсыВалют(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_КурсыВалют") = Неопределено Тогда 
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	КурсыВалют.Валюта,
			|	ВЫБОР
			|		КОГДА КурсыВалют.Курс ЕСТЬ NULL
			|			ТОГДА 1
			|		КОГДА КурсыВалют.Курс = 0
			|			ТОГДА 1
			|		ИНАЧЕ
			|			КурсыВалют.Курс
			|	КОНЕЦ / 
			|	ВЫБОР
			|		КОГДА КурсыВалют.Кратность ЕСТЬ NULL
			|			ТОГДА 1
			|		КОГДА КурсыВалют.Кратность = 0
			|			ТОГДА 1
			|		ИНАЧЕ
			|			КурсыВалют.Кратность
			|	КОНЕЦ КАК КурсКратный
			|ПОМЕСТИТЬ ВТ_КурсыВалют
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата,) КАК КурсыВалют
			|ИНДЕКСИРОВАТЬ ПО
			|	Валюта
		    |";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.Выполнить();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура МенеджерВТПартнеров(МенеджерВТ)

	Если МенеджерВТ.Таблицы.Найти("ВТ_Партнеры") <> Неопределено Тогда 	
		Возврат;
	КонецЕсли;
	
	//vd_180924 СегментыПартнеров
	//Отборы = ЭлементОтбораПоЛевомуЗначению("Партнеры", "ТолькоПартнерыИзСпискаТТ,СсылкаСписокТТ,ТипПартнера,ТолькоПартнерыОсновногоМенеджера,ОсновнойМенеджер,РегиональныйМенеджер,БизнесРегион");
	Отборы = ЭлементОтбораПоЛевомуЗначению("Партнеры", "СегментыПартнеров,ТолькоПартнерыИзСпискаТТ,СсылкаСписокТТ,ТипПартнера,ТолькоПартнерыОсновногоМенеджера,ОсновнойМенеджер,РегиональныйМенеджер,БизнесРегион");

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Партнеры
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ 
		|	Не Партнеры.ПометкаУдаления
		|{ГДЕ
		|	Партнеры.Ссылка.* КАК Партнеры}
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
	                             
	МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);
	
	//((vd_181130  vd_181203 Ошибка 
	// MOD-171 Кроме партнеров с отбором по СКД, выгрузить нужно выгружать еще вышестоящих партнеров, тк у них могут быть контрагенты котрых используют нижестоящие партнеры	
	Если РежимВыгрузкиРекомендуемый и ИспользоватьКонтрагентов Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Партнеры.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ПартнерыОтбора
		               |ИЗ
		               |	ВТ_Партнеры КАК ВТ_Партнеры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Партнеры.Родитель КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ПартнерыРодители
		               |ИЗ
		               |	ВТ_ПартнерыОтбора КАК ВТ_ПартнерыОтбора
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		               |		ПО ВТ_ПартнерыОтбора.Ссылка = Партнеры.Ссылка
		               |ГДЕ
		               |	НЕ Партнеры.ПометкаУдаления
		               |	И НЕ Партнеры.Родитель = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Партнеры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ПартнерыОтбора.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_Партнеры
		               |ИЗ
		               |	ВТ_ПартнерыОтбора КАК ВТ_ПартнерыОтбора
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	ВТ_ПартнерыРодители.Ссылка
		               |ИЗ
		               |	ВТ_ПартнерыРодители КАК ВТ_ПартнерыРодители
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПартнерыОтбора
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПартнерыРодители";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
		
	КонецЕсли;
	//))vd_181130

КонецПроцедуры 

Процедура МенеджерВТКонтрагенты(МенеджерВТ)
	
	//vd_180425 Добавлено условие
	Если МенеджерВТ.Таблицы.Найти("ВТ_Контрагенты") <> Неопределено Тогда 	
		Возврат;
	КонецЕсли;
		
	Отборы = ЭлементОтбораПоЛевомуЗначению("Контрагенты");
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Контрагенты
	               |{ВЫБРАТЬ
	               |	Ссылка.*}
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	НЕ Контрагенты.ПометкаУдаления
	               |{ГДЕ
	               |	Контрагенты.Ссылка.* КАК Контрагенты}
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка";
	
	МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);

КонецПроцедуры

Процедура МенеджерВТСоответствий(МенеджерВТ)
	
	Если НЕ РежимВыгрузкиРекомендуемый Тогда
		Возврат; //Для режима "Совместимый" выгрузка соответствий не требуется.
	Конецесли;  	
		
	Запрос = Новый Запрос;
	
	// Помимо связки Контрагент - Партнер, нужно выгружать еще связку Контрагент - ПотомокПартнера (партнер у которого Родительпартнер связаны с контрагентом, 
	//		то есть партнер находится в группе партнера который связан с контрагентом)

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Партнеры.Ссылка КАК Партнер,
	               |	Партнеры.Родитель КАК Родитель
	               |ПОМЕСТИТЬ ВТ_ПартнерРодитель
	               |ИЗ
	               |	ВТ_Партнеры КАК ВТ_Партнеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	               |		ПО ВТ_Партнеры.Ссылка = Партнеры.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Родитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Контрагенты.Ссылка КАК Контрагент,
	               |	Контрагенты.Партнер КАК Партнер
	               |ПОМЕСТИТЬ ВТ_КонтрагентПартнер
	               |ИЗ
	               |	ВТ_Контрагенты КАК ВТ_Контрагенты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ВТ_Контрагенты.Ссылка = Контрагенты.Ссылка
	               |ГДЕ
	               |	НЕ Контрагенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КонтрагентПартнер.Контрагент КАК Контрагент,
	               |	ВТ_КонтрагентПартнер.Партнер КАК Партнер
	               |ПОМЕСТИТЬ ВТ_Соответствия
	               |ИЗ
	               |	ВТ_КонтрагентПартнер КАК ВТ_КонтрагентПартнер
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_КонтрагентПартнер.Контрагент,
	               |	ВТ_ПартнерРодитель.Партнер
	               |ИЗ
	               |	ВТ_КонтрагентПартнер КАК ВТ_КонтрагентПартнер
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПартнерРодитель КАК ВТ_ПартнерРодитель
	               |		ПО ВТ_КонтрагентПартнер.Партнер = ВТ_ПартнерРодитель.Родитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПартнерРодитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_КонтрагентПартнер";
			
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			
	Запрос.Выполнить();

КонецПроцедуры


// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_Соглашения (если такой еще не добавлено)
Процедура МенеджерВТСоглашения(МенеджерВТ)

	МенеджерВТСегментыПартнеров(МенеджерВТ); // сегменты партнеров и соглашения у нас взаимосвязаны при выгрузке данных в МУ
	
	//vd_180503
	Если ИспользоватьПунктыРазгрузки Тогда
		МенеджерВТПунктыРазгрузки(МенеджерВТ);	
	КонецЕсли;
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_Соглашения") = Неопределено Тогда 	
		мОрганизации = ОрганизацииВыгрузки(МенеджерВТ);
		ВключитьОтборПоОрганизациям = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки_ВключенОтбор");
		Запрос = Новый Запрос(ТекстЗапросаОтбораСоглашений(ВключитьОтборПоОрганизациям));
		Запрос.УстановитьПараметр("Организации", мОрганизации);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
		
		//vd_180622 Удаление в запросе 
		////{{vd_180504
		//Если МенеджерВТ.Таблицы.Найти("ВТ_СоглашенияБезТорговыхТочек") <> Неопределено Тогда
		//	Запрос = Новый Запрос();
		//	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_СоглашенияБезТорговыхТочек";
		//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		//	Запрос.Выполнить();
		//КонецЕсли;
		//}}vd_180504
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_Договоры (если такой еще не добавлено)
Процедура МенеджерВТДоговоры(МенеджерВТ)

	Если МенеджерВТ.Таблицы.Найти("ВТ_Договоры") = Неопределено Тогда 	
		//vd_180425 Добавлено условие
		Если гКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда
			МенеджерВТПунктыРазгрузки(МенеджерВТ);
		КонецЕсли;
		мОрганизации = ОрганизацииВыгрузки(МенеджерВТ);
		ВключитьОтборПоОрганизациям = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки_ВключенОтбор");
		Запрос = Новый Запрос(ТекстЗапросаОтбораДоговоров(ВключитьОтборПоОрганизациям));
		Запрос.УстановитьПараметр("Организации", мОрганизации);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура МенеджерВТСегментыПартнеров(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_СегментыПартнеров") <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерВТОрганизации(МенеджерВТ);	
	МенеджерВТПартнеров(МенеджерВТ);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	спрСоглашенияСКлиентами.СегментПартнеров КАК Сегмент,
		|	спрСоглашенияСКлиентами.Ссылка КАК Соглашение
		|ПОМЕСТИТЬ ВТ_СегментыПартнеров
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК спрСоглашенияСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК регПартнерыСегмента
		|		ПО ( спрСоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|			ИЛИ регПартнерыСегмента.Сегмент = спрСоглашенияСКлиентами.СегментПартнеров)
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры  // это соединение оставляет в запросе только партнеров, у кого указан сегмент, это неправильно
		//|		ПО регПартнерыСегмента.Партнер = ВТ_Партнеры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации
		|		ПО спрСоглашенияСКлиентами.Организация = ВТ_Организации.Ссылка 
		|				ИЛИ спрСоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|ГДЕ
		|	спрСоглашенияСКлиентами.Типовое
		|	И НЕ спрСоглашенияСКлиентами.ПометкаУдаления
		|	
		|ИНДЕКСИРОВАТЬ ПО Сегмент
		|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	РезультатЗапроса = Запрос.Выполнить();	
	
КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_ПерсональныеЦеныТоваров (если такой еще не добавлено)
Процедура МенеджерВТПерсональныеЦеныТоваров(МенеджерВТ)

	Если МенеджерВТ.Таблицы.Найти("ВТ_ПерсональныеЦеныТоваров") = Неопределено Тогда 	
		
		МенеджерВТСоглашения(МенеджерВТ); // для получения персональных цен нам нужна временная таблица ВТ_Соглашения
		
		ТекстЗапроса = " 
			|ВЫБРАТЬ
			|	СоглашенияСКлиентамиТовары.Ссылка КАК Соглашение,
			|	СоглашенияСКлиентамиТовары.Номенклатура,
			|	[Характеристики]
			|	ВЫБОР
			|		КОГДА СоглашенияСКлиентамиТовары.Цена = 0
			|			ТОГДА СоглашенияСКлиентамиТовары.ВидЦены
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ВидЦены,
			|	СоглашенияСКлиентамиТовары.Цена,
			|	СоглашенияСКлиентамиТовары.Ссылка.Валюта КАК Валюта
			|ПОМЕСТИТЬ ВТ_ПерсональныеЦеныТоваров // персональные цены товаров без пересчета курса
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
			|ГДЕ
			|	СоглашенияСКлиентамиТовары.Ссылка В (ВЫБРАТЬ ВТ_Соглашения.Ссылка ИЗ ВТ_Соглашения)
			|";
		
		стррЛитералы = Новый Структура("Характеристики", "");		
		Если ВыгружатьХарактеристикиНоменклатуры() Тогда
			стррЛитералы.Характеристики = "СоглашенияСКлиентамиТовары.Характеристика,";
		КонецЕсли; 
		ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
		
	КонецЕсли;

КонецПроцедуры

Процедура МенеджерВТАсортиментОтбор(МенеджерВТ)

	Отборы = ЭлементОтбораПоЛевомуЗначению("Номенклатура", "ВидНоменклатуры,ГруппаДоступа,ЦеноваяГруппа");
	Запрос = МенеджерВТПодготовитьЗапрос(МенеджерВТ, Отборы, ТекстЗапросаОтбораНоменклатуры());
	//Запрос.УстановитьПараметр("ИндивидуальныйНаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры); //vd_190315
	// Так же необходимо сделать выгрузку номенклатуры по созданным документам
	Запрос.Выполнить();

КонецПроцедуры 

//vd_190315 Добавлена
Процедура МенеджерВТНоменклатураОстатки(МенеджерВТ)

	стррЛитералы = Новый Структура("ВРезервеСоСкладаОстаток,РегистрНакопленияОстатков");
	
	Если РегистрОстатковТоваров = "СвободныеОстатки" Тогда
		стррЛитералы.РегистрНакопленияОстатков = "СвободныеОстатки";
		Если ПоколениеКонфигурации("<=УТ_11.1.2") Тогда
			стррЛитералы.ВРезервеСоСкладаОстаток = "ВРезервеОстаток";
		Иначе
			стррЛитералы.ВРезервеСоСкладаОстаток = "ВРезервеСоСкладаОстаток";
		КонецЕсли;
	Иначе 
		стррЛитералы.РегистрНакопленияОстатков 	= "ТоварыНаСкладах";
		стррЛитералы.ВРезервеСоСкладаОстаток 	= "КОтгрузкеОстаток";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Ассортимент.Ссылка КАК Номенклатура,
	               |	СвободныеОстаткиТоваров.Характеристика КАК Характеристика,
	               |	СвободныеОстаткиТоваров.Склад КАК Склад,
	               |	СУММА(ЕСТЬNULL(ВЫБОР
	               |						КОГДА &УчитыватьРезервы
	               |							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
	               |						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
	               |					КОНЕЦ, 0)) КАК Остаток
	               |ПОМЕСТИТЬ ВТ_НоменклатураОстатки
	               |ИЗ
	               |	ВТ_Ассортимент КАК ВТ_Ассортимент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
	               |		ПО ВТ_Ассортимент.Ссылка = СвободныеОстаткиТоваров.Номенклатура
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
				   |	    ПО СвободныеОстаткиТоваров.Склад = ВТ_Склады.Ссылка 
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ВыгружатьТоварыСНулевымОстатком
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЕСТЬNULL(ВЫБОР
	               |						КОГДА &УчитыватьРезервы
	               |							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
	               |						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
	               |					КОНЕЦ, 0) > 0
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Ассортимент.Ссылка,
	               |	СвободныеОстаткиТоваров.Характеристика,
	               |	СвободныеОстаткиТоваров.Склад
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика";
	
	ЗаменитьЛитералы(Запрос.Текст, стррЛитералы);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("ВыгружатьТоварыСНулевымОстатком", ВыгружатьТоварыСНулевымОстатком);
	Запрос.УстановитьПараметр("УчитыватьРезервы", УчитыватьРезервы);
	
	Запрос.Выполнить();
	
КонецПроцедуры 

//vd_190315 Добавлена
// Корректирует ВТ_Асртимент полученный в МенеджерВТАсортиментОтбор().
// Добавляет лополнительные фильтры или номенклатуру, котрая используется в локументах или планах
Процедура МенеджерВТАссортимент(МенеджерВТ) 

	//Общая настройка "Выгружать номенклатуру с нулевыми отстатками".
	Если НЕ ВыгружатьТоварыСНулевымОстатком Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_Ассортимент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_НоменклатураОстатки.Номенклатура КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_Ассортимент
		               |ИЗ
		               |	ВТ_НоменклатураОстатки КАК ВТ_НоменклатураОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_НоменклатураОстатки.Номенклатура
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура МенеджерВТСклады(МенеджерВТ)
	
	Отборы = ЭлементОтбораПоЛевомуЗначению("Склады");
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Ссылка
		|ПОМЕСТИТЬ ВТ_Склады
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|{ГДЕ
		|	Склады.Ссылка.* КАК Склады}";

	МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);
	//гмСкладыВыгрузки = Неопределено; // сбрасываем глобальный массив складов выгрузки  //190313
	
КонецПроцедуры

//vd_190313 Полностью переделана логика, убран параметр.
//Было:
//Функция МенеджерВТПолучить(стрВидыОбъектов = "Номенклатура,Партнеры,Склады")
//	
//	Если ИспользоватьПунктыРазгрузки Тогда 
//		стрВидыОбъектов = стрВидыОбъектов + ",Контрагенты";
//	КонецЕсли;
//	
//	мВидыОбъектов = СтрРазделить_(стрВидыОбъектов);
//	МенеджерВТ = Новый МенеджерВременныхТаблиц;
//	
//	Для каждого стрВидОбъекта Из мВидыОбъектов Цикл
//		Если стрВидОбъекта = "Номенклатура" Тогда
//		    МенеджерВТНоменклатуры(МенеджерВТ);
//		ИначеЕсли стрВидОбъекта = "Партнеры" Тогда
//			МенеджерВТПартнеров(МенеджерВТ);
//		ИначеЕсли стрВидОбъекта = "Контрагенты" Тогда
//			МенеджерВТКонтрагенты(МенеджерВТ);
//		ИначеЕсли стрВидОбъекта = "Склады" Тогда
//			МенеджерВТСклады(МенеджерВТ);
//		КонецЕсли; 
//	КонецЦикла; 
//	
//	Возврат МенеджерВТ;
//
//КонецФункции 
Функция МенеджерВТПолучить()
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// Клиенты
	МенеджерВТОрганизации(МенеджерВТ);
	МенеджерВТПартнеров(МенеджерВТ);
	Если РежимВыгрузкиРекомендуемый ИЛИ ИспользоватьПунктыРазгрузки Тогда
		МенеджерВТКонтрагенты(МенеджерВТ);
	КонецЕсли;
	
	МенеджерВТСоответствий(МенеджерВТ);
	
	// Номенклатура
	МенеджерВТСклады(МенеджерВТ);
	МенеджерВТКурсыВалют(МенеджерВТ);
	МенеджерВТВидыЦен(МенеджерВТ);
	МенеджерВТАсортиментОтбор(МенеджерВТ);
	МенеджерВТНоменклатураОстатки(МенеджерВТ);
	МенеджерВТАссортимент(МенеджерВТ); //Корректирует ВТ_Асртимент полученный в МенеджерВТАсортиментОтбор()
	
	//Другое.
	МенеджерВТПланыПродажПоНомеклатуреИКатегории(МенеджерВТ); //vd_180719 Заполнение ВТ_ПланПродаж и ВТ_ПланПродажПоКатегориям
		
	Возврат МенеджерВТ;

КонецФункции 

// ФормированиеВремеменныхТаблиц
#КонецОбласти

// Функция создает zip-архив выгружаемых картинок.
// 
// Параметры:
//		тзКартинки - Неопределено, ТаблицаЗначений - таблица свойств картинок с колонками:
//			* Ссылка - СправочникСсылка.НоменклатураПрисоединенныеФайлы или СправочникСсылка.ПартнерыПрисоединенныеФайлы
// 			* Описание - Строка - описание картинки
//  		* ИмяФайла - Строка - имя файла для записи в zip-архив
//  
// Возвращаемое значение:
//  Строка   - полный путь к zip-архиву.
//  
Функция СформироватьАрхивСКартинками(тзКартинки)
	   	
	Если тзКартинки = Неопределено Или тзКартинки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
				
	КаталогКартинок = КаталогВременныхФайловДляТранспорта("Pictures");
	
	ПолноеИмяАрхиваКартинок = КаталогКартинок + "GoodsPhotosFromCDB.zip";
	
	АрхивКартинок = Новый ЗаписьZipФайла(ПолноеИмяАрхиваКартинок, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);		
	
	Для Каждого СтрокаТ Из тзКартинки Цикл			
		ФайлСсылка = СтрокаТ.Ссылка; 
		ПолноеИмяФайла = КаталогКартинок + СтрокаТ.ИмяФайла;
		Если Не ФайлСуществует(ПолноеИмяФайла) Тогда //vd_180814
			//vd_180814 Добавлено условие. В типовой конфигурации УТ изменены процедуры в общем модуле.
			Если гКонфигурация = "УТ" И ПоколениеКонфигурации(">=УТ_11.4.5.24") Тогда
				//vd_180814 Новый механизм получения файлов	
		    	Попытка
					ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка);
				Исключение
					Продолжить;
				КонецПопытки;
				Если ТипЗнч(ДанныеФайла) = Тип("Картинка") Тогда
					Картинка = ДанныеФайла;
				ИначеЕсли ТипЗнч(ДанныеФайла) = Тип("ДвоичныеДанные") Тогда
					Картинка = Новый Картинка(ДанныеФайла);
				Иначе
					Продолжить;
				КонецЕсли;
				Картинка.Записать(ПолноеИмяФайла);
			Иначе
				//vd_180814 Старый механизм получения файлов	
				стррДанные = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлСсылка);	
				//Если Не ФайлСуществует(ПолноеИмяФайла) Тогда // если файла в каталоге нет, записываем его из БД  //vd_180814 вынесено чуть выше
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(стррДанные.СсылкаНаДвоичныеДанныеФайла);
					Если ДвоичныеДанные = Неопределено Тогда
						Продолжить;
					Иначе
						ДвоичныеДанные.Записать(ПолноеИмяФайла);
					КонецЕсли;
				//КонецЕсли; /vd_180814 вынесено чуть выше
			КонецЕсли;
		КонецЕсли;

		АрхивКартинок.Добавить(ПолноеИмяФайла);

	КонецЦикла;
	
	АрхивКартинок.Записать();
	
	Возврат ПолноеИмяАрхиваКартинок;
	
КонецФункции

// ВыгрузкаДанных
#КонецОбласти

#Область ЗагрузкаДанных

Процедура ОповеститьОСменеАгента(СтарыйАгент, НовыйАгент)
	
	Текст = "В файле загрузки данных указан агент (%1), отличающийся от текущего (%2). Загрузка проводится для агента из файла выгрузки (%1).";
	Текст = СтрШаблон_(Текст, Строка(НовыйАгент), Строка(СтарыйАгент));
	ОповеститьОСобытии(Текст, "ОшибкаНастройки", , СтарыйАгент);
	
КонецПроцедуры

// Функция возвращает Истина, если загрузка прошла корректно.
// В параметре стррСведения передаются в функцию дополнительные сведения о загружаемых данных
// (например, свойство "КаталогФото" - с временным каталогом распакованных фото).
Функция ЗагрузитьДанныеИзФайлаОбмена(Агент, ФайлОбмена, ЗагружаемыеОбъекты) // gi_180415 - добавлен параметр ЗагружаемыеОбъекты

	Результат = Истина;	
	
	ТекстXML = Новый ЧтениеXML;
	ТекстXML.ОткрытьФайл(ФайлОбмена.ПолноеИмя);
	
	Пока ТекстXML.Прочитать() Цикл

		Если Не ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ТекстXML.Имя = "DATA" Тогда
			НазваниеКонфигурации = ТекстXML.ЗначениеАтрибута("CONFIGNAME");
			ВерсияКонфигурации = ТекстXML.ЗначениеАтрибута("CONFIGVERSION");
		КонецЕсли;

		Если ТекстXML.Имя = "CONSTANTS" Тогда
			Если ТекстXML.Имя = "CONSTANTS"	И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			стррКонстанты = КонстантыИзФайлаОбмена(ТекстXML, "АгентЗагрузки,КодЗапроса");
			АгентЗагрузки = ТорговыйПредставительИзФайлаОбмена(стррКонстанты.АгентЗагрузки);
			Если Агент <> АгентЗагрузки Тогда
				
				Если Не ЗначениеЗаполнено(стррКонстанты.АгентЗагрузки) Тогда // константа отсутствует в файле
					Текст = СтрШаблон_(НСтр("ru = 'В файле загрузки отсуствтует константа ""ИдентификаторАгента""! (GUID=""%1"").'"), 
						КонстантыМТПолучитьGUID("АгентЗагрузки"));
				ИначеЕсли ЗначениеЗаполнено(АгентЗагрузки) Тогда // константа присутствует в файле и ссылается на существующего агента
					Текст = НСтр("ru = 'Получен файл загрузки от агента: '") + АгентЗагрузки;
				Иначе // константа присутствует в файле и ссылается на не существующего агента
					Текст = СтрШаблон_(НСтр("ru = 'В файле выгрузки указана ссылка на несуществующего агента ""%1"". Загрузка проигнорирована.'"), стррКонстанты.АгентЗагрузки);
					ОповеститьОСобытии(Текст);
					Результат = Ложь;
					Прервать;
				КонецЕсли; 
				ОповеститьОСобытии(Текст);
				
				Если Не ЭтоСсылкаНаНайденныйОбъект(АгентЗагрузки) Тогда // Не можем определить по значению константы "АгентЗагрузки" из МУ от какого агента получен файл ...
					Если ЗначениеЗаполнено(Агент) Тогда // ... тогда загружаем файл для текущего выбранного агента - такое допустимо, например, при автообмене по FTP - мы точно знаем - нужно загружать для выбранного агента
						ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Данные загружаются для текущего агента ""%1"".'"), Агент), "ОшибкаЗапись",, "ТекущийАгент");
					Иначе // ... тогда останавливаем загрузку - не понятно для какого агента грузить файл
						ОповеститьОСобытии(НСтр("ru = 'Загрузка проигнорирована.'"));
						Результат = Ложь;
						Прервать;
					КонецЕсли;
				Иначе
					НастройкиАгента = ПолучитьНастройкиАгента(АгентЗагрузки);
					Если НастройкиАгента = Неопределено Тогда
						Если Не ЗначениеЗаполнено(Агент) Тогда
							ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Не найдены настройки для агента ""%1"". Загрузка проигнорирована.'"), АгентЗагрузки), "ОшибкаЗапись");
							Результат = Ложь;
							Прервать;
						Иначе
							ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Не найдены настройки для агента ""%1"". Загружаются данные с использованием настроек для агента ""%2"".'"), 
								АгентЗагрузки, Агент), "ОшибкаЗапись",, "ТекущийАгент");
							Агент = АгентЗагрузки;						
						КонецЕсли; 
					Иначе
						ВыбНастройкиАгента = НастройкиАгента;
						ОповеститьОСменеАгента(Агент, АгентЗагрузки);
						Агент = АгентЗагрузки;
					КонецЕсли; 
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ТекстXML.Имя = "CATALOGS" Тогда
			ЗагрузитьСправочники(ТекстXML, ЗагружаемыеОбъекты);
		ИначеЕсли ТекстXML.Имя = "DOCUMENTS" Тогда
			ЗагрузитьДокументы(ТекстXML, ЗагружаемыеОбъекты);
		ИначеЕсли ТекстXML.Имя = "PICTURES" Тогда
			ЗагрузитьФотографииЭтап2(ТекстXML, ЗагружаемыеОбъекты);
		КонецЕсли;
		
	КонецЦикла;
	ТекстXML.Закрыть();

	Если Результат Тогда
		ЗакончитьЗагрузкуКонтактнойИнформации(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуКассовыхОрдеров(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуПоступлений(ЗагружаемыеОбъекты); // vd_180316 Добавление Поступления/Возвраты
		ЗакончитьЗагрузкуВиртуальныхДокументов(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуФотографий(ЗагружаемыеОбъекты); // gi_180415 добавлено для загрузки фотографий
		ПодтвержденияСохранитьВсе(ВыбНастройкиАгента.СсылкаМУ, ЗагружаемыеОбъекты); // сохранение подтверждений для всех объектов
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

#Область ЗагрузкаСправочников
// sd_10082017
Процедура ЗагрузитьСправочники(ТекстXML, ЗагружаемыеОбъекты)
	
	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Имя = ТекстXML.Имя;
		
		Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда	
			Если Имя = "KILLEDS" Тогда
				ТекстXML.Пропустить();
				Продолжить;
			КонецЕсли;			
		ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Если Имя = "CATALOGS" Тогда
				Прервать;
			ИначеЕсли Имя = "CATALOG" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдСпрXML <> Неопределено Тогда
			ИдВидСправочникаМТ = Новый УникальныйИдентификатор(ИдСпрXML); // gi_170902
			ВидСправочника = ВидОбъектаПоИдентификатору(ИдВидСправочникаМТ, Истина, "Справочник");
			Если ВидСправочника = Неопределено Тогда 
				ТекстXML.Пропустить();
				Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				Иначе
					Продолжить;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Пока ТекстXML.Прочитать() Цикл
			
			Имя = ТекстXML.Имя;
			
			Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда
				Если Имя = "ITEM" Тогда
					ЗагрузитьСправочник(ТекстXML, ЗагружаемыеОбъекты, ВидСправочника, ИдВидСправочникаМТ);
				ИначеЕсли Имя = "KILLEDS" Или Имя = "GROUPS" Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
			ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
				Если Имя = "ELEMENTS" Или Имя = "CATALOG" Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла; // Пока ТекстXML.Прочитать() Цикл
	
КонецПроцедуры

// Функция загружает элемент справочника из XML-файла в БД 1С:Предприятия.
// Параметры:
//		ТекстXML - ЧтениеXML - объект ЧтениеXML
//		ЗагружаемыеОбъекты - Структура - структура для запоминания загруженных объектов (используется для выгрузки подтверждений).
//		ВидСправочника - Строка - вид справочника в 1С:Предприятии
//		ИдВидСправочникаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ
// Возвращаемое значение:
// 		Булево - Истина - если элемент справочника успешно записан в БД, иначе Ложь.
//  
Функция ЗагрузитьСправочник(ТекстXML, ЗагружаемыеОбъекты, ВидСправочника, ИдВидСправочникаМТ)
	
	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидСправочника = "*НастройкиОбмена" Тогда // sd_20082017 Внес правки по аналогии с замечаниями по загрузке документа Внеплановый маршрут // gi_180414 - заменено на "*НастройкиОбмена"
		// элементы справочника МТ "Настройки обмена" - это настройки обмена МУ (в т.ч., полученные из ЛК) - их нет смысла грузить в БД 1С
		ТекстXML.Пропустить();
		Возврат Истина;
	ИначеЕсли ВидСправочника = "СоставПланаПродаж" Тогда //vd_180705 Пропуск загрузки справочника МТ "СоставПланаПродаж".   	
		ТекстXML.Пропустить();
		Возврат Истина;
	ИначеЕсли ВидСправочника = "*ПечатныеФормыДокументов" Тогда //vd_181005 Пропуск загрузки справочника МТ "ПечатныеФормыДокументов".   	
		ТекстXML.Пропустить();
		Возврат Истина;
	//vd_190213 Помимо загрузки документов, добавлена загрузка фотографий справочников: Контрагент и Торговая точка.	
	//Было:
	//ИначеЕсли ВидСправочника = "*ФотоДокументов" Тогда
	//стррДанныеФото = Новый Структура;
	//Если Не ПолучитьДанныеДляЗагрузкиФото(ТекстXML, стррДанныеФото) Тогда
	//	ОповеститьОСобытии(стррДанныеФото.ОписаниеОшибки);
	//	ОповеститьОСобытии(СтрШаблон_("Пропущена загрузка элемента справочника ""%1"". Загрузка не предусмотрена!", ВидСправочника)); 
	//	ТекстXML.Пропустить();
	//	Возврат Ложь;
	//Иначе 
	//	// фотографии загружаются в УТ в 3 этапа
	//	ЗагрузитьФотографиюЭтап1(стррДанныеФото, ЗагружаемыеОбъекты); // загрузка в ЗагружаемыеОбъекты.тзФотографии
	//	ТекстXML.Прочитать();
	//	Возврат Истина;
	//КонецЕсли;
	ИначеЕсли ВидСправочника = "*ФотоДокументов" ИЛИ ВидСправочника = "*ФотоСправочников" Тогда
		стррДанныеФото = ПолучитьДанныеДляЗагрузкиФото(ТекстXML, ВидСправочника);
		Если стррДанныеФото.ОписаниеОшибки = Неопределено Тогда
			// фотографии загружаются в УТ в 3 этапа
			ЗагрузитьФотографиюЭтап1(стррДанныеФото, ЗагружаемыеОбъекты); // загрузка в ЗагружаемыеОбъекты.тзФотографии
			ТекстXML.Прочитать();
			Возврат Истина;
		Иначе
			ОповеститьОСобытии(стррДанныеФото.ОписаниеОшибки);
			ОповеститьОСобытии(СтрШаблон_("Пропущена загрузка элемента справочника ""%1"". Загрузка не предусмотрена!", ВидСправочника)); 
			ТекстXML.Пропустить();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	//vd_190213 Добавлена попытка/Исключение
	Попытка	
		СпрМенеджер = Справочники[ВидСправочника];
	Исключение
		ОповеститьОСобытии(СтрШаблон_("Пропущена загрузка элемента справочника ""%1"". Загрузка не предусмотрена!", ВидСправочника)); 
		ТекстXML.Пропустить();
		Возврат Ложь;
	КонецПопытки;	
	
	ПредставлениеСпр = СпрМенеджер.ПустаяСсылка().Метаданные().Синоним;
	
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда
		ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
		ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
		ОбъектСпр.ОбменДанными.Загрузка = Истина;
		ОбъектСпр.УстановитьНовыйКод();
		ЭтоНовыйОбъект = Истина;
	Иначе						
		ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектСпр.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Если ВидСправочника = "Партнеры" Тогда   		
		Результат = ЗагрузитьПартнера(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);	
	ИначеЕсли ВидСправочника = "Контрагенты" Тогда
		Результат = ЗагрузитьКонтрагента(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	ИначеЕсли ВидСправочника = "ВидыКонтактнойИнформации" Тогда
		Результат = ЗагрузитьКонтактнуюИнформацию(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	ИначеЕсли ВидСправочника = "КонтактныеЛицаПартнеров" Тогда
		Результат = ЗагрузитьКонтактноеЛицо(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	Иначе // sd_20082017 Внес правки по аналогии с замечаниями по загрузке документа Внеплановый маршрут
		Текст = "Пропущена загрузка справочника ""%1 (%2)"". Загрузка справочников не предусмотрена!"; // sd_25082017
		ОповеститьОСобытии(СтрШаблон_(Текст, ПредставлениеСпр, ВидСправочника)); 
		ТекстXML.Пропустить();
		Возврат Ложь;
	КонецЕсли;
	
	ТекстXML.Прочитать();
	
	Если Результат Тогда
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Добавить();
		СтрокаТ.Идентификатор 	 	= ИдОбъекта; // идентификатор (GUID) элемента справочника
		СтрокаТ.ИдВидСправочникаМТ	= ИдВидСправочникаМТ; // идентификатор (GUID) вида справочника в МТ
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьПартнера(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект)
	
	НаименованиеПартнера 	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	Долгота 				= ТекстXML.ПолучитьАтрибут("A016");
	Широта	 				= ТекстXML.ПолучитьАтрибут("A017");
	
	ОбъектСпр.Наименование 			= НаименованиеПартнера;
	ОбъектСпр.НаименованиеПолное 	= НаименованиеПартнера; 
	ОбъектСпр.ГруппаДоступа 		= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("GrpId0"), "ГруппыДоступаПартнеров");
	ОбъектСпр.Комментарий 			= ТекстXML.ПолучитьАтрибут("A023");
	ОбъектСпр.ЮрФизЛицо 			= Перечисления.КомпанияЧастноеЛицо.Компания;
	ОбъектСпр.ОсновнойМенеджер		= ВыбНастройкиАгента.Пользователь;
	ОбъектСпр.ОбменДанными.Загрузка = Ложь;
		
	Если Не ОбъектСпр.ЭтоГруппа Тогда 
		ОбъектСпр.Клиент = Истина;		
	КонецЕсли;

	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Если Результат Тогда
		ЗаписьДопСвойствПартнера(ОбъектСпр, Новый Структура("Широта,Долгота", Широта, Долгота));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// предварительная загрузка фотографии в ТЗ
Функция ЗагрузитьФотографиюЭтап1(стррДанные, ЗагружаемыеОбъекты)
	
	тзФотографии = ЗагружаемыеОбъекты.тзФотографии;
	СтрокаТ = тзФотографии.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТ, стррДанные);
	
КонецФункции

Функция ЗагрузитьКонтрагента(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект)

	НаименованиеКонтрагента	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	Долгота 				= ТекстXML.ПолучитьАтрибут("A09");
	Широта	 				= ТекстXML.ПолучитьАтрибут("A010");
	
	ОбъектСпр.Наименование 				= НаименованиеКонтрагента;
	ОбъектСпр.НаименованиеПолное 		= НаименованиеКонтрагента;
	ОбъектСпр.Партнер					= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A02"), "Партнеры");
	ОбъектСпр.ЮрФизЛицо 				= Перечисления.ЮрФизЛицо.ЮрЛицо;
	ОбъектСпр.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОбъектСпр.ОбменДанными.Загрузка 	= Ложь;
	
	Если Не ЗначениеЗаполнено(ОбъектСпр.ГоловнойКонтрагент) И Не ОбъектСпр.ОбособленноеПодразделение Тогда
		ОбъектСпр.ГоловнойКонтрагент = ?(ЭтоНовыйОбъект, ОбъектСпр.ПолучитьСсылкуНового(), ОбъектСпр.Ссылка);
	КонецЕсли;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	Если Результат Тогда
		ЗаписьДопСвойствПартнера(ОбъектСпр, Новый Структура("Широта,Долгота", Широта, Долгота));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтактнуюИнформацию(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	
	ИдЭлемента       = ТекстXML.ПолучитьАтрибут("GUID");
	ИдКонтрагент     = ТекстXML.ПолучитьАтрибут("A01");
	ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут("A02");
	ИдКонтактноеЛицо = ТекстXML.ПолучитьАтрибут("A03");
	ИдТип 		     = ТекстXML.ПолучитьАтрибут("A04");
	ИдВид 		     = ТекстXML.ПолучитьАтрибут("A05");
	Представление    = ТекстXML.ПолучитьАтрибут("A06");

	Если ИдКонтактноеЛицо <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтактноеЛицо, "КонтактныеЛицаПартнеров");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.КонтактныеЛицаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтактноеЛицо)); // sd_25082017
		КонецЕсли;
	ИначеЕсли ИдКонтрагент <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтрагент, "Партнеры");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтрагент)); // sd_25082017
		КонецЕсли;
	ИначеЕсли ИдТорговаяТочка <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдТорговаяТочка, "Контрагенты");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдТорговаяТочка)); // sd_25082017
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ТипКИ = ПолучитьЗначениеПеречисленияПоИдентификатору("ТипыКонтактнойИнформации", ИдТип);
	ВидКИ = СсылкаИзСправочника(ИдВид, "ВидыКонтактнойИнформации");
	Если ТипКИ = "" Или ВидКИ.Пустая() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Значит, скорее всего, объект контактной информации еще не был загружен.
	Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
		
		Если НЕ ЗагружаемыеОбъекты.Свойство("ТЗКонтактнаяИнформация") Тогда 
			ТЗ = Новый ТаблицаЗначений();
			ТЗ.Колонки.Добавить("ОбъектСпр");
			ТЗ.Колонки.Добавить("ИдЭлемента");
			ТЗ.Колонки.Добавить("Тип");
			ТЗ.Колонки.Добавить("Вид");
			ТЗ.Колонки.Добавить("Представление");
			ЗагружаемыеОбъекты.Вставить("ТЗКонтактнаяИнформация", ТЗ);
		КонецЕсли;
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация.Добавить();
		СтрокаТ.ОбъектСпр		= ОбъектСпр;
		СтрокаТ.ИдЭлемента     	= ИдЭлемента;
		СтрокаТ.Тип            	= ТипКИ;
		СтрокаТ.Вид            	= ВидКИ;
		СтрокаТ.Представление  	= Представление;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбъектСпр = ТекОбъект.ПолучитьОбъект();
	
	Если ОбъектСпр = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	тчКИ = ОбъектСпр.КонтактнаяИнформация;  		
	Отбор = Новый Структура("Тип, Вид", ТипКИ, ВидКИ);
	
	мСтрокТ = тчКИ.НайтиСтроки(Отбор); 
	
	Если мСтрокТ.Количество() = 0 Тогда
		СтрокаТЧ = тчКИ.Добавить();						
	Иначе  						
		СтрокаТЧ = мСтрокТ[0];
	КонецЕсли;
	
	СтрокаТЧ.Тип		   = ТипКИ;	
	СтрокаТЧ.Вид 		   = ВидКИ;	
	СтрокаТЧ.Представление = Представление;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтактноеЛицо(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	
	НаименованиеКЛ	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	ДатаРождения 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A02"));
	ИдКонтрагент    = ТекстXML.ПолучитьАтрибут("A03");
	Комментарий		= ТекстXML.ПолучитьАтрибут("A05");
	
	Если ИдКонтрагент <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтрагент, "Партнеры", Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
		Текст = "Не найден владелец контактного лица: " + Строка(НаименованиеКЛ) + ". Загрузка не будет выполнена!";;
		ОповеститьОСобытии(Текст, "ОшибкаОбмен", ОбъектСпр.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектСпр.Владелец 				= ТекОбъект;
	ОбъектСпр.Наименование 		 	= НаименованиеКЛ;
	ОбъектСпр.ДатаРождения			= ДатаРождения;
	ОбъектСпр.ДатаРегистрацииСвязи  = ТекущаяДата();
	ОбъектСпр.Автор  				= ВыбНастройкиАгента.Пользователь;
	ОбъектСпр.Комментарий   		= Комментарий;
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗакончитьЗагрузкуКонтактнойИнформации(ЗагружаемыеОбъекты)
	
	Если НЕ ЗагружаемыеОбъекты.Свойство("ТЗКонтактнаяИнформация") Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТ Из ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация Цикл 
		
		ОбъектСпр = СтрокаТ.ОбъектСпр.ПолучитьОбъект();
		
		Если ОбъектСпр = Неопределено Тогда
			Продолжить;
		КонецЕсли;          
		
		Тип 		  = СтрокаТ.Тип;
		Вид 		  = СтрокаТ.Вид;
		Представление = СтрокаТ.Представление;
		ИдЭлемента 	  = СтрокаТ.ИдЭлемента;
		  				
		тчКИ = ОбъектСпр.КонтактнаяИнформация;  		
		Отбор = Новый Структура("Тип, Вид", Тип, Вид);
		
		мСтрокТ = тчКИ.НайтиСтроки(Отбор); 
		
		Если мСтрокТ.Количество() = 0 Тогда
			СтрокаТЧ = тчКИ.Добавить();						
		Иначе  						
			СтрокаТЧ = мСтрокТ[0];
		КонецЕсли;
		
		СтрокаТЧ.Тип		   = Тип;	
		СтрокаТЧ.Вид 		   = Вид;	
		СтрокаТЧ.Представление = Представление;	  
		
		Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда
			Текст = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектСпр.Ссылка, "ТекущийАгент");
			Возврат;
		КонецЕсли;
		
		Текст = "Записана контактная информация для объекта: " + ОбъектСпр;
		ОповеститьОСобытии(Текст, "ИнфоОбмен", ОбъектСпр.Ссылка);
		
		Если ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Найти(ИдЭлемента, "Идентификатор") = Неопределено Тогда 
			СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Добавить();
			СтрокаТ.Идентификатор 	 	= ИдЭлемента;
			СтрокаТ.ИдВидСправочникаМТ	= "85B62882-0156-4881-85BA-B8FEF05C867B"; // идентификатор (GUID) вида справочника в МТ
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация.Очистить();
	
КонецПроцедуры

//vd_190213 У функции убран параметр стррДанные, добавлен параметр ВидСправочника. Было: ПолучитьДанныеДляЗагрузкиФото(ТекстXML, стррДанные) 
// Функция возвращает вид справочника УТ для загрузки фотографии.
// в параметре стррПараметры возвращается структура с дополнительными данными для загрузки фотографии.
// Возвращает структуру данных
// Если не предусмотрена загрузка данной фотографии то стррДанные.ОписаниеОшибки заполнено. 
// Если ошибок нет то стррДанные.ОписаниеОшибки = Неопределено
Функция ПолучитьДанныеДляЗагрузкиФото(ТекстXML, ВидСправочника)
	
	//((vd_190213
	//  стррДанные.GUID 			- Строка	- идентификатор элемента справочнка "ФотоДокументов" для подтверждения
	//  стррДанные.ВидДокумента 	- Строка	- вид документа в УТ, за которым закреплена фотография
	//  стррДанные.ВидСправочника 	- Строка	- вид справочника в УТ для загрузки фотографии
	//  стррДанные.Время 			- Строка	- время создания фотографии
	//  стррДанные.ИдДокумента 		- Строка	- идентификатор документа, к которому прикреплена фотография - заполняется ниже в функции ЗаполненИдентификаторДокументаКфото()
	//  стррДанные.ИдФото   		- Строка	- идентификатор изображения фотографии (используется в ветке PICTURES xml-файла)
	//	стррДанные.ОписаниеОшибки	- Строка	-описание ошибки
	стррДанные = Новый Структура("GUID, ВидДокумента, ВидСправочника, Время, ИдДокумента, ИдФото, ОписаниеОшибки");
	
	Если НЕ (ВидСправочника = "*ФотоДокументов" ИЛИ ВидСправочника = "*ФотоСправочников") Тогда
		стррДанные.ОписаниеОшибки = "Не предусмотрена загрузка фотографий вида """ + ВидСправочника + """. GUID = " + ТекстXML.ПолучитьАтрибут("GUID");
		Возврат стррДанные;
	КонецЕсли;
	
	Если ВидСправочника = "*ФотоСправочников" Тогда
		//ТекстXML.ПолучитьАтрибут("Name") - Не используется
		стррДанные.GUID 		= ТекстXML.ПолучитьАтрибут("GUID");		
		стррДанные.ИдФото   	= ТекстXML.ПолучитьАтрибут("A01");
		стррДанные.Время    	= ТекущаяДата();
		стррДанные.ВидСправочника = "ПартнерыПрисоединенныеФайлы"; //фотографии Партнеров и контрагентов записываются в ПартнерыПрисоединенныеФайлы
		
		Если НЕ ТекстXML.ПолучитьАтрибут("A03") = Неопределено Тогда
			//Контрагент
			стррДанные.ИдДокумента 	= ТекстXML.ПолучитьАтрибут("A03");
			стррДанные.ВидДокумента = ?(РежимВыгрузкиРекомендуемый, "Контрагенты", "Партнеры"); 
		ИначеЕсли НЕ ТекстXML.ПолучитьАтрибут("A04") = Неопределено Тогда
			//Торговая точка	
			стррДанные.ИдДокумента  = ТекстXML.ПолучитьАтрибут("A04");
			стррДанные.ВидДокумента = ?(РежимВыгрузкиРекомендуемый, "Партнеры", "Контрагенты");
		Иначе
			стррДанные.ОписаниеОшибки = "Не предусмотрена загрузка фотографий """ + ВидСправочника + """ GUID = " + ТекстXML.ПолучитьАтрибут("GUID");
		КонецЕсли;
		
		Возврат стррДанные;
	КонецЕсли;
	//))vd_190213
	
	//((vd_190213
	//Было:
	//стррДанные.Вставить("ВидСправочника"); 							 
	//стррДанные.Вставить("GUID",   ТекстXML.ПолучитьАтрибут("GUID")); 	
	//стррДанные.Вставить("Время",  ТекстXML.ПолучитьАтрибут("A05"));  
	//стррДанные.Вставить("ИдФото", ТекстXML.ПолучитьАтрибут("A04"));  
	//стррДанные.Вставить("ИдДокумента"); 						    	
	//стррДанные.Вставить("ВидДокумента");   							 	
	//стррДанные.Вставить("ОписаниеОшибки"); 	
	стррДанные.GUID   = ТекстXML.ПолучитьАтрибут("GUID"); 	
	стррДанные.Время  = ТекстXML.ПолучитьАтрибут("A05");  
	стррДанные.ИдФото = ТекстXML.ПолучитьАтрибут("A04");  
	//))vd_190213
	
	идЗаказ 		 = ТекстXML.ПолучитьАтрибут("A01");
	идПКО	 		 = ТекстXML.ПолучитьАтрибут("A02");
	идМерчендайзинг  = ТекстXML.ПолучитьАтрибут("A03");
	идПосещение 	 = ТекстXML.ПолучитьАтрибут("A06");
	идРеализация 	 = ТекстXML.ПолучитьАтрибут("A07");
	идПеремещение 	 = ТекстXML.ПолучитьАтрибут("A08");
	идРКО			 = ТекстXML.ПолучитьАтрибут("A09");
	идПоступление	 = ТекстXML.ПолучитьАтрибут("A010");
	идВозвратТоваров = ТекстXML.ПолучитьАтрибут("A011");
	идЗадание		 = ТекстXML.ПолучитьАтрибут("A012");
	
	Если ЗаполненИдентификаторДокументаКфото(идЗаказ, стррДанные) Тогда
		Если ЗагружатьЗаказКакРеализацию() Тогда
			стррДанные.ВидДокумента   = "РеализацияТоваровУслуг";
		Иначе
			стррДанные.ВидДокумента   = "ЗаказКлиента";
		КонецЕсли;
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идРеализация, стррДанные) Тогда
		стррДанные.ВидДокумента   = "РеализацияТоваровУслуг";
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идПоступление, стррДанные) Тогда
		стррДанные.ВидДокумента   = ВидДокументаПоступлениеТоваровУслуг();
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идВозвратТоваров, стррДанные) Тогда
		стррДанные.ВидДокумента = "ВозвратТоваровОтКлиента";
		
	ИначеЕсли ЗначениеЗаполнено(идПКО) Или ЗначениеЗаполнено(идРКО) Или ЗначениеЗаполнено(идПеремещение) Тогда
		стррДанные.ОписаниеОшибки = "Не предусмотрена загрузка фотографий для документов ПКО, РКО, Перемещение.";
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идМерчендайзинг, стррДанные) Тогда
		//{{vd_180919
		//стррДанные.ОписаниеОшибки = "Пока не предусмотрена загрузка фотографий для виртуальных документов Мерчендайзинг.";
		стррДанные.ВидСправочника = "ВиртуальныйСправочник";
		стррДанные.ВидДокумента   = "Мерчендайзинг";
		//Возврат Истина; //vd_190213
		//}}vd_180919
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идПосещение, стррДанные) Тогда
		стррДанные.ОписаниеОшибки = "Загрузка фотографий для виртуальных документов ""Посещение"" не пердусмотрена.";
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(идЗадание, стррДанные) Тогда
		стррДанные.ОписаниеОшибки = "Загрузка фотографий для виртуальных документов ""Задание"" не пердусмотрена.";
		
	Иначе
		ВызватьИсключение("Функция ПолучитьВидСправочникаДляЗагрузкиФото(): не определено условие загрузки фотографии.");
		
	КонецЕсли; 
	
	//((vd_190213
	//Если ЗначениеЗаполнено(стррДанные.ВидДокумента) Тогда
	//	стррДанные.ВидСправочника = стррДанные.ВидДокумента + "ПрисоединенныеФайлы";
	//КонецЕсли;
	//Возврат ЗначениеЗаполнено(стррДанные.ВидСправочника);
	
	Если ЗначениеЗаполнено(стррДанные.ВидДокумента) И НЕ ЗначениеЗаполнено(стррДанные.ВидСправочника) Тогда
		стррДанные.ВидСправочника = стррДанные.ВидДокумента + "ПрисоединенныеФайлы";
	КонецЕсли;

	Возврат стррДанные;
	//))vd_190213
	
КонецФункции

// Вспомогательная функция для функции ПолучитьДанныеДляЗагрузкиФото()
Функция ЗаполненИдентификаторДокументаКфото(идДокумента, стррПараметры)
	
	Если ЗначениеЗаполнено(идДокумента) Тогда
		стррПараметры.идДокумента = идДокумента;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

// Процедура дополняет ТЗ в ЗагружаемыеОбъекты.тзФотографии дополнительными сведениями из XML-ветки PICTURES.
Процедура ЗагрузитьФотографииЭтап2(ТекстXML, ЗагружаемыеОбъекты)
	
	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Если ПодтверждатьВсеФотографии Тогда // требуется сразу обновить данные для подтверждений тэга PICTURES
		тзPictures    = ПодтвержденияСДОткрыть("Фото", ВыбНастройкиАгента.СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
		ТекДата       = ТекущаяДата();
		БылиИзменения = Ложь;
	КонецЕсли;
		
	тзФотографии = ЗагружаемыеОбъекты.тзФотографии; // подтверждения только по указанным фотографиям в справочнике "*ФотоДокументов"
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Прервать;
		ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаНачало Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				ИначеЕсли ТекстXML.Имя = "ITEM" И Не ТекстXML.ТипУзла = ТипУзлаКонец Тогда					
					
					GUID = ТекстXML.ПолучитьАтрибут("GUID"); // идентификатор изображения фотографии в платформе 2.0
					СтрокаТ = тзФотографии.Найти(GUID, "ИдФото");
					Если СтрокаТ <> Неопределено Тогда
						СтрокаТ.ИмяФайла = ТекстXML.ПолучитьАтрибут("FileName");
						СтрокаТ.Описание = ТекстXML.ПолучитьАтрибут("Description");
					КонецЕсли; 
					
					Если ПодтверждатьВсеФотографии Тогда
						
						ИдФото = Новый УникальныйИдентификатор(GUID); // идентификатор изображения фотографии в платформе 2.0
						СтрокаТ = тзPictures.Найти(ИдФото, "Идентификатор");
						Если СтрокаТ = Неопределено Тогда
							СтрокаТ = тзPictures.Добавить();
							СтрокаТ.Идентификатор = ИдФото;
						КонецЕсли;
						СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
						БылиИзменения = Истина;
						
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЦикла;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодтверждатьВсеФотографии И БылиИзменения = Истина Тогда
		ПодтвержденияСДСохранить("Фото", ВыбНастройкиАгента.СсылкаМУ, тзPictures);			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьЗагрузкуФотографий(ЗагружаемыеОбъекты)
	
	тзФотографии = ЗагружаемыеОбъекты.тзФотографии;
	Если тзФотографии.Количество() = 0 Тогда // в файле выгрузки отсутствовал справочник ФотоДокументов - мы не знаем к каким документам привязать фотографии
	    Возврат; 
	КонецЕсли;
	
	КаталогФото = ДополнитьСлешВПуть(ЗагружаемыеОбъекты.СведенияИзАрхива.КаталогФото); // временный каталог фотографий, куда распакованы фото из архива торгового агента

	//СправочникФотографии = ПрочитатьЗначениеНастройки("СправочникФотографии");
	//СправочникФотографии = ВОТЗЗагрузить("_Фотографии");
	стррВО = ВОСвойстваОбъекта("_Фотографии"); //vd_180919 Загрузка фото виртуальных док мерчиндайзин
		
	Для каждого СтрокаТ Из тзФотографии Цикл
		
		//vd_180919 Загрузка фотографий для виртуальных документов. Добавлена функция, условие.
		Если СтрокаТ.ВидСправочника = "ВиртуальныйСправочник" Тогда
			ЗагрузитьФотоДляВиртуальногоДокумента(СтрокаТ, КаталогФото, стррВО);
			Продолжить;
		КонецЕсли;
		
		// Определяем ссылку документа-владельца или справочника-владельца фотографии.
		//((vd_190214 Доработка. Загрузка фотографий контрагентов и партнеров. 
		Если СтрокаТ.ВидСправочника = "ПартнерыПрисоединенныеФайлы" Тогда
			ДокументСсылка = Справочники[СтрокаТ.ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.ИдДокумента)); 
			Если СтрокаТ.ВидДокумента = "Контрагенты" Тогда
				СтрокаТ.Описание = "Фото контрагента """ + ДокументСсылка + """." + Символы.ПС + СтрокаТ.Описание;
				ДокументСсылка = ДокументСсылка.Партнер;
			КонецЕсли;
		Иначе		
			ДокументСсылка = Документы[СтрокаТ.ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.ИдДокумента));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) ИЛИ ДокументСсылка.ПолучитьОбъект() = Неопределено Тогда
			ОповеститьОСобытии(СтрШаблон_("Пропущена загрузка фотографии ""%1"". В учетной системе не найдена принадлежность файла: ""%2"".", СтрокаТ.ИдФото, СтрокаТ.ИдДокумента)); 
			Продолжить;
		КонецЕсли;
		//))vd_190214

		СпрМенеджер = Справочники[СтрокаТ.ВидСправочника];
		ИдОбъекта = Новый УникальныйИдентификатор(СтрокаТ.GUID);
		СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
		
		Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда
			ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
			ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
			ОбъектСпр.ОбменДанными.Загрузка = Истина;
			СтрокаТ.ЭтоНовый = Истина;
		Иначе						
			ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
			ОбъектСпр.Разблокировать();
			СтрокаТ.ЭтоНовый = Ложь;
		КонецЕсли;
		
		ОбъектСпр.Наименование 	= СтрокаТ.ИдФото;
		ОбъектСпр.Автор 		= ВыбНастройкиАгента.Пользователь; 
		ОбъектСпр.ДатаСоздания 	= ДатаВремяXMLВФормат1С(СтрокаТ.Время);
		ОбъектСпр.Описание 		= СтрокаТ.Описание;
		
		//ДокументСсылка = Документы[СтрокаТ.ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.ИдДокумента)); //vd_190214
		
		Если ЭтоСсылкаНаНайденныйОбъект(ДокументСсылка) Тогда
			ОбъектСпр.ВладелецФайла = ДокументСсылка;
		КонецЕсли;
		
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		ФайлФото = Новый Файл(КаталогФото + СтрокаТ.ИмяФайла); // СтрокаТ.ИмяФайла может быть и пустым - из-за прерывания загрузки пользователем или возможных ошибок в обработке
		
		Если ФайлФото.Существует() И ЗначениеЗаполнено(СтрокаТ.ИмяФайла) Тогда // добавляем файл в справочник
			РасширениеБезТочки = СтрЗаменить(ФайлФото.Расширение, ".", "");
			ДвоичныеДанные = Новый ДвоичныеДанные(КаталогФото + СтрокаТ.ИмяФайла);
			СтрокаТ.Загружено = Истина; // ставим признак загрузки фотографии, только если есть файл фотографии
		Иначе // в качестве изображения подставляем картинку "Нет фото"
			РасширениеБезТочки = "png";			
			ДвоичныеДанные = ПолучитьМакет("NoPhoto");
			
			//vd_180712 добавлено условие
			Если ЗначениеЗаполнено(ОбъектСпр.Описание)  Тогда
				ОбъектСпр.Описание = НСтр("ru = '" + "Фото еще не отправлено из МУ. " + Символы.ПС + ОбъектСпр.Описание + "'");
			Иначе
				ОбъектСпр.Описание = НСтр("ru = 'Фото еще не отправлено из МУ'");
			КонецЕсли;
		КонецЕсли; 
		
		ИмяБезРасширения   						= ОбъектСпр.Наименование;		
		ОбъектСпр.Расширение 					= РасширениеБезТочки;		
		ОбъектСпр.ДатаМодификацииУниверсальная 	= ВремяИзмененияУниверсальное;		
		ОбъектСпр.ПодписанЭП       				= Ложь;		
		
		//vd_180419 Ошибка запуска на 11.4
		Если ПоколениеКонфигурации(">=УТ_11.4") Тогда    
			ФайловыеФункцииСлужебный = Неопределено; // обход проверки компилятором наличия глобального модуля ФайловыеФункцииСлужебный
			МодульФайловыеФункции = РаботаСФайламиСлужебный;
		Иначе
			МодульФайловыеФункции = ФайловыеФункцииСлужебный;
		КонецЕсли;
		ОбъектСпр.ТипХраненияФайла = МодульФайловыеФункции.ТипХраненияФайлов();
				
		ОбъектСпр.Размер           	= ДвоичныеДанные.Размер();
		
		Попытка
			Если ОбъектСпр.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				НачатьТранзакцию();
				СвояТранзакцияОткрыта = Истина;
				
				Если ПоколениеКонфигурации(">=УТ_11.4") Тогда
					ПрисоединенныеФайлыСлужебный = 0; // обход проверки компилятором наличия глобального модуля ФайловыеФункцииСлужебный
					МодульФайловыеФункции.ЗаписатьФайлВИнформационнуюБазу(СсылкаОбъекта, ДвоичныеДанные);
				Иначе
				    ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(СсылкаОбъекта, ДвоичныеДанные);
				КонецЕсли; 
					
				ОбъектСпр.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ОбъектСпр.ПутьКФайлу = "";
			Иначе
				// Добавление в один из томов (где есть свободное место).
				СведенияОФайле = МодульФайловыеФункции.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,	ИмяБезРасширения, РасширениеБезТочки, , ОбъектСпр.Зашифрован);
				ОбъектСпр.Том = СведенияОФайле.Том;
				ОбъектСпр.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
			КонецЕсли;
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			ОбъектСпр.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ОбъектСпр.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			ОбъектСпр.Заполнить(Неопределено);
			
			ОбъектСпр.Записать();
			
			Если СвояТранзакцияОткрыта Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Если СвояТранзакцияОткрыта Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
			                             |%2'");
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Добавление присоединенного файла'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				КомментарийЖурналаРегистрации);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

// vd_180919 Добавил. Вспомогательная функция для ЗакончитьЗагрузкуФотографий()
//  Общий Ревизит обработки СправочникФотографии - ТЗ - Поля:
//  ID 								- ГУИД 	 - идентификатор элемента
//  ВладелецФайла   				- ГУИД   - пока что документ "Мерчендайзинг
//  ДатаМодификацииУниверсальная    - Дата   -
//  ДатаСоздания                    - Дата   -
//  Наименование					- Строка -
//  Описание						- Строка -
//  Размер							- Число  -
//  Расширение						- Строка -
//  Статус							- Число  - Это признак пометка удаление , записан итд. Поумолчанию = 3 - это файл сохранен.
//  ХранимыйФайл					- Строка - адрес картинки в каталоге
//
// Параметры:
//  СтрокаТ		 - СтрокаТаблицыЗначений - Строка ТЗ ЗагружаемыеОбъекты.тзФотографии
//  СтрокаТ.GUID 			- Строка	- идентификатор элемента справочнка "ФотоДокументов" для подтверждения
//  СтрокаТ.ВидДокумента 	- Строка	- вид документа в УТ, за которым закреплена фотография
//  СтрокаТ.ВидСправочника 	- Строка	- вид справочника в УТ для загрузки фотографии
//  СтрокаТ.Время 			- Строка	- время создания фотографии
//  СтрокаТ.Загружено		- Булево	- Истина, если фото загружено в УС
//  СтрокаТ.ИдДокумента 	- Строка	- идентификатор документа, к которому прикреплена фотография - заполняется ниже в функции ЗаполненИдентификаторДокументаКфото()
//  СтрокаТ.ИдФото   		- Строка	- идентификатор изображения фотографии (используется в ветке PICTURES xml-файла)
//  СтрокаТ.ИмяФайла		- Строка	- изначальное физическое название фотографии загруженная во временный каталог
//  СтрокаТ.Описание		- Строка	- Описание к фото
//  СтрокаТ.ЭтоНовый		- Булево	- Истина если в УС небыло загруженного обьекта.
//
//  КаталогФото				- Строка    - это временная папка куда распаковывается архив
//  стррВО					- Структура - Структура описания виртуальных справочников фотографии	
Процедура ЗагрузитьФотоДляВиртуальногоДокумента(СтрокаТ, КаталогФото, стррВО = Неопределено)
	
	//0. Значения по умолчанию.
	Если стррВО = Неопределено Тогда
		стррВО = ВОСвойстваОбъекта("_Фотографии");
	КонецЕсли;
	
	//Поля для виртуального саправочника СправочникФотографии ВО и также поля для элементов фотографий ВО
	стррОбъект	=  стррВО.стррОбъекта;
	
	//1. Проверка на заполнение
	ТекстОшибкиXML = "Ошибка формата данных XML при загрузке фотографий";
	Если стррВО = Неопределено Тогда
		ОповеститьОСобытии(ТекстОшибкиXML);
		Возврат;	
	Иначе
		Попытка
			гуидID = Новый УникальныйИдентификатор(СтрокаТ.GUID);
			Если НЕ ЗначениеЗаполнено(гуидID) Тогда
				ОповеститьОСобытии(ТекстОшибкиXML);
				Возврат;
			КонецЕсли;
			гуидВладельца = Новый УникальныйИдентификатор(СтрокаТ.ИдДокумента);
			Если НЕ ЗначениеЗаполнено(гуидВладельца) Тогда
				ОповеститьОСобытии(ТекстОшибкиXML);
				Возврат;
			КонецЕсли;
			ДатаСоздания = ДатаВремяXMLВФормат1С(СтрокаТ.Время);
		Исключение
			ОповеститьОСобытии(ТекстОшибкиXML);
			Возврат;
		КонецПопытки;	
	КонецЕсли;
	
	//2. Проверка на наличие такого объекта в базе.
	стррОбьектВХранилище = ВОЭлементЗагрузить(стррВО, гуидID);
	Если стррОбьектВХранилище = Неопределено Тогда
		СтрокаТ.ЭтоНовый = Истина;
	иначе
		СтрокаТ.ЭтоНовый = Ложь;
	КонецЕсли;

	//3. Заполнение свойств
	стррОбъект.ВладелецФайла				= гуидВладельца;
	стррОбъект.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	стррОбъект.ДатаСоздания                 = ДатаСоздания;
	стррОбъект.ИмяФайла                     = Неопределено; 				// Заполняется далее при копировании фото
	стррОбъект.Наименование                 = ""; //СтрокаТ.ИдФото; Оставляем пустым.
	стррОбъект.Описание                     = СтрокаТ.Описание;
	стррОбъект.Размер                       = Неопределено;                 // Заполняется далее при копировании фото
	стррОбъект.Расширение                   = Неопределено;                 // Заполняется далее при копировании фото
	стррОбъект.Статус                       = 3;
	стррОбъект.ХранимыйФайл                 = СтрокаТ.ИмяФайла;
	
	//4. Проверка СтрокаТ.ИмяФайла.  Может быть и пустым - из-за прерывания загрузки пользователем или возможных ошибок в обработке
	Если ПустаяСтрока(СтрокаТ.ИмяФайла) Тогда
		стррОбъект.Описание = НСтр("ru = '" + "Фото еще не отправлено из МУ. " + Символы.ПС + Символы.ПС + стррОбъект.Описание + "'");
		СтрокаТ.Загружено = Ложь;
		стррОбъект.ИмяФайла   = Неопределено;
		стррОбъект.Размер     = Неопределено;
		стррОбъект.Расширение = Неопределено;
		ВОЭлементСохранить(стррВО, гуидID, стррОбъект);
		Возврат;
	Иначе
		стррОбъект.ИмяФайла = СтрокаТ.ИмяФайла;
	КонецЕсли;
	
	//5. Оприделяем пути к фотографии
	//КаталогФото - это временная папка куда распаковывается архив
	//Пример C:\Users\vdeineko\AppData\Local\Temp\AP20TMP\bbb\Photos\
	//КаталогДанных - это место где уже постоянно хранятся фото.
	//Пример C:\Users\vdeineko\Documents\APMT\Photoes
	ПутьКФотоВТемп     = КаталогФото + СтрокаТ.ИмяФайла; 
	ПутьКФотоХранилище = ДополнитьСлешВПуть(ДополнитьСлешВПуть(КаталогДанных) + "Photoes") + СтрокаТ.ИмяФайла;

	//6. Проверяем наличие фотографии и добовляем
	ФайлФото = Новый Файл(ПутьКФотоХранилище);
	Если ФайлФото.Существует() Тогда
		//файл уже загружен и хранится в КаталогДанных
		СтрокаТ.Загружено = Истина;
	Иначе
		ФайлФото = Новый Файл(ПутьКФотоВТемп);
		Если ФайлФото.Существует() Тогда
			//файл загружен во временную папку
	        //Копирование файла
			Попытка
				КопироватьФайл(ПутьКФотоВТемп, ПутьКФотоХранилище);
				СтрокаТ.Загружено = Истина;
			Исключение
				Текст = "Не удается скопирвать файл. Путь временного хранения файла: " + ПутьКФотоВТемп + ". Путь каталога данных: " + ПутьКФотоХранилище;
				ОповеститьОСобытии(Текст);
			КонецПопытки;
		КонецЕсли;		
	КонецЕсли;
	
	//7. Заполнение свойств Размер Расширение
	Если СтрокаТ.Загружено Тогда
		стррОбъект.Размер     = ФайлФото.Размер();
		стррОбъект.Расширение = СтрЗаменить(ФайлФото.Расширение, ".", "");
	Иначе
		стррОбъект.Размер     = Неопределено;
		стррОбъект.Расширение = Неопределено;
		стррОбъект.Описание = НСтр("ru = '" + "Фото еще не загружено из МУ. " + Символы.ПС + Символы.ПС + стррОбъект.Описание + "'");
	КонецЕсли;

	//8. Сохраняем элемент
	ВОЭлементСохранить(стррВО, гуидID, стррОбъект);
	
КонецПроцедуры

// ЗагрузкаСправочников
#КонецОбласти

#Область ЗагрузкаДокументов

Процедура ЗагрузитьДокументы(ТекстXML, ЗагружаемыеОбъекты)

	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Имя = ТекстXML.Имя;
		
		Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда	
			Если Имя = "KILLEDS" Тогда
				ТекстXML.Пропустить();
				Продолжить;
			КонецЕсли;			
		ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Если Имя = "DOCUMENTS" Тогда
				Прервать;
			ИначеЕсли Имя = "DOCUMENT" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИдДокXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдДокXML <> Неопределено Тогда
			ИдВидДокументаМТ = Новый УникальныйИдентификатор(ИдДокXML); // gi_170902
			ВидДокумента = ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Истина, "Документ");
			Если ВидДокумента = Неопределено Тогда 
				ТекстXML.Пропустить();
				Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				Иначе
					Продолжить;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			

		Пока ТекстXML.Прочитать() Цикл
			
			Имя = ТекстXML.Имя;
			
			Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда
				Если Имя = "ITEM" Тогда
					ЗагрузитьДокумент(ТекстXML, ЗагружаемыеОбъекты, ВидДокумента, ИдВидДокументаМТ);
				ИначеЕсли Имя = "KILLEDS" Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
			ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
				Если Имя = "ELEMENTS" Или Имя = "DOCUMENT" Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗагрузитьДокументы

Функция ЗагрузитьДокументЗаказ(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	ЗагрузкаВВидеЗаказа = (ОбъектДок.Метаданные().Имя = "ЗаказКлиента");
	
	стррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	стррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A02");
	стррЗначения.ИдКлиента		= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A04") ,ТекстXML.ПолучитьАтрибут("A03")); //vd_180710 РежимВыгрузкиРекомендуемый
	стррЗначения.ИдСоглашения	= ТекстXML.ПолучитьАтрибут("A05");
	стррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A08"));
	стррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A011");
	стррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A012");
	стррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A014");
	стррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A015");
	стррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
	стррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A018"));

	ОбщаяСкидка 		= Число(ТекстXML.ПолучитьАтрибут("A06"));
	ВидЦены 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A07"), "ВидыЦен");
	ОбщийВес 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
	ДатаДоставки 		= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	ИдМерчендайзинга	= ВРег(ТекстXML.ПолучитьАтрибут("A013"));
	ВидОплаты 			= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A019")); 
	ВидДоставки         = ПолучитьЗначениеПеречисленияПоИдентификатору("СпособыДоставки", ТекстXML.ПолучитьАтрибут("A020"));//vd_180330 ВидыДоставки.
	Склад 				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A023"), "Склады");

	ОбъектДок.Заполнить(Неопределено);
	ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;

	//{{vd_180626 Баг 38923. Сденано для УТ_UA, для УТ требует тестирование. При загрузке документом с ВидЦены.ЦенаВключаетНДС, то НДС всеравно прибавляется к сумме.
	Если гКонфигурация = "УТ_UA" И ЗначениеЗаполнено(ВидЦены) Тогда
		Если ВидЦены.ЦенаВключаетНДС Тогда
			ОбъектДок.ЦенаВключаетНДС = Истина;
			ОбъектДок.АвторасчетНДС = Ложь;			
		КонецЕсли;			
	КонецЕсли;
	//}}		
	
	Если РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" Тогда  			//vd_180312 Баг 32060 (Использовать нумерацию ЦБД)
		ДокМенеджер = Документы.РеализацияТоваровУслуг;  
	Иначе
		ДокМенеджер = Документы.ЗаказКлиента;
	КонецЕсли;		
	
	//vd_180710 РежимВыгрузкиРекомендуемый
	Если НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки Тогда
		стррЗначения.ИдПунктаРазгрузки = ТекстXML.ПолучитьАтрибут("A04");
		//{{vd_180503
		Если ИспользоватьКонтрагентов Тогда
			стррОбязательныеПоля = Новый Структура("Организация, Контрагент, ПунктРазгрузки");
		Иначе
			стррОбязательныеПоля = Новый Структура("Организация, Партнер, ПунктРазгрузки");
		КонецЕсли;
		
		Если ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" Тогда
			стррОбязательныеПоля.Вставить("Соглашение");	
		ИначеЕсли ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" Тогда
			стррОбязательныеПоля.Вставить("Договор");
		ИначеЕсли ИспользоватьКонтрагентов Тогда
			стррОбязательныеПоля.Вставить("Договор");
		Иначе
			стррОбязательныеПоля.Вставить("Соглашение");
		КонецЕсли;
		//}}vd_180503 				
	Иначе
		//{{vd_180413 Баг 38286. ЗагрузкаКонтрагентов.
		Если ИспользоватьКонтрагентов Тогда
			стррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A04")); 	
		КонецЕсли;
		//}}vd_180413 Баг 38286. ЗагрузкаКонтрагентов.
		стррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	КонецЕсли;
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, стррЗначения, ДокМенеджер, стррОбязательныеПоля);
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОбъектДок);

	ОбъектДок.Склад = Склад;
	ОбъектДок.ФормаОплаты = ВидОплаты;
	ОбъектДок.Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	//{{vd_180330 ВидыДоставки.
	ЕСли ВидДоставки = Неопределено Тогда 
		ВидДоставки = СпособДоставки;
	КонецЕсли;
	ОбъектДок.СпособДоставки = ВидДоставки;		
	//}}vd_180330 ВидыДоставки.
	
	//vd_180327. Добавил статус для реализации.
	Если ЗагрузкаВВидеЗаказа = Истина Тогда
		Если ЗначениеЗаполнено(СтатусЗаказовКлиентов) Тогда
		    СтатусЗаказа = СтатусЗаказовКлиентов;
		Иначе	
			мДопустимыеСтатусы = ?(ПоколениеКонфигурации(">=УТ_11.2"), Документы.ЗаказКлиента.ДопустимыеСтатусыВводаНаОсновании(), Новый Массив);
			Если ЗначениеЗаполнено(СтатусЗаказовКлиентов) И мДопустимыеСтатусы.Найти(СтатусЗаказовКлиентов) <> Неопределено Тогда
				СтатусЗаказа = СтатусЗаказовКлиентов;
			Иначе	
				СтатусЗаказа = ?(мДопустимыеСтатусы.Количество() > 0, мДопустимыеСтатусы[0], Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
			КонецЕсли; 
		КонецЕсли;
	Иначе
		Если СтатусРеализацияТоваровУслуг = Неопределено Тогда
			СтатусЗаказа = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		Иначе
			СтатусЗаказа = СтатусРеализацияТоваровУслуг;
    	КонецЕсли;
	КонецЕсли;
	
	ОбъектДок.Статус = СтатусЗаказа;	
	
	Если ЗагрузкаВВидеЗаказа Тогда
		ОбъектДок.Приоритет = ?(ПоколениеКонфигурации(">=УТ_11.1.2"), 
			Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Справочники.Приоритеты.ПустаяСсылка()), Перечисления.Приоритеты.Низкий);
		ОбъектДок.ЖелаемаяДатаОтгрузки = ДатаДоставки;
		ОбъектДок.ДатаОтгрузки = ДатаДоставки;
	КонецЕсли;
	
	Соглашение = ОбъектДок.Соглашение;
	Если ЗначениеЗаполнено(Соглашение) Тогда
		Если Не ЗначениеЗаполнено(ОбъектДок.Склад) Тогда
			ОбъектДок.Склад = Соглашение.Склад;
		КонецЕсли;
		ВалютаВзаиморасчетов = Соглашение.Валюта;
		ОбъектДок.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;
		ОбъектДок.ПорядокРасчетов = Соглашение.ПорядокРасчетов;
		
		//{{vd_181009
		//Если ПоколениеКонфигурации("<УТ_11.3") И (гКонфигурация = "УТ" ИЛИ гКонфигурация = "УТ_UA" ИЛИ гКонфигурация = "УТ_KZ") Тогда 
		//	ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению(); // В названии процедуры английская "C"
		//Иначе
		//	ОбъектДок.ЗаполнитьУсловияПродажПоСоглашению(); // В названии процедуры русская "C"
		//КонецЕсли;
		ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок);
		//}}vd_181009			
		
		Если ЗначениеЗаполнено(Соглашение.ГрафикОплаты) Тогда
			Если ЕстьРеквизитОбъекта("ГрафикОплаты", ОбъектДок) Тогда
				ОбъектДок.ГрафикОплаты = Соглашение.ГрафикОплаты;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОбъектДок.ФормаОплаты) Тогда
				ОбъектДок.ФормаОплаты = Соглашение.ГрафикОплаты.ФормаОплаты;
			КонецЕсли;
		КонецЕсли;
		
		//dm_190402
		Если ЗначениеЗаполнено(ВидОплаты) Тогда
			ОбъектДок.ФормаОплаты = ВидОплаты;
		КонецЕсли;		
		
		Если ЗагрузкаВВидеЗаказа Тогда
			ОбъектДок.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация, Неопределено);
		ИначеЕсли ЕстьРеквизитОбъекта("БанковскийСчетОрганизации", ОбъектДок) Тогда
			ОбъектДок.БанковскийСчетОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация, Неопределено);
		КонецЕсли;

		ОбъектДок.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ОбъектДок.Контрагент, , ОбъектДок.БанковскийСчетКонтрагента);
		
		//vd_180622 Заполняется ниже.
		//Если гКонфигурация <> "УТ_UA" Тогда
		//	ОбъектДок.НалогообложениеНДС = Соглашение.НалогообложениеНДС;
		//КонецЕсли;
		
		ОбъектДок.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
		ОбъектДок.ГруппаФинансовогоУчета = Соглашение.ГруппаФинансовогоУчета;
		
		Если ПоколениеКонфигурации("<=УТ_11.2.2") Тогда
			ОбъектДок.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
				ОбъектДок.Организация, ОбъектДок.ФормаОплаты, Справочники.Кассы.ПустаяСсылка(), ОбъектДок.Валюта);
		Иначе			
			стррКасса = Новый Структура;
			стррКасса.Вставить("Организация", ОбъектДок.Организация);
			стррКасса.Вставить("ФормаОплаты", ОбъектДок.ФормаОплаты);
			стррКасса.Вставить("Касса", 	  Справочники.Кассы.ПустаяСсылка());
			стррКасса.Вставить("Валюта", 	  ОбъектДок.Валюта);
			стррКасса.Вставить("НаправлениеДеятельности", ОбъектДок.НаправлениеДеятельности);
			ОбъектДок.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(стррКасса);
		КонецЕсли;

		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ОбъектДок, ОбъектДок.ХозяйственнаяОперация, ВалютаВзаиморасчетов);
		Если Не Договор = ОбъектДок.Договор Тогда
			ОбъектДок.Договор = Договор;
			//{{vd_180327
			Если ЗагрузкаВВидеЗаказа Тогда 
				ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчет, ОбъектДок.БанковскийСчетКонтрагента); //Для заказа
			Иначе
				ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);  //Для реализации
			КонецЕсли;
			//}}vd_180327
		КонецЕсли;
		
		//{{vd_180912 создана процедура для заполнения реквизита НалогообложениеНДС
		////vd_180622
		//Если гКонфигурация <> "УТ_UA" Тогда
		//	Если ПоколениеКонфигурации(">=УТ_11.4.5.24") Тогда
		//		
		//		НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Договор , ОбъектДок.НаправлениеДеятельности, ТекущаяДата());
		//		
		//		
		//		НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Дата);

		//	Иначе
		//		НалогообложениеНДС = Соглашение.НалогообложениеНДС;
		//	КонецЕсли;
		//	ОбъектДок.НалогообложениеНДС = НалогообложениеНДС;			
		//КонецЕсли;
		////}}vd_180622
		ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок);
		//}}vd_180912 создана процедура для заполнения реквизита НалогообложениеНДС
		
	Иначе
		ДокументПродажиЗаполнить(ОбъектДок);
	КонецЕсли;

	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОбъектДок);
	ОбъектДок.Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Товары.Очистить();
	КонецЕсли;
	
	ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки," 
		+ " Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки,"
		+ " ПроцентАвтоматическойСкидки, СтатусУказанияСерий";
		
	Если ЗагрузкаВВидеЗаказа Тогда
		ПоляСтруктуры = ПоляСтруктуры + ", ДатаОтгрузки, ПричинаОтмены, Содержание";
	КонецЕсли;

	ВспомогательныеПоля = "ХарактеристикиИспользуются, Отменено, ТипНоменклатуры, ВариантОформленияПродажи, СуммаОтменено, СуммаНДСОтменено,"
		+ " СуммаСНДСОтменено, СуммаАвтоматическойСкидкиОтменено, СуммаРучнойСкидкиОтменено";
	ИтоговыеПоляСтруктуры = ПоляСтруктуры + ", " + ВспомогательныеПоля;
	
	ИдТЧТовары = НРег("0738E61B-F06F-464A-8483-4249E0254819"); // идентификатор ТЧ "Товары" у Заказа в МТ 2.0
	ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
	
	ЗаполнятьХарактеристики = КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура("ПроверитьХарактеристикуПоВладельцу,ПроверитьЗаполнитьУпаковкуПоВладельцу,ПересчитатьКоличествоЕдиниц");
	// ЗадействоватьНалогообложениеНДС(СтруктураДействий, ОбъектДок); sk_181213 Процедура исключена
	
	//(( sk_181213
	Если гКонфигурация = "УТ_UA" Тогда
		Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
	Иначе
		НалогообложениеНДС = ОбъектДок.НалогообложениеНДС;
	КонецЕсли;
	//)) sk_181213
	
	//((vd_181213
	//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	иначе
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	КонецЕсли;	
	//))vd_181213

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));	
	СтруктураЗависимыхРеквизитов = Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС, СуммаАвтоматическойСкидки, СуммаРучнойСкидки");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураЗависимыхРеквизитов);
	//((vd_190326
	//Было:
	//СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", );
	стррЗаполненияЦеныВСтрокеТЧ = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ОбъектДок);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", стррЗаполненияЦеныВСтрокеТЧ);
	//))vd_190326
	
	//(( sk_181213
	Если ПоколениеКонфигурации(">=УТ_11.4.6.166") И ЗагрузкаВВидеЗаказа Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, ПоДатеОтгрузки", НалогообложениеНДС, ОбъектДок.Дата, Истина));
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.4.6.166") И Не ЗагрузкаВВидеЗаказа  Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, ОбъектДок.Дата));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	КонецЕсли;
	//)) sk_181213
	
	Если ЗагрузкаВВидеЗаказа Тогда
		Если гКонфигурация = "КА" Или гКонфигурация = "ERP" Тогда
			СтруктураДействий.Вставить("ЗаполнитьСодержание", Новый Структура("ЗаполнятьДляВсехУслуг", Ложь));
		Иначе	
			СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(ОбъектДок, Ложь));
		КонецЕсли;
	КонецЕсли;
		
	Если РежимЗагрузкиЗаказов = "СоздаватьНаОснованииРеализацию" Тогда // этот режим сейчас не поддерживается
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	ИначеЕсли ЗагрузкаВВидеЗаказа Тогда
		ВариантОбеспечения = УстановитьОбеспечениеЗаказа();	
	Иначе
		ВариантОбеспечения = Неопределено; 
	КонецЕсли;
	
	ПроставитьАдресДоставки(ОбъектДок, ТекстXML.ПолучитьАтрибут("A04")); // В МТ реквизит A04 - это GUID торговой точки
	
	//СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ОбъектДок.Склад);	
	
	//Настройка_РазрешитьРедактированиеЦенВТЧ = ВыбНастройкиАгента.НастройкиМобильногоПриложения.РазрешитьРедактироватьЦены.Значение;  //vd_180327 Ьаг 34413 Не загружаются в 1С измененные на МУ цены
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
				ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
				ИдВидЦены 			= ТекстXML.ПолучитьАтрибут("A015");
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				ТекВидЦены 			= УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
				ТекСклад 			= Справочники.Склады.ПустаяСсылка();

				Если ИспользоватьСкладыВТЧ Тогда
					ТекСклад = СсылкаИзСправочника(ИдСклад, "Склады");
					Если Не ТекСклад.Пустая() Тогда
						СкладГруппа = ТекСклад.Родитель;
						Если Не СкладГруппа.Пустая() Тогда
							Если Не СкладГруппа.ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда
								ОбъектДок.Склад = СкладГруппа;
							КонецЕсли;
						Иначе
							ОбъектДок.Склад = ТекСклад;	
						КонецЕсли;

						Если Не ЗагрузкаВВидеЗаказа Тогда
							СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
							Если Не СтруктураОтветственного = Неопределено Тогда
								ОбъектДок.Отпустил = СтруктураОтветственного.Ответственный;
								ОбъектДок.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если ТекСклад.Пустая() Тогда
					ТекСклад = ОбъектДок.Склад;
				КонецЕсли;

				НоваяСтрока = ОбъектДок.Товары.Добавить();
				ПроцентРучнойСкидки	= ?(СкидкаТЧ = 0, ОбщаяСкидка, СкидкаТЧ); // СД_260617 доработать для ограничения скидки по агенту.
				РежимВыгрузкиНоменклатуры = РежимВыгрузкиНоменклатуры;
				
				СтруктураЗаполнения = Новый Структура(ИтоговыеПоляСтруктуры, 
					ТекНоменклатура, ТекХарактеристика, ТекЕдиница, ТекСклад, ТекВидЦены, Цена,
						Количество, ПроцентРучнойСкидки, ОбъектДок.Соглашение.СрокПоставки);
					
				СтруктураЗаполнения.ХарактеристикиИспользуются = ЗаполнятьХарактеристики;
				СтруктураЗаполнения.Отменено = Ложь;
					
				Если ЗагрузкаВВидеЗаказа Тогда
					СтруктураЗаполнения.ДатаОтгрузки = ДатаДоставки;
				КонецЕсли;
				
				СтруктураДействий.ПроверитьХарактеристикуПоВладельцу = ТекХарактеристика;
				СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
				
				//{{vd_180327 Ьаг 34413 Не загружаются в 1С измененные на МУ цены
				//Если Настройка_РазрешитьРедактированиеЦенВТЧ = Истина Тогда 
					Если СтруктураЗаполнения.Цена <> Цена Тогда
						СтруктураДействий.Удалить("ЗаполнитьЦенуПродажи");
						СтруктураЗаполнения.Цена     = Цена;
						СтруктураЗаполнения.ВидЦены  = Справочники.ВидыЦен.ПустаяСсылка();
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
						СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", стррЗаполненияЦеныВСтрокеТЧ);  //vd_190326
					КонецЕсли;
				//КонецЕсли;	
				//}}vd_180327
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
				
				Если ВариантОбеспечения <> Неопределено И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					НоваяСтрока.ВариантОбеспечения = ВариантОбеспечения;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ЗагрузкаВВидеЗаказа Тогда
		ОбъектДок.ЗаполнитьЭтапыГрафикаОплаты();
	КонецЕсли;
	
	Результат = ЗаписьДокумента(ОбъектДок, стррЗначения, стррПараметры.ЭтоНовый);
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = "На основании документа """ + Строка(ОбъектДок.Ссылка) + """ не будет создан документ ""Реализация товаров и услуг"", т.к. он помечен на удаление.";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		Иначе
			//Если РежимЗагрузкиЗаказов = СоздаватьНаОснованииРеализацию Тогда
			//	ВвестиРеализациюНаОснованииЗаявки(ОбъектДок);
			//КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) И ЗначениеЗаполнено(ИдМерчендайзинга) Тогда // нужно запомнить ссылку на документ мерчендайзинга, чтобы при загрузке документа Мерчендайзинг ее проставить.
		СтрокаТ = ЗагружаемыеОбъекты.тзСсылкиНаМерчендайзинг.Добавить();
		СтрокаТ.Документ		 = ОбъектДок.Ссылка;
		СтрокаТ.ИдМерчендайзинга = ИдМерчендайзинга;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция ЗагрузитьДокументРеализация(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)

	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	стррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	стррЗначения.ИдКлиента		= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A02")); //vd_180710 РежимВыгрузкиРекомендуемый
	стррЗначения.ИдСоглашения	= ТекстXML.ПолучитьАтрибут("A04");
	стррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A07"));
	стррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A09");
	стррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A010");
	стррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A012");
	стррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A013");
	стррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A016"));
	стррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));

	ОбщаяСкидка 		= Число(ТекстXML.ПолучитьАтрибут("A05"));
	ВидЦены 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "ВидыЦен");
	ОбщийВес 			= Число(ТекстXML.ПолучитьАтрибут("A08"));
	//ДатаДоставки 		= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	ИдДокОснования 	 	= ТекстXML.ПолучитьАтрибут("A011");
	ИдМерчендайзинга	= ВРег(ТекстXML.ПолучитьАтрибут("A015"));
	ВидОплаты 			= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A018")); 
	//Склад 				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A023"), "Склады");
	ВалютаУчета			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	//ОбъектДок.Заполнить(Неопределено); //vd_180716 некорректно заполняет реквизиты. К примеру заполняет организацию по предыдущей реализации и сответственно это влияет на соглашения. Также заполняет использование НДС по предыдущей реализации.	
	
	ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;
	
		
	//vd_180710 РежимВыгрузкиРекомендуемый
	Если ИспользоватьПунктыРазгрузки И НЕ РежимВыгрузкиРекомендуемый Тогда
		стррЗначения.ИдПунктаРазгрузки = ТекстXML.ПолучитьАтрибут("A03");
	
		//{{vd_180503
		Если ИспользоватьКонтрагентов Тогда
			стррОбязательныеПоля = Новый Структура("Организация, Контрагент, ПунктРазгрузки");
		Иначе
			стррОбязательныеПоля = Новый Структура("Организация, Партнер, ПунктРазгрузки");
		КонецЕсли;
		
		Если ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" Тогда
			стррОбязательныеПоля.Вставить("Соглашение");	
		ИначеЕсли ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" Тогда
			стррОбязательныеПоля.Вставить("Договор");
		ИначеЕсли ИспользоватьКонтрагентов Тогда
			стррОбязательныеПоля.Вставить("Договор");
		Иначе
			стррОбязательныеПоля.Вставить("Соглашение");
		КонецЕсли;
		//}}vd_180503 
		
	Иначе
		//{{vd_180413 Баг 38286. ЗагрузкаКонтрагентов.
		Если ИспользоватьКонтрагентов = Истина Тогда
			стррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A02"), ТекстXML.ПолучитьАтрибут("A03")); //vd_180710 РежимВыгрузкиРекомендуемый	
		КонецЕсли;
		//}}vd_180413 Баг 38286. ЗагрузкаКонтрагентов.
		стррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	КонецЕсли;
	
	//++ЗАПОЛНИТЬ ОСНОВНЫЕ РЕКВИЗИТЫ
	ДокМенеджер = Документы.РеализацияТоваровУслуг;
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, стррЗначения, ДокМенеджер, стррОбязательныеПоля);
	//--Заполнить ОСНОВНЫЕ РЕКВИЗИТЫ
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОбъектДок); //vd_180716 Заполняет и перезаполняет реквизиты "Руководитель" и "Главный бухгалтер" 
	
	ОснованиеЗаказ = СсылкаИзДокумента(ИдДокОснования, "ЗаказКлиента");
	Если ЗначениеЗаполнено(ОснованиеЗаказ) Тогда
		ОбъектДок.ЗаказКлиента = ОснованиеЗаказ;
		ОбъектДок.РеализацияПоЗаказам = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбНастройкиАгента.ОсновнойСклад) Тогда 
		ОбъектДок.Склад = ВыбНастройкиАгента.ОсновнойСклад;
	КонецЕсли;
	
	ОбъектДок.Валюта = ВалютаУчета;
	
	ОбъектДок.СпособДоставки = СпособДоставки; //vd_180330
	
	Соглашение = ОбъектДок.Соглашение;
	Если ЗначениеЗаполнено(Соглашение) Тогда	
		
		ОбъектДок.ПорядокРасчетов = Соглашение.ПорядокРасчетов;
		
		//{{vd_181009
		//Если ПоколениеКонфигурации("<УТ_11.3") И (гКонфигурация = "УТ" ИЛИ гКонфигурация = "УТ_UA" ИЛИ гКонфигурация = "УТ_KZ") Тогда 
		//	ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению(); // В названии процедуры английская "C"
		//Иначе
		//	ОбъектДок.ЗаполнитьУсловияПродажПоСоглашению(); // В названии процедуры русская "C"
		//КонецЕсли;
		ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок);
		//}}vd_181009

		
		ОбъектДок.Валюта = ВалютаУчета;
		
		ХозяйственнаяОперацияДоговора = ?(
			ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
			ОбъектДок.ХозяйственнаяОперация
		);
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ОбъектДок, ХозяйственнаяОперацияДоговора, ОбъектДок.ВалютаВзаиморасчетов);
		Если Не Договор = ОбъектДок.Договор Тогда
			ОбъектДок.Договор = Договор;
			ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
		КонецЕсли;
		
		
		//{{vd_180912 создана процедура для заполнения реквизита НалогообложениеНДС
		//Если гКонфигурация <> "УТ_UA" Тогда
		//	//{{ vd_180716
		//	//Было
		//	//Если ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда		
		//	//	Если ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		//	//		ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		//	//	КонецЕсли;		
		//	//КонецЕсли;
		//	Если ПоколениеКонфигурации(">=УТ_11.4.5.24") Тогда
		//		НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Договор , ОбъектДок.НаправлениеДеятельности, ТекущаяДата());
		//	Иначе
		//		НалогообложениеНДС = Соглашение.НалогообложениеНДС;
		//	КонецЕсли;
		//	
		//	ОбъектДок.НалогообложениеНДС = НалогообложениеНДС; //vd_180815 Видимо не добавил, не тестировано
		//	//}}			
		//КонецЕсли;
		
		ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок);
		//}}vd_180912 создана процедура для заполнения реквизита НалогообложениеНДС
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.РеализацияТоваровУслуг.ПараметрыУказанияСерий(ОбъектДок));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДок,ПараметрыУказанияСерий);
		
	Иначе 
		
		// При заполнении по условиям продаж организация может замениться на другую. Сохраним ее, а потом подставим.
		//ОрганизацияДоИзменения = ОбъектДок.Организация;
		ОрганизацияДоИзменения = ОбъектДок.Организация;
		ОбъектДок.ЗаполнитьУсловияПродажПоУмолчанию();
		ОбъектДок.Организация = ОрганизацияДоИзменения;
		ОбъектДок.Валюта = ВалютаУчета;
		
		
		//{{vd_180912 создана процедура для заполнения реквизита НалогообложениеНДС
		//Если гКонфигурация <> "УТ_UA" Тогда  //vd_180815 
		//	//{{ vd_180718
		//	Если ПоколениеКонфигурации(">=УТ_11.4.5.24") Тогда
		//		//vd_180815 Не запускается на УТ_UA
		//		//НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(ОбъектДок.НаправлениеДеятельности, ОбъектДок.Соглашение, ОбъектДок.Договор);
		//		ОбщийМодуль = Вычислить("НаправленияДеятельностиСервер");
		//		ОбщийМодуль.ЗаполнитьНаправлениеПоУмолчанию(ОбъектДок.НаправлениеДеятельности, ОбъектДок.Соглашение, ОбъектДок.Договор);
		//		
		//		ОбъектДок.НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Договор, ОбъектДок.НаправлениеДеятельности, ОбъектДок.Дата);
		//	ИначеЕсли ЗначениеЗаполнено(Соглашение) Тогда
		//		ОбъектДок.НалогообложениеНДС = ОбъектДок.Соглашение.НалогообложениеНДС;
		//	Иначе
		//		ОбъектДок.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(ОбъектДок.Организация,, ТекущаяДата());
		//	КонецЕсли;
		//	//}} vd_180718
		//КонецЕсли;
		
		ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок);
		//}}vd_180912 создана процедура для заполнения реквизита НалогообложениеНДС
		
		
	КонецЕсли;
	
	Если гКонфигурация <> "УТ_UA" Тогда // gi_180523 проверка для УТ для Украины
		СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
		Если Не СтруктураОтветственного = Неопределено Тогда
			ОбъектДок.Отпустил = СтруктураОтветственного.Ответственный;
			ОбъектДок.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ОбъектДок.РеализацияПоЗаказам Тогда		
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ОбъектДок.Склад);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ОбъектДок.Склад, СкладГруппа, ОбъектДок.Товары, Истина); 		
	КонецЕсли;
	
	ОбъектДок.Основание   = "";		
	ОбъектДок.ФормаОплаты = ВидОплаты;
	
	//vd_180322 Баг 37993. Статусы реализации
	Если СтатусРеализацияТоваровУслуг = Неопределено Тогда
		ОбъектДок.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	Иначе
		ОбъектДок.Статус = СтатусРеализацияТоваровУслуг;
    КонецЕсли;
	
	ПроставитьАдресДоставки(ОбъектДок, ТекстXML.ПолучитьАтрибут("A03")); // В МТ реквизит A04 - это GUID торговой точки
	
	//ОбъектДок.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ОбъектДок.Контрагент); //vd_180717 Заполнение банковского счета контрагента
	
	//++++ ТАБЛИЧНА ЧАСТЬ ////////////////////////////////////////
	
		Если Не ОбъектДок.ЭтоНовый() Тогда
			ОбъектДок.Товары.Очистить();		
		КонецЕсли;
		
		ИдТЧТовары = НРег("E4D61E0A-1D62-48D7-B70C-BCBA935D377A"); // идентификатор ТЧ "Товары" у Реализации в МТ 2.0
		ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
		
		ЗаполнятьХарактеристики = КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;
		КэшированныеЗначения    = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		//++ СтруктураЗаполнения
		
		ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки, " +
							"Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, " + 
				  				"ПроцентАвтоматическойСкидки, СтатусУказанияСерий, СуммаВзаиморасчетов, ЗаказКлиента";
		
		ДопПоля = "ХарактеристикиИспользуются, ТипНоменклатуры";
		
		СтруктураЗаполнения = Новый Структура(ПоляСтруктуры + ", " + ДопПоля); //vd_180716 СтруктураЗаполнения Вынесена за пределы цикла ТЧ
		
		//-- СтруктураЗаполнения
		
		//++ СтруктураДействий //vd_180716 Изменана
		
		СтруктураДействий = Новый Структура; 
		
		//(( sk_181213
		// СтруктураПересчетаСуммы          = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
		Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
		иначе
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
		КонецЕсли;	
		//)) sk_181213
		
		СтруктураЗаполненияЦеныВСтрокеТЧ = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ОбъектДок);
		
		//{{vd_180912
		//НалогообложениеНДС	 = ПолучитьНалогообложениеНДС(ОбъектДок); //vd_180912 удалена функция;
		Если гКонфигурация = "УТ_UA" Тогда
			Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
		Иначе
			НалогообложениеНДС = ОбъектДок.НалогообложениеНДС;
		КонецЕсли;
		//}}					

		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу");
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		//((vd_181213 
		Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", ОбъектДок.НалогообложениеНДС, ОбъектДок.Дата));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);	
		КонецЕсли;
		//))vd_181213 

		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",    			 СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",   			 СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",   			 СтруктураЗаполненияЦеныВСтрокеТЧ);
		
		//ЗадействоватьНалогообложениеНДС(СтруктураДействий, ОбъектДок); //vd_180716 Процедура заменена на функцию
		//-- СтруктураДействий
		
		ТекстXML.Прочитать();
		Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекстXML.Прочитать();
			Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
				Пока ТекстXML.Прочитать() Цикл
					Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						ТекстXML.Пропустить();
						Прервать;
					КонецЕсли;
					Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Продолжить;
					КонецЕсли;
					
					ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
					ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
					ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
					Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
					Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
					Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
					СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
					Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
					СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
					СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
					ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
					ИдВидЦены 			= ТекстXML.ПолучитьАтрибут("A015");
					
					ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
					ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
					ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
					ТекВидЦены 			= УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
					ТекСклад 			= Справочники.Склады.ПустаяСсылка();
					
					Если ИспользоватьСкладыВТЧ Тогда
						ТекСклад = СсылкаИзСправочника(ИдСклад, "Склады");
						Если Не ТекСклад.Пустая() Тогда
							СкладГруппа = ТекСклад.Родитель;
							Если Не СкладГруппа.Пустая() Тогда
								Если Не СкладГруппа.ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда
									ОбъектДок.Склад = СкладГруппа;
								КонецЕсли;
							Иначе
								ОбъектДок.Склад = ТекСклад;	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ТекСклад.Пустая() Тогда
						ТекСклад = ОбъектДок.Склад;
					КонецЕсли;
					
					НоваяСтрока = ОбъектДок.Товары.Добавить();
					ПроцентРучнойСкидки	= ?(СкидкаТЧ = 0, ОбщаяСкидка, СкидкаТЧ);
					РежимВыгрузкиНоменклатуры = РежимВыгрузкиНоменклатуры;

					//{{ vd_180716 СтруктураЗаполнения Вынесена за пределы цикла ТЧ и все свойства назначаются построчно (через свойства)
					//СтруктураЗаполнения = Новый Структура(ИтоговыеПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, ТекСклад, ТекВидЦены, Цена, Количество, ПроцентРучнойСкидки, ОбъектДок.Соглашение.СрокПоставки);
					СтруктураЗаполнения.Номенклатура		       = ТекНоменклатура;
					СтруктураЗаполнения.Характеристика			   = ТекХарактеристика;
					СтруктураЗаполнения.Упаковка				   = ТекЕдиница;
					СтруктураЗаполнения.Склад					   = ТекСклад;
					СтруктураЗаполнения.ВидЦены					   = ТекВидЦены;
					СтруктураЗаполнения.Цена					   = Цена;
					СтруктураЗаполнения.КоличествоУпаковок		   = Количество;                       //vd_180716 СтруктураЗаполнения.КоличествоУпаковок = Количество;
					СтруктураЗаполнения.ПроцентРучнойСкидки		   = ПроцентРучнойСкидки;
					СтруктураЗаполнения.СрокПоставки 			   = ОбъектДок.Соглашение.СрокПоставки;
					СтруктураЗаполнения.ХарактеристикиИспользуются = ЗаполнятьХарактеристики;
					СтруктураЗаполнения.ТипНоменклатуры            = Неопределено;                       //vd_180716 Не заполнено
					СтруктураЗаполнения.Количество				   = Неопределено;                       //vd_180716 Не заполнено
					СтруктураЗаполнения.Сумма					   = Неопределено; 						 //vd_180716 Не заполнено
					СтруктураЗаполнения.СтавкаНДС				   = Неопределено; 						 //vd_180716 Не заполнено
					СтруктураЗаполнения.СуммаНДС				   = Неопределено; 						 //vd_180716 Не заполнено
					СтруктураЗаполнения.СуммаСНДС				   = Неопределено; 						 //vd_180716 Не заполнено
					СтруктураЗаполнения.СуммаРучнойСкидки		   = Неопределено; 						 //vd_180716 Не заполнено
					СтруктураЗаполнения.СуммаАвтоматическойСкидки  = Неопределено; 						 //vd_180716 Не заполнено
					СтруктураЗаполнения.ПроцентАвтоматическойСкидки= Неопределено; 						 //vd_180716 Не заполнено
					СтруктураЗаполнения.СтатусУказанияСерий		   = Неопределено; 						 //vd_180716 Не заполнено
					СтруктураЗаполнения.СуммаВзаиморасчетов		   = Неопределено;     					 //vd_180716 Не заполнено
					СтруктураЗаполнения.ЗаказКлиента			   = Неопределено; 						 //vd_180716 Не заполнено
					//}} vd_180716
					
					СтруктураДействий.ПроверитьХарактеристикуПоВладельцу    = ТекХарактеристика;
					СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
					
					//{{vd_180327 Ьаг 34413 Не загружаются в 1С измененные на МУ цены/
					Если СтруктураЗаполнения.Цена <> Цена Тогда
						СтруктураДействий.Удалить("ЗаполнитьЦенуПродажи");
						СтруктураЗаполнения.Цена     = Цена;
						СтруктураЗаполнения.ВидЦены  = Справочники.ВидыЦен.ПустаяСсылка();
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
						СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦеныВСтрокеТЧ); //vd_190326
					КонецЕсли;
					//}}vd_180327 Ьаг 34413 Не загружаются в 1С измененные на МУ цены/
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//---- ТАБЛИЧНА ЧАСТЬ ////////////////////////////////////////

	
	Результат = ЗаписьДокумента(ОбъектДок,  стррЗначения, стррПараметры.ЭтоНовый);
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = "На основании документа """ + Строка(ОбъектДок.Ссылка) + """ не будет создан документ ""Реализация товаров и услуг"", т.к. он помечен на удаление.";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) И ЗначениеЗаполнено(ИдМерчендайзинга) Тогда // нужно запомнить ссылку на документ мерчендайзинга, чтобы при загрузке документа Мерчендайзинг ее проставить.
		СтрокаТ = ЗагружаемыеОбъекты.тзСсылкиНаМерчендайзинг.Добавить();
		СтрокаТ.Документ		 = ОбъектДок.Ссылка;
		СтрокаТ.ИдМерчендайзинга = ИдМерчендайзинга;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьДокументРеализация()

//vd_180319 Добавление Поступления/Возвраты. Добавил функцию.
Функция ЗагрузитьДокументПоступлениеВозврат(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)

	ОбъектДок = стррПараметры.ОбъектДокумента;
	ВыбАгент  = ВыбАгент;
	
	стррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	стррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	стррЗначения.ИдКлиента		= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"),ТекстXML.ПолучитьАтрибут("A02")); //vd_180710 РежимВыгрузкиРекомендуемый
	стррЗначения.ИдСоглашения	= ТекстXML.ПолучитьАтрибут("A04");
	стррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A07"));
	стррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A09");
	стррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A010");
	стррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A013");
	стррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A014");
	стррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
	стррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A018"));

	ОбщаяСкидка 		= Число(ТекстXML.ПолучитьАтрибут("A05"));
	ВидЦены 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "ВидыЦен");
	ОбщийВес 			= Число(ТекстXML.ПолучитьАтрибут("A08"));
	ИдДокОснования 	 	= ТекстXML.ПолучитьАтрибут("A011");
	ВидОплаты 			= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A019")); 
	Склад 				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A016"), "Склады");
	ВалютаУчета			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");

	ОбъектДок.Заполнить(Неопределено);
	
	ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;
	
	ДокМенеджер = Документы[ОбъектДок.Метаданные().Имя];	// ДокМенеджер = Документы.ВозвратТоваровОтКлиента;   //ПоступлениеТоваровУслуг или ВозвратТоваровОтКлиента
	
	Если ИспользоватьПунктыРазгрузки Тогда
		стррЗначения.ИдПунктаРазгрузки = ТекстXML.ПолучитьАтрибут("A03");
		стррОбязательныеПоля = Новый Структура("Организация, Контрагент, ПунктРазгрузки, Договор");
	Иначе
		//{{vd_180413 Баг 38286. ЗагрузкаКонтрагентов.
		Если ИспользоватьКонтрагентов = Истина Тогда
			стррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый,ТекстXML.ПолучитьАтрибут("A02") ,ТекстXML.ПолучитьАтрибут("A03")); //vd_180710 РежимВыгрузкиРекомендуемый	
		КонецЕсли;
		//}}vd_180413 Баг 38286. ЗагрузкаКонтрагентов.
		стррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	КонецЕсли;
	
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, стррЗначения, ДокМенеджер, стррОбязательныеПоля);
	
	ЭтоВозврат = Истина;
	Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект." + ВидДокументаПоступлениеТоваровУслуг()) Тогда		
		ЭтоВозврат = Ложь;		
	КонецЕсли;
	
	ЭтоЗаявкаНаВозвратТоваровОтКлиента = Ложь;
	Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда		
		ЭтоЗаявкаНаВозвратТоваровОтКлиента = Истина;
	КонецЕсли;   	

	Если Склад.Пустая() Тогда		
		Если ВыбНастройкиАгента.МобильныйСклад.Пустая() Тогда
			Склад = ВыбНастройкиАгента.ОсновнойСклад;
		Иначе
			Склад = ВыбНастройкиАгента.МобильныйСклад;
		КонецЕсли;	
	КонецЕсли;
	
	ОбъектДок.Склад = Склад;	
	
	ОбъектДок.Валюта = ВалютаУчета;    	
	
	Если ЭтоВозврат Тогда	
		ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		//vd_181129
		Если ЭтоЗаявкаНаВозвратТоваровОтКлиента И ТекстXML.ЗначениеАтрибута("A024") <> Неопределено Тогда
			ОбъектДок.ЖелаемаяДатаПоступления = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A024"));		
		КонецЕсли;		
	Иначе
		//vd_181220 MOD-212
		Если НЕ ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда
			ОбъектДок.ДатаПлатежа   = ОбъектДок.Дата;
		КонецЕсли;
		
		СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
		Если Не СтруктураОтветственного = Неопределено Тогда
			ОбъектДок.Принял 		  = СтруктураОтветственного.Ответственный;
			ОбъектДок.ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
		КонецЕсли;
		
		Если ВидОплаты = Неопределено Тогда
			ОбъектДок.ФормаОплаты = ВидОплаты;			
		Иначе
			ОбъектДок.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
		КонецЕсли;                              	
	КонецЕсли;
	
	Соглашение = ОбъектДок.Соглашение;
		
	Если ЗначениеЗаполнено(Соглашение) Тогда
		
		//{{vd_181009
		//Если ПоколениеКонфигурации("<УТ_11.3") И (гКонфигурация = "УТ" ИЛИ гКонфигурация = "УТ_UA" ИЛИ гКонфигурация = "УТ_KZ") Тогда 
		//	ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению(); // В названии процедуры английская "C"
		//Иначе
		//	ОбъектДок.ЗаполнитьУсловияПродажПоСоглашению(); // В названии процедуры русская "C"
		//КонецЕсли;
		ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок);
		//}}vd_181009

		
		Если Не ЗначениеЗаполнено(ОбъектДок.Склад) Тогда
			ОбъектДок.Склад = Соглашение.Склад;
		КонецЕсли;
					
		Если Не ЭтоВозврат Тогда	
			ОбъектДок.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;
			Если Не ЗначениеЗаполнено(ОбъектДок.ХозяйственнаяОперация) Тогда
				ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			КонецЕсли;
			Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
				ОбъектДок.Договор,
				ОбъектДок.Партнер,
				ОбъектДок.Контрагент,
				ОбъектДок.Организация,
				ОбъектДок.ХозяйственнаяОперация,,
				ОбъектДок.ВалютаВзаиморасчетов,
				ОбъектДок.Соглашение
				);
			Если Не Договор = ОбъектДок.Договор Тогда
				ОбъектДок.Договор = Договор;
				ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
			КонецЕсли;	
		КонецЕсли;
		
		ОбъектДок.Валюта = ВалютаУчета;
		
		
		//{{vd_180912 создана процедура для заполнения реквизита НалогообложениеНДС

		////{{vd_180622 НДС
		////Было:
		//////(( gi_180523 переделано для конфигурации УТ для Украины
		////НалогообложениеНДС = Соглашение.НалогообложениеНДС; 		
		////Если гКонфигурация <> "УТ_UA" Тогда // gi_180523 добавлена проверка для конфигурации Украины
		////	ОбъектДок.НалогообложениеНДС = НалогообложениеНДС;
		////КонецЕсли; 
		//////)) gi_180523
		//
		//// vd_180622 Соглашение.НалогообложениеНДС реквизит удален в типовом справочнике СоглашенияСКлиентамитиповой начина с версии УТ_11.4.5.24
		//Если ПоколениеКонфигурации(">=УТ_11.4.5.24") Тогда
		//	НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Договор , ОбъектДок.НаправлениеДеятельности, ТекущаяДата());
		//Иначе
		//	НалогообложениеНДС = Соглашение.НалогообложениеНДС;	
		//Конецесли;
		//
		//Если гКонфигурация <> "УТ_UA" Тогда
		//	ОбъектДок.НалогообложениеНДС = НалогообложениеНДС;
		//КонецЕсли;
		////}}vd_180622 НДС
		
		ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок);
		//}}vd_180912 создана процедура для заполнения реквизита НалогообложениеНДС

		
		ОбъектДок.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;		
	КонецЕсли;
	
	
	Если Не ОбъектДок.ЭтоНовый() Тогда
		Если ЭтоЗаявкаНаВозвратТоваровОтКлиента Тогда
			ОбъектДок.ВозвращаемыеТовары.Очистить();
		Иначе
			ОбъектДок.Товары.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		ИдТЧТовары = "235dc1ea-5963-4dcd-95e1-e8cef487a2ae";
	Иначе
		ИдТЧТовары = "a10221fa-5ac6-4e8c-80d8-d40d8dfc7779";
	КонецЕсли;
	
	//{{vd_180912
	//НалогообложениеНДС	 = ПолучитьНалогообложениеНДС(ОбъектДок); //vd_180912 удалена функция;
	Если гКонфигурация = "УТ_UA" Тогда
		Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
	Иначе
		НалогообложениеНДС = ОбъектДок.НалогообложениеНДС;
	КонецЕсли;
	//}}vd_180912       
	
	//(( gi_180523 создание структур вынесено за цикл перебора строк - для повышения скорости загрузки документа
	// СтруктураПересчетаСуммы          = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок); //vd_181220
	
	СтруктураДействий = Новый Структура;   		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	//((vd_181213
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   НалогообложениеНДС); // переделка, было: ОбъектДок.НалогообложениеНДС
	Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда
		//((vd_181220
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок); 
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, ОбъектДок.Дата));
		//))vd_181220
	Иначе
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок); //vd_181220
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);	
	КонецЕсли;
	//))vd_181213

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);				
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);				
	СтруктураДействий.Вставить("ПересчитатьСумму");
	//)) gi_180523

	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				Скидка 				= Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
				СуммаСкидки		 	= Число(ТекстXML.ПолучитьАтрибут("A011"));
				         
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				ТекВидЦены 			= ВидЦены;   // УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
				ТекСклад 			= Справочники.Склады.ПустаяСсылка();
				
				Если ЭтоЗаявкаНаВозвратТоваровОтКлиента Тогда
					НоваяСтрока = ОбъектДок.ВозвращаемыеТовары.Добавить();
				Иначе
					НоваяСтрока = ОбъектДок.Товары.Добавить();
				КонецЕсли;
				
				Если ЭтоВозврат Тогда
					Если СуммаСкидки > 0 Тогда
						Цена = Цена - (СуммаСкидки/Количество);
						Текст = "Цена в документе """ + Строка(ОбъектДок.Ссылка) + """ пересчитана с учетом скидки в МУ.";
						ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
					КонецЕсли;
					ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок";
					СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, 
					Цена, Количество);
				Иначе
					ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Склад";
					СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, Цена, Количество, ОбъектДок.Склад);
				КонецЕсли;				
				
				// gi_180523 создание структуры СтруктураДействий вынесено за цикл
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрока.Упаковка);
					
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);			
				
				Если Не ЭтоВозврат Тогда
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));							
				КонецЕсли;
				
				КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если ЭтоВозврат Тогда		
		// Добавляем запись в вспомогательную таблицу
		ТаблицаДокументовПоступлений = ЗагружаемыеОбъекты.тзДокументыПоступлений; 
		НоваяЗапись = ТаблицаДокументовПоступлений.Добавить();
		НоваяЗапись.Документ 	 = ОбъектДок;
		НоваяЗапись.стррЗначения = стррЗначения;
		НоваяЗапись.ЭтоНовый     = ОбъектДок.ЭтоНовый();
		НоваяЗапись.ИдОснования	 = ИдДокОснования;
		ЗагружаемыеОбъекты.тзДокументыПоступлений = ТаблицаДокументовПоступлений;
		Результат = Истина; // gi_180523 - для сохранения подтверждения документа 
	Иначе		
		Результат = ЗаписьДокумента(ОбъектДок,  стррЗначения, стррПараметры.ЭтоНовый);
	КонецЕсли; 
	
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = "На основании документа """ + Строка(ОбъектДок.Ссылка) + """ не будет создан документ ""Возврат товаров от клиента"", т.к. он помечен на удаление.";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьДокументПоступление ()

Функция ЗагрузитьДокументСчетФактура(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)
	
	Результат = Ложь;
	
	стррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	ИдДокОснования 	= ТекстXML.ПолучитьАтрибут("A01");
	ДокОснование 	= СсылкаИзДокумента(ИдДокОснования, "РеализацияТоваровУслуг");
	Если ЗначениеЗаполнено(ДокОснование) Тогда
		ОбъектОснования = ДокОснование.ПолучитьОбъект(); 		
		Если ОбъектОснования <> Неопределено Тогда
			СсылкаОснования 			= ОбъектОснования.Ссылка; 
			ОбъектДок = стррПараметры.ОбъектДокумента;	
			ОбъектДок.Организация 	  	= СсылкаОснования.Организация;
			ОбъектДок.ДатаВыставления 	= стррЗначения.Дата;
			стррДанныеЗаполнения 		= Новый Структура("ДокументОснование, Дата, КодВидаОперации, Исправление", 
														СсылкаОснования, СсылкаОснования.Дата, 0, Ложь);
			ОбъектДок.Заполнить(стррДанныеЗаполнения);
			Результат = ЗаписьДокумента(ОбъектДок, стррЗначения, стррПараметры.ЭтоНовый); 
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		стррПараметры.ПропускДокумента = Истина;
	КонецЕсли;			
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьДокументСчетФактура()

Функция ЗагрузитьДокументПеремещение(ТекстXML, стррПараметры) // sd_22082017
	
	ОбъектДок =  стррПараметры.ОбъектДокумента;
	
	стррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	стррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	стррЗначения.ИдКатегории	= ТекстXML.ПолучитьАтрибут("A02");
	стррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A06");
	стррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A07");
	стррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A08");
	стррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	стррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A011"));
	
	СкладОтправитель = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A03"), "Склады");
	СкладПолучатель	 = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "Склады");
	ВидЦены			 = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A09"), "ВидыЦен");
	
	ОбъектДок.Заполнить(Неопределено);
	ОбъектДок.Ответственный = ВыбНастройкиАгента.Пользователь;
	
	ДокМенеджер = Документы.ПеремещениеТоваров;
	
	стррОбязательныеПоля = Новый Структура("Организация");
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, стррЗначения, ДокМенеджер, стррОбязательныеПоля);
	
	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		Текст = "В документе Перемещение товаров № " + стррЗначения.Номер + " от " + стррЗначения.Дата + "  не указан склад-отправитель!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	Иначе 
		ОбъектДок.СкладОтправитель = СкладОтправитель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		Текст = "В документе Перемещение товаров № " + стррЗначения.Номер + " от " + стррЗначения.Дата + "  не указан склад-получатель!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	Иначе 
		ОбъектДок.СкладПолучатель = СкладПолучатель;
	КонецЕсли;
	
	ОбъектДок.Статус   				= Перечисления.СтатусыПеремещенийТоваров.Принято;
	ОбъектДок.ВидЦены  				= ВидЦены;
	ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	
	Если Не ОбъектДок.ЭтоНовый() Тогда		
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
	ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, Количество";
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура("ПроверитьЗаполнитьУпаковкуПоВладельцу,ПересчитатьКоличествоЕдиниц");
	
	ИдТЧТовары = НРег("3097F10A-BEE6-4A76-AD7A-D4663C9B73EC"); // идентификатор ТЧ "Товары" у Перемещения в МТ 2.0
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				
				НоваяСтрока = ОбъектДок.Товары.Добавить();
				
				СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, Количество);
				
				СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаписьДокумента(ОбъектДок,  стррЗначения, стррПараметры.ЭтоНовый);
	
	Возврат Результат;
	
КонецФункции

//!!! Переделать! Можно сразу загружать кассовый ордер в БД и после проставлять ссылки.
Процедура ЗагрузитьДокументКассовыйОрдер(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)

	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	стррЗначения.ИдОрганизации	= ТекстXML.ПолучитьАтрибут("A01");
	стррЗначения.ИдКлиента		= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A02")); //vd_180710 РежимВыгрузкиРекомендуемый
	стррЗначения.ИдСоглашения 	= ТекстXML.ПолучитьАтрибут("A04");
	стррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A06");
	стррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A07"));
	стррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A011");
	стррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A012");
	стррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A013");
	стррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014"));
	стррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A015"));
	
	//{{vd_180413 Баг 38286. ЗагрузкаКонтрагентов.
	Если ИспользоватьКонтрагентов = Истина Тогда
		стррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A02"), ТекстXML.ПолучитьАтрибут("A03")); //vd_180710 РежимВыгрузкиРекомендуемый	
	КонецЕсли;
	//}}vd_180413 Баг 38286. ЗагрузкаКонтрагентов.

	ИдДокОснования	= ТекстXML.ПолучитьАтрибут("A09");
	ВидОплаты 		= ТекстXML.ПолучитьАтрибут("A016");
	
	ДокМенеджер = ?(ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер"), 
			Документы.ПриходныйКассовыйОрдер, Документы.РасходныйКассовыйОрдер);
	
	стррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, стррЗначения, ДокМенеджер, стррОбязательныеПоля);

	ОбъектДок.Кассир = ВыбНастройкиАгента.Пользователь;
	УстановитьКассуВКассовомОрдере(ОбъектДок);
	ОбъектДок.Валюта = ОбъектДок.Касса.ВалютаДенежныхСредств;

	Если ИспользоватьПунктыРазгрузки Тогда
		Клиент	 	= СсылкаИзСправочника(стррЗначения.ИдКлиента, "Контрагенты"); 
		Соглашение 	= СсылкаИзСправочника(стррЗначения.ИдСоглашения, "ДоговорыКонтрагентов");
	Иначе 
		Клиент	 	= СсылкаИзСправочника(стррЗначения.ИдКлиента, "Партнеры"); 
		Если ИспользоватьДоговоры() Тогда
		    Договор    = СсылкаИзСправочника(стррЗначения.ИдСоглашения, "ДоговорыКонтрагентов");
		Иначе			
			Соглашение = СсылкаИзСправочника(стррЗначения.ИдСоглашения, "СоглашенияСКлиентами");
		КонецЕсли; 
	КонецЕсли;
	// Реквизитов "Договор" и "Соглашения" в документе ПКО в 1С нет.
	
	УстановитьРеквизитыДляКонтрагентаВКассовомОрдере(ОбъектДок);
	УстановитьБанковскийСчетВКассовомОрдере(ОбъектДок);
	ОбъектДок.Комментарий = стррЗначения.Комментарий;
	
	// Заполняем строку табличной части "Расшифровка платежа"
	СтрокаПлатеж = ?(ОбъектДок.РасшифровкаПлатежа.Количество() > 0, ОбъектДок.РасшифровкаПлатежа[0], ОбъектДок.РасшифровкаПлатежа.Добавить());

	СтрокаПлатеж.Партнер 				= ?(ИспользоватьПунктыРазгрузки, Клиент.Партнер, Клиент);
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ОбъектДок.СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.Сумма 					= ОбъектДок.СуммаДокумента;
	СтрокаПлатеж.ВалютаВзаиморасчетов 	= ОбъектДок.Валюта;
	СтрокаПлатеж.СуммаВзаиморасчетов 	= ОбъектДок.СуммаДокумента;
	СтрокаПлатеж.Подразделение 			= ОбъектДок.Кассир[РеквизитОбъекта("Спр_Пользователи_Подразделение")];
	
	СтрокаТ = ЗагружаемыеОбъекты.тзКассовыеДокументы.Добавить();
	СтрокаТ.Документ 	 = ОбъектДок;
	СтрокаТ.стррЗначения = стррЗначения; // для записи значений доп. реквизитов
	СтрокаТ.ЭтоНовый 	 = стррПараметры.ЭтоНовый;
	СтрокаТ.ИдОснования  = ИдДокОснования;

КонецПроцедуры

Функция ЗагрузитьДокументМерчендайзинг(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)

	стррДокумент = стррПараметры.ОбъектДокумента; // для виртуальных документов стррДокумент - это Структура, которая будет записана в Хранилище
	
	стррЗначения = СвойстваДокументаИзXML("ДокументОснование");
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	стррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	стррЗначения.ИдКлиента	 	= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A02"));	//vd_180710 РежимВыгрузкиРекомендуемый
	//стррЗначения.ИдКонтрагента 	= ТекстXML.ПолучитьАтрибут("A03");	
	стррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A06"));
	стррЗначения.Комментарий   	= ТекстXML.ПолучитьАтрибут("A07");		
	стррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A08");
	стррЗначения.Широта	     	= ТекстXML.ПолучитьАтрибут("A09");
	стррЗначения.Долгота	    = ТекстXML.ПолучитьАтрибут("A010");			
	стррЗначения.ВремяНачала	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A013"));
	стррЗначения.ВремяОкончания = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014"));
	
	ВидЦены	        			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A05"), "ВидыЦен");	
	
	стррЗначения.ДокументОснование = СсылкаИзДокументаПоСпискуВидов(ТекстXML.ПолучитьАтрибут("A011"), "ЗаказКлиента,РеализацияТоваровУслуг");
	Если Не ЗначениеЗаполнено(стррЗначения.ДокументОснование) Тогда // пытаемся найти документ заказа или реализации среди загруженных и ссылающегося на загружаемый мерчендайзинг
		СтрокаТ = ЗагружаемыеОбъекты.тзСсылкиНаМерчендайзинг.Найти(ВРег(стррПараметры.ИдОбъекта), "ИдМерчендайзинга");
		Если СтрокаТ <> Неопределено Тогда
			стррЗначения.ДокументОснование = СтрокаТ.Документ;
		КонецЕсли; 
	КонецЕсли; 
	
	стррДокумент.Менеджер = ВыбНастройкиАгента.Пользователь;

	стррОбязательныеПоля = Новый Структура("Организация, Партнер");		
	ЗаполнитьОсновныеРеквизитыДокумента(стррДокумент, стррЗначения,, стррОбязательныеПоля);
	
	ИдТЧТовары = НРег("a9c8662f-9554-4deb-a78a-fb66dc757060"); // идентификатор ТЧ "Товары" у Мерчендайзинга в МТ 2.0
	
	тзТовары = стррДокумент.Товары;

	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = ТекстXML.ПолучитьАтрибут("A04");
				Цена			 = ТекстXML.ПолучитьАтрибут("A05");
				Сумма			 = ТекстXML.ПолучитьАтрибут("A07");
				ДоляПолки		 = ТекстXML.ПолучитьАтрибут("A09");
				КоличествоФейсов = ТекстXML.ПолучитьАтрибут("A010");
				
				СтрокаТ = тзТовары.Добавить();
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				
				СтрокаТ.Упаковка			= ТекЕдиница;				
				СтрокаТ.Номенклатура		= ТекНоменклатура;
				СтрокаТ.Характеристика		= ТекХарактеристика;
				СтрокаТ.КоличествоУпаковок  = Число(Количество);
				СтрокаТ.Цена      			= Число(Цена);
				СтрокаТ.Сумма     			= Число(Сумма);
				СтрокаТ.ДоляПолки		 	= Число(ДоляПолки);
				СтрокаТ.КоличествоФейсов 	= Число(КоличествоФейсов);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Результат = ЗаписьВиртуальногоДокумента(стррДокумент, стррЗначения, стррПараметры, ЗагружаемыеОбъекты);
	
	Возврат Результат;

КонецФункции

Функция ЗагрузитьДокументПосещение(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)

	стррДокумент = стррПараметры.ОбъектДокумента; // для виртуальных документов стррДокумент - это Структура, которая будет записана в Хранилище
	
	стррЗначения = СвойстваДокументаИзXML("РезультатПосещения,РезультатПосещения_Представление"); // см. процедуру ВДокТЗСоздать()
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	стррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	стррЗначения.ИдКлиента	 	= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03") , ТекстXML.ПолучитьАтрибут("A02"));	//vd_180710 РежимВыгрузкиРекомендуемый
	//стррЗначения.ИдКонтрагента 	= ТекстXML.ПолучитьАтрибут("A03"); // в МТ - это поле "ТорговаяТочка"	
	
	стрИдРезультата = ТекстXML.ПолучитьАтрибут("A04");
	Если ЗначениеЗаполнено(стрИдРезультата) Тогда
		идРезультата = Новый УникальныйИдентификатор(стрИдРезультата);
	Иначе	
		идРезультата = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли; 
	
	стррЗначения.РезультатПосещения 				= идРезультата;
	стррЗначения.РезультатПосещения_Представление   = ВОТЗПолучитьЗначениеРеквизита("_РезультатыПосещений", идРезультата, "Наименование");
	
	стррЗначения.Комментарий   	= ТекстXML.ПолучитьАтрибут("A05");		
	стррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A06");
	стррЗначения.Широта	     	= ТекстXML.ПолучитьАтрибут("A07");
	стррЗначения.Долгота	    = ТекстXML.ПолучитьАтрибут("A08");			
	стррЗначения.ВремяНачала	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A09"));
	стррЗначения.ВремяОкончания = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	
	стррДокумент.Менеджер 		= ВыбНастройкиАгента.Пользователь;

	стррОбязательныеПоля = Новый Структура("Организация, Партнер");		
	ЗаполнитьОсновныеРеквизитыДокумента(стррДокумент, стррЗначения,, стррОбязательныеПоля);
	ЗаполнитьЗначенияСвойств(стррДокумент, стррЗначения, "РезультатПосещения,РезультатПосещения_Представление");
	
	ИдТЧВопросы = НРег("99f6a8ce-3046-4782-ab5e-557f40243749"); // идентификатор ТЧ "Вопросы" у документа "Посещение" в МТ 2.0
	
	//тзВопросы = стррДокумент.Вопросы;

	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧВопросы Тогда
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдВопроса    = ТекстXML.ПолучитьАтрибут("A01");
				стрОтвет 	 = ТекстXML.ПолучитьАтрибут("A02");
				Обязательный = Булево(Число(ТекстXML.ПолучитьАтрибут("A03")));
				
				//СтрокаТ = тзВопросы.Добавить();
				//
				//СтрокаТ.Вопрос	= ???(ИдВопроса);
				//СтрокаТ.Ответ	= ???(Ответ);
				//СтрокаТ.Обязательный = Обязательный;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Результат = ЗаписьВиртуальногоДокумента(стррДокумент, стррЗначения, стррПараметры, ЗагружаемыеОбъекты);
	
	Возврат Результат;

КонецФункции

Функция ЗагрузитьДокументЗадание(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)

	стррДокумент = стррПараметры.ОбъектДокумента; // для виртуальных документов стррДокумент - это Структура, которая будет записана в Хранилище
	
	стррЗначения = СвойстваДокументаИзXML("НеИзменятьВМУ,СозданВЦБД,ДатаТочкиТрека,Договор,Соглашение");        
	Если стррЗначения.Свойство("СуммаДокумента") Тогда
		стррЗначения.Удалить("СуммаДокумента");
	КонецЕсли;
	
	ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML);
	
	стррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	стррЗначения.ИдКлиента	 	= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A02"));	//vd_180710 РежимВыгрузкиРекомендуемый
	
	Если ИспользоватьСоглашения() Тогда
		стррЗначения.Соглашение = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "СоглашенияСКлиентами");
	ИначеЕсли ИспользоватьДоговоры() Тогда
		стррЗначения.Договор = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "ДоговорыКонтрагентов");
	КонецЕсли;
	
	стррЗначения.Комментарий   	= ТекстXML.ПолучитьАтрибут("A05");		
	стррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A06");
		
	стррЗначения.ВремяНачала	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A07"));
	стррЗначения.ВремяОкончания = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A08"));
	стррЗначения.Широта	     	= ТекстXML.ПолучитьАтрибут("A011");
	стррЗначения.Долгота	    = ТекстXML.ПолучитьАтрибут("A012");
	стррЗначения.ДатаТочкиТрека = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A013"));
	
	стррЗначения.НеИзменятьВМУ  = ТекстXML.ПолучитьАтрибут("A09");
	стррЗначения.СозданВЦБД     = ТекстXML.ПолучитьАтрибут("A010");
	
	стррДокумент.Менеджер = ВыбНастройкиАгента.Пользователь;

	стррОбязательныеПоля = Новый Структура("Организация, Партнер");		
	ЗаполнитьОсновныеРеквизитыДокумента(стррДокумент, стррЗначения,, стррОбязательныеПоля);
	
	// Виртупльный справочник ВидыЗадач
	стррВидыЗадач = Новый Структура; // общие значения модуля формы
	ВОКонтекстФормыДополнить(стррВидыЗадач, "_ВидыЗадач", Истина);
	тзВидыЗадач = ВОТЗЗагрузить(стррВидыЗадач.ВО, Истина);

	тзЗадачи 	 = стррДокумент.Задачи;
	тзСписокФото = стррДокумент.СписокФото;	

	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "df5a99c3-4778-4cfb-b5f2-877449e05d3b" Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					//ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
			
				СтрокаТ = тзЗадачи.Добавить();
				СтрокаТ.GUID					= Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("GUID"));
				СтрокаТ.ВидЗадачи 				= Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("A01")); 
				
				стзВидЗадачиПредставление = тзВидыЗадач.Найти(СтрокаТ.ВидЗадачи, "ID");
				Если стзВидЗадачиПредставление = Неопределено Тогда
					СтрокаТ.ВидЗадачиПредставление 	= "Обьект не найден <" + Строка(СтрокаТ.ВидЗадачи) + ">";
					СтрокаТ.стрРезультат 	 = Неопределено;
					СтрокаТ.стрПредставление = "";
				Иначе
					СтрокаТ.ВидЗадачиПредставление 	= стзВидЗадачиПредставление.Наименование;
					СтрокаТ.Результат 	 			= ТекстXML.ПолучитьАтрибут("A04");
					СтрокаТ.РезультатПредставление  = "";
					ЗаполнитьРузультатДокументаЗадание(стзВидЗадачиПредставление.ТипЗадачи, СтрокаТ.Результат, СтрокаТ.РезультатПредставление)
				КонецЕсли;
				
				СтрокаТ.Комментарий            	= ТекстXML.ПолучитьАтрибут("A02");
				СтрокаТ.Обязательная            = Булево(Число(ТекстXML.ПолучитьАтрибут("A03")));

			КонецЦикла;
			
			ТекстXML.Прочитать();
			Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "d4ab3dc4-7fe1-439f-af1f-58d8a7e48767" Тогда
				Пока ТекстXML.Прочитать() Цикл
					Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						ТекстXML.Пропустить();
						Прервать;
					КонецЕсли;
					
					Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТ = тзСписокФото.Добавить();
					СтрокаТ.GUID 				=  Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("GUID"));
                    СтрокаТ.ИдЗадачиДокумента  	=  Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("A01"));
	      			СтрокаТ.ФотоЗадачи  		=  Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("A02"));

				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Результат = ЗаписьВиртуальногоДокумента(стррДокумент, стррЗначения, стррПараметры, ЗагружаемыеОбъекты);
	
	Возврат Результат;

КонецФункции

//vd_190409 Добавлена
Процедура ЗаполнитьРузультатДокументаЗадание(ТипЗадачи, стрРезультат, стрПредставление)
	
	Если ТипЗнч(ТипЗадачи) <> Тип("УникальныйИдентификатор") ИЛИ НЕ ЗначениеЗаполнено(стрРезультат) Тогда
		стрРезультат 	 = Неопределено;
		стрПредставление = "";
		Возврат; 
	КонецЕсли;	
		
	Если ТипЗадачи = Новый уникальныйидентификатор("23d6533f-f121-4939-9a40-27257371ac26") Тогда
		// Ввести дату
		Попытка
			стрРезультат 		= Дата(стрРезультат);
			стрПредставление 	= Строка(стрРезультат);
		Исключение
			Попытка
				стрРезультат     = ДатаВремяXMLВФормат1С(стрРезультат);
				стрПредставление = Строка(стрРезультат);
			Исключение
				стрРезультат     = Неопределено;
				стрПредставление = "";
			КонецПопытки;
		КонецПопытки;     
	
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("061879d3-e400-4cc8-b4f9-999c3399f47c") Тогда
		// совершить обмен
		Попытка
			стрРезультат     = ДатаВремяXMLВФормат1С(стрРезультат);
			стрПредставление = "Выполнен " + Строка(стрРезультат);
		Исключение
			Попытка
				стрРезультат 		= Дата(стрРезультат);
				стрПредставление 	= "Выполнен " + Строка(стрРезультат);
			Исключение
				стрРезультат     = Неопределено;
				стрПредставление = "";
			КонецПопытки;
		КонецПопытки;
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("19661470-75a6-4eb4-be94-44924664b3d1") Тогда
		// Ввести число
		стрРезультат 	 = Число(стрРезультат);
		стрПредставление = Строка(стрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("a429fb60-a01b-4282-ba56-85721e24257d") Тогда
		// Ввести строку
		стрРезультат 	 = стрРезультат;
		стрПредставление = стрРезультат;

	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("b65c3f4c-6cbe-4675-9685-9f3c62be199e") Тогда
		// Выбрать ""да"" или ""нет""
		Если стрРезультат = "1" Тогда
			стрРезультат 	 = Истина;
			стрПредставление = "Да";
		ИначеЕсли стрРезультат = "0" Тогда
			стрРезультат 	 = Ложь;
			стрПредставление = "Нет";
		Иначе
			стрРезультат     = Неопределено;
			стрПредставление = "";
		КонецЕсли;						
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("b483e5f9-95e6-4e2d-b6b2-d5954fcc25ae") Тогда
		// сделать фото
		стрРезультат 	 = Новый уникальныйидентификатор(стрРезультат);
		стрПредставление = "Фото";
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("eaded006-5271-4497-9222-79541d23e3fa") Тогда
		// Создать документ Заказ
		стрРезультат 	 = СсылкаИзДокумента(стрРезультат, "ЗаказКлиента");
		стрПредставление = Строка(стрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("d6176c16-130d-40d8-ad70-13a39c957927") Тогда
		// Создать документ Реализация
		стрРезультат 	 = СсылкаИзДокумента(стрРезультат, "РеализацияТоваровУслуг");
		стрПредставление = Строка(стрРезультат);

	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("57ec9bd4-c2ec-47e0-86c1-b06211735f32") Тогда
		// Создать документ перемещение
		стрРезультат 	 = СсылкаИзДокумента(стрРезультат, "ПеремещениеТоваров");
		стрПредставление = Строка(стрРезультат);

	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("79e5b0f6-b019-41fe-9214-c7a204e05974") Тогда
		// Создать документ поступление
		стрРезультат 	 = СсылкаИзДокумента(стрРезультат, "ПоступлениеТоваров");
		стрПредставление = Строка(стрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("ec84ce42-a9c3-4936-94fb-595ec1e84aef") Тогда
		// Создать документ возврат
		стрРезультат 	 = СсылкаИзДокумента(стрРезультат, "ВозвратТоваровОтКлиента");
		стрПредставление = Строка(стрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("2ec90b5a-56ff-4338-aeaa-2416b8923bf8") Тогда
		// Создать документ пко
		стрРезультат 	 = СсылкаИзДокумента(стрРезультат, "ПриходныйКассовыйОрдер");
		стрПредставление = Строка(стрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("8bed83c4-4428-4206-89d1-a31790130937") Тогда
		// Создать документ рко
		стрРезультат 	 = СсылкаИзДокумента(стрРезультат, "РасходныйКассовыйОрдер");
		стрПредставление = Строка(стрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("544b81fd-49da-453e-9b9c-eec549cbef10") Тогда
		// Создать документ мерчендайзинг
		Если стрРезультат = "00000000-0000-0000-0000-000000000000" Тогда
			стрПредставление = "Документ не создан";
		Иначе
			стрПредставление = "Документ ""Мерчендайзинг""";
		КонецЕсли;
		стрРезультат 	 = Новый уникальныйидентификатор(стрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("2f7826f4-2665-49fa-95e7-e7c8cc6ebf0e") Тогда
		// Создать документ посещение
		Если стрРезультат = "00000000-0000-0000-0000-000000000000" Тогда
			стрПредставление = "Документ не создан";
		Иначе
			стрПредставление = "Документ ""Посещение""";
		КонецЕсли;
		стрРезультат 	 = Новый уникальныйидентификатор(стрРезультат);
				
	Иначе
		стрРезультат 	 = Неопределено;	
		стрПредставление = "";
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет реквизит "АдресДоставки" в загружаемом документе.
Процедура ПроставитьАдресДоставки(ОбъектДок, идАдреса)
	
	Если ИспользоватьАдресаДоставки И Не ПустаяСтрока(идАдреса) Тогда	
		тзАдресаДоставки = АдресаДоставкиЗагрузитьТЗ();
		СтрокаТ = тзАдресаДоставки.Найти(НРег(идАдреса), "Идентификатор");
		Если СтрокаТ <> Неопределено Тогда
			ОбъектДок.АдресДоставки	= СтрокаТ.Адрес;
		КонецЕсли;
		
		//vd_180627 АКФ
		Если гКонфигурация = "УТ_АКФ" Тогда
			//+akf необходимо производить поиск по идентификатору безе учета добавленных ранее(для сохранения длины строки передаваемой в МУ) трех символов
			ТТД=Справочники.ТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(лев(СтрокаТ.КодАдреса,36)));
			ОбъектДок.ТорговаяТочка=ТТД;
			//найденный объект проставляем в необходимое нам поле
			//-akf
		КонецЕсли;
	КонецЕсли;
	
	//((vd_190211 Заполнение адреса доставки по аналогии УС.
	//Заполнение адреса доставки
	Если НЕ ИспользоватьАдресаДоставки И НЕ ЗначениеЗаполнено(ОбъектДок.АдресДоставки) И ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Для каждого Элемент Из ОбъектДок.Партнер.КонтактнаяИнформация Цикл
			Если Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				ОбъектДок.АдресДоставки = Элемент.Представление;
				Прервать;
			Конецесли;
		КонецЦикла;                                              
	КонецЕсли;	
	//))vd_190211((vd_190211
	
	
КонецПроцедуры

Процедура УстановитьБанковскийСчетВКассовомОрдере(ДокументОбъект)
	
	Если ПоколениеКонфигурации("<=УТ_11.2.2") Тогда	
		ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДокументОбъект.Организация, Перечисления.ФормыОплаты.Наличная, , ДокументОбъект.Валюта);
			
	Иначе 
		СтррПараметры = Новый Структура;
		СтррПараметры.Вставить("Организация", ДокументОбъект.Организация);
		СтррПараметры.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная);
		СтррПараметры.Вставить("БанковскийСчет", Неопределено);
		СтррПараметры.Вставить("Валюта", ДокументОбъект.Валюта);
		СтррПараметры.Вставить("НаправлениеДеятельности", ДокументОбъект.ХозяйственнаяОперация);
		ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтррПараметры);
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьРеквизитыДляКонтрагентаВКассовомОрдере(ДокументОбъект)

	СтррРеквизиты = Справочники.Контрагенты.РеквизитыКонтрагента(ДокументОбъект.Контрагент);
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ДокументОбъект.ПринятоОт = СтррРеквизиты.Наименование;
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
		ДокументОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	Иначе
		ДокументОбъект.Выдать = СтррРеквизиты.Наименование;
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
		ДокументОбъект.СтатьяДвиженияДенежныхСредств =  Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКассуВКассовомОрдере(ДокументОбъект)

	Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Выборка = Справочники.Кассы.Выбрать( , ДокументОбъект.Организация);
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПометкаУдаления И Выборка.ВалютаДенежныхСредств = Валюта Тогда
			ДокументОбъект.Касса = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
		Текст = "Не найдено ни одной кассы для организации """ + ДокументОбъект.Организация + """. Выберите кассу в документе вручную!";
		ОповеститьОСобытии(Текст,, ДокументОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьИПроверитьРеквизит(ИдентификаторGUID, ВидСправочника, ИмяРеквизита, ОбъектДок, ПредставлениеДокВМУ, УстановитьРеквизитДокумента = Ложь)

	Если ЭтоПустойИдентификатор(ИдентификаторGUID) Тогда
		Текст = "В документе """ + ПредставлениеДокВМУ + """ не реквизит """ + ИмяРеквизита + """!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		Возврат Неопределено;
	Иначе
		Результат = СсылкаИзСправочника(ИдентификаторGUID, ВидСправочника);
		Если УстановитьРеквизитДокумента Тогда
			ОбъектДок[ИмяРеквизита] = Результат;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

КонецФункции 

// Процедура заполняет основные реквизиты документа (в т.ч. и виртуального документа).
// Параметры:
// 	ОбъектДок - ДокументОбъект, Структура - если передан обычный документ, то значение типа ДокументОбъект, если передан виртуальный документ, то Структура.
// 	стррЗначения - Структура - структура значений реквизитов документа, прочитанных из XML-файла.
// 	ДокументМенеджер - ДокументМенеджер, Неопределено - если передан обычный документ, то МенеджерДокумента, если передан виртуальный документ, то Неопределено.
// 	стррОбязательныеПоля - Структура - обязательные поля для заполнения документа.
Процедура ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, стррЗначения, ДокументМенеджер = Неопределено, стррОбязательныеПоля)

	ИдФирмы 	 = стррЗначения.ИдОрганизации;
	ИдКлиента 	 = стррЗначения.ИдКлиента;
	ИдСоглашения = стррЗначения.ИдСоглашения;
	НомерДок 	 = стррЗначения.Номер;
	ДатаДок 	 = стррЗначения.Дата;
	Комментарий  = стррЗначения.Комментарий;
	
	Если ДокументМенеджер = Неопределено Тогда // виртуальный документ
	    Реквизиты = гВДокРеквизиты.Получить(ОбъектДок._ВидДокумента); 
		Представление = ОбъектДок._ВидДокумента + " № " + НомерДок + " от " + ДатаДок;
	Иначе // обычный документ
		Реквизиты = ОбъектДок.Метаданные().Реквизиты;
		Представление = ОбъектДок.Метаданные().Синоним + " № " + НомерДок + " от " + ДатаДок;		
	КонецЕсли; 

	Если стррОбязательныеПоля.Свойство("Организация") И Реквизиты.Найти("Организация") <> Неопределено Тогда
		ПрочитатьИПроверитьРеквизит(ИдФирмы, "Организации", "Организация", ОбъектДок, Представление, Истина);
	КонецЕсли;
	
	ЕстьРеквизитПартнер = Реквизиты.Найти("Партнер") <> Неопределено;	
	Если стррОбязательныеПоля.Свойство("Партнер") Тогда
		Партнер = ПрочитатьИПроверитьРеквизит(ИдКлиента, "Партнеры", "Партнер", ОбъектДок, Представление);
		Если ЕстьРеквизитПартнер Тогда 
			ОбъектДок.Партнер = Партнер;
		КонецЕсли; 
	КонецЕсли;
	
	//{{vd_180413 Баг 38286. ЗагрузкаКонтрагентов.
	ЕстьРеквизитКонтрагент = Реквизиты.Найти("Контрагент") <> Неопределено;	
	Если ЕстьРеквизитКонтрагент И стррОбязательныеПоля.Свойство("Контрагент") Тогда
		Если стррЗначения.Свойство("ИдКонтрагента") Тогда
			Контрагент = ПрочитатьИПроверитьРеквизит(стррЗначения.ИдКонтрагента, "Контрагенты", "Контрагент", ОбъектДок, Представление);
			ОбъектДок.Контрагент = Контрагент;
		КонецЕсли;
	КонецЕсли;
	//}}vd_180413 Баг 38286. ЗагрузкаКонтрагентов.  	

	Если стррОбязательныеПоля.Свойство("Соглашение") И Реквизиты.Найти("Соглашение") <> Неопределено Тогда
		
		Если ИспользоватьДоговоры() Тогда
			Если ЭтоПустойИдентификатор(ИдСоглашения) Тогда
				Текст = "В документе """ + Представление + """ не указан договор! Будет проставлен договор по умолчанию!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			Иначе	
				ОбъектДок.Договор = СсылкаИзСправочника(стррЗначения.ИдСоглашения, "ДоговорыКонтрагентов");
			КонецЕсли; 
		ИначеЕсли ИспользоватьСоглашения() Тогда
			Если ЭтоПустойИдентификатор(ИдСоглашения) Тогда 
				Текст = "В документе """ + Представление + """ не указано соглашение! Будет проставлено соглашение по умолчанию!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			Иначе
				Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект." + ВидДокументаПоступлениеТоваровУслуг()) Тогда
					//ОбъектДок.Соглашение = СсылкаИзСправочника(стррЗначения.ИдСоглашения, "СоглашенияСПоставщиками"); соглашения поставщиков пока не выгружаем
				Иначе
					ОбъектДок.Соглашение = СсылкаИзСправочника(стррЗначения.ИдСоглашения, "СоглашенияСКлиентами");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;

	Если стррОбязательныеПоля.Свойство("Контрагент") И Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		Если ИспользоватьПунктыРазгрузки Тогда
			ПрочитатьИПроверитьРеквизит(ИдКлиента, "Контрагенты", "Контрагент", ОбъектДок, Представление, Истина);
			Если ЕстьРеквизитПартнер Тогда 
				ОбъектДок.Партнер = ОбъектДок.Контрагент.Партнер;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(ОбъектДок.Контрагент) Тогда
			Если Не ЕстьРеквизитПартнер И ЗначениеЗаполнено(Партнер) Тогда // такое возможно для ПКО и РКО - партнер указывается в ТЧ документа
				ОбъектДок.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
			ИначеЕсли ЕстьРеквизитПартнер И ЗначениеЗаполнено(ОбъектДок.Партнер) Тогда
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ОбъектДок.Партнер, ОбъектДок.Контрагент);
			Иначе
				Текст = "В документе """ + Представление + """ не указан контрагент!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Реквизиты.Найти("Менеджер") <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ОбъектДок.Менеджер) Тогда
			ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;
		КонецЕсли;
		Если Реквизиты.Найти("Подразделение") <> Неопределено Тогда
			ОбъектДок.Подразделение = ОбъектДок.Менеджер[РеквизитОбъекта("Спр_Пользователи_Подразделение")];
		КонецЕсли;
	КонецЕсли;

	Если Реквизиты.Найти("Ответственный") <> Неопределено И Не ЗначениеЗаполнено(ОбъектДок.Ответственный) Тогда
		ОбъектДок.Ответственный = ВыбНастройкиАгента.Пользователь;
	КонецЕсли;

	Если Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		ОбъектДок.Комментарий = Комментарий;
	КонецЕсли;
	
	Если стррЗначения.Свойство("ДокументОснование") И Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ОбъектДок.ДокументОснование = стррЗначения.ДокументОснование;
	КонецЕсли; 
	
	Если стррОбязательныеПоля.Свойство("ПунктРазгрузки") И Реквизиты.Найти("алкПунктРазгрузки") <> Неопределено Тогда
		ПрочитатьИПроверитьРеквизит(стррЗначения.ИдПунктаРазгрузки, "алкПунктыРазгрузки", "алкПунктРазгрузки", ОбъектДок, Представление, Истина);
		Если Реквизиты.Найти("алкЛицензияКонтрагента") <> Неопределено Тогда 
			ОбъектДок.алкЛицензияКонтрагента = ОбъектДок.алкПунктРазгрузки.алкОсновнаяЛицензия;
		КонецЕсли;
	КонецЕсли;
	
	Если стррОбязательныеПоля.Свойство("Договор") И Реквизиты.Найти("Договор") <> Неопределено Тогда
		ПрочитатьИПроверитьРеквизит(ИдСоглашения, "ДоговорыКонтрагентов", "Договор", ОбъектДок, Представление, Истина);
	КонецЕсли;

	ОбъектДок.Дата = ДатаДок;

	Если ЗначениеЗаполнено(НомерДок) Тогда 
		Если  ДокументМенеджер <> Неопределено И НЕ ИспользоватьНумерациюЦБД Тогда 	//vd_180312 Баг 32060 (Использовать нумерацию ЦБД). 
			Если ДокументМенеджер.НайтиПоНомеру(НомерДок, ТекущаяДата()) = ДокументМенеджер.ПустаяСсылка() Тогда
				ОбъектДок.Номер = НомерДок;
			Иначе
				Текст = "Номер  документа """ + Представление + """ уже присутствует в информационной базе, номер документа будет заменен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			КонецЕсли;
		ИначеЕсли ДокументМенеджер <> Неопределено И ИспользоватьНумерациюЦБД Тогда //vd_180323 Баг 33846. Не работает настройка "Использовать нумерацию в ЦБД".
			//По умолчанию номер присваивается автоматически
			стррЗначения.Номер = Неопределено;
		ИначеЕсли ДокументМенеджер = Неопределено Тогда // виртуальный документ - всегда присваеваем номер из МУ
			ОбъектДок.Номер = НомерДок;
		Иначе //vd_180323 Баг 33846. Не работает настройка "Использовать нумерацию в ЦБД". 
			//По умолчанию номер присваивается автоматически	
			Текст = "Номер  документа """ + Представление + """ присвоен автоматически"; //такой ситуации не должно быть.
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;

	Если стррЗначения.Свойство("СуммаДокумента") И Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		ОбъектДок.СуммаДокумента = стррЗначения.СуммаДокумента;
	КонецЕсли;

КонецПроцедуры

// Функция проверяет необходимость загрузки документа в БД 1С. И, если загрузка необходима, делает подготовку к загрузке документа.
// Возвращает структуру, в которой проставлены свойства для дальнейшей загрузки документа или для пропуска документа.
Функция ПараметрыЗагрузкиДокумента(ВидДокумента, ТекстXML, ЗагружаемыеОбъекты)

	стррПараметры = Новый Структура("РезультатВозврата,Дата,Номер,ИдОбъекта,ЭтоНовый,Проведен,ПропускДокумента,ОбъектДокумента,Синоним,Представление,ЭтоВиртуальныйДокумент");
	
	стррПараметры.Проведен	= Булево(Число(ТекстXML.ЗначениеАтрибута("IsPost")));
	стррПараметры.Дата 		= Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt")));
	стррПараметры.Номер 	= СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumberPrefix")) + СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumber"));
	
	НомерДата = ?(ЗначениеЗаполнено(стррПараметры.Номер), " N " + СокрЛП(стррПараметры.Номер), "") + " от " + стррПараметры.Дата;
	
	Если ВДокЭтоВиртуальныйДокумент(ВидДокумента) Тогда
	    стррПараметры.ЭтоВиртуальныйДокумент = Истина;
		стррПараметры.Синоним = СвойстваВидаОбъекта(ВидДокумента, "Вид", "Документ").Представление;
	Иначе
	    стррПараметры.ЭтоВиртуальныйДокумент = Ложь;
	    ДокМенеджер = Документы[ВидДокумента];
		стррПараметры.Синоним = ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
	КонецЕсли;
	
	стррПараметры.Представление = стррПараметры.Синоним + НомерДата;	
	
	стррПараметры.ПропускДокумента = Ложь;	
	
	Если ВидДокумента = "_ВнеплановыйМаршрут" Тогда //vd_180319 Добавление Поступления/Возвраты. Замена: // Если ВидДокумента = "_ВнеплановыйМаршрут" Или ВидДокумента = ВидДокументаПоступлениеТоваровУслуг() Тогда 
		стррПараметры.Вставить("ПричинаПропуска", "Данный вид документов не поддерживается.");
		стррПараметры.ПропускДокумента  = Истина; 
		стррПараметры.РезультатВозврата = Ложь; // документ не загружать в БД
		Возврат стррПараметры;
	КонецЕсли;
	
	Если Не стррПараметры.Проведен Тогда
		стррПараметры.Вставить("ПричинаПропуска", "Документ не проведен в мобильном приложении!");
		стррПараметры.ПропускДокумента  = Истина; 
		стррПараметры.РезультатВозврата = Ложь; // документ не загружать в БД
		Возврат стррПараметры;
	КонецЕсли;

	стррПараметры.ЭтоНовый = Истина;
	стррПараметры.ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID")); // gi_180523 избавился от локальной переменной ИдОбъекта - ее значение должно быть всегда в стррПараметры.ИдОбъекта при выходе из процедуры
	
	// Проверяем - есть ли уже такой документ в БД 1С?
	
	Если стррПараметры.ЭтоВиртуальныйДокумент Тогда
		
		// ищем идентификатор в ТЗ журнала виртуальных документов заданного вида		
		тзЖурнала = Неопределено;
		Если Не ЗагружаемыеОбъекты.Свойство(ВидДокумента, тзЖурнала) Тогда
			тзЖурнала = ВОТЗЗагрузить(ВидДокумента);
			ЗагружаемыеОбъекты.Вставить(ВидДокумента, тзЖурнала); // оставляем тзЖурнала загруженной в память, чтобы избежать многократной загрузки ТЗ из Хранилища.
		КонецЕсли; 
		
		стзЖурнала = тзЖурнала.Найти(стррПараметры.ИдОбъекта, "ID"); // для виртуальных документов в ОбъектДок находится строка тзЖурнала
		Если стзЖурнала = Неопределено Тогда // загружаем новый виртуальный документ
			стррПараметры.ЭтоНовый = Истина;
			стзЖурнала = тзЖурнала.Добавить(); // добавляем пустую строку в журнал, она будет заполнена в процедуре ЗагрузитьДокумент<ВиртуальныйДокумент>()
			стзЖурнала.ID = стррПараметры.ИдОбъекта;
		Иначе
			стррПараметры.ЭтоНовый = Ложь;
			//vd_190418
			//Если Не ОбновлятьДокументыПриЗагрузке Тогда
			Если Не ОбновлятьДокументыПриЗагрузке И ВидДокумента <> "_Задание" Тогда
				стррПараметры.ПропускДокумента  = Истина; // документ уже есть в БД, но его не обновляем
				стррПараметры.РезультатВозврата = Истина; // документ считаем успешно загруженным в БД
				Возврат стррПараметры;
			КонецЕсли;
		КонецЕсли; 
		
		// Сюда попадаем, если виртуальный документ должен быть записан в БД 1С (в Хранилище).
		// После завершения загрузки документов, тзЖурнала нужно записать в Хранилище.	
		// Для этого запоминаем в свойстве "ВидыВиртуальныхДокументовДляЗаписи" массив видов виртуальных документов, ТЗ журнала которых обновлены в ЗагружаемыеОбъекты.
		// Запоминать имеет смысл только тогда, когда был записан в тзЖурнала документ - это тут и делаем.
		Если Не ЗагружаемыеОбъекты.Свойство("ВидыВиртуальныхДокументовДляЗаписи") Тогда
			мВидыДокументов = Новый Массив;
			мВидыДокументов.Добавить(ВидДокумента);
			ЗагружаемыеОбъекты.Вставить("ВидыВиртуальныхДокументовДляЗаписи", мВидыДокументов);
		ИначеЕсли ЗагружаемыеОбъекты.ВидыВиртуальныхДокументовДляЗаписи.Найти(ВидДокумента) = Неопределено Тогда
			ЗагружаемыеОбъекты.ВидыВиртуальныхДокументовДляЗаписи.Добавить(ВидДокумента);
		КонецЕсли; 
		
		стрРеквизиты = ВДокРеквизитыШапки(ВидДокумента); // строка реквизитов шапки виртуального документа, разделенных через запятую
		// Запоминаем массив реквизитов виртуального документа - чтобы проверять наличие реквизитов при загрузке документа из МУ в ТЗ.
		Если гВДокРеквизиты = Неопределено Тогда
			гВДокРеквизиты = Новый Соответствие;
		КонецЕсли; 
		Если гВДокРеквизиты.Получить(ВидДокумента) = Неопределено Тогда
			гВДокРеквизиты.Вставить(ВидДокумента, СтрРазделить_(стрРеквизиты)); // аналог "Метаданные().Реквизиты" для виртуальных документов
		КонецЕсли; 
	
		ОбъектДок  = Новый Структура(стрРеквизиты);
		ОбъектДок.ID = стррПараметры.ИдОбъекта;
		ОбъектДок.Вставить("_ВидДокумента", ВидДокумента); // системный реквизит документа
		ОбъектДок.Вставить("_строкаЖурнала", стзЖурнала);  // системный реквизит документа
		ОбъектДок.Вставить("Ссылка", Неопределено); 	   // свойство "Ссылка" в виртуальных документах - всегда пустое - для совместимости процедур и функций работы с "невиртуальными" документами
		ВДокРеквизитыТЧДобавить(ВидДокумента, ОбъектДок);  // добавляем реквизиты ТЧ
		
	Иначе // ЭтоВиртуальныйДокумент = Ложь
		
		СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(стррПараметры.ИдОбъекта);
		ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
		
		Если ОбъектДок = Неопределено И ВидДокумента = "ЗаказКлиента" Тогда // заказ не нашли, пытаемся найти заказ среди документов РеализацияТоваровУслуг
			ОбъектДок = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(стррПараметры.ИдОбъекта).ПолучитьОбъект();
		КонецЕсли;
		
		//((vd_181128
		Если ОбъектДок = Неопределено И ВидДокумента = "ВозвратТоваровОтКлиента" Тогда // ВозвратТоваровОтКлиента не нашли, пытаемся найти среди документов ЗаявкаНаВозвратТоваровОтКлиента
			ОбъектДок = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолучитьСсылку(стррПараметры.ИдОбъекта).ПолучитьОбъект();
		КонецЕсли;
		//))vd_181128		
		
		Если ОбъектДок = Неопределено Тогда // загружаем новый документ
			
			Если ВидДокумента = "ЗаказКлиента" Тогда 
				Если ЗагружатьЗаказКакРеализацию() Тогда  // "Заказ" должны загрузить как "РеализацияТоваровУслуг"
					ДокМенеджер   = Документы.РеализацияТоваровУслуг;
					СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(стррПараметры.ИдОбъекта); // заново устанавливаем ссылку из нового менеджера документов
					стррПараметры.Синоним 		= ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
					стррПараметры.Представление = стррПараметры.Синоним + НомерДата;
				КонецЕсли;
			КонецЕсли;
			
			//((vd_181128 Загружать документ ВозвратТоваровОтКлиента в ЗаявкаНаВозвратТоваровОтКлиента 
			Если ВидДокумента = "ВозвратТоваровОтКлиента" И ТекстXML.ЗначениеАтрибута("A023") <> Неопределено И Число(ТекстXML.ЗначениеАтрибута("A023")) = 1 Тогда
				ДокМенеджер   = Документы.ЗаявкаНаВозвратТоваровОтКлиента;
				СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(стррПараметры.ИдОбъекта); // заново устанавливаем ссылку из нового менеджера документов
				стррПараметры.Синоним 		= ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
				стррПараметры.Представление = стррПараметры.Синоним + НомерДата;
			КонецЕсли;			
			//))vd_181128			
			
			ОбъектДок = ДокМенеджер.СоздатьДокумент();
			ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
			стррПараметры.ЭтоНовый = Истина;
		Иначе
			Если Не ОбновлятьДокументыПриЗагрузке Тогда
				стррПараметры.ПропускДокумента  = Истина; // документ уже есть в БД, но его не обновляем
				стррПараметры.РезультатВозврата = Истина; // документ считаем успешно загруженным в БД
				стррПараметры.ОбъектДокумента = ОбъектДок;
				Возврат стррПараметры;
			КонецЕсли;
			ОбъектДок.Разблокировать();
			стррПараметры.ЭтоНовый = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	стррПараметры.ОбъектДокумента = ОбъектДок;
	
	Возврат стррПараметры;

КонецФункции 

Функция ЗагружатьЗаказКакРеализацию()

	Возврат Не КонстантыПолучитьЗначение("ИспользоватьЗаказыКлиентов") Или РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию"; // документ "Заказ" должны загрузить как "РеализацияТоваровУслуг"

КонецФункции 
 
 
// Функция загружает документ из XML-файла в БД 1С:Предприятия.
// Параметры:
//		ТекстXML - ЧтениеXML - объект ЧтениеXML
//		ЗагружаемыеОбъекты - Структура - структура для запоминания загруженных объектов (используется для выгрузки подтверждений).
//		ВидДокумента - Строка - вид документа в 1С:Предприятии
//		ИдВидДокументаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ
// Возвращаемое значение:
// 		Булево - Истина - если документ успешно записан в БД, иначе Ложь. Истина возвращается в случае, если документ был ранее записан
//  					в БД 1С, но не обновлен из-за настройки ОбновлятьДокументыПриЗагрузке = Ложь.
Функция ЗагрузитьДокумент(ТекстXML, ЗагружаемыеОбъекты, ВидДокумента, ИдВидДокументаМТ)

	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//(( gi_180523 в УТ для Украины нет документа "СчетФактураВыданный"
	Если ВидДокумента = "СчетФактураВыданный" И гКонфигурация = "УТ_UA" Тогда 
		Возврат Ложь;
	КонецЕсли; 
	//)) gi_180523
	
	стррПараметры = ПараметрыЗагрузкиДокумента(ВидДокумента, ТекстXML, ЗагружаемыеОбъекты);
	
	Результат = стррПараметры.РезультатВозврата;	
	
	Если Результат <> Ложь И Не стррПараметры.ПропускДокумента Тогда
		
		Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		КонецЕсли;

		Если ВидДокумента = "ЗаказКлиента" Тогда
			Результат = ЗагрузитьДокументЗаказ(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "ПриходныйКассовыйОрдер" Или ВидДокумента = "РасходныйКассовыйОрдер" Тогда
			ЗагрузитьДокументКассовыйОрдер(ТекстXML, стррПараметры, ЗагружаемыеОбъекты); //!!!! переделать - загрузка сделана сначала в ТЗ, можно сразу грузить в БД!!!!
			Результат = Истина; // !!!! убрать после переделки
		ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Тогда 
			Результат = ЗагрузитьДокументРеализация(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда // sd_22082017
			Результат = ЗагрузитьДокументПеремещение(ТекстXML, стррПараметры);
		ИначеЕсли ВидДокумента = "_Мерчендайзинг" Тогда
			Результат = ЗагрузитьДокументМерчендайзинг(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "_Посещение" Тогда
			Результат = ЗагрузитьДокументПосещение(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "_Задание" Тогда //vd_190408
			Результат = ЗагрузитьДокументЗадание(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "СчетФактураВыданный" Тогда
			Результат = ЗагрузитьДокументСчетФактура(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "ВозвратТоваровОтКлиента" ИЛИ ВидДокумента = ВидДокументаПоступлениеТоваровУслуг() Тогда	 //vd_180319 Добавление Поступления/Возвраты
			Результат = ЗагрузитьДокументПоступлениеВозврат(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		Иначе // какой-то новый вид документа в МТ, про который модуль не знает
			стррПараметры.ПропускДокумента = Истина;
			стррПараметры.Вставить("ПричинаПропуска", "Данный вид документов не поддерживается.");
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Если стррПараметры.ПропускДокумента Тогда
		
		стррСвойства = Новый Структура("Представление", стррПараметры.Представление);
		Если ТипСсылки(стррПараметры.ОбъектДокумента) = "Документ" Тогда
			стррСвойства.Вставить("СсылкаНаОбъект", стррПараметры.ОбъектДокумента.Ссылка);
		КонецЕсли;
		СообщитьОПропускеДокумента(стррСвойства, СтруктураЗначениеСвойства(стррПараметры, "ПричинаПропуска"));
		ТекстXML.Пропустить();
		
	КонецЕсли; 
		
	Если Результат Тогда // Сюда попадаем в одном из случаев:
		// 1. Новый документ успешно загружен в БД 1С. 
		// 2. Документ был ранее загружен в БД 1С и был обновлен или был пропущен, т.к. настройка ОбновлятьДокументыПриЗагрузке = Ложь.
		СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеДокументы.Добавить();
		СтрокаТ.Идентификатор 	 = стррПараметры.ИдОбъекта; // идентификатор (GUID) документа
		СтрокаТ.ВидДокумента  	 = ?(стррПараметры.ЭтоВиртуальныйДокумент, ВидДокумента, стррПараметры.ОбъектДокумента.Метаданные().Имя);
		СтрокаТ.ИдВидДокументаМТ = ИдВидДокументаМТ;  // идентификатор (GUID) вида документа в МТ
		СтрокаТ.ДатаДокумента    = стррПараметры.Дата;// gi_180123 дата-время создания документа в МУ

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция возвращат структуру с общими свойствами для всех видов документов.
// В параметре передается строка с перечислением дополнительных свойств.
//	Параметры:
//		стрДополнительныеСвойства - Строка - список дополнительных свойств документов, разделенных через запятую.
//	Возвращаемое значение:
//	  Структура - свойства документа.
Функция СвойстваДокументаИзXML(стрДополнительныеСвойства = Неопределено)
	
	Реквизиты = "ПометкаУдаления,Номер,Дата,ИдОрганизации,ИдКлиента,ИдСоглашения,СуммаДокумента,Комментарий," // основные реквизиты
		+ "Широта,Долгота,ВремяНачала,ВремяОкончания,ИдКатегории" // дополнительные реквизиты
		+ ?(ИспользоватьПунктыРазгрузки, ",ИдПунктаРазгрузки", "")
		+ ?(ИспользоватьКонтрагентов, ",ИдКонтрагента", ""); // vd_180413 Баг 38286. ЗпгрузеаКонтрагентов.
		
	Если стрДополнительныеСвойства <> Неопределено Тогда
		Реквизиты = Реквизиты + "," + стрДополнительныеСвойства;
	КонецЕсли; 
		
	Возврат Новый Структура(Реквизиты);
	
КонецФункции

Процедура ЗаполнитьСистемныеСвойстваДокументаИзXML(стррЗначения, ТекстXML)
	
	стррЗначения.Номер 			 = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	стррЗначения.Дата			 = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррЗначения.ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
КонецПроцедуры

Функция ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзмерения)

	ТекЕдиница = Неопределено;
	Попытка
		ГуидЕдиницаИзм = Новый УникальныйИдентификатор(ИдЕдиницыИзмерения);
	Исключение
		ГуидЕдиницаИзм = Неопределено;
	КонецПопытки;
	
	НазваниеСпрУпаковок = ?(ПоколениеКонфигурации(">=УТ_11.2"), "УпаковкиЕдиницыИзмерения", "УпаковкиНоменклатуры");

	Если ГуидЕдиницаИзм = ТекНоменклатура.УникальныйИдентификатор()  Тогда
		ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
	Иначе
		Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
			Если ТекНоменклатура.ИспользоватьУпаковки Тогда	
				ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
			КонецЕсли; 
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекЕдиница) Тогда
			ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
		КонецЕсли; 
	КонецЕсли; 

	Если Не ЗначениеЗаполнено(ТекЕдиница) Или ТекЕдиница.Пустая() Тогда
		ТекЕдиница = ?(ТекНоменклатура.Пустая(), Справочники[НазваниеСпрУпаковок].ПустаяСсылка(), ТекНоменклатура.ЕдиницаИзмерения);	
	КонецЕсли;

	Возврат ТекЕдиница;
КонецФункции

Функция ДатаВремяXMLВФормат1С(ДатаВремя) Экспорт

	СимвРазделителяА15 = " ";
	СимвРазделителяМТ  = "T";

	Поз = Найти(ДатаВремя, "-");
	Если Поз <> 0 Тогда	 
		Год = Число(Лев(ДатаВремя,  Поз - 1));
		Месяц = Число(Сред(ДатаВремя, Поз + 1,2));
		День = Число(Сред(ДатаВремя, Поз + 4,2));
	Иначе
		Возврат '00010101';
	КонецЕсли;

	ПозПробела = Найти(ДатаВремя, СимвРазделителяА15);
	Часы = 0;
	Минуты = 0;
	Секунды = 0;
	Если ПозПробела = 0 Тогда
		ПозПробела = Найти(ДатаВремя, СимвРазделителяМТ);
	КонецЕсли;

	Если ПозПробела > 0 Тогда
		Часы    = Число(Сред(ДатаВремя, ПозПробела + 1, 2));
		Минуты  = Число(Сред(ДатаВремя, ПозПробела + 4, 2));
		Секунды = Число(Сред(ДатаВремя, ПозПробела + 7, 2));
	КонецЕсли;

	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции

// sk_181213
// Процедура исключена
//Процедура ЗадействоватьНалогообложениеНДС(СтруктураДействий, ОбъектДок)

//	Если гКонфигурация = "УТ_UA" Тогда
//		Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
//	Иначе
//		НалогообложениеНДС = ОбъектДок.НалогообложениеНДС;
//	КонецЕсли;
//	
//	//((vd_181213 
//	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
//	Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда
//		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, ПоДатеОтгрузки", НалогообложениеНДС, ОбъектДок.Дата, Истина));
//	Иначе
//		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);	
//	КонецЕсли;
//	//))vd_181213 			

//КонецПроцедуры


//vd_180912 Добавлена
Процедура ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок)
	
	Если гКонфигурация = "УТ_UA" Тогда
		//В УТ_UA нет реквизита НалогообложениеНДС, не проверено.
		//Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
		Возврат;
	КонецЕсли;
	
	НалогообложениеНДС = Неопределено;
	
	//1. Оприделяем из соглашения
	Если ПоколениеКонфигурации("<УТ_11.4.5.24") И ЗначениеЗаполнено(ОбъектДок.Соглашение) Тогда
		//КА 2.4.3.137 - Есть реквизит НалогообложениеНДС
		//КА 2.4.5.33  - Нет реквизита НалогообложениеНДС 
		//СравнитьВерсии() больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.- 
		Если НЕ гКонфигурация = "КА" ИЛИ (гКонфигурация = "КА" И СравнитьВерсии(гКонфигурацияВерсия, "2.4.5") < 0)Тогда  
			НалогообложениеНДС = ОбъектДок.Соглашение.НалогообложениеНДС;
		КонецЕсли;
	КонецЕсли;         	
	                                                         
	//2. Оприделяем из типовых функций УТ
    Если НалогообложениеНДС = неопределено Тогда 
		Если ПоколениеКонфигурации(">=УТ_11.4.5.24") ИЛИ (гКонфигурация = "КА" И СравнитьВерсии(гКонфигурацияВерсия, "2.4.5") >= 0) Тогда        
			Выполнить("НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Договор , ОбъектДок.НаправлениеДеятельности, ОбъектДок.Дата)");
		Иначе
			//КА тоже
			Выполнить("НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Дата)");
		КонецЕсли;
	КонецЕсли;
	
	//3. Заполняем
	Если НЕ НалогообложениеНДС = Неопределено Тогда
		ОбъектДок.НалогообложениеНДС = НалогообложениеНДС;
	КонецЕсли;

КонецПроцедуры

Процедура СообщитьОПропускеДокумента(Объект, ПричинаПропуска = Неопределено)

	СсылкаНаОбъект = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		Объект.Свойство("СсылкаНаОбъект", СсылкаНаОбъект);		
		Представление = Объект.Представление;
	Иначе
		СсылкаНаОбъект = Объект.Ссылка;
		Представление = Строка(Объект);
	КонецЕсли; 
	
	Текст = "Пропущена загрузка документа """ + Представление + """. "
		+  ?(ЗначениеЗаполнено(ПричинаПропуска), ПричинаПропуска, "Документ был загружен ранее."); 
	ОповеститьОСобытии(Текст,, СсылкаНаОбъект, "ТекущийАгент");
	
КонецПроцедуры

Процедура ЗакончитьЗагрузкуКассовыхОрдеров(ЗагружаемыеОбъекты)
	
	тзКассовыеДокументы = ЗагружаемыеОбъекты.тзКассовыеДокументы;
	
	Если тзКассовыеДокументы <> Неопределено Тогда
		
		СтррВидыДокументовОснования = ОснованияДляДокументовОрдер();

		Для Каждого СтрокаТ Из тзКассовыеДокументы Цикл
			ОбъектДок = СтрокаТ.Документ;
			УстановитьДокументОснованияОрдеру(ОбъектДок, СтррВидыДокументовОснования, СтрокаТ);
			
			ДокументОснование = Неопределено;
			Если ЗначениеЗаполнено(ОбъектДок.ДокументОснование) Тогда 
				ДокументОснование = ОбъектДок.ДокументОснование;
			КонецЕсли;
			
			Результат = ЗаписьДокумента(ОбъектДок, СтрокаТ.стррЗначения, СтрокаТ.ЭтоНовый);
			Если Не Результат Тогда
				СообщитьОПропускеДокумента(СтрокаТ.Документ);
			ИначеЕсли Результат И ПроводитьДокумент(ОбъектДок.Метаданные().Имя) Тогда //vd_190408 ИначеЕсли Результат И ПроводитьДокументыПриЗагрузке Тогда
				Попытка
					Если Не ДокументОснование = Неопределено Тогда 
						ДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		тзКассовыеДокументы.Очистить();
		ЗагружаемыеОбъекты.тзКассовыеДокументы = тзКассовыеДокументы;
		
	КонецЕсли;

КонецПроцедуры

//vd_180319 Добавление Поступления/Возвраты. Добавил процедуру.
Процедура ЗакончитьЗагрузкуПоступлений(ЗагружаемыеОбъекты)
	
	тзДокументыПоступлений = ЗагружаемыеОбъекты.тзДокументыПоступлений;
	
	Если тзДокументыПоступлений <> Неопределено Тогда
		
		СтррВидыДокументовОснования = "РеализацияТоваровУслуг"; 

		Для Каждого СтрокаТ Из тзДокументыПоступлений Цикл
			
			ОбъектДок = СтрокаТ.Документ;
			
			Если НЕ ПустаяСтрока(СтрокаТ.ИдОснования) Тогда
				ДокументОснование 			 = СсылкаИзДокумента(СтрокаТ.ИдОснования, "РеализацияТоваровУслуг");
				ОбъектДок.ДокументРеализации = ДокументОснование;
			Иначе
				ДокументОснование = Неопределено;
			КонецЕсли;
			
			Результат = ЗаписьДокумента(ОбъектДок, СтрокаТ.стррЗначения, СтрокаТ.ЭтоНовый);
			
			Если Не Результат Тогда
				СообщитьОПропускеДокумента(СтрокаТ.Документ);
			ИначеЕсли Результат И ПроводитьДокумент(ОбъектДок.Метаданные().Имя) Тогда //vd_190408 ИначеЕсли Результат И ПроводитьДокументыПриЗагрузке Тогда
				Попытка
					Если Не ДокументОснование = Неопределено Тогда 
						ДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		тзДокументыПоступлений.Очистить();
		ЗагружаемыеОбъекты.тзДокументыПоступлений = тзДокументыПоступлений;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДокументОснованияОрдеру(ДокументОбъект, СтррВидыДокументовОснования, ДанныеОрдера)

	СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа[0];
	
	Для Каждого Элемент Из СтррВидыДокументовОснования Цикл
		СсылкаОснования = СсылкаИзДокумента(ДанныеОрдера.ИдОснования, Элемент.Значение);
		Если Не ЗначениеЗаполнено(СсылкаОснования) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.ДокументОснование = СсылкаОснования;
		СтрокаПлатеж.Заказ = СсылкаОснования;
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			СтрокаПлатеж.ОснованиеПлатежа = СсылкаОснования;
			МассивДокументов = ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
			МассивДокументов.Добавить(ДокументОбъект.ДокументОснование);
			
			//{{ vd_180601 Ошибка количества параметров
			//Было Если гКонфигурацияВерсия = "ERP_OLD" Или гКонфигурацияВерсия = "КА_OLD" Тогда // gi_180123
			
			//Количество параметров ТекстСуммаНДСПлатежа() в версиях:
			//УТ_UA 3.1.5.1 - 5 параметров
			//УТ_KZ 3.1.4.8 - 5 парметров
			//УТ_KZ 3.2.2.22- 5 парметров
			//
			//КА 2.4.3.137  - 3 Параметра
			//УТ 11.2.3.300 - 5 параметров
			//УТ 11.3.1.109 - 3 параметра
			//УТ 11.3.4.93  - 3 параметра
			//УТ 11.4.3.126 - 3 параметра
			
			// sk_190423 Изменено условие в рамках (MOD-514)
			// Если гКонфигурацияВерсия = "ERP_OLD" ИЛИ гКонфигурация = "УТ_UA" ИЛИ гКонфигурация = "УТ_KZ" Тогда // vd_180601 //vd_180718 
			Если гКонфигурацияВерсия = "ERP_OLD" ИЛИ гКонфигурация = "УТ_UA" ИЛИ гКонфигурация = "УТ_KZ" 
					ИЛИ гКонфигурация = "УТ" И ПоколениеКонфигурации("<УТ_11.3") Тогда
				ДокументОбъект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
					ДокументОбъект.СуммаДокумента, ДокументОбъект.Валюта, МассивДокументов, Ложь, Истина);
			Иначе
				ДокументОбъект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
					ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа, Ложь);
			КонецЕсли;
		    //}} vd_180601
					
			ДокументОбъект.Основание = СокрЛП(СсылкаОснования);
		КонецЕсли;
		Прервать;
	КонецЦикла;

КонецПроцедуры

Процедура ЗакончитьЗагрузкуВиртуальныхДокументов(ЗагружаемыеОбъекты)
	
	Если ЗагружаемыеОбъекты.Свойство("ВидыВиртуальныхДокументовДляЗаписи") Тогда // были загружены виртуальные документы
		
		Для Каждого ВидДокумента Из ЗагружаемыеОбъекты.ВидыВиртуальныхДокументовДляЗаписи Цикл
			ВОТЗСохранить(ВидДокумента, ЗагружаемыеОбъекты[ВидДокумента]);
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

//vd_190408 Добавлена
// Функция - Проводить документ
//
// Параметры:
//  ВидДокумента - Строка - вид документа ВидДокумента = ОбъектДок.Метаданные().Имя
// 
// Возвращаемое значение:
// Булево - Истина если можно проводить Настройками обработки
//
Функция ПроводитьДокумент(ВидДокумента)
	
	Если НЕ ПроводитьДокументыПриЗагрузке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ПроводитьДокументыСписок.НайтиПоЗначению(ВидДокумента);
	Если Результат <> Неопределено И Результат.Пометка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь; 
	
КонецФункции

#Область ЗагрузкаДокументов_ОбработкаШапки
// обработка шапки загружаемых документов перед записью в БД 1С
	
Функция ИспользоватьНаправленияДеятельности()
	
	Если гИспользоватьНаправленияДеятельности = Неопределено Тогда
		гИспользоватьНаправленияДеятельности = БухгалтерскийУчетПереопределяемый.ИспользоватьНаправленияДеятельности();
	КонецЕсли; 
	
	Возврат гИспользоватьНаправленияДеятельности;
	
КонецФункции

Процедура ДокументПродажиЗаполнитьПоДоговору(ОбъектДок)
	// алгоритм взят из модуля менеджера документа ЗаказПокупателя	
	 
	// ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчет, ОбъектДок.БанковскийСчетКонтрагента); sk_181214 БанковскийСчет заполняется в процедуре ЗагрузитьДокументЗаказ() 
	
	Если ЗначениеЗаполнено(ОбъектДок.Договор) Тогда
		ОбъектДок.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДок.Договор, "ГруппаФинансовогоУчета");
	КонецЕсли;
	
	Если гКонфигурация = "УТ_KZ" Тогда
		НаправленияДеятельностиСервер = Неопределено; //  чтобы не было ошибки компилятора
	ИначеЕсли ИспользоватьНаправленияДеятельности() Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(ОбъектДок.НаправлениеДеятельности, ОбъектДок.Соглашение, ОбъектДок.Договор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Договор) Тогда
		ОбъектДок.ПорядокОплаты = ОбъектДок.Договор.ПорядокОплаты;
	КонецЕсли;
	
	Если гКонфигурация = "УТ_KZ" Тогда
		ОбъектДок.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ОбъектДок);
	Иначе
		стррПараметры = Новый Структура("Соглашение, Договор");
		ЗаполнитьЗначенияСвойств(стррПараметры, ОбъектДок);
		ОбъектДок.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоУмолчанию(стррПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументПродажиЗаполнить(ОбъектДок)

	ОрганизацияДоИзменения = ОбъектДок.Организация;
	ДоговорДоИзменения 	   = ОбъектДок.Договор;
	ФормаОплатыДоИзменения = ОбъектДок.ФормаОплаты;
	
	ОбъектДок.ЗаполнитьУсловияПродажПоУмолчанию(); 
	ОбъектДок.Организация = ОрганизацияДоИзменения;
	
	Если ЗначениеЗаполнено(ДоговорДоИзменения) Тогда
		ОбъектДок.Договор 	= ДоговорДоИзменения;
		Если ИспользоватьДоговоры() Тогда
			ОбъектДок.ЦенаВключаетНДС	= ДоговорИспользуетНДС(ДоговорДоИзменения);
		КонецЕсли; 
		ДокументПродажиЗаполнитьПоДоговору(ОбъектДок);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ФормаОплатыДоИзменения) Тогда
		ОбъектДок.ФормаОплаты = ФормаОплатыДоИзменения;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ОбъектДок.ХозяйственнаяОперация) Тогда
		ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;
	
	Если гКонфигурация <> "УТ_UA" И Не ЗначениеЗаполнено(ОбъектДок.НалогообложениеНДС) Тогда
		//((vd_190214
		//Было:
		//ОбъектДок.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Дата);
		Если ПоколениеКонфигурации(">=УТ_11.4.5.24") Тогда        
			ОбъектДок.НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Договор , ОбъектДок.НаправлениеДеятельности, ОбъектДок.Дата);
		Иначе
			//КА тоже
			ОбъектДок.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Дата);
		КонецЕсли;
		//))vd_190214
	КонецЕсли;

КонецПроцедуры

Функция ДоговорИспользуетНДС(Договор)
	
	Если Договор.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Или Договор.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции 

// ЗагрузкаДокументов_ОбработкаШапки
#КонецОбласти

// ЗагрузкаДокументов
#КонецОбласти

#Область ЗагрузкаТреков

//vd_181218 Добавлены комментарии и проверка формата
Процедура ЗагрузитьТрек(ФайлТрека, СсылкаМУ)
	
	ТекущаяДатаТрека 	= Неопределено; // Текущая дата трека в виде строки "YYYY-MM-DD" (дата точек трека).
	стррДанные		 	= Неопределено; // Трек в файле трека 1С	
	ДатаВремяТочки	 	= Неопределено; // Дата строчки из МУ 
	БылиИзменения 	 	= Ложь;         // Изменения в файле трека 1С 
	Сортировать		 	= Ложь;         // Сортировать по дате ТЗ в файле трека 1С 
	КаталогТрековАгента = КаталогФайловТрековАгента();
	стррСтрокаТрека		= Новый Структура("Время, Широта, Долгота, Скорость, ИсточникСигнала, ЕстьОшибка"); //vd_181218 Структура для заполнения строки в стррДанные 
	
	ЧтениеТрека = Новый ЧтениеТекста(ФайлТрека.ПолноеИмя);
	СтрокаФайла	= ЧтениеТрека.ПрочитатьСтроку();
	Пока СтрокаФайла <> Неопределено Цикл
		
		//((vd_181218
		//vd_180712
		//Если НЕ ЗначениеЗаполнено(СтрокаФайла) Тогда
		//	СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
		//	Продолжить;
		//КонецЕсли;   		
		
		//ДатаВремяТочки = ТрекДатаИзСтроки(Лев(СтрокаФайла, 19)); // дата-время в виде строки "YYYY-MM-DD HH-MM-SS"
		
		Результат =  ТрекДатаИзСтроки(СтрокаФайла);
		Если Результат = '00010101' Тогда
			СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
			Продолжить;
		Иначе
			ДатаВремяТочки = Результат;
		КонецЕсли;
		//))vd_181218
		
		//Открываем файл трека 
		Если ТекущаяДатаТрека <> НачалоДня(ДатаВремяТочки) Тогда
			Если БылиИзменения Тогда			
				ТрекСохранитьФайл(стррДанные, КаталогТрековАгента, Сортировать);
			КонецЕсли;
			ТекущаяДатаТрека = НачалоДня(ДатаВремяТочки);
			стррДанные = ТрекОткрытьФайл(ТекущаяДатаТрека, КаталогТрековАгента);
			//тзТрек			= стррДанные.Трек;				//vd_181218					
			//ВремяНачалаТрека 	= стррДанные.ВремяНачала;       //vd_181218
			//ВремяОкончанияТрека = стррДанные.ВремяОкончания;  //vd_181218
			БылиИзменения 	 = Ложь;
			Сортировать		 = Ложь;
		КонецЕсли;
		
		//vd_181218
		//Если ДатаВремяТочки > ВремяОкончанияТрека Тогда
		//	стзТрек = тзТрек.Добавить();
		//	стзТрек.Время = ДатаВремяТочки;
		//	ТрекЗаполнитьРеквизитыСтроки(стзТрек, СтрокаФайла);
		//	БылиИзменения = Истина;	
		//ИначеЕсли ДатаВремяТочки < ВремяНачалаТрека Тогда // изменено время в МУ? 
		//	стзТрек = тзТрек.Добавить(); 				
		//	стзТрек.Время = ДатаВремяТочки;
		//	ТрекЗаполнитьРеквизитыСтроки(стзТрек, СтрокаФайла);
		//	БылиИзменения = Истина;
		//	Сортировать	= Истина;			
		//КонецЕсли;

		Если ДатаВремяТочки > стррДанные.ВремяОкончания ИЛИ ДатаВремяТочки < стррДанные.ВремяНачала  Тогда
			
			стррСтрокаТрека.Время = ДатаВремяТочки;
			ТрекЗаполнитьстррСтрокаТрека(СтрокаФайла, стррСтрокаТрека);
			
			Если стррСтрокаТрека.ЕстьОшибка = Истина Тогда
				СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
				Продолжить;
			КонецЕсли;
				
			стзТрек = стррДанные.Трек.Добавить();
			стзТрек.Время 			= стррСтрокаТрека.Время;
			стзТрек.Широта 			= стррСтрокаТрека.Широта;
			стзТрек.Долгота 		= стррСтрокаТрека.Долгота;
			стзТрек.Скорость 		= стррСтрокаТрека.Скорость;
			стзТрек.ИсточникСигнала = стррСтрокаТрека.ИсточникСигнала;			
			БылиИзменения = Истина;
			
			Если ДатаВремяТочки < стррДанные.ВремяНачала  Тогда
				Сортировать	= Истина;
			КонецЕсли;
		КонецЕсли;
		//))vd_181218   
			
		СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Если БылиИзменения Тогда
		ТрекСохранитьФайл(стррДанные, КаталогТрековАгента, Сортировать);
	КонецЕсли; 
	
	Если ДатаВремяТочки <> Неопределено Тогда // есть дата и время последней точки трека, нужно ее запомнить для подтверждения.
		Имя = СДИмяФайлаДляМУ(СсылкаМУ);
		стррЗначения = СДПрочитать(Имя, Истина);
		стррЗначения.Вставить("ПоследнееВремяТрека", ДатаВремяТочки);
		СДЗаписать(Имя, стррЗначения);
	КонецЕсли; 

КонецПроцедуры

//vd_181218 Переименована из ТрекЗакрытьФайл() в ТрекСохранитьФайл()
Процедура ТрекСохранитьФайл(стррДанные, КаталогТрековАгента, Сортировать = Ложь)

	тзТрек = стррДанные.Трек;
	Если тзТрек.Количество() = 0 Тогда // пустой трек не записываем
		Возврат;
	КонецЕсли; 
	
	Если Сортировать Тогда
		тзТрек.Сортировать("Время");
	КонецЕсли; 
	
	стррДанные.ВремяНачала 		= тзТрек[0].Время;
	стррДанные.ВремяОкончания 	= тзТрек[тзТрек.Количество()-1].Время;
	ИмяФайла = ТрекИмяФайлаПоДате(стррДанные.ВремяНачала, КаталогТрековАгента);
	
	ЗначениеВФайл(ИмяФайла, стррДанные);

КонецПроцедуры

Функция ТрекОткрытьФайл(ДатаТочкиТрека, КаталогТрековАгента) Экспорт

	ИмяФайла = ТрекИмяФайлаПоДате(ДатаТочкиТрека, КаталогТрековАгента);
	Если ФайлСуществует(ИмяФайла) Тогда
		стррДанные = ЗначениеИзФайла(ИмяФайла);
	Иначе
		стррДанные = Новый Структура;
		стррДанные.Вставить("Версия", 1);
		стррДанные.Вставить("ВремяНачала", 		'00010101');
		стррДанные.Вставить("ВремяОкончания", 	'00010101');
		
		ТипДата	 = Новый ОписаниеТипов("Дата");
		ТипЧисло = Новый ОписаниеТипов("Число");
		
		тзТрек = Новый ТаблицаЗначений;
		тзТрек.Колонки.Добавить("Время", 	ТипДата);
		тзТрек.Колонки.Добавить("Широта", 	ТипЧисло);
		тзТрек.Колонки.Добавить("Долгота", 	ТипЧисло);
		тзТрек.Колонки.Добавить("Скорость",	ТипЧисло);
		тзТрек.Колонки.Добавить("ИсточникСигнала",  ТипЧисло);
		
		стррДанные.Вставить("Трек", тзТрек);

	КонецЕсли; 
	
	Возврат стррДанные;

КонецФункции 


//vd_181218 Не используется. Нет проверки на корректность строки, пример: строка может быть оборванной на половину, ситуация может возникнуть при плохом соединении с ФТП)
// процедура не заполняет перевый параметр строки (Время), т.к. время устанавливается перед вызовом процедуры.
//Процедура ТрекЗаполнитьРеквизитыСтроки(стзТрек, Строка)
//	
//	//Разделитель	   = Символы.Таб;
//	//НомерПараметра = 0;
//	//Позиция        = Найти(Строка, Разделитель);
//	//
//	//Пока Позиция > 0 Цикл
//	//	СтрЗначение = Лев(Строка, Позиция - 1);
//	//	Если НомерПараметра > 0 Тогда
//	//		стзТрек[НомерПараметра] = ?(ПустаяСтрока(СтрЗначение), 0, Число(СтрЗначение));
//	//	КонецЕсли; 
//	//	Строка = Сред(Строка, Позиция + 1);
//	//	Позиция = Найти(Строка, Разделитель);
//	//	НомерПараметра = НомерПараметра + 1;
//	//КонецЦикла;
//	//
//	//стзТрек[НомерПараметра] = ?(ПустаяСтрока(Строка), 0, Число(Строка));
//	
//КонецПроцедуры	

//vd_181218 Добавлена
Процедура ТрекЗаполнитьстррСтрокаТрека(СтрокаФайла, стррСтрокаТрека);

	стррСтрокаТрека.ЕстьОшибка = Ложь;	
	Строки = СтрЗаменить(СтрокаФайла, Символы.Таб, Символы.ПС); 
	
	Если СтрЧислоСтрок(Строки) < 5 Тогда
		стррСтрокаТрека.ЕстьОшибка = Истина;
		Возврат;
	Конецесли;
	
	Попытка
		стррСтрокаТрека.Широта  = Число(СтрПолучитьСтроку(Строки, 2));		
		стррСтрокаТрека.Долгота = Число(СтрПолучитьСтроку(Строки, 3));
	Исключение
		стррСтрокаТрека.ЕстьОшибка = Истина;
		Возврат;	
	КонецПопытки;
	
	Если (стррСтрокаТрека.Широта = 0 ИЛИ стррСтрокаТрека.Долгота = 0) И НЕ стррСтрокаТрека.Широта = стррСтрокаТрека.Долгота = 0 Тогда
		стррСтрокаТрека.ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли; 	
	
	Попытка
		стррСтрокаТрека.Скорость  = Число(СтрПолучитьСтроку(Строки, 4));		
	Исключение
		стррСтрокаТрека.Скорость = 0;
	КонецПопытки;
	
	Попытка
		стррСтрокаТрека.ИсточникСигнала  = Число(СтрПолучитьСтроку(Строки, 5));		
	Исключение
		стррСтрокаТрека.ИсточникСигнала = 0;
	КонецПопытки;
	
КонецПроцедуры	
	
Функция ТрекДатаИзСтроки(СтрокаТрека)

	//vd_181218
	//Было:
	//СтрокаДаты = СтрЗаменить(Лев(СтрокаТрека, 19), "-", "");
	//СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", "");
	//Возврат Дата(СтрокаДаты);
	
	Попытка
		КонечныйИндексСимвола = Найти(СтрокаТрека, символы.Таб) - 1;
		СтрокаДаты = Лев(СтрокаТрека, КонечныйИндексСимвола);
		СтрокаДаты = СтрЗаменить(СтрокаДаты, "-", "");
		СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", "");
		СтрокаДаты = Дата(СтрокаДаты);
	Исключение
		СтрокаДаты = '00010101';	
	КонецПопытки;
		
	Возврат СтрокаДаты;
КонецФункции

Функция ТрекИмяФайлаПоДате(ДатаТрека, КаталогТрековАгента)

	Возврат КаталогТрековАгента + Формат(ДатаТрека, "ДФ=yyyyMMdd") + "_GPS.dat";
	
КонецФункции

// ЗагрузкаТреков
#КонецОбласти

// Загрузка значений всех реквизитов обработки. Таблицы значений загружаются в реквизит "ВременныеТаблицы" (тип - Структура).
Процедура ЗагрузитьНастройкиДляРаботыОбмена()

	Если гНастройкиОбменаЗагружены = Истина Тогда // настройки обмена уже загружены в память
		Возврат;
	КонецЕсли; 
	
	ОпределитьВерсиюКонфигурации();
	
	Имена = "";
	
	Для Каждого ЭлементМетаданных Из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Имя = ЭлементМетаданных.Имя;
		Если Имя <> "ВыбАгент" Тогда
			Имена = Имена + Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьЗначенияНастроекОбработки(Лев(Имена, СтрДлина(Имена)-1), Истина);
	
	гКэшСравненияКонфигураций 	= Новый Соответствие;
	гКэшРеквизитыОбъектов 		= Новый Соответствие;
	//гКэшСпискиОбъектов 		= Новый Соответствие; //vd_181203 глобальная переменная участвует только при выгрузке данных, перенесена в выгрузку.
	
	// чтение служебных таблиц (которых нет среди реквизитов обработки) гКэшСлужебныхТаблиц
	СТЗЗагрузить("СпрХарактеристикиНоменклатурыСлужебный");
	
КонецПроцедуры

Функция НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, ЭтоДополнительноеСведение, Подсказка)

	НовыйЭлемент = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	НовыйЭлемент.ДополнительныеЗначенияИспользуются = Истина;
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда 
		НовыйЭлемент.Доступен = Ложь;
	КонецЕсли;
	НовыйЭлемент.Заголовок 		= ПредставлениеСвойства;
	НовыйЭлемент.Наименование 	= ИмяСвойства;
	НовыйЭлемент.ТипЗначения 	= ОписаниеТипа;
	НовыйЭлемент.ЭтоДополнительноеСведение = ЭтоДополнительноеСведение;
	НовыйЭлемент.Подсказка 		= Подсказка;
	НовыйЭлемент.Записать();

	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции 

// Функция возвращает структуру, используемую для запоминания загруженных объектов
// (документов, элементов справочников) из XML-файла, полученного от МТ.
// Параметры:
// 	  стррСведенияИзАрхива - Струкутра - дополнительные данные о содержимом архива файла обмена To1C.zip.
//
Функция ЗагруженныеОбъектыИзФайла(стррСведенияИзАрхива) // gi_180415 добавлен параметр стррСведенияИзАрхива

	стррРезультат = Новый Структура;
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор"); // gi_170830
	ОписаниеТипаДата   = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)); // gi_180123
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево"); // gi_180417
	
	тзЗагруженныеДокументы = Новый ТаблицаЗначений;
	тзЗагруженныеДокументы.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);	// gi_170830 идентификатор документа
	тзЗагруженныеДокументы.Колонки.Добавить("ВидДокумента", 	ОписаниеТипаСтрока); // вид документа в 1С
	тзЗагруженныеДокументы.Колонки.Добавить("ИдВидДокументаМТ", ОписаниеТипаИдентификатор); // gi_170830 идентификатор (GUID) вида документа в МУ (на случай, если, например, Заказ в МУ загружался в 1С как РеализацияТоваровУслуг)
	тзЗагруженныеДокументы.Колонки.Добавить("ДатаДокумента", 	ОписаниеТипаДата); // gi_180123 дата-время создания документа в МУ
	
	стррРезультат.Вставить("тзЗагруженныеДокументы", 			тзЗагруженныеДокументы); // идентификаторы загруженных документов
	
	// sd_10082017 {
	тзЗагруженныеСправочники = Новый ТаблицаЗначений;
	тзЗагруженныеСправочники.Колонки.Добавить("Идентификатор", 		ОписаниеТипаИдентификатор);	// gi_170830 идентификатор элемента справочника
	тзЗагруженныеСправочники.Колонки.Добавить("ИдВидСправочникаМТ", ОписаниеТипаИдентификатор); // gi_170830 // идентификатор (GUID) вида справочника в МУ ? возможно не нужен
	стррРезультат.Вставить("тзЗагруженныеСправочники", 	тзЗагруженныеСправочники); // идентификаторы загруженных элементов справочников
	// } sd_10082017 
	
	тзКассовыеДокументы = Новый ТаблицаЗначений; // gi_170902 переименовал из ТаблицаКассовыхДокументов
	тзКассовыеДокументы.Колонки.Добавить("Документ"); 	  // объект документа
	тзКассовыеДокументы.Колонки.Добавить("стррЗначения"); // значения дополнительных реквизитов документа
	тзКассовыеДокументы.Колонки.Добавить("ЭтоНовый");
	тзКассовыеДокументы.Колонки.Добавить("ИдОснования");
	стррРезультат.Вставить("тзКассовыеДокументы", тзКассовыеДокументы);
	
	//vd_180319 Добавление Поступления/Возвраты. Добавил новую таблицу.
	тзДокументыПоступлений = Новый ТаблицаЗначений; 
	тзДокументыПоступлений.Колонки.Добавить("Документ"); 	  // объект документа
	тзДокументыПоступлений.Колонки.Добавить("стррЗначения"); // значения дополнительных реквизитов документа
	тзДокументыПоступлений.Колонки.Добавить("ЭтоНовый");
	тзДокументыПоступлений.Колонки.Добавить("ИдОснования");
	стррРезультат.Вставить("тзДокументыПоступлений", тзДокументыПоступлений);
	
	тзСсылкиНаМерчендайзинг = Новый ТаблицаЗначений; // таблица ссылок на документы Мерчандайзинг в загруженных из МУ документов ЗаказКлиента и Реализация (по значению реквизита "Мерчендайзинг")
	тзСсылкиНаМерчендайзинг.Колонки.Добавить("Документ");
	тзСсылкиНаМерчендайзинг.Колонки.Добавить("ИдМерчендайзинга");
	стррРезультат.Вставить("тзСсылкиНаМерчендайзинг", тзСсылкиНаМерчендайзинг);
	
	//(( gi_180415 поддержка загрузки фотографий
	стррРезультат.Вставить("СведенияИзАрхива", стррСведенияИзАрхива); 
	тзФотографии = Новый ТаблицаЗначений;
	тзФотографии.Колонки.Добавить("GUID", 	ОписаниеТипаСтрока); // идентификатор элемента справочника МТ "*ФотоДокументов" для выгрузки подтверждений
	тзФотографии.Колонки.Добавить("ИдФото", ОписаниеТипаСтрока); // идентификатор изображения фотографии - используется для подтверждения элементов тэга PICTURES
	тзФотографии.Колонки.Добавить("Время",  ОписаниеТипаСтрока); // время создания фотографии в формате XML
	тзФотографии.Колонки.Добавить("ИдДокумента",  ОписаниеТипаСтрока);   // идентификатор документа, за которым закреплена фотография 
	тзФотографии.Колонки.Добавить("ВидДокумента", 	ОписаниеТипаСтрока); // вид документа-владельца фотографии
	тзФотографии.Колонки.Добавить("ВидСправочника", ОписаниеТипаСтрока); // вид справочника УТ, куда загружается фотография
	тзФотографии.Колонки.Добавить("ИмяФайла", 		ОписаниеТипаСтрока); // имя файла фотографии
	тзФотографии.Колонки.Добавить("Описание", 	ОписаниеТипаСтрока); // описание фотографии, которое ввел пользователь МУ после фотографирования
	тзФотографии.Колонки.Добавить("ЭтоНовый", 	ОписаниеТипаБулево); // признак, что фотография загружается в УТ впервые
	тзФотографии.Колонки.Добавить("Загружено", 	ОписаниеТипаБулево); // ссылка на элемент справочника УТ хранения фотографий (для разных видов документов это разные справочники в УТ)
	
	стррРезультат.Вставить("тзФотографии", тзФотографии);
	//)) gi_180415

	Возврат стррРезультат;
	
КонецФункции 

Функция СсылкаИзДокументаПоСпискуВидов(ИдДокумента, стрВидыДокументов)
	
	мВидыДокументов = СтрРазделить_(стрВидыДокументов);
	ТипИдентификатора = ТипЗнч(ИдДокумента);
	
	Если ТипИдентификатора = Тип("Строка") И Не ПустаяСтрока(ИдДокумента) Тогда
		ID = Новый УникальныйИдентификатор(ИдДокумента);
	ИначеЕсли ТипИдентификатора = Тип("УникальныйИдентификатор") Тогда
		ID = ИдДокумента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Для каждого ВидДокумента Из мВидыДокументов Цикл
		Ссылка = СсылкаИзДокумента(ID, ВидДокумента);
		Если Не Ссылка.Пустая() Тогда
			Результат = Ссылка;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Результат = Неопределено Тогда // возвращаем пустую ссылку вида из первого элемента массива
		Результат = Документы[мВидыДокументов[0]].ПустаяСсылка();
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция СсылкаИзДокумента(ИдДокумента, ВидДокумента)

	ДокМенеджер = Документы[ВидДокумента];		
	ТипИдентификатора = ТипЗнч(ИдДокумента);
	
	//vd_190418 Если ТипИдентификатора = Тип("Строка") И Не ПустаяСтрока(ИдДокумента) Тогда 
	Если ТипИдентификатора = Тип("Строка") И Не ПустаяСтрока(ИдДокумента) И НЕ ИдДокумента = "00000000-0000-0000-0000-000000000000" Тогда
		ID = Новый УникальныйИдентификатор(ИдДокумента);       
	ИначеЕсли ТипИдентификатора = Тип("УникальныйИдентификатор") Тогда
		ID = ИдДокумента;
	Иначе
		ID = Неопределено;
	КонецЕсли;
	
	Если ID <> Неопределено Тогда
		Ссылка = ДокМенеджер.ПолучитьСсылку(ID);
		ОбъектДок = Ссылка.ПолучитьОбъект(); // будет возвращено Неопределено, если объект не найден
	КонецЕсли; 
	
	Возврат ?(ОбъектДок = Неопределено, ДокМенеджер.ПустаяСсылка(), Ссылка);
	
КонецФункции

Функция СсылкаИзСправочника(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь)
	
	СпрМенеджер = Справочники[Спр];
	
	Если ИдЭлемента = Неопределено Или ЭтоПустойИдентификатор(ИдЭлемента) Тогда
		Возврат СпрМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Результат = Неопределено;	

	Если ЗначениеЗаполнено(ИдЭлемента) Тогда
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		Результат = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
		Если Результат.ПолучитьОбъект() = Неопределено Тогда
			Если СоздаватьЭлемент Тогда // sd_10082017 
				ЭлементОбъект = СпрМенеджер.СоздатьЭлемент();
				ЭлементОбъект.УстановитьСсылкуНового(Результат); 
				//ЭлементОбъект.апОбменДанными.Загрузка = Истина; // sd_10082017 свойства апОбменДанными не существует, скорее всего опечатка.
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				Если Не ВыполнитьОперациюДляОбъекта(ЭлементОбъект, "запись") Тогда
					Текст = "Не удалось записать элемент справочника: " + Строка(ЭлементОбъект);
					ОповеститьОСобытии(Текст, "ОшибкаЗапись", ЭлементОбъект, "ТекущийАгент");
					Возврат Результат;
				КонецЕсли;
				Результат = ЭлементОбъект.Ссылка;
			Иначе
				Результат = СпрМенеджер.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат = СпрМенеджер.ПустаяСсылка();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция записыввает и (если требуется в настройках) проводит документ.
// Возвращает Истина, если документ удалось записать, или Ложь в противном случае.
Функция ЗаписьДокумента(Док, стррЗначенияДопРеквизитов, ЭтоНовый)
	
	МожноПроводить = Истина;             
	МетаданныеДок = Док.Метаданные();
	РеквизитыДок = МетаданныеДок.Реквизиты;

	ПроводитьДокумент = ПроводитьДокумент(МетаданныеДок.Имя);  //vd_190408
		
	Если ПроводитьДокумент Тогда //vd_190408 Если ПроводитьДокументыПриЗагрузке Тогда
		
		Если РеквизитыДок.Найти("Партнер") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Партнер) Тогда
				Текст = "В документе " + Строка(Док) + " не указан партнер. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если РеквизитыДок.Найти("Контрагент") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				Текст = "В документе " + Строка(Док) + " не указан контрагент. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если РеквизитыДок.Найти("Соглашение") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Соглашение) И ИспользоватьСоглашения() И Не ИспользоватьПунктыРазгрузки Тогда
				Текст = "В документе " + Строка(Док) + " не указано соглашение. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитыДок.Найти("Договор") <> Неопределено И ИспользоватьПунктыРазгрузки Тогда
			Если Не ЗначениеЗаполнено(Док.Договор) Тогда
				Текст = "В документе " + Строка(Док) + " не указан договор. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитыДок.Найти("СуммаДокумента") <> Неопределено Тогда
			Если Док.СуммаДокумента = 0 Тогда
				Текст = "Сумма документа " + Строка(Док) + " равна 0. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		МожноПроводить = Ложь;
		
	КонецЕсли;

	Если Не ВыполнитьОперациюДляОбъекта(Док, "запись") Тогда
		Текст = "Не удалось записать документ " + Строка(Док) + " в базу!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписатьДополнительныеСвойстваДокумента(Док.Ссылка, стррЗначенияДопРеквизитов);	

	Если МетаданныеДок.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить И ПроводитьДокумент И МожноПроводить Тогда
		Если Не ВыполнитьОперациюДляОбъекта(Док, "проведение") Тогда
			ОповеститьОСобытии("Не удалось провести документ: " + Строка(Док), "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
			Возврат Истина; // 
		КонецЕсли;
	КонецЕсли;
	
	Текст = ?(ЭтоНовый, "Создан", "Перезаписан") + " документ " + Строка(Док);
	ОповеститьОСобытии(Текст, "ИнфоОбмен", Док.Ссылка);
	
	Возврат Истина;
	
КонецФункции

// Функция записыввает и (если требуется в настройках) проводит документ.
// Возвращает Истина, если документ удалось записать, или Ложь в противном случае.
Функция ЗаписьВиртуальногоДокумента(стррДокумент, стррЗначенияДопРеквизитов, стррПараметры, ЗагружаемыеОбъекты) // !!!! ЗагружаемыеОбъекты - временный параметр
	
	МожноПроводить = Истина;
	
	ВидДокумента = стррДокумент._ВидДокумента;
	СтрокаТ 	 = стррДокумент._строкаЖурнала; // строка ТЗ журнала виртуального документа
	
	// удаляем служебные реквизиты структуры перед записью документа в хранилище
	стррДокумент.Удалить("_ВидДокумента");
	стррДокумент.Удалить("_строкаЖурнала");
	стррДокумент.Удалить("Ссылка");
	
	стррДокумент.Статус = ?(стррПараметры.Проведен, 1, 0);
	
	ЗаполнитьЗначенияСвойств(стррДокумент, стррЗначенияДопРеквизитов, "ВремяНачала,ВремяОкончания,Широта,Долгота"); // заполняем значения доп. реквизитов
	ЗаполнитьЗначенияСвойств(СтрокаТ, стррДокумент); // заполняем значения строки журнала виртуального документа (копируется часть реквизитов шапки документа)
	
	Префикс = ВОСвойстваОбъекта(ВидДокумента).Префикс;
	ID = СтрокаТ.ID;
	СохранитьОбъектВХранилище(Префикс, ID, стррДокумент);
	
	Текст = ?(стррПараметры.ЭтоНовый, "Создан", "Перезаписан") + " документ " + стррПараметры.Представление; 
	ОповеститьОСобытии(Текст, "ИнфоОбмен", Неопределено);
	
	Возврат Истина;
	
КонецФункции

// sd_10082017
Функция ЗаписьСправочника(ОбъектСпр, НовыйЭлемент = Истина) // gi_180415 заменил параметры на более читабельные 
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда
		Текст = "Не удалось записать справочник " + Строка(ОбъектСпр) + " в базу!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектСпр.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	Текст = СтрШаблон_("%1 элемент справочника ""%2"", наименование: %3",
		?(НовыйЭлемент, "Создан", "Перезаписан"),
		ОбъектСпр.Метаданные().Имя,
		Строка(ОбъектСпр));
	ОповеститьОСобытии(Текст, "ИнфоОбмен", ОбъектСпр.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписьДопСвойствПартнера(Спр, стррСвойства)

	тзРеквизиты = Новый ТаблицаЗначений;
	тзРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	тзРеквизиты.Колонки.Добавить("Значение");
	
	стзШирота = тзРеквизиты.Добавить();	
	стзШирота.Свойство  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаПартнер());	
	стзШирота.Значение	= стррСвойства.Широта;
	стзДолгота = тзРеквизиты.Добавить();
	стзДолгота.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаПартнер());
	стзДолгота.Значение = стррСвойства.Долгота;

	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Спр.Ссылка, тзРеквизиты);

КонецПроцедуры

Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации)
	
	Результат = Ложь;
	
	Попытка
		
		Если ВидОперации = "запись" Тогда
			
			Объект.Записать();
			
		ИначеЕсли ВидОперации = "проведение" Тогда
			
			Если Объект.ПометкаУдаления Тогда
				ОповеститьОСобытии("Документ помечен на удаление - проведение отменено!", "ОшибкаЗапись", Объект.Ссылка, "ТекущийАгент");
				Возврат Ложь;
			Иначе
				Объект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		ИначеЕсли ВидОперации = "создание" Тогда
			
			СтрОбъект = Строка(Объект);
			
			Если Лев(СтрОбъект, 10)     = "Справочник" Тогда
				Объект = Объект.СоздатьЭлемент();
			ИначеЕсли Лев(СтрОбъект, 8) = "Документ" Тогда
				Объект = Объект.СоздатьДокумент();
			ИначеЕсли Лев(СтрОбъект, 7) = "Регистр" Тогда
				Объект = Объект.СоздатьМенеджерЗаписи();
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Истина;
		
	Исключение
		
		Текст = "Не удалось выполнить " + ВидОперации + " для объекта: """ + Строка(Объект) + """. Причина: " + ОписаниеОшибки();
		Ссылка = ?(ЕстьРеквизитОбъекта("Ссылка", Объект), Объект.Ссылка, Неопределено);
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Ссылка, "ТекущийАгент");
		
		Если ВидОперации = "проведение" И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			// запись документа прошла успешно, возвращаем Истина, чтобы документ был зарегистрирован в журнале обмена
			Результат = Истина;
		КонецЕсли; 
		
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

Функция ОснованияДляДокументовОрдер()

	СписокОснованийДляОрдера = Новый СписокЗначений;
	СписокОснованийДляОрдера.Добавить("ЗаказКлиента");
	СписокОснованийДляОрдера.Добавить("РеализацияТоваровУслуг");
	СписокОснованийДляОрдера.Добавить("ВозвратТоваровОтКлиента");
	СписокОснованийДляОрдера.Добавить(ВидДокументаПоступлениеТоваровУслуг());

	Возврат СписокОснованийДляОрдера;
	
КонецФункции // ОснованияДляДокументовОрдер()

Функция ЭтоПустойИдентификатор(ИД)

	Возврат (ПустаяСтрока(ИД) Или СокрЛП(ИД) = "00000000-0000-0000-0000-000000000000");

КонецФункции

Функция КонстантыИзФайлаОбмена(ТекстXML, ИменаКонстант)

	стррРезультат = Новый Структура(ИменаКонстант);
	ствКонстанты = КонстантыМТПолучитьСоответствие();
	
	Пока ТекстXML.Прочитать() Цикл
		Если ТекстXML.Имя = "CONSTANTS"	И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяКонстанты = ствКонстанты.Получить(НРег(ТекстXML.ЗначениеАтрибута("GUID")));
			Если ЗначениеЗаполнено(ИмяКонстанты) Тогда
				стррРезультат[ИмяКонстанты] = ТекстXML.ЗначениеАтрибута("Value");
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат стррРезультат;
	
КонецФункции 

Функция ТорговыйПредставительИзФайлаОбмена(Идентификатор)

	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));		
	КонецЕсли;
	
КонецФункции

Функция НайтиФайлОбменаВКаталоге(Путь)

	Маска = "To*.zip";
	НайденныеФайлы = НайтиФайлы(Путь, Маска);
	ФайлАрхив = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		ФайлАрхив = НайденныеФайлы[0];
	Иначе
		Текст = СтрШаблон_("Данные от агента отсутствуют в каталоге ""%1"".", Путь);
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		Возврат Неопределено;
	КонецЕсли;

	Возврат ФайлАрхив;
	
КонецФункции 

//////vd_180319 Фоновая передача GPS. Удалил.
//Функция ФайлОбменаТрек(ПутьККаталогуФайла)

//	НайденныеФайлы = НайтиФайлы(ПутьККаталогуФайла, "gps*.txt");
//	Результат = Неопределено;
//	Если НайденныеФайлы.Количество() > 0 Тогда
//		Результат = НайденныеФайлы[0];
//	КонецЕсли;

//	Возврат Результат;
//	
//КонецФункции 

Функция ФайлОбменаРаспакованный(ПутьККаталогуФайла)

	Маска = "To*.xml";
	НайденныеФайлы = НайтиФайлы(ПутьККаталогуФайла, Маска);
	ФайлОбмена = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		ФайлОбмена = НайденныеФайлы[0];
	Иначе
		Текст = СтрШаблон_("Не найден файл в папке ""%1"" по маске ""%2"".", ПутьККаталогуФайла, Маска);
		ВызватьИсключение(Текст);
	КонецЕсли;

	Возврат ФайлОбмена;
	
КонецФункции 

Функция УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦеныДокумента) 
	
	ВидЦены = СсылкаИзСправочника(ИдВидЦены, "ВидыЦен");
	
	Если ВидЦены.Пустая() 
		И НЕ ВыбНастройкиАгента.НастройкиМобильногоПриложения.РазрешитьРедактироватьЦены.Значение
			И НЕ ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспользоватьТипыЦенВТЧ.Значение Тогда 
		
		ВидЦены = ВидЦеныДокумента;
		
	КонецЕсли;
	
	Возврат ВидЦены;
	
КонецФункции

Функция УстановитьОбеспечениеЗаказа();
	
	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.ЗапретитьОтрицательныеОстатки.Значение = Ложь Тогда //vd_180404 Баг 38209. Отрицательные остатки. Добавил условие	
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется; 	
	ИначеЕсли РегистрОстатковТоваров = "СвободныеОстатки" Или ПоколениеКонфигурации("<=УТ_11.1.7") Тогда // gi_170920 было "<=УТ_11.1.2"
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Иначе
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	КонецЕсли;
		
	Возврат ВариантОбеспечения;
	
КонецФункции

//vd_181009 Добавлена
Процедура ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок)
	
	//В названии процедуры используется английская "C" или русская "C", зависит от версии конфигурации.
	
	//Заказ Клиента
	// В УТ < 11.3         	Используется Англ
	// В УТ >= 11.3        	Используется Рус
	// В УТ_UA 3.1.1.122   	Используется Англ
	// В УТ_UA 3.1.3.4     	Используется Англ
	// В УТ_UA 3.1.5.1     	Используется Англ 
	// В КА 2.4.3.127      	Используется Рус
	// В УТ_KZ 3.1.4.8     	Используется Англ
	// В УТ_KZ 3.2.3.10    	Используется Англ 
	// В УТ_CRM_2 3.0.11.1	Используется Рус 

	//Реализация
	// В УТ < 11.3			Используется Англ
	// В УТ >= 11.3			Используется Рус
	// В УТ_UA 3.1.5.1		Используется Англ
	// В УТ_KZ 3.2.3.10		Используется Англ
	// В УТ_CRM_2 3.0.11.1	Используется Рус
	
	//Возвраты
	// В УТ_UA 3.1.5.1    	Используется Англ
	// В УТ_KZ 3.2.3.10   	Используется Англ
	// В УТ_CRM_2 3.0.11.1	Используется Рус

	Если 	(гКонфигурация = "УТ"  		И ПоколениеКонфигурации("<УТ_11.3") И гКонфигурацияВерсия <> Неопределено)
		ИЛИ (гКонфигурация = "УТ_АП" 	И ПоколениеКонфигурации("<УТ_11.3"))
		ИЛИ (гКонфигурация = "УТ_CRM_2" И ПоколениеКонфигурации("<УТ_11.3"))
		ИЛИ (гКонфигурация = "КА" 		И СравнитьВерсии(гКонфигурацияВерсия, "2.4.3") < 0)
		ИЛИ гКонфигурация = "УТ_UA" 
		ИЛИ гКонфигурация = "УТ_KZ"
		ИЛИ гКонфигурация = "ERP"
	Тогда
		ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению(); // В названии процедуры английская "C"
	
	ИначеЕсли (гКонфигурация = "УТ"  И гКонфигурацияВерсия = Неопределено) Тогда
		Попытка
			ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению(); // В названии процедуры английская "C"
		Исключение
			ОбъектДок.ЗаполнитьУсловияПродажПоСоглашению(); // В названии процедуры русская "C"
		КонецПопытки;
		
	Иначе
		ОбъектДок.ЗаполнитьУсловияПродажПоСоглашению(); // В названии процедуры русская "C"	
	КонецЕсли;      

Конецпроцедуры

// ЗагрузкаДанных
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти


#Область УТАП_KT2000_Alcohol_Trade

//vd_190314 Не используется
////vd_180425 Изменена
//Процедура ВыгрузитьКонтрагентов_УТАП(ДокОбмена, МенеджерВТ)
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;  
//	Запрос.Текст = ТекстЗапросаВыгрузкиКонтрагентов_УТАП(МенеджерВТ);
//	
//	РезультатВыборки = Запрос.Выполнить();
//	Выборка = РезультатВыборки.Выбрать();
//	
//	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Контрагенты");
//	
//	стррПоля = Новый Структура("GUID,Name,A012,A013,A022,A023");
//	
//	Пока Выборка.Следующий() Цикл
//		
//		ВыборкаСсылка = Выборка.Ссылка;
//		стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
//		стррПоля.Name = Выборка.Наименование;
//		стррПоля.A012 = СокрЛП(ВыборкаСсылка.НаименованиеПолное);
//		ПредставлениеИННКПП = Выборка.ИНН + ?(ПустаяСтрока(Выборка.ИНН), "", "/") + Выборка.КПП;
//		стррПоля.A013 = ПредставлениеИННКПП;
//		стррПоля.A022 = Выборка.КодПоОКПО;
//		стррПоля.A023 = Выборка.ДополнительнаяИнформация;
//		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
//		
//	КонецЦикла;
//	
//	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
//	
//КонецПроцедуры

//vd_180425 Изменена
Процедура ВыгрузитьПунктыРазгрузки_УТАП(ДокОбмена, МенеджерВТ)
	
	МенеджерВТПунктыРазгрузки(МенеджерВТ);
	РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_ПунктыРазгрузки").ПолучитьДанные();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки"); // в МТ этот справочник называется "ТорговыеТочки"
	
	стррПоля = Новый Структура("GUID,Name,A02,A07");
	ДополнительнаяИнформация = "";
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПуктРазгрузки = Выборка.Ссылка;
		ВыборкаКлиент		 = Выборка.Клиент;
		
		ДополнительнаяИнформация = "";
		Если ВыборкаПуктРазгрузки.КодОКАТО <> "" Тогда 
			ДополнительнаяИнформация = ДополнительнаяИнформация + "КодОКАТО: " + ВыборкаПуктРазгрузки.КодОКАТО + "/";
		КонецЕсли;
		Если Выборка.Ссылка.КПП <> "" Тогда 
			ДополнительнаяИнформация = ДополнительнаяИнформация + "КПП: " + ВыборкаПуктРазгрузки.КПП;
		КонецЕсли;
		
		стррПоля.GUID 	= ВыборкаПуктРазгрузки.УникальныйИдентификатор();
		стррПоля.Name 	= ВыборкаПуктРазгрузки.Наименование;
		стррПоля.A02	= ВыборкаКлиент; 
		стррПоля.A07	= ДополнительнаяИнформация;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

//vd_180425 Добавил
Процедура МенеджерВТПунктыРазгрузки(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_ПунктыРазгрузки") <> Неопределено Тогда 	
		Возврат;
	КонецЕсли;

	МенеджерВТКонтрагенты(МенеджерВТ);
	
	Если НЕ ИспользоватьКонтрагентов Тогда
		МенеджерВТПартнеров(МенеджерВТ);	
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаМенеджерВТПунктыРазгрузки_УТАП());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();
		
КонецПроцедуры

//vd_180425 Добавил
Функция ТекстЗапросаМенеджерВТПунктыРазгрузки_УТАП()
	
	Если  ИспользоватьКонтрагентов Тогда 
		
		//Выгрузка контрагентов. Если ИспользоватьКонтрагентов = Истина, тогда выгружаются контрагентов в справочник МТ контрагенты.
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	алкПунктыРазгрузки.Ссылка КАК Ссылка,
			|	алкПунктыРазгрузки.Владелец КАК Клиент
			|ПОМЕСТИТЬ ВТ_ПунктыРазгрузки
			|ИЗ
			|	ВТ_Контрагенты КАК ВТ_Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
			|		ПО ВТ_Контрагенты.Ссылка = алкПунктыРазгрузки.Владелец
			|ГДЕ
			|	НЕ алкПунктыРазгрузки.ПометкаУдаления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
	Иначе
		
		//Выгрузка партнеров. Если ИспользоватьКонтрагентов = Ложь, тогда выгружаются Партнеров в справочник МТ контрагенты.
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	алкПунктыРазгрузки.Ссылка КАК Ссылка,
		|	ВТ_Партнеры.Ссылка КАК Клиент
		|ПОМЕСТИТЬ ВТ_ПунктыРазгрузки
		|ИЗ
		|	ВТ_Партнеры КАК ВТ_Партнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК спрКонтрагенты
		|		ПО ВТ_Партнеры.Ссылка = спрКонтрагенты.Партнер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
		|		ПО (спрКонтрагенты.Ссылка = ВТ_Контрагенты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
		|		ПО (ВТ_Контрагенты.Ссылка = алкПунктыРазгрузки.Владелец)
		|ГДЕ
		|	НЕ алкПунктыРазгрузки.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

//vd_180510 Переименована
Процедура ВыгрузитьКонтактнуюИнформацию_УТ_АП(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактнаяИнформация");

	ствТипыКИ = ТипыКонтактнойИнформации();
	стррПоля = Новый Структура("GUID,A01,A02,A04,A05,A06");
	
	РезультатЗапроса = ДанныеПоКонтактамПунктовРазгрузокИКонтрагентов_УТАП(МенеджерВТ);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Новый УникальныйИдентификатор();
		стррПоля.A01 = Выборка.Контрагент;
		стррПоля.A02 = Выборка.ПунктРазгрузки;
		стррПоля.A04 = ствТипыКИ[Выборка.Тип];
		стррПоля.A05 = Выборка.Вид;
		стррПоля.A06 = Выборка.Представление;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

//vd_190314 Не используется
//vd_180425 Добавлена выгрузка партнеров. Больше НЕ Используется.
//Функция ДанныеПоПунктамРазгрузокДляВыгрузки_УТАП(МенеджерВТ)
//	
//	//Если  ИспользоватьКонтрагентов Тогда 
//	//	ТекстЗапроса = 
//	//	"ВЫБРАТЬ
//	//	|	ПунктыРазгрузки.Ссылка,
//	//	|	ПунктыРазгрузки.Наименование,
//	//	|	ПунктыРазгрузки.Владелец КАК Владелец,
//	//	|	ПунктыРазгрузки.КодОКАТО + ПунктыРазгрузки.КПП КАК ДополнительнаяИнформация
//	//	|ИЗ
//	//	|	(ВЫБРАТЬ
//	//	|		алкПунктыРазгрузки.Ссылка КАК Ссылка,
//	//	|		алкПунктыРазгрузки.Наименование КАК Наименование,
//	//	|		алкПунктыРазгрузки.Владелец КАК Владелец,
//	//	|		ВЫБОР
//	//	|			КОГДА алкПунктыРазгрузки.КодОКАТО <> """"
//	//	|				ТОГДА ""КодОКАТО:"" + алкПунктыРазгрузки.КодОКАТО + ""/""
//	//	|			ИНАЧЕ """"
//	//	|		КОНЕЦ КАК КодОКАТО,
//	//	|		ВЫБОР
//	//	|			КОГДА алкПунктыРазгрузки.КПП <> """"
//	//	|				ТОГДА ""КПП:"" + алкПунктыРазгрузки.КПП
//	//	|			ИНАЧЕ """"
//	//	|		КОНЕЦ КАК КПП
//	//	|	ИЗ
//	//	|		ВТ_Контрагенты КАК ВТ_Контрагенты
//	//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
//	//	|			ПО ВТ_Контрагенты.Ссылка = алкПунктыРазгрузки.Владелец
//	//	|	ГДЕ
//	//	|		НЕ алкПунктыРазгрузки.ПометкаУдаления) КАК ПунктыРазгрузки";
//	//Иначе
//	//	
//	//	//Выгрузка партнеров. Если ИспользоватьКонтрагентов = Ложь, тогда выгружаются партнерв.
//	//	
//	//	ТекстЗапроса = "ВЫБРАТЬ
//	//	               |	ПунктыРазгрузки.Ссылка,
//	//	               |	ПунктыРазгрузки.Наименование,
//	//	               |	ПунктыРазгрузки.Владелец КАК Владелец,
//	//	               |	ПунктыРазгрузки.КодОКАТО + ПунктыРазгрузки.КПП КАК ДополнительнаяИнформация
//	//	               |ИЗ
//	//	               |	(ВЫБРАТЬ
//	//	               |		алкПунктыРазгрузки.Ссылка КАК Ссылка,
//	//	               |		алкПунктыРазгрузки.Наименование КАК Наименование,
//	//	               |		ВТ_Партнеры.Ссылка КАК Владелец,
//	//	               |		ВЫБОР
//	//	               |			КОГДА алкПунктыРазгрузки.КодОКАТО <> """"
//	//	               |				ТОГДА ""КодОКАТО:"" + алкПунктыРазгрузки.КодОКАТО + ""/""
//	//	               |			ИНАЧЕ """"
//	//	               |		КОНЕЦ КАК КодОКАТО,
//	//	               |		ВЫБОР
//	//	               |			КОГДА алкПунктыРазгрузки.КПП <> """"
//	//	               |				ТОГДА ""КПП:"" + алкПунктыРазгрузки.КПП
//	//	               |			ИНАЧЕ """"
//	//	               |		КОНЕЦ КАК КПП
//	//	               |	ИЗ
//	//	               |		ВТ_Партнеры КАК ВТ_Партнеры
//	//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК спрКонтрагенты
//	//	               |			ПО ВТ_Партнеры.Ссылка = спрКонтрагенты.Партнер
//	//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
//	//	               |			ПО спрКонтрагенты.Ссылка = ВТ_Контрагенты.Ссылка
//	//	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
//	//	               |			ПО (ВТ_Контрагенты.Ссылка = алкПунктыРазгрузки.Владелец)
//	//	               |	ГДЕ
//	//	               |		НЕ алкПунктыРазгрузки.ПометкаУдаления) КАК ПунктыРазгрузки";
//	//КонецЕсли;
//	//	
//	//Запрос = Новый Запрос(ТекстЗапроса);
//	//Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//	//
//	//Результа = Запрос.Выполнить().Выгрузить();

//	//Возврат Запрос.Выполнить();
//	
//КонецФункции 

//vd_190314 Не используется
//Функция ТекстЗапросаВыгрузкиКонтрагентов_УТАП(МенеджерВТ)
//	
//	ТекстЗапроса = 
//	"ВЫБРАТЬ
//	|	Контрагенты.Ссылка,
//	|	Контрагенты.Наименование,
//	|	Контрагенты.ИНН,
//	|	Контрагенты.КПП,
//	|	Контрагенты.КодПоОКПО,
//	|	Контрагенты.ДополнительнаяИнформация
//	|ИЗ
//	|	ВТ_Контрагенты КАК ВТ_Контрагенты
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
//	|		ПО ВТ_Контрагенты.Ссылка = Контрагенты.Ссылка";
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции 

Функция ДанныеПоКонтактамПунктовРазгрузокИКонтрагентов_УТАП(МенеджерВТ)
	
	Текстзапроса =
	"ВЫБРАТЬ
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Ссылка КАК ПунктРазгрузки,
	|	NULL КАК Контрагент,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Тип,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Вид,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Представление
	|ПОМЕСТИТЬ КИПартнеров
	|ИЗ
	|	Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ПО алкПунктыРазгрузки.Владелец = ВТ_Контрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки.КонтактнаяИнформация КАК алкПунктыРазгрузкиКонтактнаяИнформация
	|		ПО алкПунктыРазгрузки.Ссылка = алкПунктыРазгрузкиКонтактнаяИнформация.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	КонтрагентыКонтактнаяИнформация.Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Тип,
	|	КонтрагентыКонтактнаяИнформация.Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ПО КонтрагентыКонтактнаяИнформация.Ссылка = ВТ_Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КИПартнеров.ПунктРазгрузки, """") КАК ПунктРазгрузки,
	|	ЕСТЬNULL(КИПартнеров.Контрагент, """") КАК Контрагент,
	|	КИПартнеров.Тип,
	|	КИПартнеров.Вид,
	|	КИПартнеров.Представление
	|ИЗ
	|	КИПартнеров КАК КИПартнеров";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();

КонецФункции

// УТАП_KT2000_Alcohol_Trade
#КонецОбласти


#Область АдресаДоставки

Функция АдресаДоставкиЗагрузитьТЗ() Экспорт
	
	Если гКэшАдресаДоставки = Неопределено Тогда
		гКэшАдресаДоставки = Новый Структура("тз,Изменено", ПрочитатьЗначениеНастройки("АдресаДоставки"), Ложь);
	КонецЕсли; 
	
	тз = гКэшАдресаДоставки.тз;
	Если тз = Неопределено Тогда
		стрОписаниеТипаИдентификатор = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));	
		тз = Новый ТаблицаЗначений;
		тз.Колонки.Добавить("Идентификатор",стрОписаниеТипаИдентификатор); // идентификатор типа "Строка", чтобы ТЗ можно было использовать в запросе
		тз.Колонки.Добавить("Партнер", 		Новый ОписаниеТипов("СправочникСсылка.Партнеры")); 
		тз.Колонки.Добавить("КодАдреса",  	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36+3))); // в строке хранится GUID партнера (36 символов) + номер адреса доставки (3 символа)
		тз.Колонки.Добавить("Адрес", 		Новый ОписаниеТипов("Строка"));
	КонецЕсли; 
	
	Возврат тз;
	
КонецФункции

//vd_180627 АКФ. Для Акф требуется экпортная функция //+akf добавлено Экспорт -akf
Процедура АдресаДоставкиСохранитьТЗ(тз) Экспорт
	
	СохранитьЗначениеНастройки("АдресаДоставки", тз);
	
КонецПроцедуры

// Процедура проверяет - сохранялась ли ТЗ адресов доставки в старом формате, если да, 
// то пересохраняет ТЗ в новом формате, а старую ТЗ удаляет.
// Процедура требуется только для конфигурации "УТ_GR"
Процедура АдресаДоставкиКонвертировать()
	
	тзСтарая = ПрочитатьЗначениеНастройки("Ид_ТТ");
	Если тзСтарая = Неопределено Тогда
		Возврат; // старая ТЗ не обнаружена
	КонецЕсли; 
	
	// структура старой ТЗ:
	//	тзАдресаДоставкиТТ = Новый ТаблицаЗначений;
	//	тзАдресаДоставкиТТ.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	//	тзАдресаДоставкиТТ.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	//	тзАдресаДоставкиТТ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	//	тзАдресаДоставкиТТ.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	// структура новой ТЗ:
	//	тз.Колонки.Добавить("Идентификатор",стрОписаниеТипаИдентификатор); // идентификатор типа "Строка", чтобы ТЗ можно было использовать в запросе
	//	тз.Колонки.Добавить("Ссылка", 		Новый ОписаниеТипов("СправочникСсылка.Партнеры")); 
	//	тз.Колонки.Добавить("КодАдреса",  	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36+3))); // в строке хранится GUID партнера (36 символов) + номер адреса доставки (3 символа)
	//	тз.Колонки.Добавить("Адрес", 		Новый ОписаниеТипов("Строка"));
	
	тзНовая = АдресаДоставкиЗагрузитьТЗ();
	тзНовая.Очистить();
	
	Для каждого стзСтарая Из тзСтарая Цикл
		СтрокаТ = тзНовая.Добавить();
		СтрокаТ.Идентификатор = ВРег(стзСтарая.Ид);
		СтрокаТ.Партнер		  = стзСтарая.Контрагент;
		СтрокаТ.Адрес  		  = стзСтарая.Адрес;
		СтрокаТ.КодАдреса  	  = ЗначениеВСтрокуДляXML(СтрокаТ.Партнер) + Прав("000" + Строка(стзСтарая.НомерСтроки), 3);
	КонецЦикла; 
	
	АдресаДоставкиСохранитьТЗ(тзНовая);
	Сообщить("Сконвертирована таблица адресов доставки из старого формата (2.0.0.50) в новый.");
	УдалитьЗначениеНастройки("Ид_ТТ"); 	// уничтожаем старую ТЗ адресов доставки
	СохранитьЗначениеНастройки("Ид_ТТ_Old", тзСтарая); // на всякий случай сохраняем старую версию таблицы в под другим именем настройки

КонецПроцедуры

//vd_180627 АКФ.
Функция АдресаДоставкиДанныеДляВыгрузки(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Если гКонфигурация <> "УТ_АКФ" Тогда
		// похожий запрос применяется в функции АдресаДоставкиПолучитьПоПартнеру()
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартнерыКонтактнаяИнформация.Представление КАК Адрес,
		               |	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
		               |	ПартнерыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		               |ИЗ
		               |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
		               |		ПО (ВТ_Партнеры.Ссылка = ПартнерыКонтактнаяИнформация.Ссылка)
		               |ГДЕ
		               |	ПартнерыКонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Вид", ВидКИАдресДоставки);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТорговыеТочки.Партнер КАК Партнер,
		               |	ТорговыеТочки.Адрес КАК Адрес,
		               |	ТорговыеТочки.Код КАК НомерСтроки,
		               |	ТорговыеТочки.Ссылка КАК Ссылка
		               |ИЗ
		               |	ВТ_Партнеры КАК ВТ_Партнеры
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТорговыеТочки КАК ТорговыеТочки
		               |		ПО ВТ_Партнеры.Ссылка = ТорговыеТочки.Партнер.Ссылка";	
	Конецесли;
			
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция возвращает список адресов доставки по переданному партнеру.
// Если в таблице адресов доставки не найден адрес, но он есть в БД 1С, 
// то таблица адресов обновляется и записывается в хранилище значений.
Функция АдресаДоставкиПолучитьПоПартнеру(тз, Партнер) Экспорт
	
	сзРезультат = Новый СписокЗначений;
	
	Если тз = Неопределено Тогда
		тз = АдресаДоставкиЗагрузитьТЗ();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	//vd_180627 АКФ.
	Если НЕ гКонфигурация = "УТ_АКФ" Тогда
		// похожий запрос применяется в функции АдресаДоставкиДанныеДляВыгрузки()
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартнерыКонтактнаяИнформация.Представление КАК Адрес,
		               |	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
		               |	ПартнерыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		               |ИЗ
		               |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		               |ГДЕ
		               |	ПартнерыКонтактнаяИнформация.Вид = &Вид
		               |	И ПартнерыКонтактнаяИнформация.Ссылка = &Партнер";
			
		Запрос.УстановитьПараметр("Вид", ПрочитатьЗначениеНастройки("ВидКИАдресДоставки"));
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТорговыеТочки.Адрес КАК Адрес,
		               |	ТорговыеТочки.Ссылка КАК Ссылка,
		               |	ТорговыеТочки.Код КАК НомерСтроки
		               |ИЗ
		               |	Справочник.ТорговыеТочки КАК ТорговыеТочки
		               |ГДЕ
		               |	ТорговыеТочки.Партнер = &Партнер";	
	Конецесли;
	
	
	
	Запрос.УстановитьПараметр("Партнер", Партнер);

	РезультатЗапроса = Запрос.Выполнить();
	
	БылиИзменения = Ложь;
	
	ИдПартнера = ЗначениеВСтрокуДляXML(Партнер);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//vd_180627 АКФ.
		Если гКонфигурация = "УТ_АКФ" Тогда
			КодАдреса = Строка(Выборка.Ссылка.УникальныйИдентификатор()) + "000";
		Иначе
			КодАдреса = ИдПартнера + Прав("000" + Строка(Выборка.НомерСтроки), 3);
		КонецЕсли;
		
		
		СтрокаТ = тз.Найти(КодАдреса, "КодАдреса");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = тз.Добавить();
			СтрокаТ.Идентификатор = Строка(Новый УникальныйИдентификатор());
			СтрокаТ.Партнер		= Партнер;
			СтрокаТ.Адрес  		= Выборка.Адрес;
			СтрокаТ.КодАдреса  	= КодАдреса;
			БылиИзменения = Истина;
		ИначеЕсли СтрокаТ.Адрес <> Выборка.Адрес Тогда
			СтрокаТ.Адрес  		= Выборка.Адрес;
			БылиИзменения = Истина;
		КонецЕсли; 
		
		сзРезультат.Добавить(СтрокаТ.Идентификатор, Выборка.Адрес);
		
	КонецЦикла;
	
	Если БылиИзменения Тогда
		АдресаДоставкиСохранитьТЗ(тз);
	КонецЕсли; 
	
	Возврат сзРезультат;
	
КонецФункции

Процедура ВыгрузитьАдресаДоставки(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки", Истина, "Вид КИ: " + ВидКИАдресДоставки); // в МТ этот справочник называется "ТорговыеТочки"
	
	тз = АдресаДоставкиЗагрузитьТЗ();
	БылиИзменения = Ложь;
	
	стррПоля = Новый Структура("GUID,Name,A02,A07"); //	A02 - "Контрагент"; A07 - "Комментарий"
	
	РезультатЗапроса = АдресаДоставкиДанныеДляВыгрузки(МенеджерВТ);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Партнер   = Выборка.Партнер;
		
		//vd_180627 АКФ.
		Если НЕ гКонфигурация = "УТ_АКФ" Тогда
			КодАдреса = ЗначениеВСтрокуДляXML(Партнер) + Прав("000" + Строка(Выборка.НомерСтроки), 3);
		иначе
			КодАдреса=Строка(Выборка.Ссылка.УникальныйИдентификатор())+"000";	
		КонецЕсли;
		
		СтрокаТ   = тз.Найти(КодАдреса, "КодАдреса");
		
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = тз.Добавить();
			СтрокаТ.Идентификатор = Строка(Новый УникальныйИдентификатор());
			СтрокаТ.Партнер		= Партнер;
			СтрокаТ.Адрес  		= Выборка.Адрес;
			СтрокаТ.КодАдреса  	= КодАдреса;
			БылиИзменения = Истина;
		КонецЕсли;
		
		стррПоля.GUID 	= ВРег(СтрокаТ.Идентификатор);
		стррПоля.Name 	= Выборка.Адрес;
		стррПоля.A02	= Партнер;
		стррПоля.A07	= ""; // Комментарий
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Если БылиИзменения Тогда
		АдресаДоставкиСохранитьТЗ(тз);
	КонецЕсли; 
	
КонецПроцедуры

// vd_180703 Добавлена
//Возвращает массив торговых точек из Справочник.ТорговыеТочки у которых назначены ТорговыйПредставители (мАгенты)
//	и исключить точки перечисленные в массиве мСостав 
//
// Параметры:
//  мАгенты	 - Массив	 - Массив агентов (тип Справочник.Пользователи)
//  мСостав	 - Массив	 - Массив торговых точек (тип Справочник.ТорговыеТочки)
// 
// Возвращаемое значение:
//  Массив - Массив Ссылок Справочник.ТорговыеТочки
//
Функция АКФ_ПодобратьТорговыеТочкиПоАгентам(мАгенты, мСостав) Экспорт
	
	//Таблица значений которую нужно добавить в Состав
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	                |ПОМЕСТИТЬ ВТ_ТорговыеПредставители
	                |ИЗ
	                |	Справочник.Пользователи КАК Пользователи
	                |ГДЕ
	                |	Пользователи.Ссылка В(&мПользователи)
	                |	И НЕ Пользователи.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	ФизическоеЛицо
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТорговыеТочки.Ссылка КАК СсылкаСпрТТ
	                |ИЗ
	                |	Справочник.ТорговыеТочки КАК ТорговыеТочки
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТорговыеПредставители КАК ВТ_ТорговыеПредставители
	                |		ПО ТорговыеТочки.ТорговыйПредставитель = ВТ_ТорговыеПредставители.ФизическоеЛицо
	                |ГДЕ
	                |	НЕ ТорговыеТочки.Ссылка В (&мСостав)
	                |	И ТорговыеТочки.ПометкаУдаления = ЛОЖЬ" ;
	
	Запрос.УстановитьПараметр("мПользователи",  мАгенты);
	Запрос.УстановитьПараметр("мСостав"       , мСостав);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка.ВыгрузитьКолонку("СсылкаСпрТТ");
	
КонецФункции

//vd_181210 Добавлена
Процедура АКФ_ДобавитьТорговыеТочкиВСпискиНаСервере(мИзменения, ПодразделениеОтборПоПодразделению = Неопределено) Экспорт
			
	//1. Создадим ТЗ связи СписокТорговыхТочек - Назначеные Агенты (агентов для ТТ может быть несколько, колонка СсылкаСписокТТ не уникальна)
	тзСписокТТиАгентов = Новый ТаблицаЗначений;
	тзСписокТТиАгентов.Колонки.Добавить("СсылкаСписокТТ",  Новый ОписаниеТипов("УникальныйИдентификатор"));
	тзСписокТТиАгентов.Колонки.Добавить("спрПользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	//2. Получим данные настроек агентов из хранилища
	ВосстановитьЗначенияНастроекОбработки("СпискиТорговыхТочек");
	ВосстановитьЗначенияНастроекОбработки("НастройкиАгентов");
	
	//3. Заполним тзСписокТТиАгентов из НастройкиАгентов
	Для Каждого Элемент Из НастройкиАгентов Цикл 
		НоваяСтрока = тзСписокТТиАгентов.Добавить();
		НоваяСтрока.СсылкаСписокТТ = Элемент.СсылкаСписокТТ;
		НоваяСтрока.спрПользователь = Элемент.Пользователь;
	КонецЦикла;
	
	//4. Оприделяем временные массивы для обработки данных
	мСостав        = Новый Массив; // Массив торговых точек (тип Справочник.ТорговыеТочки) которые уже входят в список торговых точек
	мСоставНовые   = Новый Массив; // Массив торговых точек (тип Справочник.ТорговыеТочки) которые требуется добавить в список торговых точек
	мАгенты        = Новый Массив; // Массив агентов (тип Справочник.Пользователи) котрым назначен список торговых точек
	стррОтбор      = Новый Структура("СсылкаСписокТТ"); // Структура для поиска значений в тзСписокТТиАгентов
	
	//5. Заполняем состав списков
	Для Каждого ЭлементСписка Из СпискиТорговыхТочек Цикл	
		мСостав.Очистить();
		мСоставНовые.Очистить();
		мАгенты.Очистить();
		
		стррОбъектСписокТТ = ПолучитьОбъектИзХранилища("СпрСТТ", ЭлементСписка.ID);
		тзСостав = стррОбъектСписокТТ.Состав; // Текущая ТЗ Состав для списка ЭлементСписока

		// 5.1 Оприделяем Агентов назначеной текущему списку торговых точек ЭлементСписока
		стррОтбор.СсылкаСписокТТ = ЭлементСписка.ID;
		мСтрокиТЗ = тзСписокТТиАгентов.НайтиСтроки(стррОтбор);
		Для Каждого ЭлементМассиваСтрокиТЗ Из мСтрокиТЗ Цикл
			//Если отбор происходит по Подразделению то не добовляем в мАгенты агентов не вошедших в это подразделение
			Если ПодразделениеОтборПоПодразделению = Неопределено Тогда 
				мАгенты.Добавить(ЭлементМассиваСтрокиТЗ.спрПользователь);
			ИначеЕсли ПодразделениеОтборПоПодразделению = ЭлементМассиваСтрокиТЗ.спрПользователь.Подразделение Тогда 
				мАгенты.Добавить(ЭлементМассиваСтрокиТЗ.спрПользователь);
			КонецЕсли;			
		КонецЦикла;   		
		
		//5.4 Удаляем из текущей тзСостав те торговые точки котрые больше не удовлетворяют условию из Справочник.ТорговыеТочки.ТорговыйПредставитель
		КоличествоСоставУдаленные = 0;
		АКФ_УдалитьТорговыеТочкиНеПривязанныеКАгентам(тзСостав, мАгенты, КоличествоСоставУдаленные);
		
		// 5.2 Оприделяем текущий Состав списка торговой точки (мСостав)
		Для Каждого ЭлементCостава Из тзСостав Цикл      
			мСостав.Добавить(ЭлементCостава.АКФ_СпрТТ);
		КонецЦикла;
		
		// 5.4 Оприделяем торговые точки из Справочники.ТорговыеТочки, которые требуется добавить в текущий список торговых точек.
		мСоставНовые = АКФ_ПодобратьТорговыеТочкиПоАгентам(мАгенты, мСостав);
		
		//5.5 Возврат если изменений в списке нет.
		КоличествоСоставНовые = мСоставНовые.Количество();
		Если КоличествоСоставНовые = 0 И КоличествоСоставУдаленные = 0 Тогда
			Продолжить;
		Конецесли;
		
		//5.6 Формирование массива сообщений р изменениях
		Если КоличествоСоставНовые > 0 Тогда 
			мИзменения.Добавить("Для списка торговых точек: " + ЭлементСписка.Наименование + " добавлено: " + КоличествоСоставНовые + " торговых точек.");
		КонецЕсли;
		Если КоличествоСоставУдаленные > 0 Тогда 
			мИзменения.Добавить("Для списка торговых точек: " + ЭлементСписка.Наименование + " удалено: " + КоличествоСоставУдаленные + " торговых точек.") ;	
		КонецЕсли;
		
		// 5.7 Заполняем и добавляем мСоставНовые в состав списка торговых точек в текущую тзСостав.
		Для Каждого ЭлементНовые Из мСоставНовые Цикл
			НоваяСтрокаТЗСостав = тзСостав.Добавить();
			НоваяСтрокаТЗСостав.Партнер          = ЭлементНовые.Партнер;
			НоваяСтрокаТЗСостав.ИдАдресаДоставки = Строка(ЭлементНовые.УникальныйИдентификатор()) + "000";
			НоваяСтрокаТЗСостав.АКФ_СпрТТ        = ЭлементНовые;
			НоваяСтрокаТЗСостав.Адрес            = ЭлементНовые.Адрес;
		КонецЦикла;		
		
		//5.8 Сохраняем Состав в хранилище значений
		стррОбъектСписокТТ.Состав = тзСостав;
		СохранитьОбъектВХранилище("СпрСТТ", ЭлементСписка.ID, стррОбъектСписокТТ);
		
		//5.9 Записываем в сам список новое колличество торговых точек.
		ЭлементСписка.ВсегоТочек = тзСостав.Количество();
	
	КонецЦикла;
	
	//6. Сохраняем списки в хранилище
	Если мИзменения.Количество() > 0 тогда
		//!!!СохранитьОбъектВХранилище();
		СохранитьЗначениеНастройки("СпискиТорговыхТочек", СпискиТорговыхТочек);
	Иначе
		мИзменения.Добавить("Обновление списка торговых точек не требуется.");
	Конецесли;	
	
КонецПроцедуры

//vd_181210 Добавлена
Процедура АКФ_УдалитьТорговыеТочкиНеПривязанныеКАгентам(тзСостав, мАгенты , КоличествоУдаленныхЭлементов)
	
	Если тзСостав.Количество() = 0 или мАгенты.Количество() = 0 Тогда
		Возврат;
	Конецесли;
	
	флОставитьЭлемент = Ложь; //Признак удалять торговую точку из мСостав , или нет.	
	Сч = 0;
	
	Пока Сч < тзСостав.Количество() Цикл  //vd_180730 Изменен Для Каждого Элемент Из тзСостав Цикл и добавлена переменная Сч
					
		СтрокаТаблицы     = тзСостав.Получить(Сч);
		флОставитьЭлемент = Ложь;
				
		Для Каждого ЭлементАгент Из мАгенты Цикл   
			Если ЭлементАгент.ФизическоеЛицо = СтрокаТаблицы.АКФ_СпрТТ.ТорговыйПредставитель Тогда 
				флОставитьЭлемент = Истина;	
			КонецЕсли;
		КонецЦикла;
		
		//Удаление строки
		Если НЕ флОставитьЭлемент Тогда
			тзСостав.Удалить(СтрокаТаблицы);						
			КоличествоУдаленныхЭлементов = КоличествоУдаленныхЭлементов + 1;
		Иначе
			Сч = Сч + 1;
		КонецЕсли;		
		
	КонецЦикла;
		
КонецПроцедуры

// АдресаДоставки
#КонецОбласти


#Область ФотоОтчет
//av_180820((
// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Булево - Признак отказа от создания формы.
//      См. описание одноименного параметра "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//      См. описание одноименного параметра "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// См. также:
//   Процедура для вывода добавленных команд в форму: ОтчетыСервер.ВывестиКоманду().
//   Глобальный обработчик этого события: ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
// Пример добавления команды:
//    Команда = Форма.Команды.Добавить("<ИмяКоманды>");
//    Команда.Действие  = "Подключаемый_Команда";
//    Команда.Заголовок = НСтр("ru = '<Представление команды...>'");
//    ОтчетыСервер.ВывестиКоманду(Форма, Команда, "<ВидГруппы>");
// Обработчик команды пишется в процедуре ОтчетыКлиентПереопределяемый.ОбработчикКоманды.
//
Процедура ОтчетПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	МассивРеквизитов = Новый Массив;
	//Само дерево
	НовыйРеквизитФормы = Новый РеквизитФормы("СоставОтчета", Новый ОписаниеТипов("ДеревоЗначений"));
	МассивРеквизитов.Добавить(НовыйРеквизитФормы);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	
	ТипРеквизита = Новый ОписаниеТипов(МассивТипов);

	МассивРеквизитов.Добавить(Новый РеквизитФормы("Данные", ТипРеквизита, "СоставОтчета"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ТипРеквизита = Новый ОписаниеТипов(МассивТипов);

	МассивРеквизитов.Добавить(Новый РеквизитФормы("ID", ТипРеквизита, "СоставОтчета"));
	
	МассивТипов = Новый Массив;	
	МассивТипов.Добавить(Тип("Число"));	
	ТипРеквизита = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаСтрок", ТипРеквизита, "СоставОтчета"));
	
	//Колонки
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	ОсновнаяГруппа = Форма.Элементы.Добавить("ОсновнаяГруппа" , Тип("ГруппаФормы"));
	ОсновнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ОсновнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	
	НовыйЭлементФормы = Форма.Элементы.Добавить("СоставОтчета" , Тип("ТаблицаФормы"), ОсновнаяГруппа);
	НовыйЭлементФормы.ПутьКДанным = "СоставОтчета";
	НовыйЭлементФормы.Отображение = ОтображениеТаблицы.Дерево;
	НовыйЭлементФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	НовыйЭлементФормы.УстановитьДействие("Выбор", "СоставОтчетаВыбор");
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	Если Форма.Параметры.Свойство("ПользовательскиеНастройкиДляУстановки") Тогда
		
		НовыйЭлементФормы.Видимость = Ложь;
		
	КонецЕсли;
	
	НоваяКолонка = Форма.Элементы.Добавить("Данные", Тип("ПолеФормы"), НовыйЭлементФормы);
    НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "СоставОтчета.Данные";
	НоваяКолонка.Заголовок = "Группировка";

	
	Форма.Элементы.Переместить(Форма.Элементы.ОтчетТабличныйДокумент, ОсновнаяГруппа);
	
	Форма.ПостоянныеРеквизиты.Добавить("СоставОтчета");
	
КонецПроцедуры
//))av_180820
#КонецОбласти
