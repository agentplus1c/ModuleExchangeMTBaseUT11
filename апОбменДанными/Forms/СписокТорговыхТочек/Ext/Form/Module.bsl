
#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль
Перем гтзАдресаДоставки; // таблица адресов доставки - используется, если в настройках обмена включено использование адресов доставки

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("IDNew,ПрежниеЗначенияСтроки,МаксимумНедель,СписокВсеДетализацииСТТ,Пользователь,НастройкиВыгрузкиМаршрутов"); // общие значения модуля формы
	
	СтррКонтекст.Вставить("СпрТоргТочки");   // KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек
	СтррКонтекст.Вставить("Конфигурация");   // чтобы знать в какой конфигурации УС запущена обработка
	СтррКонтекст.Вставить("КомандаПодбора"); // имя команды подбора, по которой в данный момент делается подбор партнеров
	СтррКонтекст.Вставить("РеквизитПодбора");// название реквизита подбора для команды "ПодборПоРеквизиту"
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ID");
	
	СтррКонтекст.МаксимумНедель	= 4; // максимально допустимое количество недель в графиках или плане посещений
	СтррКонтекст.СписокВсеДетализацииСТТ = ТекОбъект.ПолучитьСписокДетализацииСписковТорговыхТочек(); // все варианты детализации Списков торговых точек (СТТ)
	
	// обновляем в таблице "Состав" заголовок колонки "Соглашение" в зависимости от настроек модуля 
	ЭлементСпискаДоговор = СтррКонтекст.СписокВсеДетализацииСТТ.НайтиПоЗначению("Договор"); 
	Если ЭлементСпискаДоговор = Неопределено Тогда
	Иначе
		Элементы.СоставДоговор.Заголовок = ЭлементСпискаДоговор.Представление;
	КонецЕсли; 
	
	// признаки для работы с планом посещений:
	СтррКонтекст.Вставить("ТДПланПосещенийОбновить", Ложь); // признак необходимости обновления табличного документа ТДПланПосещений
	СтррКонтекст.Вставить("ТДПланПосещенийИзменен",  Ложь); // признак изменения табличного документа ТДПланПосещений
	
	СтррКонтекст.НастройкиВыгрузкиМаршрутов = ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища();
	
	//vd_180709 Добавление колонки "АКФ_СпрТТ" в реквизит Состав и добавление элемента (колонка "СПРАВОЧНИК ТТ" в ТЗ) на форму
	Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
		СтррКонтекст.ПрежниеЗначенияСтроки = Новый Структура("АКФ_СпрТТ, ИдентификаторСтроки");
		
		мРеквизиты = Новый Массив;
   		мРеквизиты.Добавить(Новый РеквизитФормы("АКФ_СпрТТ", Новый ОписаниеТипов("СправочникСсылка.ТорговыеТочки"), "Состав", "СПРАВОЧНИК ТТ", Истина));
   		ИзменитьРеквизиты(мРеквизиты);
		
		НовыйЭлемент				= Элементы.Добавить("АКФ_СоставСпрТТ", Тип("ПолеФормы"), Элементы.СоставГруппаКолонкаТоргТочка); 
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.ПутьКДанным    = "Состав.АКФ_СпрТТ"; 
	Иначе
		СтррКонтекст.ПрежниеЗначенияСтроки = Новый Структура(СтррКонтекст.СпрТоргТочки.тзИмяКолонки + ",ИдентификаторСтроки");
	КонецЕсли;
	
	Если СтррКонтекст.СпрТоргТочки.ВидСправочника = "алкПунктыРазгрузки" Тогда 
		ИзменитьЭлементыФормы();
	КонецЕсли;
	
	ПрочестьОбъектИзХранилища(Параметры.ID);
	
	Если Параметры.Свойство("Копирование") И Параметры.Копирование Тогда // форма открыта для копирования существующего элемента, очищаем его идентификатор
		ID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ТекОбъект.ДобавитьВСтрокуНомерКопии(Наименование);
	КонецЕсли;
	
	//vd_180628
	ОбновитьТаблицуАгентовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Список = Элементы.ПериодГрафикаПлана.СписокВыбора;
	Для Неделя = 1 По СтррКонтекст.МаксимумНедель Цикл
		ПредставлениеНедели = ЧислоЦифрамиПредметИсчисленияПрописью(Неделя, НСтр("ru = 'неделя, недели, недель'"));	
		Список.Добавить(Неделя * 7,	ПредставлениеНедели);
	КонецЦикла;
	
	Если ПериодГрафикаПлана = 0 Тогда
		ПериодГрафикаПлана = 7;
	КонецЕсли; 
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	ОбновитьДетализациюСТТ();
	ОбновитьАдресаПартнеров();
	
	СтррКонтекст.IDNew = ЭтаФорма.КлючУникальности; // идентификатор для создания нового элемента (нового списка торговых точек)
	
	ОбновитьЗаголовокФормы();
	
	Если ДатаНачала = '00010101' Тогда
		ДатаНачала = НачалоНедели(ТекущаяДата());
	КонецЕсли; 
	
	СписокПериодовВыводаПланаОбновить();
	
	Если СтррКонтекст.Конфигурация = "УТ_GR" Тогда
		Элементы.СоставЗаполнитьПоРеквизиту.Видимость = Истина;
		Элементы.СоставЗаполнитьПоРеквизиту.Заголовок = НСтр("ru = 'По ""Региональному менеджеру""'");
		СтррКонтекст.РеквизитПодбора = "РегиональныйМенеджер";
	КонецЕсли;
	
	//vd_180627
	Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
		
		Элементы.АКФ_СоставСпрТТ.Видимость      = Истина;
		Элементы.АКФ_СоставПодборПоТП.Видимость = Истина;
		Элементы.СоставПартнер.ТолькоПросмотр   = Истина;
		Элементы.СоставАдрес.Доступность        = Ложь;
	КонецЕсли;
	
	//vd_181203
	Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда            
		Элементы.ТаблицаАгентов.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ОбновитьОформлениеАдресовДоставки();
	
	УстановитьМодифицированостьФормы(Ложь);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСпискиТТПродложить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		МодульК().КомандаВыполнить("ПоказатьСпискиТорговыхТочек");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяТипаСправочника = "СправочникСсылка." + СтррКонтекст.СпрТоргТочки.ВидСправочника;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		ВызватьИсключение("Не предусмотренное значение для подбора в форму: " + ВыбранноеЗначение);
	КонецЕсли;
	
	ПервыйЭлементВыбора = ВыбранноеЗначение[0];
	
	Если ТипЗнч(ПервыйЭлементВыбора) = Тип("СправочникСсылка.Пользователи") Тогда 
		
		СтррКонтекст.Пользователь = ПервыйЭлементВыбора; // запоминаем пользователя - чтобы при повторном подборе он был уже выбран в списке
		мВыбранныеПартнеры = ПолучитьПартнеровПоПользователю(ВыбранноеЗначение, СтррКонтекст.РеквизитПодбора); // получаем массив выбранных партнеров на основе выбранного списка пользователей (по реквизиту ОсновнойМенеджер)
		
	ИначеЕсли ТипЗнч(ПервыйЭлементВыбора) = Тип(ИмяТипаСправочника) Тогда  
		
		мВыбранныеПартнеры = ВыбранноеЗначение;
		
	Иначе
		
		Текст = СтрШаблон_("Выбрано значение (""%1"") для подбора не предусмотренного типа ""%2""!", ПервыйЭлементВыбора, ТипЗнч(ПервыйЭлементВыбора));
		ВызватьИсключение(Текст);
	
	КонецЕсли; 
	
	ВсегоВыбрано = мВыбранныеПартнеры.Количество();
	Если ВсегоВыбрано = 0 Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Не выбрано ни одного элемента из справочника ""%1"".'"), СтррКонтекст.СпрТоргТочки.Синоним);
		ПоказатьПредупреждение(Неопределено, Текст);
		Возврат;
	КонецЕсли; 
	
 	мНовыеПартнеры = Новый Массив; // массив добавленных партнеров во время подбора
	СтрокаТ = Неопределено;
	НачальнаяСтрока = Состав.Количество();
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	стррПоиск = Новый Структура(ИмяКолонки);
	
	// подбор партнеров
	Для каждого Партнер Из мВыбранныеПартнеры Цикл
		
		стррПоиск[ИмяКолонки] = Партнер;
		мСтроки = Состав.НайтиСтроки(стррПоиск);
		Если мСтроки.Количество() > 0 Тогда // в таблице уже есть такой партнер
			Если ВсегоВыбрано = 1 Тогда
				СтрокаТ = мСтроки[0]; // выделяем найденную строку:
				Текст = СтрШаблон_(НСтр("ru = 'Данный %1 уже присутствует в таблице.'"), СтррКонтекст.СпрТоргТочки.Представление);
				ПоказатьПредупреждение(, Текст);
				Прервать;
			Иначе
				Текст = СтрШаблон_(НСтр("ru = 'Пропущен %1 ""%2"" т.к. он уже присутствует в таблице.'"), СтррКонтекст.СпрТоргТочки.Представление, Партнер);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецЕсли;
		Иначе
			СтрокаТ = Состав.Добавить();
			СтрокаТ[ИмяКолонки] = Партнер;
			мНовыеПартнеры.Добавить(Партнер);
		КонецЕсли;
	
	КонецЦикла;
	
	Если СтрокаТ <> Неопределено Тогда
		Элементы.Состав.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
	КонецЕсли; 
	
	Если мНовыеПартнеры.Количество() <> 0 Тогда
		ОбновитьАдресаПартнеров(мНовыеПартнеры, НачальнаяСтрока);
		
		Если СтррКонтекст.СпрТоргТочки.ВидСправочника = "алкПунктыРазгрузки" Тогда 
			ОбновитьКонтрагентов(НачальнаяСтрока);
		КонецЕсли;
		
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();

	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки спрашивает - уже открыта обработка или нет
			Если ЭтаФорма.Открыта() Тогда
				Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса			
			Иначе
				ЭтотОбъект.Закрыть();
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "АПНастройкиПараметровОбменаИзмененияЗаписаны" Тогда
		
		СтррКонтекст.НастройкиВыгрузкиМаршрутов = ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища();
		ОбновитьПредупреждениеОНастройкахОбмена();
		ОбновитьОформлениеАдресовДоставки();
		
	КонецЕсли;

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаИзменитьДетализациюСТТ(Команда)
	ВыбратьПараметрыДетализацииСТТ();
КонецПроцедуры

#Область ОбработчикиКомандФормы_ПодборПартнеров

&НаКлиенте
Процедура КомандаПодборПартнеров(Команда)

	СтррКонтекст.КомандаПодбора = Команда.Имя;
	СтррПараметры = Новый Структура;	
	СтррПараметры.Вставить("ЗакрыватьПриВыборе", Ложь); 
	СтррПараметры.Вставить("МножественныйВыбор", Истина); 
	
	ОткрытьФорму("Справочник." + СтррКонтекст.СпрТоргТочки.ВидСправочника + ".ФормаВыбора", СтррПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПоОсновномуМенеджеру(Команда)
	
	СтррКонтекст.КомандаПодбора = Команда.Имя;
	ПодборПоПользователю();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПоРеквизиту(Команда)
	
	Если СтррКонтекст.РеквизитПодбора = "РегиональныйМенеджер" Тогда
		СтррКонтекст.КомандаПодбора = Команда.Имя;
		ПодборПоПользователю();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоПользователю()
	
	стррПараметры = Новый Структура;
	стррПараметры.Вставить("РежимВыбора",      		Истина);
	стррПараметры.Вставить("МножественныйВыбор", 	Истина);	
	стррПараметры.Вставить("ВыборГрупп", 			Ложь);
	стррПараметры.Вставить("ЗакрыватьПриВыборе", 	Истина);
	стррПараметры.Вставить("ТекущаяСтрока",    		СтррКонтекст.Пользователь);
	стррПараметры.Вставить("РежимОткрытияОкна", 	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Форма = ПолучитьФорму("Справочник.Пользователи.ФормаВыбора", стррПараметры, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	Форма.Открыть();

КонецПроцедуры


// ОбработчикиКомандФормы_ПодборПартнеров
#КонецОбласти 

#Область ОбработчикиКомандФормы_КопированиеГрафика

&НаКлиенте
Процедура КомандаКопироватьГрафик(Команда)
	
	СтрокаТ = Элементы.Состав.ТекущиеДанные;
	
	Если СтрокаТ = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите в таблице нужную строку для копирования графика.'"));
	Иначе
		СтррКопияГрафика = Новый Структура("ПредставлениеГрафика,График");
		ЗаполнитьЗначенияСвойств(СтррКопияГрафика, СтрокаТ);
		ОчиститьСообщения();
		Текст = НСтр("ru = 'Скопрированы настройки в память у партнера ""%1"". Выберите нужных партнеров и выберите пункт в конекстном меню ""Применить скопированный график"".'");
		Текст = СтрШаблон_(Текст, СтрокаТ.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрименитьСкопированныйГрафик(Команда)

	Если ТипЗнч(СтррКопияГрафика) <> Тип("Структура") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сначала скопируйте график в память, выбрав пункт ""Скопировать график"".'"));
		Возврат;
	КонецЕсли; 
	
	мСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мСтроки, Элементы.Состав.ВыделенныеСтроки);
	
	Для Каждого ИдСтроки Из мСтроки Цикл
		СтрокаТ = Состав.НайтиПоИдентификатору(ИдСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТ, СтррКопияГрафика);
	КонецЦикла;
	
	Если мСтроки.Количество() > 1 Тогда
		Текст = НСтр("ru = 'График успешно применен для выбранных партнеров.'");
	Иначе
		Текст = СтрШаблон_(НСтр("ru = 'График успешно применен для выбранного партнера (%1).'"), СтрокаТ.Партнер);
	КонецЕсли;
	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиГрафикВПланПосещений(Команда)
	
	СтрокаТ = Элементы.Состав.ТекущиеДанные;
	
	Если СтрокаТ = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите в таблице нужные строки для переноса графика в план посещений.'"));
		Возврат;
	КонецЕсли;
	
	мСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мСтроки, Элементы.Состав.ВыделенныеСтроки);
	
	ПППеренстиГрафикиВПланы(мСтроки);
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

// ОбработчикиКомандФормы_КопированиеГрафика
#КонецОбласти 

#Область ОбработчикиКомандФормы_ПланПосещений

// Перенос графика торговой точки (точек) в план посещений
&НаКлиенте
Процедура КомандаТДППЗаполнитьИзГрафика(Команда)
	ТДППЗаполнитьИзГрафикаПосещенийДляОбласти();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТДППЗаполнитьВсеИзГрафика(Команда)
	ТДППЗаполнитьИзГрафикаПосещенийДляПартнеров();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТДППОчиститьОбласть(Команда)
	ТДППОчиститьПосещенияДляОбласти();
КонецПроцедуры

// ОбработчикиКомандФормы_ПланПосещений
#КонецОбласти 

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	СохранитьОбъектВХранилищеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)

	РазделСправки = ЭтаФорма.ИмяФормы;
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Неопределено Тогда
		РазделСправки = РазделСправки + "_" + Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	КонецЕсли; 
	
	МодульК().КомандаСправка(РазделСправки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДетализацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПараметрыДетализацииСТТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиСпискаДетализации(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Детализация.Очистить();
	
	Для Каждого Элемент из Список Цикл
		Если Элемент.Пометка Тогда					
			Детализация.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;   			
	
	ОбновитьДетализациюСТТ(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияПриИзменении(Элемент)

	ОбновитьДетализациюСТТ(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ГруппаПланПосещений" Тогда
		ТДППОбновитьКлиент();
	КонецЕсли; 
	
	Если СтррКонтекст.ТДПланПосещенийИзменен И ТекущаяСтраница.Имя <> "ГруппаПланПосещений" Тогда
		ТДПППеренестиВОбъектКлиент();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодГрафикаПланаПриИзменении(Элемент)
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьВидимостьДатыНачала();
	СписокПериодовВыводаПланаОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	УстановитьМодифицированостьФормы(Истина);
	Если ДатаНачала = '00010101' Тогда
		ДатаНачала = НачалоНедели(ТекущаяДата());
	ИначеЕсли НачалоНедели(ДатаНачала) <> ДатаНачала Тогда
		ДатаНачала = НачалоНедели(ДатаНачала);
		ОчиститьСообщения();
		Текст = НСтр("ru = 'Дата начала должна быть уставновлена на начало недели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "ДатаНачала");
	КонецЕсли;
	
	СписокПериодовВыводаПланаОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПорядокПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыводаПланаПриИзменении(Элемент)
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтатусНажатие(Элемент)
	
	МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
	Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", Новый Структура("Закладка,Сообщение", "ГруппаОсновные", "ВыбратьВыгружатьМаршруты"));

КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	
	СтрокаТ = Элемент.ТекущиеДанные;
	
	СоставИмяЭлемента = СтррКонтекст.СпрТоргТочки.тзИмяЭлемента;
	ИмяКолонки 		  = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	
	Если СтрокаТ <> Неопределено Тогда
		//vd_180629 АКФ
		Если Элемент.ТекущийЭлемент.Имя = "АКФ_СоставСпрТТ" Тогда 
			// Проверяем, не выбрали ли Торговая точка, которая уже есть в таблице
			Если ЗначениеЗаполнено(СтрокаТ.АКФ_СпрТТ) Тогда 
				Отбор = Новый Структура("АКФ_СпрТТ", СтрокаТ.АКФ_СпрТТ);
				мСтроки = Состав.НайтиСтроки(Отбор); 
				Если мСтроки.Количество() > 1 Тогда // т.е. в таблице как минимум есть две ТТ
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Торговая точка уже присутствует в таблице.", Неопределено, "Состав[" + СтрокаТ.ПолучитьИдентификатор() + "]");
					// восстанавливаем прежнее значение партнера
					ПрежниеЗначения = СтррКонтекст.ПрежниеЗначенияСтроки;
					Если ПрежниеЗначения.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор() Тогда
						СтрокаТ.АКФ_СпрТТ = ПрежниеЗначения.АКФ_СпрТТ;
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
					СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
			АКФ_ОбновитьДанныеСтрокиПоТорговойТочке(СтрокаТ);
			Элементы.Состав.ЗакончитьРедактированиеСтроки(Ложь); // почему-то в платформе (8.3.8.1784) продолжается редактирование поля (выделен текст поля синим фоном)
			
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = СоставИмяЭлемента Тогда 
			// Проверяем, не выбрали ли партнера, который уже есть в таблице
			Если ЗначениеЗаполнено(СтрокаТ[ИмяКолонки]) И СтррКонтекст.НастройкиВыгрузкиМаршрутов.ИспользоватьАдресаДоставки <> Истина Тогда 
				мСтроки = Состав.НайтиСтроки(Новый Структура(ИмяКолонки, СтрокаТ[ИмяКолонки])); 
				Если мСтроки.Количество() > 1 Тогда // т.е. в таблице как минимум есть два таких партнера
					Текст = СтрШаблон_(НСтр("ru = '%1 ""%2"" уже присутствует в таблице.'"), СтррКонтекст.СпрТоргТочки.Представление, СтрокаТ[ИмяКолонки]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "Состав[" + СтрокаТ.ПолучитьИдентификатор() + "]");
					// восстанавливаем прежнее значение партнера
					ПрежниеЗначения = СтррКонтекст.ПрежниеЗначенияСтроки;
					Если ПрежниеЗначения.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор() Тогда
						СтрокаТ[ИмяКолонки] = ПрежниеЗначения[ИмяКолонки];
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
					СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьАдресПартнера(СтрокаТ);
			Элементы.Состав.ЗакончитьРедактированиеСтроки(Ложь); // почему-то в платформе (8.3.8.1784) продолжается редактирование поля (выделен текст поля синим фоном)
			
			Если СтррКонтекст.СпрТоргТочки.ВидСправочника = "алкПунктыРазгрузки" Тогда
				СсылкаВладелец = ПолучитьВладельцаСправочника(СтрокаТ[ИмяКолонки]);
				Если ЗначениеЗаполнено(СсылкаВладелец) И ТипЗнч(СсылкаВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда 
					СтрокаТ.Контрагент = СсылкаВладелец;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СоставДоговор" Тогда
			Если ЗначениеЗаполнено(СтрокаТ.Соглашение) Тогда
				СтррЗначения = ЗначенияРеквизитовОбъекта(СтрокаТ.Соглашение, "Партнер,Организация,Контрагент");
				СтрокаТ.Организация = СтррЗначения.Организация;
				Если ЗначениеЗаполнено(СтррЗначения.Партнер) Тогда
					СтрокаТ.Партнер = СтррЗначения.Партнер;				
				КонецЕсли; 
				Если ЗначениеЗаполнено(СтррЗначения.Контрагент) Тогда
					СтрокаТ.Контрагент  = СтррЗначения.Контрагент;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;

	КонецЕсли; // Если СтрокаТ <> Неопределено
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриАктивизацииСтроки(Элемент)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		// Запоминаем некоторые знаечения текущей строки на случай, если потребуется восстановить прежнее значение в строке
		ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
		СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьМодифицированостьФормы(Истина); // если происходит отмена редатикрования при добавлении новой строки, нужно обновить итоговое количество строк
КонецПроцедуры

&НаКлиенте
Процедура СоставПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		ТекСтрока = Элементы.Состав.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда // пресекаем дублирование одного и того же партнера
			Отказ = Истина;
			СтрокаТ = Состав.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТ, ТекСтрока,, "Партнер,Адрес");
			Элементы.Состав.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
			УстановитьМодифицированостьФормы(Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПослеУдаления(Элемент)
	
	// Нужно в плане посещений (ТЗ ПланПосещений) удалить Партнеров, отсутствующих в ТЗ Состав. 
	// Это требуется для корректной записи плана посещений.
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	ТекПартнер = Неопределено;
	мПартнерыУдаления = Новый Массив;
	стррПоиск = Новый Структура(ИмяКолонки);
	Для каждого СтрокаТ Из ПланПосещений Цикл
		Если СтрокаТ[ИмяКолонки] = ТекПартнер Тогда
			Продолжить;
		ИначеЕсли мПартнерыУдаления.Найти(СтрокаТ[ИмяКолонки]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекПартнер = СтрокаТ[ИмяКолонки];
		стррПоиск[ИмяКолонки] = ТекПартнер;
		//мПартнерыУдаления = Состав.НайтиСтроки(стррПоиск);
		мСтроки = Состав.НайтиСтроки(стррПоиск); // sd_21082017 не корректно удалялись строки #34616
		Если мСтроки.Количество() = 0 Тогда // эту строку из ТЗ ПланПосещений нужно удалить.
			мПартнерыУдаления.Добавить(ТекПартнер);
		КонецЕсли; 
	КонецЦикла;
	
	Для Каждого Партнер Из мПартнерыУдаления Цикл
		стррПоиск[ИмяКолонки] = Партнер;
		мСтроки = ПланПосещений.НайтиСтроки(стррПоиск);
		Для каждого СтрокаТ Из мСтроки Цикл
			ПланПосещений.Удалить(СтрокаТ);
		КонецЦикла; 
	КонецЦикла; 
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
		
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		
		Имя = Элемент.ТекущийЭлемент.Имя;
		
		Если Имя = "СоставГрафик" Или Имя = "СоставПланПосещений" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтррПараметры = Новый Структура("МаксимумНедель,ПериодПоУмолчанию", СтррКонтекст.МаксимумНедель, ПериодГрафикаПлана);
			
			ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
			Если Имя = "СоставГрафик" Тогда
				СтррПараметры.Вставить("Заголовок", НСтр("ru='График посещений - '") + СтрокаТ[ИмяКолонки]);					
				СтррПараметры.Вставить("График", СтрокаТ.График);
			Иначе // редактирование строки плана посещения партнера
				СтррПараметры.Вставить("Заголовок", НСтр("ru='План посещений - '") + СтрокаТ[ИмяКолонки]);
				СтррПараметры.Вставить("График", ПППолучитьПланПоПартнеру(СтрокаТ[ИмяКолонки]));
				СтррПараметры.Вставить("БлокироватьВремя",  Истина); // блокировать в редакторе графика флажок "Время посещения"
				СтррПараметры.Вставить("БлокироватьПериод", Истина); // блокировать в редакторе графика поле "Период графика"
				СтррПараметры.Вставить("УбратьВсегоНедель", Истина); // убрать из представления графика надпись "Всего X нед."
			КонецЕсли; 

			стррДопПараметры = Новый Структура("ИмяЭлемента,Партнер,ИдАдресаДоставки", Имя, СтрокаТ[ИмяКолонки], СтрокаТ.ИдАдресаДоставки);
			
			Оповещение = Новый ОписаниеОповещения("ВыборГрафикаЗавершение", ЭтотОбъект, стррДопПараметры);
			МодульК().ОткрытьФормуОбработки("ВыборГрафика", СтррПараметры,, Оповещение);
			
		ИначеЕсли Имя = "СоставАдрес" И СтррКонтекст.НастройкиВыгрузкиМаршрутов.ИспользоватьАдресаДоставки = Истина Тогда
			
			СоставАдресНачалоВыбора();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборГрафикаЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтррРезультат) = Тип("Структура") И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
		стррПоиск = Новый Структура(ИмяКолонки, ДополнительныеПараметры.Партнер);
		Если СтррКонтекст.НастройкиВыгрузкиМаршрутов.ИспользоватьАдресаДоставки = Истина Тогда
			стррПоиск.Вставить("ИдАдресаДоставки", ДополнительныеПараметры.ИдАдресаДоставки);
		КонецЕсли; 	
		мСтроки = Состав.НайтиСтроки(стррПоиск);
		Если ДополнительныеПараметры.ИмяЭлемента = "СоставГрафик" Тогда // изменен график посещений
			Для каждого СтрокаТ Из мСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаТ, СтррРезультат);
			КонецЦикла; 
		ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "СоставПланПосещений" Тогда // изменен план посещений
			Для каждого СтрокаТ Из мСтроки Цикл
				СтрокаТ.ПредставлениеПлана = СтррРезультат.ПредставлениеГрафика;
			КонецЦикла;
			ППУстановитьПланПоПартнеру(ДополнительныеПараметры.Партнер, СтррРезультат.График);
		КонецЕсли; 
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТ = Элементы.Состав.ТекущиеДанные;
	
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МодульК().ПоколениеКонфигурации(">=УТ_11.3") Тогда
	
		стррПараметры = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
		
		стррПараметры.Элемент              = Элемент;
		стррПараметры.Партнер              = СтрокаТ.Партнер;
		стррПараметры.Документ             = СтрокаТ.Соглашение;
		стррПараметры.ДатаДокумента        = ТекущаяДата();
		стррПараметры.ДанныеФормыСтруктура = Объект;
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(стррПараметры, СтандартнаяОбработка);
		
	Иначе
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, СтрокаТ.Партнер, СтрокаТ.Соглашение, ТекущаяДата());
	
	КонецЕсли; 
	
КонецПроцедуры

// Выбор адреса доставки из вариантов адреса доставки
&НаКлиенте
Процедура СоставАдресНачалоВыбора()
	
	СтрокаТ = Элементы.Состав.ТекущиеДанные;
	
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТ.Партнер) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В строке не выбран партнер.'"));
		Возврат;
	КонецЕсли;
	
	сзАдресаДоставки = АдресаДоставкиПолучитьСписок(СтрокаТ.Партнер);
	Если сзАдресаДоставки.Количество() = 0 Тогда
		Текст = СтрШаблон_(НСтр("ru = 'У выбранного партнера (""%1"") не указано ни одного адреса доставки.'"), СокрЛП(СтрокаТ.Партнер));
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("СоставАдресЗавершениеВыбора", ЭтотОбъект);	
	ПоказатьВыборИзМеню(Оповещение, сзАдресаДоставки, Элементы.Состав);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставАдресЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТ = Элементы.Состав.ТекущиеДанные;
	Если Результат <> Неопределено И СтрокаТ <> Неопределено Тогда
		
		СтрокаТ.ИдАдресаДоставки = Результат.Значение;
		СтрокаТ.Адрес = Результат.Представление;
		УстановитьМодифицированостьФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыСостав
#КонецОбласти

#Область ОбработчикиСобытийТДПланПосещений

&НаКлиенте
Процедура ТДППОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Таб = ТДПланПосещений;
	Если Лев(Расшифровка, 6) = "Адрес_" Тогда // Слева от данной ячейки в расшифровке - торговая точка - покажем ее на карте. Пока не показываем адрес доставки на карте, т.к. не знаем координат адресов доставки
		РасшифровкаСлева = Таб.Область(ТДПолучитьАдресПоСмещению(Элемент.ТекущаяОбласть.Имя, 0, -1)).Расшифровка;
		Если ТипЗнч(РасшифровкаСлева) = Тип("СправочникСсылка.Партнеры") Тогда
			Партнер = РасшифровкаСлева;
			МодульК().ПоказатьНаКартеОбъект(Партнер, ПолучитьАдресПартнера(Партнер));
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗначение = Элемент.ТекущаяОбласть.Текст;
	СтандартнаяОбработка = Ложь;
	Если ИспользоватьПорядок Тогда
		ТекЗначение = ?(ПустаяСтрока(ТекЗначение), 0, Строка(ТекЗначение));
		ВыбранныйПорядок = ТДПППроставитьВыборПорядка(Элемент);
		Если ВыбранныйПорядок = -1 Тогда // пользователь выбирает порядок из списка
			Возврат;
		Иначе
			НовоеЗначение = ВыбранныйПорядок;
		КонецЕсли;
	Иначе
		НовоеЗначение = ?(ТекЗначение = "", "X", ""); 
	КонецЕсли; 
	Элемент.ТекущаяОбласть.Текст = НовоеЗначение;
	УстановитьМодифицированостьФормы(Истина);
	СтррКонтекст.ТДПланПосещенийИзменен = Истина;
	
	// скорректируем итог по колонке
	
	ИтогКолонки = ТДППВернутьИтогДня(Элемент);
	ИтогДоИзменения = ИтогКолонки;
	// Корректируем итог колонки с учетом нового значения и взависимости от порядка
	Если ИспользоватьПорядок Тогда
		Если ВыбранныйПорядок = 0 Тогда
			ИтогКолонки = ИтогКолонки - 1;
		ИначеЕсли ВыбранныйПорядок > ИтогКолонки Тогда
			ИтогКолонки = ВыбранныйПорядок;
		ИначеЕсли ВыбранныйПорядок = 1 Тогда 
			ИтогКолонки = ИтогКолонки + 1;
		КонецЕсли;
		ПерекраситьКолонку = ТекЗначение = 1 Или ТекЗначение = ИтогКолонки Или	ВыбранныйПорядок = 1 Или ВыбранныйПорядок = ИтогКолонки;
	Иначе
		ИтогКолонки = ИтогКолонки + ?(НовоеЗначение = "", -1, 1);
		ПерекраситьКолонку = Ложь;
	КонецЕсли;
	
	Изменение = ИтогКолонки - ИтогДоИзменения;
	
	АдресТекущейСтроки  = Неопределено;
	АдресТекущейКолонки = Неопределено;
	ТДПолучитьАдресаСтрокиИКолонки(Элемент.ТекущаяОбласть.Имя, АдресТекущейСтроки, АдресТекущейКолонки);
	АдресСтрокиИтогов  = "R" + Строка(СтррКонтекст.ППСтрокаИтогов);
	АдресКолонкиИтогов = "C" + Строка(СтррКонтекст.ППКолонкаИтогов);
	
	// итог колонки (итог дня)
	Таб.Область(АдресСтрокиИтогов + АдресТекущейКолонки).Текст = ИтогКолонки; // вывод итога дня
	
	// итог строки (итог торговой точки)
	Область = Таб.Область(АдресТекущейСтроки + АдресКолонкиИтогов);
	ТекстЯчейки = Область.Текст;
	Область.Текст = ?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки)) + Изменение;
	
	// итог всего плана
	Область = Таб.Область(АдресСтрокиИтогов + АдресКолонкиИтогов);
	ТекстЯчейки = Область.Текст;
	Область.Текст = Строка(?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки)) + Изменение); // если будет значение "0", оно будет показано в ячейке как "0"
	
	Если ПерекраситьКолонку Тогда
		ТДПППерекраситьКолонку(АдресТекущейКолонки, ИтогКолонки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ТДПППроставитьВыборПорядка(Элемент)
	
	ТекЗначение = ?(Элемент.ТекущаяОбласть.Текст = "", 0, Число(Элемент.ТекущаяОбласть.Текст));
	ВсегоЗаДень = ТДППВернутьИтогДня(Элемент);
	
	Если ТекЗначение = 0 Тогда // сразу проставляем следующий порядок
		Возврат ВсегоЗаДень + 1;
		
	ИначеЕсли ВсегоЗаДень = 1 Тогда // снятие единственного выбранного флажка
		Возврат 0;
		
	Иначе //сформируем массив возможных значений для выбора
		СписокПорядков = Новый СписокЗначений;
		МаксПорядок = ВсегоЗаДень + ?(ТекЗначение = 0, 1, 0); 
		Для Сч = 0 По МаксПорядок Цикл
			СписокПорядков.Добавить(Сч);
		КонецЦикла;
		Оповещение = Новый ОписаниеОповещения("ТДППОбработкаВыбораПорядкаИзСписка", ЭтотОбъект, Элемент);
		ПоказатьВыборИзСписка(Оповещение, СписокПорядков, Элемент); 
		Возврат -1; // признак, что пользователь будет выбирать значение из списка
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТДППОбработкаВыбораПорядкаИзСписка(Результат, Элемент) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // Отмена выбора.
	КонецЕсли;
	
	Таб = ТДПланПосещений;
	
	ВыбПорядок = Результат.Значение;
	РедактируемаяЯчейка = Элемент.ТекущаяОбласть.Имя;
	ТекПорядок = ?(Элемент.ТекущаяОбласть.Текст = "", 0, Число(Элемент.ТекущаяОбласть.Текст));
	
	Если ТекПорядок = ВыбПорядок Тогда
		Возврат; // выбрано прежнее значение
	КонецЕсли;
	
	УстановитьМодифицированостьФормы(Истина);
	СтррКонтекст.ТДПланПосещенийИзменен = Истина;
		
	ОтступСтр = СтррКонтекст.ППСтрокаИтогов + 1;
	
	АдресТекущейКолонки = Неопределено;
	АдресТекущейСтроки  = Неопределено;
	ТДПолучитьАдресаСтрокиИКолонки(Элемент.ТекущаяОбласть.Имя, АдресТекущейСтроки, АдресТекущейКолонки);
	
	НомерПоследнейСтроки = ОтступСтр + Состав.Количество() - 1;
	
	Если ВыбПорядок > 0 Тогда // итоги не меняются, делается только замена значений
		СтрВыбПорядок = Строка(ВыбПорядок);
		Для Сч = ОтступСтр По НомерПоследнейСтроки Цикл
			АдресОбласти = "R"+Строка(Сч) + АдресТекущейКолонки;
			Расшифровка = Таб.Область(АдресОбласти).Расшифровка;
			Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ЭтоПорядок") Тогда
				Если Таб.Область(АдресОбласти).Текст = СтрВыбПорядок Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Таб.Область(АдресОбласти).Текст = ТекПорядок;
		Таб.Область(РедактируемаяЯчейка).Текст = ВыбПорядок;
		ИтогКолонки = ТДППВернутьИтогДня(Элемент);
		Если ВыбПорядок = 1 Или ВыбПорядок = ИтогКолонки Или ТекПорядок = 1 Или ТекПорядок = ИтогКолонки Тогда
			ТДПППерекраситьКолонку(АдресТекущейКолонки, ИтогКолонки);
		КонецЕсли;
	Иначе // выбран "0"
		Таб.Область(РедактируемаяЯчейка).Текст = "";
		ИтогКолонки = 0;
		// сканируем все посещения дня и уменьшаем на 1 порядок у тех, где Порядок > ТекПорядок 
		Для Сч = ОтступСтр По НомерПоследнейСтроки Цикл
			АдресОбласти = "R"+Строка(Сч) + АдресТекущейКолонки;
			Расшифровка = Таб.Область(АдресОбласти).Расшифровка;
			Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ЭтоПорядок") Тогда
				ТекстЯчейки = Таб.Область(АдресОбласти).Текст;
				Если Не ПустаяСтрока(ТекстЯчейки) Тогда
					ИтогКолонки = ИтогКолонки + 1;
					Порядок = Число(ТекстЯчейки);
					Если Порядок > ТекПорядок Тогда
						Таб.Область(АдресОбласти).Текст = Строка(Порядок-1);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Таб.Область("R"+Строка(СтррКонтекст.ППСтрокаИтогов) + АдресТекущейКолонки).Текст = ИтогКолонки; // вывод итога дня
		
		АдресОбласти = АдресТекущейСтроки + "C" + СтррКонтекст.ППКолонкаИтогов;
		ИтогСтроки = Число(Таб.Область(АдресОбласти).Текст) - 1;
		Таб.Область(АдресОбласти).Текст = ?(ИтогСтроки = 0, "", Строка(ИтогСтроки)); // обновили итог строки
		
		// уменьшаем общий итог документа
		АдресОбласти = "R"+Строка(СтррКонтекст.ППСтрокаИтогов) + "C"+Строка(СтррКонтекст.ППКолонкаИтогов);
		ОбшийИтог = Число(Таб.Область(АдресОбласти).Текст) - 1;
		Таб.Область(АдресОбласти).Текст = Строка(ОбшийИтог);
		ТДПППерекраситьКолонку(АдресТекущейКолонки, ИтогКолонки);
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийТДПланПосещений
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
&НаСервере
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
&НаКлиентеНаСервереБезКонтекста
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПартнеровПоПользователю(мПользователи, Знач РеквизитОтбора)

	Если Не ЗначениеЗаполнено(РеквизитОтбора) Тогда
		РеквизитОтбора = "ОсновнойМенеджер";
	КонецЕсли; 
	
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ 
		|	Партнеры.ПометкаУдаления = ЛОЖЬ
		|	И Партнеры.%1 В (&Пользователи)";
	
	Текст = СтрЗаменить(Текст, "%1", РеквизитОтбора);
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Пользователи", мПользователи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Хранилище

// Процедура считывает объект (список торговых точек) из хранилища значений.
&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ID = КлючID;
	СтррОбъект = ТекОбъект.ПолучитьОбъектИзХранилища("СпрСТТ", ID);
	Если СтррОбъект = Неопределено Тогда // создание нового элемента списка, нужно назначить автоматическое имя списка
		тзСТТ = ТекОбъект.ПрочитатьЗначениеНастройки("СпискиТорговыхТочек");
		Если ТипЗнч(тзСТТ) <> Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение("Попытка создать новый элемент СТТ с неинициализированным хранилищем хранения списков СТТ (реквизит ""СпискиТорговыхТочек"" в хранилище пустой!");
		КонецЕсли; 
		// Для инициализации реквизита "СпискиТорговыхТочек" на форме СпискиТорговыхТочек в процедуре ПрочестьОбъектИзХранилища()
		// сделана проверка значения реквизита и его инициализация в Хранилище.
		Наименование = СтрШаблон_(НСтр("ru = 'Список ТТ N %1'"), тзСТТ.Количество() + 1);
	Иначе
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, СтррОбъект);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура сохраняет объект (список торговых точек) в хранилище значений.
&НаСервере
Процедура СохранитьОбъектВХранилище()
	
	Если СтррКонтекст.ТДПланПосещенийИзменен Тогда // табличный документ плана посещений был изменен, нужно его перенести в объект
		ТДПППеренестиВОбъект();	
	КонецЕсли; 
	
	// Этап 1. Сохранение самого объекта в хранилище.
	Если Строка(ID) = "00000000-0000-0000-0000-000000000000" Тогда // новый объект
		ID = ?(ТипЗнч(СтррКонтекст.IDNew) = Тип("УникальныйИдентификатор"), СтррКонтекст.IDNew, Новый УникальныйИдентификатор());
	КонецЕсли; 
	
	стррОбъект = Новый Структура("Наименование,Детализация,ПериодГрафикаПлана,ДатаНачала,Комментарий,ИспользоватьПорядок,Состав,ПланПосещений"); // сохраняемые реквизиты объекта
	ЗаполнитьЗначенияСвойств(стррОбъект, ЭтаФорма,, "Состав,ПланПосещений");
	
	стррОбъект.Состав = Состав.Выгрузить();
	стррОбъект.ПланПосещений = ПланПосещений.Выгрузить();
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьОбъектВХранилище("СпрСТТ", ID, стррОбъект);
	
	// Этап 2. Обновление ТЗ списков торговых точек - обновление реквизитов представления списка ТТ.
	тзСТТ = ТекОбъект.ПрочитатьЗначениеНастройки("СпискиТорговыхТочек");
	
	СтрокаТ = тзСТТ.Найти(ID, "ID");
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = тзСТТ.Добавить();
		СтрокаТ.ID = ID;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТ, стррОбъект);
	СтрокаТ.ВсегоТочек = ВсегоТочек;
	СтрокаТ.ДетализацияПредставление = Строка(Детализация);
	
	ТекОбъект.СохранитьЗначениеНастройки("СпискиТорговыхТочек", тзСТТ);
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьОбъектВХранилищеКлиент()
	
	// проверяем - заполнены ли партнеры во всех строках? если нет, отказываем в записи
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	
	ЕстьПустойПартнер = Ложь;
	Для каждого СтрокаТ Из Состав Цикл
		Если Не ЗначениеЗаполнено(СтрокаТ[ИмяКолонки]) Тогда
			ЕстьПустойПартнер = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЕстьПустойПартнер Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Заполните значение в колонке ""%1"" или удалите строку.'"), НСтр("ru = 'Торговая точка'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "Состав[" + СтрокаТ.ПолучитьИдентификатор() + "]");
		Элементы.Состав.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
		Возврат Ложь;
	Иначе
		СохранитьОбъектВХранилище();
		УстановитьМодифицированостьФормы(Ложь);
		Оповестить("АПСписокТорговыхТочекЗаписан", ID);
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьОбъектВХранилищеКлиент() Тогда
			Закрыть();
		КонецЕсли; 
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища()
	
	Возврат РеквизитФормыВЗначение("Объект").ПрочитатьЗначенияНастроек("ВыгружатьМаршруты,ИнтервалВыгрузкиМаршрутов,ИспользоватьАдресаДоставки");
	
КонецФункции

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_КИПартнеров

//vd_180702
&НаКлиенте
Процедура АКФ_ОбновитьДанныеСтрокиПоТорговойТочке(СтрокаТ)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТ.АКФ_СпрТТ) Тогда
		Возврат;
	КонецЕсли;
	
	стррРеквизитыТТ = Новый Структура("СпрТТПартнер, СпрТТАдрес, СпрТТАдресГуидАП, СпрТТЗонаДоставки");
	
	АКФ_ПолучитьДанныеТорговойТочки(СтрокаТ.АКФ_СпрТТ, стррРеквизитыТТ);
	
	СтрокаТ.Партнер              		   = стррРеквизитыТТ.СпрТТПартнер;
	СтрокаТ.Адрес						   = стррРеквизитыТТ.СпрТТАдрес;
	СтрокаТ.ИдАдресаДоставки               = Строка(СтрокаТ.АКФ_СпрТТ.УникальныйИдентификатор()) + "000"; //;стррРеквизитыТТ.СпрТТАдресГуидАП;
	
КонецПроцедуры

//vd_180702
&НаСервере
Процедура АКФ_ПолучитьДанныеТорговойТочки(ТорговаяТочка, стррРеквизитыТТ)
	
	стррРеквизитыТТ.СпрТТПартнер               = ТорговаяТочка.Партнер;
	стррРеквизитыТТ.СпрТТАдрес                 = ТорговаяТочка.Адрес;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресПартнера(Партнер)
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат "";
	Иначе
		мПартнеры = Новый Массив;
		мПартнеры.Добавить(Партнер);
		мВидыКИ = Новый Массив;
		мВидыКИ.Добавить(СтррКонтекст.СпрТоргТочки.Адрес);
		тзАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мПартнеры,, мВидыКИ);
		Возврат ?(тзАдреса.Количество() > 0, тзАдреса[0].Представление, "");
	КонецЕсли; 
		
КонецФункции 

&НаКлиенте
Процедура ОбновитьАдресПартнера(СтрокаТ)
	
	Если СтррКонтекст.НастройкиВыгрузкиМаршрутов.ИспользоватьАдресаДоставки <> Истина Тогда
		ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;	
		СтрокаТ.Адрес = ПолучитьАдресПартнера(СтрокаТ[ИмяКолонки]);
	Иначе // нужно проставить адрес доставки
		сзАдреса = АдресаДоставкиПолучитьСписок(СтрокаТ.Партнер);
		Если сзАдреса.Количество() = 1 Тогда
			СтрокаТ.ИдАдресаДоставки = сзАдреса[0].Значение;
			СтрокаТ.Адрес = сзАдреса[0].Представление;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресаПартнеров(мПартнеры = Неопределено, НачальнаяСтрока = 0)
	
	Если СтррКонтекст.НастройкиВыгрузкиМаршрутов.ИспользоватьАдресаДоставки = Истина Тогда // адреса доставки не обновляем - их надо указывать вручную
		Возврат;
	ИначеЕсли Состав.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	Если мПартнеры = Неопределено Тогда
		мПартнеры = Состав.Выгрузить(, ИмяКолонки).ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли; 

	мВидыКИ = Новый Массив;
	мВидыКИ.Добавить(СтррКонтекст.СпрТоргТочки.Адрес);
	
	тзАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мПартнеры,, мВидыКИ);
	СтррПоиск = Новый Структура("Объект");
	
	Если НачальнаяСтрока = 0 Тогда
		Для каждого СтрокаТ Из Состав Цикл
			СтррПоиск.Объект = СтрокаТ[ИмяКолонки];
			мСтроки = тзАдреса.НайтиСтроки(СтррПоиск);
			СтрокаТ.Адрес = ?(мСтроки.Количество() > 0, мСтроки[0].Представление, "");
		КонецЦикла; 
	Иначе
		ПоследняяСтрока = Состав.Количество() - 1;
		Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
			СтрокаТ = Состав[НомерСтроки];
			СтррПоиск.Объект = СтрокаТ[ИмяКолонки];
			мСтроки = тзАдреса.НайтиСтроки(СтррПоиск);
			СтрокаТ.Адрес = ?(мСтроки.Количество() > 0, мСтроки[0].Представление, "");
		КонецЦикла; 
	КонецЕсли; 
		
КонецПроцедуры

// СлужебныеПроцедурыИФункции_КИПартнеров
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	ЭтаФорма.Заголовок = НСтр("ru = 'Список торговых точек - '") + Наименование;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.Сохранить.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
	Если ВсегоТочек <> Состав.Количество() Тогда
		ВсегоТочек = Состав.Количество();
	КонецЕсли; 
	
	Если Не Режим Тогда
		СтррКонтекст.ТДПланПосещенийИзменен = Ложь;		
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ДетализацияСТТ

// Процедура обновляет детализацию списка торговых точек.
// Если в детализации выбрано свойство "Маршрут", то включается видимость закладки "Маршрут".
&НаКлиенте
Процедура ОбновитьДетализациюСТТ(МодифицированностьФормы = Неопределено)

	СписокКолонокДетализации = СтррКонтекст.СписокВсеДетализацииСТТ;
	
	Для Каждого ЭлементСписка Из СписокКолонокДетализации Цикл
		ИмяЭлемента = "Состав" + ЭлементСписка.Значение;
		Элементы[ИмяЭлемента].Видимость = (Неопределено <> Детализация.НайтиПоЗначению(ЭлементСписка.Значение));
	КонецЦикла;
	
	Если МодифицированностьФормы <> Неопределено Тогда
		УстановитьМодифицированостьФормы(МодифицированностьФормы);
	КонецЕсли; 
	
	ВидимостьГрафиков = Элементы.СоставГрафик.Видимость;
	ВидимостьПланаПосещений = Элементы.СоставПланПосещений.Видимость;
	
	// Видимость пунктов меню "Копировать график" и "Применить график"	
	Элементы.СоставГрафикКонтекстноеМенюКопироватьГрафик.Видимость 		  = ВидимостьГрафиков;
	Элементы.СоставКонтекстноеМенюПрименитьСкопированныйГрафик.Видимость  = ВидимостьГрафиков;
	Элементы.СоставКонтекстноеМенюПеренестиГрафикВПланПосещений.Видимость = ВидимостьГрафиков И ВидимостьПланаПосещений;
	
	// Видимость закладки "План посещений":
	Элементы.ГруппаПланПосещений.Видимость = ВидимостьПланаПосещений;
	Элементы.ИспользоватьПорядок.Видимость = ВидимостьПланаПосещений;
	
	// Видимость элементов на закладке "Дополнительно"
	Элементы.ПериодГрафикаПлана.Видимость = ВидимостьГрафиков Или ВидимостьПланаПосещений;
	Элементы.ПериодВыводаПлана.Видимость = ВидимостьПланаПосещений;	
	
	Элементы.ТДППКонтекстноеМенюЗаполнитьИзГрафика.Видимость 	 = ВидимостьГрафиков;
	Элементы.ТДППКонтекстноеМенюЗаполнитьВсеИзГрафиков.Видимость = ВидимостьГрафиков;
	
	СтррКонтекст.ТДПланПосещенийОбновить = ВидимостьПланаПосещений;
	
	СоставПартнерВидимость = Не (СтррКонтекст.СпрТоргТочки.ВидСправочника = "алкПунктыРазгрузки");
	Элементы.СоставПартнер.Видимость = СоставПартнерВидимость;
	Элементы.СоставЗаполнитьПоОсновномуМенеджеру.Видимость = СоставПартнерВидимость;
		
	ОбновитьВидимостьДатыНачала();
	ОбновитьПредупреждениеОНастройкахОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеОНастройкахОбмена()
	
	стрЗамечания = "";
	Если Элементы.СоставГрафик.Видимость Или Элементы.СоставПланПосещений.Видимость Тогда
		// структура со свойствами: ВыгружатьМаршруты, ИнтервалВыгрузкиМаршрутов
		стррЗначения = СтррКонтекст.НастройкиВыгрузкиМаршрутов;
		Если стррЗначения.ВыгружатьМаршруты <> Истина Тогда
			стрЗамечания = стрЗамечания + НСтр("ru = 'выключен режим выгрузки маршрутов'");
		ИначеЕсли стррЗначения.ИнтервалВыгрузкиМаршрутов = Неопределено Или стррЗначения.ИнтервалВыгрузкиМаршрутов = 0 Тогда
			стрЗамечания = стрЗамечания + НСтр("ru = 'не задан интервал выгрузки маршрутов'");
		КонецЕсли; 
	Иначе
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Ложь;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(стрЗамечания) Тогда
		Элементы.НадписьГотовностьНастроекОбмена.Заголовок = СтрШаблон_(НСтр("ru = 'В настройках обмена %1.'"), стрЗамечания);
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Истина;
	Иначе
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Ложь;		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОформлениеАдресовДоставки()
	
	Если СтррКонтекст.НастройкиВыгрузкиМаршрутов.ИспользоватьАдресаДоставки = Истина Тогда // возможно, что значение будет Неопределено - когда настройка ИспользоватьАдресаДоставки еще ни разу не сохранялась
		Элементы.СоставАдрес.Заголовок = НСтр("ru = 'Адрес доставки'");
		Элементы.СоставАдрес.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.СоставАдрес.Заголовок = НСтр("ru = 'Адрес'");
		Элементы.СоставАдрес.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПараметрыДетализацииСТТ()
	
	Перем Оповещение, СписокДляПометки, ЭлементСписка;
	
	СписокДляПометки = СтррКонтекст.СписокВсеДетализацииСТТ.Скопировать();
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> Детализация.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиСпискаДетализации", ЭтотОбъект);
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Параметры детализации списка торговых точек'"));

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ДетализацияСТТ
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ПланПосещений

&НаКлиенте
Процедура ОбновитьВидимостьДатыНачала()
	
	Элементы.ДатаНачала.Видимость = (Элементы.ПериодГрафикаПлана.Видимость И ПериодГрафикаПлана > 7);
	
КонецПроцедуры

&НаКлиенте
Процедура ТДППОбновитьКлиент()
	
	Если СтррКонтекст.ТДПланПосещенийОбновить Тогда
		ТДППОчистить();
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.ТДПланПосещений, "ФормированиеОтчета");
		ЭтаФорма.Элементы.ТДПланПосещений.ОтображениеСостояния.Текст = НСтр("ru = 'Обновление плана посещений...'");
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ТДППОбновитьПоТаймеру", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ТДППОчистить()
	ТДПланПосещений.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТДППОбновитьПоТаймеру()
	ТДППОбновить();
КонецПроцедуры

// Процедура выводит содержимое плана посещений в табличный докуемнт (ТД).
&НаСервере
Процедура ТДППОбновить()
	
	Если СтррКонтекст.ТДПланПосещенийОбновить Тогда
	    СтррКонтекст.ТДПланПосещенийОбновить = Ложь;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если Не СтррКонтекст.Свойство("ЦветаДляМакета") Тогда
		СтррКонтекст.Вставить("ЦветаДляМакета", ТДППЦветаДляМакета());		
	КонецЕсли; 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ТекОбъект.МакетОбработки("ПланПосещений");
	
	ВсегоДней = ПериодГрафикаПлана;
	
	ДатаВыводаПлана = ТДПППолучитьДатуНачалаПериода();
	
#Область ВыводШапки

	ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ТоргТочка");
	
	ОбластьШапки.Параметры.Дата 			= Формат(ДатаВыводаПлана, "ДФ=dd.MM.yyyy");
	ОбластьШапки.Параметры.НаименованиеСТТ 	= Наименование;
	ОбластьШапки.Параметры.НаименованиеТТ	= СтррКонтекст.СпрТоргТочки.Представление;
	
	Таб = ТДПланПосещений;
	
	Таб.Очистить();
	Таб.Вывести(ОбластьШапки);
	
	ВсегоОбластьШапки = Макет.ПолучитьОбласть("Шапка|Всего");
	Таб.Присоединить(ВсегоОбластьШапки);
	
	СтррКонтекст.Вставить("ППКолонкаИтогов", Таб.ШиринаТаблицы);	
	
	ПараметрыВывода 		   = Новый Структура("ВсегоДней,ДатаНачала,мИтогиДней");
	ПараметрыВывода.ВсегоДней  = ВсегоДней;
	ПараметрыВывода.ДатаНачала = ДатаВыводаПлана;
	ПараметрыВывода.мИтогиДней = ПППолучитьИтогиДней(); // массив итогов на каждый день
	
	ТДППВывестиОбластиСДнями(Макет, "Шапка", ПараметрыВывода);
	
// ВыводШапки	
#КонецОбласти 

#Область ВыводИтога
	
	ОбластьИтога = Макет.ПолучитьОбласть("Итоги|ТоргТочка");
	ОбластьИтога.Параметры.КоличествоСтрок = Состав.Количество();
	Таб.Вывести(ОбластьИтога);
	
	ОбластьИтогаВсего = Макет.ПолучитьОбласть("Итоги|Всего");
	ОбластьИтогаВсего.Параметры.ПечВсего = Строка(ПараметрыВывода.мИтогиДней[0]); // полный итог в массиве мИтогиДней[0]
	Таб.Присоединить(ОбластьИтогаВсего);
	
	ТДППВывестиОбластиСДнями(Макет, "Итоги", ПараметрыВывода);
	
	СтррКонтекст.Вставить("ППСтрокаИтогов", Таб.ВысотаТаблицы);
	
// ВыводИтога	
#КонецОбласти 

#Область ВыводСтрокТЧ

	ПППопыткаПеренумероватьПункты();
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	ПланПосещений.Сортировать(ИмяКолонки + ",День");
	ПараметрыВывода.Вставить("стррПоиск", Новый Структура(ИмяКолонки));
	ПараметрыВывода.Вставить("НомерСтроки", 1);
	
	Для каждого СтрокаТ Из Состав Цикл
		ТДППВывестиСтроку(Макет, СтрокаТ, ПараметрыВывода);
	КонецЦикла; 

// ВыводСтрокТЧ
#КонецОбласти 

#Область ВыводПодвала

	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|ТоргТочка");
	ОбластьПодвала.Параметры.КоличествоСтрок = Состав.Количество();
	ОбластьПодвала.Параметры.Автор 			 = ПараметрыСеанса.ТекущийПользователь;
	Таб.Вывести(ОбластьПодвала);
	
	ВсегоОбластьПодвала 				   = Макет.ПолучитьОбласть("Подвал|Всего");
	//ВсегоОбластьПодвала.Параметры.ПечВсего = ПараметрыВывода.мИтогиДней[0];
	Таб.Присоединить(ВсегоОбластьПодвала);	

	ТДППВывестиОбластиСДнями(Макет, "Подвал", ПараметрыВывода);

// ВыводПодвала	
#КонецОбласти 

	Таб.ТолькоПросмотр 	   = Истина;
	Таб.АвтоМасштаб    	   = Истина;
	Таб.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Таб.ФиксацияСлева 	   = 4;
	Таб.ФиксацияСверху 	   = 4;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.ТДПланПосещений, "НеИспользовать");
	
КонецПроцедуры

// Процедура перенумеровывает пункты плана посещений, если он был интерактивно переключен в режим ИспользоватьПорядок
&НаСервере
Процедура ПППопыткаПеренумероватьПункты(Принудительно = Ложь)
	
	Если Не ИспользоватьПорядок Тогда
		Возврат;
	КонецЕсли; 
	
	Перенумеровать = Принудительно;
	Если Не Принудительно Тогда
		СтррПоиск = Новый Структура("Порядок", 9999); // проверяем есть ли одинаковые порядки
		мСтроки = ПланПосещений.НайтиСтроки(СтррПоиск);
		Перенумеровать = мСтроки.Количество() <> 0;	
	КонецЕсли; 
	
	Если Перенумеровать Тогда // Нужно перенумеровать порядки посещений ТТ
		ПланПосещений.Сортировать("День,Порядок");
		ТекДень = Неопределено;
		Для Каждого СтрокаТ Из ПланПосещений Цикл
			Если СтрокаТ.День <> ТекДень Тогда
				ТекДень = СтрокаТ.День;
				ТекПорядок 	= 1;
			КонецЕсли; 
			СтрокаТ.Порядок = ТекПорядок;
			ТекПорядок = ТекПорядок + 1;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТДПППеренестиВОбъектКлиент()
	Состояние(НСтр("ru='Перенос плана из табличного документа...'"));
	ТДПППеренестиВОбъект();
КонецПроцедуры

// Процедура переносит содержимое ТД плана посещений в ТЗ ПланПосещений
&НаСервере
Процедура ТДПППеренестиВОбъект()

	Таб = ТДПланПосещений;

	ПланПосещений.Очистить();
	
	МинНомерСтроки   = СтррКонтекст.ППСтрокаИтогов + 1;
	МаксНомерСтроки  = МинНомерСтроки + Состав.Количество() - 1;
	МинНомерКолонки  = СтррКонтекст.ППКолонкаИтогов + 1;
	МаксНомерКолонки = МинНомерКолонки + ПериодГрафикаПлана - 1;
	
	НомерКолонкиПартнера = 4;
	АдресКолонкиПартнера = "C" + Строка(НомерКолонкиПартнера);
	АдресКолонкиАдреса   = "C" + Строка(НомерКолонкиПартнера+1);
	НомерКолонкиПервогоДня_1 = МинНомерКолонки - 1;
	
	ТипСпрПартнеры = Тип("СправочникСсылка."+СтррКонтекст.СпрТоргТочки.ВидСправочника);
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	мДниПлана  = Новый Массив;
	мДниНедели = СтрРазделить_(НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС'"), ",");
	ВсегоНедель = Цел(ПериодГрафикаПлана / 7) + ?(ПериодГрафикаПлана % 7 <> 0, 1, 0); // количество недель в плане посещений
	
	Для НомерСтроки = МинНомерСтроки По МаксНомерСтроки Цикл
		
		АдресСтроки = "R" + Строка(НомерСтроки);
		Партнер  = Таб.Область(АдресСтроки + АдресКолонкиПартнера).Расшифровка;
		Если ТипЗнч(Партнер) <> ТипСпрПартнеры Тогда
			Продолжить;
		КонецЕсли;
		ИдАдресаДоставки = СтрЗаменить(Таб.Область(АдресСтроки + АдресКолонкиАдреса).Расшифровка, "Адрес_", ""); // идентификатор адреса доставки
		мДниПлана.Очистить();
		Для НомерКолонки = МинНомерКолонки По МаксНомерКолонки Цикл
			ТекстЯчейки = Таб.Область(АдресСтроки + "C"+Строка(НомерКолонки)).Текст;
			Если ТекстЯчейки <> "" Тогда
				День = НомерКолонки - НомерКолонкиПервогоДня_1;
				СтрокаТ = ПланПосещений.Добавить();
				СтрокаТ[ИмяКолонки] 	 = Партнер;
				СтрокаТ.ИдАдресаДоставки = ИдАдресаДоставки;
				СтрокаТ.День 			 = День;
				мДниПлана.Добавить(День);
				Если ИспользоватьПорядок Тогда
					СтрокаТ.Порядок = Число(ТекстЯчейки);
				Иначе
					СтрокаТ.Порядок = 9999;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		
		Состав[НомерСтроки-МинНомерСтроки].ПредставлениеПлана = ПредставлениеПлана(мДниПлана, ВсегоНедель, мДниНедели);
		
	КонецЦикла; 
	
	СтррКонтекст.ТДПланПосещенийИзменен = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПлана(мДниПлана, ВсегоНедель, мДниНедели)
	
	Если мДниПлана.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекНеделя = Неопределено;
	ВсеНеделиОдинаковы = Истина;
	ПредыдущееПредставлениеНедели = Неопределено;
	ВыбраноНедель = 0;
	
	СтрРабочиеДни = "";	РабочихДней = 0; 
	СтрВыходные   = ""; Выходных 	= 0;
	
	мДниПлана.Добавить(-100); // маркер последнего дня, чтобы завершить цикл, но не повторять алгоритм получения представления недели после цикла
	
	СтрРезультат = "";
	
	Для каждого День Из мДниПлана Цикл
		
		Неделя = Цел((День-1) / 7); // недели нумеруются с 0
		ДеньНедели_1 = (День-1) % 7;
		
		Если ТекНеделя <> Неделя Тогда
			
			Если ТекНеделя <> Неопределено Тогда
				Если РабочихДней = 5 Тогда
					ПредставлениеНедели = ?(Выходных = 2, НСтр("ru='все дни'"),	НСтр("ru='по будням'") + ?(Выходных = 0, "", ", " + СтрВыходные));
				Иначе
					ПредставлениеНедели = СтрРабочиеДни + СтрВыходные;
				КонецЕсли;
				Если Прав(ПредставлениеНедели, 2) = ", " Тогда
					ПредставлениеНедели = Лев(ПредставлениеНедели, СтрДлина(ПредставлениеНедели)-2);
				КонецЕсли;
				Если ВсеНеделиОдинаковы И ТекНеделя > 0 Тогда
					ВсеНеделиОдинаковы = (ПредыдущееПредставлениеНедели = ПредставлениеНедели);
				КонецЕсли; 
				Если ПредставлениеНедели <> "" Тогда
					СтрРезультат = СтрРезультат + ?(СтрРезультат = "", "", "; ") + Строка(ТекНеделя+1) + ": " + ПредставлениеНедели;		
				КонецЕсли; 
				ПредыдущееПредставлениеНедели = ПредставлениеНедели;
				ВыбраноНедель = ВыбраноНедель + 1; 
			КонецЕсли; 
			
			Если День = -100 Тогда
				Прервать;
			КонецЕсли; 
			
			ТекНеделя = Неделя;				
			СтрРабочиеДни = "";	РабочихДней = 0; 
			СтрВыходные   = ""; Выходных 	= 0;
			
		КонецЕсли; 
		
		Если ДеньНедели_1 < 5 Тогда // 0-4 - пн-пт
			СтрРабочиеДни = СтрРабочиеДни + мДниНедели[ДеньНедели_1] + ", ";
			РабочихДней   = РабочихДней + 1;
		Иначе
			СтрВыходные = СтрВыходные + мДниНедели[ДеньНедели_1] + ", ";
			Выходных 	= Выходных + 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ВсеНеделиОдинаковы И ВыбраноНедель = ВсегоНедель Тогда
		СтрРезультат = ПредставлениеНедели;
	КонецЕсли; 
	
	Возврат СтрРезультат;
	
КонецФункции

&НаСервере
Процедура ТДППВывестиОбластиСДнями(Макет, ИмяОбласти, ПараметрыВывода)

	ТекДата 	= ПараметрыВывода.ДатаНачала;
	ВсегоДней 	= ПараметрыВывода.ВсегоДней;
	мИтогиДней 	= ПараметрыВывода.мИтогиДней;
	
	ДниНеделиСтр = НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС'");
	мДниНедели   = СтрРазделить_(ДниНеделиСтр, ",");
	
	Для День = 1 По ВсегоДней Цикл		
		ДеньНед = ДеньНедели(ТекДата);
		Если ДеньНед = 7 Тогда 
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|Воскр");
		ИначеЕсли ДеньНед = 6 Тогда 
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|Субб");
		Иначе // остальные дни
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|День");
		КонецЕсли;
		
		Если ИмяОбласти = "Шапка" Тогда			
			Область.Параметры.ДеньНед = мДниНедели[ДеньНед-1];
			Область.Параметры.ДеньМес = Строка(День(ТекДата));
		ИначеЕсли ИмяОбласти = "Подвал" Тогда
			//Область.Параметры.ПечИтог = мИтогиДней[День];
		ИначеЕсли ИмяОбласти = "Итоги" Тогда
			Область.Параметры.ПечИтог = мИтогиДней[День];
		КонецЕсли;
		
		ТДПланПосещений.Присоединить(Область);
		ТекДата = ТекДата + 86400;
	КонецЦикла;	
	
КонецПроцедуры

// Функция возвращает количество посещений в строке.
&НаСервере
Функция ТДППВывестиСтроку(Макет, СтрокаТ, ПараметрыВывода)
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	
	Таб = ТДПланПосещений;
	
	НомерСтроки 	= ПараметрыВывода.НомерСтроки;
	НачИмяОбласти 	= ?(НомерСтроки % 2 = 0, "Строка", "Строка2");
	Область 		= Макет.ПолучитьОбласть(НачИмяОбласти + "|ТоргТочка");
	Область.Параметры.Ном 		 = НомерСтроки;
	Область.Параметры.Партнер 	 = СтрокаТ[ИмяКолонки];
	Область.Параметры.Адрес   	 = СтрокаТ.Адрес;
	Область.Параметры.АдресТочки = "Адрес_" + СтрокаТ.ИдАдресаДоставки; // префикс + идентификатор адреса доставки, префикс - чтобы обрабатывать расшифровку при клике по колонке "Адрес"
	Таб.Вывести(Область); // вывели колонку Торговая точка/Адрес
	// теперь выводим строку
	ДеньНед 	= ДеньНедели(ПараметрыВывода.ДатаНачала);
	ВсегоДней 	= ПараметрыВывода.ВсегоДней;
	мИтогиДней 	= ПараметрыВывода.мИтогиДней;
	Цвета		= СтррКонтекст.ЦветаДляМакета;	
	ВсегоПосещений = 0;
	
	стррПоиск = ПараметрыВывода.стррПоиск;
	стррПоиск[ИмяКолонки] = СтрокаТ[ИмяКолонки];
	мСтроки = ПланПосещений.НайтиСтроки(стррПоиск);
	НайденоДней = мСтроки.Количество();
	МаксИндексДня = НайденоДней - 1;
	ИндексДня = 0;
	
	ОбластьВсего 					      = Макет.ПолучитьОбласть(НачИмяОбласти + "|Всего");
	ОбластьВсего.Параметры.ВсегоПосещений = 0;
	ЯчейкаВсего = Таб.Присоединить(ОбластьВсего);
	
	Для День = 1 По ВсегоДней Цикл
		
		Если ДеньНед = 7 Тогда // воскресенье
			Область = Макет.ПолучитьОбласть(НачИмяОбласти + "|Воскр");
		ИначеЕсли ДеньНед = 6 Тогда //суббота
			Область = Макет.ПолучитьОбласть(НачИмяОбласти + "|Субб");
		Иначе // остальные дни
			Область = Макет.ПолучитьОбласть(НачИмяОбласти + "|День");
		КонецЕсли;
		
		Значение = 0;
		Если НайденоДней > 0 Тогда
			Для Индекс = ИндексДня По МаксИндексДня Цикл
				СтрокаТДень = мСтроки[Индекс];
				Если СтрокаТДень.День = День Тогда
					Значение = СтрокаТДень.Порядок;
					ИндексДня = Индекс + 1;
					Прервать;
				ИначеЕсли СтрокаТДень.День > День Тогда
					ИндексДня = Индекс;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			ВсегоПосещений = ВсегоПосещений + ?(Значение <> 0, 1, 0);
		КонецЕсли; 
		
		Если ИспользоватьПорядок Тогда
			Если Значение > 0 Тогда
				ПечЗначение = Значение;
				Если Значение = 1 Тогда
					Область.ТекущаяОбласть.ЦветФона = Цвета.ЦветПервогоДня;
				ИначеЕсли Значение = мИтогиДней[День] Тогда
					Область.ТекущаяОбласть.ЦветФона = Цвета.ЦветПоследнегоДня;
				КонецЕсли;
			Иначе
				ПечЗначение = "";
			КонецЕсли;
		Иначе
			ПечЗначение = ?(Значение <> 0, "X", "");
		КонецЕсли;
		
		Область.Параметры.ПечРабота = ПечЗначение;  			
		Область.Параметры.СтрПечРабота = Новый Структура("День, Значение, ЭтоПорядок", День, ПечЗначение, ИспользоватьПорядок);    	
		
		Таб.Присоединить(Область);
		
		ДеньНед = ?(ДеньНед = 7, 1, ДеньНед + 1);
	КонецЦикла;
	
	ЯчейкаВсего.Текст = ВсегоПосещений;
	
	ПараметрыВывода.НомерСтроки = НомерСтроки + 1;
	
	Возврат ВсегоПосещений;
	
КонецФункции

&НаКлиенте
Функция ПППолучитьПланПоПартнеру(Партнер)
	
	СтррПлан = Новый Структура("ПериодГрафика,Пункты,УчитыватьВремяПосещения");
	СтррПлан.ПериодГрафика = ПериодГрафикаПлана;
	СтррПлан.УчитыватьВремяПосещения = Ложь;
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	СтррПоиск = Новый Структура(ИмяКолонки, Партнер);
	мДни = ПланПосещений.НайтиСтроки(СтррПоиск);
	
	СтррПункты = Новый Структура;
	
	Для каждого СтрокаТ Из мДни Цикл
		Значение = Новый Структура("Выбран", Истина);
		СтррПункты.Вставить("П" + Строка(СтрокаТ.День - 1), Значение);
	КонецЦикла;

	СтррПлан.Пункты = СтррПункты;
	
	Возврат СтррПлан;
	
КонецФункции

&НаКлиенте
Процедура ППУстановитьПланПоПартнеру(Партнер, СтррПлан)
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	СтррПоиск = Новый Структура(ИмяКолонки, Партнер);
	мСтроки = ПланПосещений.НайтиСтроки(СтррПоиск);
	ствПорядки = Новый Соответствие; // запоминаем прежние порядки, чтобы по возможности их сохранить
	Для каждого СтрокаТ Из мСтроки Цикл
		ствПорядки.Вставить(СтрокаТ.День, СтрокаТ.Порядок);
		ПланПосещений.Удалить(СтрокаТ);
	КонецЦикла;
	
	// в структуре СтррПлан.Пункты элементы вида "Пn", где n - номер дня плана, начиная с 0
	Для каждого Элемент Из СтррПлан.Пункты Цикл
		День = Число(Сред(Элемент.Ключ, 2)) + 1;
		СтрокаТ = ПланПосещений.Добавить();
		СтрокаТ[ИмяКолонки] = Партнер;
		ПрежнийПорядок 	= ствПорядки[День];
		СтрокаТ.День 	= День;
		СтрокаТ.Порядок = ?(ПрежнийПорядок = Неопределено, 9999, ПрежнийПорядок);
	КонецЦикла; 
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	ПППопыткаПеренумероватьПункты(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПППеренстиГрафикиВПланы(мСтроки)
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	СтррПоиск = Новый Структура(ИмяКолонки);
	ствПорядки = Новый Соответствие;
	ПериодПлана = ПериодГрафикаПлана;
	мДниПлана = Новый Массив;
	мДниНедели = СтрРазделить_(НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС'"), ",");
	ВсегоНедель = Цел(ПериодГрафикаПлана / 7) + ?(ПериодГрафикаПлана % 7 <> 0, 1, 0); // количество недель в плане посещений
	
	Для Каждого ИдСтроки Из мСтроки Цикл
		
		стзСостав = Состав.НайтиПоИдентификатору(ИдСтроки);
		
		// удаляем строки из плана посещений по заданному партнеру
		ТекПартнер = стзСостав[ИмяКолонки];
		СтррПоиск[ИмяКолонки] = ТекПартнер;
		мСтрокиПП = ПланПосещений.НайтиСтроки(СтррПоиск);
		ствПорядки.Очистить(); // запоминаем прежние порядки, чтобы по возможности их сохранить	
		Для каждого стзПП Из мСтрокиПП Цикл
			ствПорядки.Вставить(стзПП.День, стзПП.Порядок);
			ПланПосещений.Удалить(стзПП);
		КонецЦикла;
		
		мДниПлана.Очистить();
		
		Если ЗначениеЗаполнено(стзСостав.График) Тогда
			СтррПункты = стзСостав.График.Пункты;
			ПериодГрафика = стзСостав.График.ПериодГрафика;
			СмещениеДняПлана = 0;
			Пока СмещениеДняПлана < ПериодПлана Цикл
				Для каждого Элемент Из СтррПункты Цикл // в структуре СтррПункты элементы вида "Пn", где n - номер дня плана, начиная с 0
					День = Число(Сред(Элемент.Ключ, 2)) + 1 + СмещениеДняПлана;
					Если День > ПериодГрафикаПлана Тогда
						Прервать;
					КонецЕсли; 
					мДниПлана.Добавить(День);
					стзПП = ПланПосещений.Добавить();
					стзПП[ИмяКолонки] = ТекПартнер;
					ПрежнийПорядок 	= ствПорядки[День];
					стзПП.День 	= День;
					стзПП.Порядок = ?(ПрежнийПорядок = Неопределено, 9999, ПрежнийПорядок);
				КонецЦикла; 
				СмещениеДняПлана = СмещениеДняПлана + ПериодГрафика;
			КонецЦикла;
		КонецЕсли; 
		
		стзСостав.ПредставлениеПлана = ПредставлениеПлана(мДниПлана, ВсегоНедель, мДниНедели);
		
	КонецЦикла;
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	ПППопыткаПеренумероватьПункты(Истина);
	
КонецПроцедуры

// Функция возвращает линейный массив итогов дней (сколько посещений на каждый день).
// В элементе массива с нулевым индексом возвращается полный итог по всем дням.
&НаСервере
Функция ПППолучитьИтогиДней()
	
	ВсегоДней = ПериодГрафикаПлана;
	мИтоги = Новый Массив(ВсегоДней+1); // массив итогов на каждый день
	Для Индекс = 1 По ВсегоДней Цикл
		мИтоги[Индекс] = 0;
	КонецЦикла;
	
	ПолынйИтог = 0;
	
	Для Каждого СтрокаТ Из ПланПосещений Цикл
		НомерДня = СтрокаТ.День;
		Если НомерДня <= ВсегоДней Тогда
		    мИтоги[НомерДня] = мИтоги[НомерДня] + 1;
			ПолынйИтог = ПолынйИтог + 1;
		КонецЕсли; 
	КонецЦикла;
	
	мИтоги[0] = ПолынйИтог;
	
	Возврат мИтоги;
	
КонецФункции

&НаСервере
Функция ТДППЦветаДляМакета()
	Возврат Новый Структура("ЦветПервогоДня,ЦветПоследнегоДня,ЦветФона0,ЦветФона1",
		Новый Цвет(204, 255, 204), Новый Цвет(255, 200, 200), Новый Цвет(-1,-1,-1), Новый Цвет(240,240,240));
КонецФункции

// Функция возвращает итог по колонке.
// Функция не подсчитывает итог, а возвращает значение итога из строки итогов дней.
// Аналогичный подход задействован в функции ТДППВернутьИтогиВсехДней().
&НаКлиенте
Функция ТДППВернутьИтогДня(Элемент)
	
	АдресОбласти = "R"+Строка(СтррКонтекст.ППСтрокаИтогов) + ТДПолучитьАдресКолонки(Элемент.ТекущаяОбласть.Имя);
	ТекстЯчейки = ТДПланПосещений.Область(АдресОбласти).Текст;	
	Возврат ?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки));
	
КонецФункции

// Функция возвращает массив итогов дней по колонкам.
// Функция не подсчитывает итоги, а возвращает значения итогов из строки итогов дней.
// В нулевом элементе массива возвращяется общий итог по всем дням.
&НаКлиенте
Функция ТДППВернутьИтогиВсехДней()
	
	мИтоги = Новый Массив(ПериодГрафикаПлана+1);
	ЧастьАдреса  = "R" + Строка(СтррКонтекст.ППСтрокаИтогов) + "C";
	НомерКолонки = СтррКонтекст.ППКолонкаИтогов; // колонка общего итога идет первой, после нее идут итоги по дням
	
	ДнейВПлане_1 = ПериодГрафикаПлана - 1;
	Для ИндексДня = 0 По ПериодГрафикаПлана Цикл
		ТекстЯчейки = ТДПланПосещений.Область(ЧастьАдреса + Строка(НомерКолонки+ИндексДня)).Текст;	
		мИтоги[ИндексДня] = ?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки));
	КонецЦикла; 
	
	Возврат мИтоги;
	
КонецФункции

&НаКлиенте
Функция ТДПППерекраситьКолонку(АдресКолонки, ИтогКолонки = Неопределено)
	
	Если ИтогКолонки = Неопределено Тогда // нужно прочитать итог колонки из макета
		ИтогКолонки = ТДПППолучитьИтогКолонки(АдресКолонки);
	КонецЕсли; 
	
	Таб = ТДПланПосещений;
	стррЦвета = СтррКонтекст.ЦветаДляМакета;
	
	ЦветФона = ТДПланПосещений.Область("R" + Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонки).ЦветФона;
	Если ЦветФона.Вид = ВидЦвета.АвтоЦвет Тогда // цвет по умолчанию
		ЦветФона = Неопределено;
	КонецЕсли;
	
	ОтступСтр 		= СтррКонтекст.ППСтрокаИтогов + 1;
	ПоследняяСтрока = ОтступСтр + Состав.Количество() - 1;	
	
	Для Сч = ОтступСтр По ПоследняяСтрока Цикл
		АдресОбласти = "R"+Строка(Сч) + АдресКолонки;
		Расшифровка = Таб.Область(АдресОбласти).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ЭтоПорядок") Тогда
			Область = Таб.Область(АдресОбласти);
			ТекстЯчейки = Область.Текст;
			Если Не ПустаяСтрока(ТекстЯчейки) Тогда
				Порядок = Число(ТекстЯчейки);
				Если Порядок = 1 Тогда
					Область.ЦветФона = стррЦвета.ЦветПервогоДня;
				ИначеЕсли Порядок = ИтогКолонки Тогда
					Область.ЦветФона = стррЦвета.ЦветПоследнегоДня;
				ИначеЕсли ЦветФона <> Неопределено Тогда
					Область.ЦветФона = ЦветФона;
				Иначе
					Область.ЦветФона = ?(Сч % 2 = 0, стррЦвета.ЦветФона0, стррЦвета.ЦветФона1);
				КонецЕсли;
			ИначеЕсли ЦветФона <> Неопределено Тогда
				Область.ЦветФона = ЦветФона;
			Иначе
				Область.ЦветФона = ?(Сч % 2 = 0, стррЦвета.ЦветФона0, стррЦвета.ЦветФона1);
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ТДПППеренумероватьПорядокВКолонке(АдресКолонки, СписокСортировки)
	
	Таб = ТДПланПосещений;
	
	Если СписокСортировки = Неопределено Тогда
		СписокСортировки = Новый СписокЗначений;
	Иначе
		СписокСортировки.Очистить();
	КонецЕсли; 
	
	ОтступСтр 		= СтррКонтекст.ППСтрокаИтогов + 1;
	ПоследняяСтрока = ОтступСтр + Состав.Количество() - 1;
	НомерМаксПорядка = 10000;
	
	Для Сч = ОтступСтр По ПоследняяСтрока Цикл
		ТекстЯчейки = Таб.Область("R"+Строка(Сч) + АдресКолонки).Текст;
		Если ТекстЯчейки = "X" Тогда // при режиме нумерации порядков этот знак используется как признак добавления нового пункта посещения
			Порядок = НомерМаксПорядка;
			НомерМаксПорядка = НомерМаксПорядка + 1;
		ИначеЕсли Не ПустаяСтрока(ТекстЯчейки) Тогда
			Порядок = Число(ТекстЯчейки);
		Иначе
			Порядок = 0;
		КонецЕсли; 
		Если Порядок <> 0 Тогда
			СписокСортировки.Добавить(Порядок, Строка(Сч));
		КонецЕсли; 
	КонецЦикла;
	
	Порядок = 0;
	СписокСортировки.СортироватьПоЗначению();
	Для каждого Элемент Из СписокСортировки Цикл
		Порядок = Порядок + 1;
		Область = Таб.Область("R"+Число(Элемент.Представление) + АдресКолонки);
		Если Область.Текст <> Строка(Порядок) Тогда
			Область.Текст = Строка(Порядок);
		КонецЕсли; 
	КонецЦикла; 
	
	ТДПППерекраситьКолонку(АдресКолонки);
	
КонецПроцедуры

&НаКлиенте
Функция ТДПППолучитьИтогКолонки(АдресКолонки)
	ТекстЯчейки = ТДПланПосещений.Область("R"+Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонки).Текст;	
	Возврат ?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки));
КонецФункции

// Процедура очищает пункты посещений в ТД и перенумеровывает пункты маршрутов (если это требуется).
&НаКлиенте
Процедура ТДППОчиститьПосещенияДляОбласти()
	
	Перем НомерСтроки, НомерКолонки;
	Перем НомерПервойСтроки;
	
	Таб = ТДПланПосещений;
	ТДПолучитьНомераСтрокиИКолонкиОбласти(Таб.ТекущаяОбласть.Имя, НомерСтроки, НомерКолонки);
	
	МинНомерСтроки   = СтррКонтекст.ППСтрокаИтогов + 1;
	МаксНомерСтроки  = МинНомерСтроки + Состав.Количество() - 1;
	МинНомерКолонки  = СтррКонтекст.ППКолонкаИтогов + 1;
	МаксНомерКолонки = МинНомерКолонки + ПериодГрафикаПлана - 1;
	
	СписокСортировки = Неопределено;
	БылиИзменения = Ложь;
	
	АдресКолонкиИтогов = "C" + Строка(СтррКонтекст.ППКолонкаИтогов);	
	ИтогВсего = Число(Таб.Область("R"+Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонкиИтогов).Текст);
	
	Если ТипЗнч(НомерСтроки) = Тип("Массив") Тогда // выбран диапазон ячеек
		НомерНачСтроки  = Макс( НомерСтроки[0],  МинНомерСтроки);
		НомерКонСтроки  = Мин(  НомерСтроки[1],  МаксНомерСтроки);
		НомерНачКолонки = Макс( НомерКолонки[0], МинНомерКолонки);
		НомерКонКолонки = Мин(  НомерКолонки[1], МаксНомерКолонки);
	Иначе // выбрана одна ячейка
		НомерНачСтроки  = Макс( НомерСтроки,  МинНомерСтроки);
		НомерКонСтроки  = Мин(  НомерСтроки,  МаксНомерСтроки);
		НомерНачКолонки = Макс( НомерКолонки, МинНомерКолонки);
		НомерКонКолонки = Мин(  НомерКолонки, МаксНомерКолонки);
	КонецЕсли;
	
	// перед началом перебора колонок и строк нужно заполнить массив итогов по выденным строкам
	мИтогиСтрок = Новый Массив(НомерКонСтроки - НомерНачСтроки + 1);
	МаксИндекс = НомерКонСтроки - НомерНачСтроки;
	Для Индекс = 0 По МаксИндекс Цикл // перебор строк
		ТекстЯчейки = Таб.Область("R" + Строка(НомерНачСтроки+Индекс) + АдресКолонкиИтогов).Текст;
		мИтогиСтрок[Индекс] = ?(ТекстЯчейки = "", 0, Число(ТекстЯчейки));
	КонецЦикла;
	
	// очистка ячеек посещений
	Для Колонка = НомерНачКолонки По НомерКонКолонки Цикл // перебор колонок
		АдресКолонки = "C" + Строка(Колонка);
		ИтогКолонки = ТДПППолучитьИтогКолонки(АдресКолонки);
		ПрежнийИтогКолонки = ИтогКолонки;
		Для Индекс = 0 По МаксИндекс  Цикл // перебор строк
			Область = Таб.Область("R"+Строка(НомерНачСтроки+Индекс) + АдресКолонки);
			Если Область.Текст <> "" Тогда
				ИтогКолонки = ИтогКолонки - 1;
				мИтогиСтрок[Индекс] = мИтогиСтрок[Индекс] - 1;
				Область.Текст = "";
			КонецЕсли; 
		КонецЦикла; 
		Если ПрежнийИтогКолонки <> ИтогКолонки Тогда
			БылиИзменения = Истина;
			ИтогВсего = ИтогВсего - ПрежнийИтогКолонки + ИтогКолонки;
			Таб.Область("R" + Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонки).Текст = ИтогКолонки;
			Если ИспользоватьПорядок Тогда
		    	ТДПППеренумероватьПорядокВКолонке(АдресКолонки, СписокСортировки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если БылиИзменения Тогда 
		// обновляем колонку итогов строк
		Для Индекс = 0 По МаксИндекс Цикл
			Таб.Область("R"+Строка(НомерНачСтроки+Индекс) + АдресКолонкиИтогов).Текст = мИтогиСтрок[Индекс];
		КонецЦикла;
		// обновляем общий итог
		Таб.Область("R"+Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонкиИтогов).Текст = Строка(ИтогВсего);
		УстановитьМодифицированостьФормы(Истина);
		СтррКонтекст.ТДПланПосещенийИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура переносит графики посещений в табличный документ (ТД) плана посещений.
// Список партнеров для переноса графиков определяется по текущей области ТД.
&НаКлиенте
Процедура ТДППЗаполнитьИзГрафикаПосещенийДляОбласти()
	
	Перем НомерСтроки, НомерКолонки;
	Перем мПартнеры, НомерПервойСтроки;
	
	Таб = ТДПланПосещений;
	ТДПолучитьНомераСтрокиИКолонкиОбласти(Таб.ТекущаяОбласть.Имя, НомерСтроки, НомерКолонки);
	
	// Получаем массив партнеров для выделенной области макета.
	
	НомерКолонкиПартнера = 4;
	мПартнеры = Новый Массив;
	
	Если ТипЗнч(НомерСтроки) = Тип("Массив") Тогда // выбран диапазон ячеек
		ТипСпрПартнеры = Тип("СправочникСсылка." + СтррКонтекст.СпрТоргТочкиВидСправочника);
		АдресКолонкиПартнера = "C"+НомерКолонкиПартнера;
		Для Индекс = НомерСтроки[0] По НомерСтроки[1] Цикл
			Расшифровка = Таб.Область("R"+Индекс + АдресКолонкиПартнера).Расшифровка;
			Если ТипЗнч(Расшифровка) = ТипСпрПартнеры Тогда
				мПартнеры.Добавить(Расшифровка);
				Если НомерПервойСтроки = Неопределено Тогда
					НомерПервойСтроки = Индекс;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
	Иначе
		Расшифровка = Таб.Область("R"+НомерСтроки + "C"+НомерКолонкиПартнера).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Партнеры") Тогда
			мПартнеры.Добавить(Расшифровка);
			НомерПервойСтроки 	 = НомерСтроки;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НомерПервойСтроки <> Неопределено Тогда 
		ТДППЗаполнитьИзГрафикаПосещенийДляПартнеров(мПартнеры, НомерПервойСтроки);
		СтррКонтекст.ТДПланПосещенийИзменен = Истина;
	Иначе // значит не найдено партнеров для выделенного диапазона ячеек (или для выделенной ячейки)
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки, где указаны партнеры, для которых нужно перенести график в план посещений.'"));
	КонецЕсли; 
	
КонецПроцедуры

// Процедура переносит графики посещений партнеров в план посещений.
&НаКлиенте
Процедура ТДППЗаполнитьИзГрафикаПосещенийДляПартнеров(мПартнеры = Неопределено, НомерПервойСтроки = Неопределено)

	Таб = ТДПланПосещений;	
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	стррПоиск  = Новый Структура(ИмяКолонки);
	ДнейВПлане = ПериодГрафикаПлана; // номера дней графика нумеруются от 0 до N-1	
	
	мИтогиДней = ТДППВернутьИтогиВсехДней();
	ИтогВсего = мИтогиДней[0];
	
	мОбновитьДни = Новый Массив(ДнейВПлане + 1); // массив с отметками какие дни (колонки) нужно перенумеровать в плане, в случае использования порядка посещения
	
	КолонкаПервогоДня_1 = СтррКонтекст.ППКолонкаИтогов;
	БылиИзменения = Ложь;
	Индекс = -1;
	
	ЗаполнитьДляВсехПартнеров = (мПартнеры = Неопределено);
	Если ЗаполнитьДляВсехПартнеров Тогда // заполнение для всех партнеров - нужно перебрать все строки таблицы Состав 
	    Выборка = Состав;
		НомерПервойСтроки = СтррКонтекст.ППСтрокаИтогов + 1;
	Иначе // заполнение для партнеров, указанных в массиве мПартнеры
	    Выборка = мПартнеры;
	КонецЕсли; 
	
	Для Каждого Элемент Из Выборка Цикл // Цикл перебора партнеров
		
		Индекс = Индекс + 1;
		
		Если ЗаполнитьДляВсехПартнеров Тогда // идет перебор строк ТЗ "Состав"
			стррГрафик = Элемент.График; 
		Иначе // идет перебор элементов массива мПартнеры
			стррПоиск[ИмяКолонки] = Элемент;
			мСтроки = Состав.НайтиСтроки(стррПоиск);
			Если мСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			стррГрафик = мСтроки[0].График;
		КонецЕсли; 
		
		Если стррГрафик <> Неопределено Тогда // график ТТ задан
			ВсегоДнейГрафика = стррГрафик.ПериодГрафика; // приодичность графика (длительность графика в днях)
			стррПункты 		 = стррГрафик.Пункты;
			//УчитыватьВремяПосещения = стррГрафик.УчитыватьВремяПосещения;	// пока не используется
		КонецЕсли; 
		
		ЧастьАдреса = "R" + Строка(НомерПервойСтроки + Индекс) + "C";
		
		// заполняем дни строки значениями
		ИтогСтроки = 0;
		
		Для ИндексДня = 1 По ДнейВПлане Цикл
			Область = Таб.Область(ЧастьАдреса + Строка(КолонкаПервогоДня_1 + ИндексДня));
			ПрежнееЗначение = Область.Текст;
			НовоеЗначение = "";
			Если стррГрафик <> Неопределено Тогда
				ИмяПункта = "П" + Строка((ИндексДня-1) % ВсегоДнейГрафика); // пункты нумеруются с нуля
				Если стррПункты.Свойство(ИмяПункта) Тогда // выбран день в графике
					НовоеЗначение = "X";
					ИтогСтроки = ИтогСтроки + 1;
				КонецЕсли; 
			КонецЕсли; 
			Если ИспользоватьПорядок И ПрежнееЗначение <> "" И НовоеЗначение <> "" Тогда // включен порядок посещений, новое значение должно по возможности не менять порядок
				НовоеЗначение = ПрежнееЗначение;
			КонецЕсли; 
			Область.Текст = НовоеЗначение;
			Если НовоеЗначение <> "" И ПрежнееЗначение = "" Тогда
				ИтогВсего = ИтогВсего + 1;
				мИтогиДней[ИндексДня] = мИтогиДней[ИндексДня] + 1;
				Если ИспользоватьПорядок И мОбновитьДни[ИндексДня] <> Истина Тогда
					мОбновитьДни[ИндексДня] = Истина;
				КонецЕсли;
				БылиИзменения = Истина;
			ИначеЕсли НовоеЗначение = "" И ПрежнееЗначение <> "" Тогда
				ИтогВсего = ИтогВсего - 1;
				мИтогиДней[ИндексДня] = мИтогиДней[ИндексДня] - 1;
				Если ИспользоватьПорядок И мОбновитьДни[ИндексДня] <> Истина Тогда
					мОбновитьДни[ИндексДня] = Истина;
				КонецЕсли;
				БылиИзменения = Истина;
			КонецЕсли; 
		КонецЦикла;
		
		Таб.Область(ЧастьАдреса + Строка(КолонкаПервогоДня_1)).Текст = ИтогСтроки; // обновляем итог строки
		
	КонецЦикла; 
	
	Если БылиИзменения Тогда
		СтррКонтекст.ТДПланПосещенийИзменен = Истина;
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
	// Обновляем итоги дней и общий итог
	ЧастьАдреса = "R" + Строка(СтррКонтекст.ППСтрокаИтогов) + "C";
	Таб.Область(ЧастьАдреса + СтррКонтекст.ППКолонкаИтогов).Текст = Строка(ИтогВсего);
	НомерКолонки = СтррКонтекст.ППКолонкаИтогов; // колонка общего итога идет первой, после нее идут итоги по дням
	Для ИндексДня = 1 По ДнейВПлане Цикл
		Таб.Область(ЧастьАдреса + Строка(КолонкаПервогоДня_1 + ИндексДня)).Текст = мИтогиДней[ИндексДня];
	КонецЦикла; 
	
	Если ИспользоватьПорядок Тогда
		// Перенумеровываем порядки и перекрашиваем колонки для тех дней, где это требуется
		СписокСортировки = Неопределено; // исользуется как внешний объект для ускорения сортировки порядков в процедуре ТДПППеренумероватьПорядокВКолонке()
		Для ИндексДня = 1 По ДнейВПлане Цикл
			Если мОбновитьДни[ИндексДня] = Истина Тогда
				ТДПППеренумероватьПорядокВКолонке("C" + Строка(КолонкаПервогоДня_1 + ИндексДня), СписокСортировки);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дату начала плана посещений для вывода в печатной форме с учетом выбора значения из списка ПериодВыводаПлана.
&НаСервере
Функция ТДПППолучитьДатуНачалаПериода()
	
	Возврат ПППолучитьДатуНачалаТекущегоПериода(ДатаНачала, ПериодГрафикаПлана) + ПериодВыводаПлана * ПериодГрафикаПлана * 86400;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПППолучитьДатуНачалаТекущегоПериода(ДатаНачала, ПериодГрафикаПлана)
	
	ПромДатаНачала = ?(ПериодГрафикаПлана = 7, НачалоНедели(ТекущаяДата()), ДатаНачала);
	РазницаДней = (НачалоДня(ТекущаяДата()) - ПромДатаНачала) / 86400;
	СмещениеОтНачалаПлана = РазницаДней % ПериодГрафикаПлана;
	
	Возврат НачалоДня(ТекущаяДата()) - СмещениеОтНачалаПлана * 86400;

КонецФункции

&НаКлиенте
Процедура СписокПериодовВыводаПланаОбновить()
	
	Если Не Элементы.СоставПланПосещений.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПериодовОтТекущего = 3;
	
	ВсегоПериодов = КоличествоПериодовОтТекущего * 2 + 1;
	мПериоды = Новый Массив(ВсегоПериодов);	
	НомерСреднегоПериода = КоличествоПериодовОтТекущего + 1;
	
	НачалоПериода = ПППолучитьДатуНачалаТекущегоПериода(ДатаНачала, ПериодГрафикаПлана) - ПериодГрафикаПлана * (НомерСреднегоПериода - 1) * 86400;
	Для Индекс = 1 По ВсегоПериодов Цикл
		СтрНачалоПериода = Формат(НачалоПериода, "ДФ=""дд.ММ""");
		СтрКонецПериода = Формат(НачалоПериода + (ПериодГрафикаПлана - 1) * 86400, "ДФ=""дд.ММ""");
		Если Индекс < НомерСреднегоПериода Тогда
			НазваниеПериода = НСтр("ru = 'Предыдущий период'");
		ИначеЕсли Индекс > НомерСреднегоПериода Тогда
			НазваниеПериода = НСтр("ru = 'Следующий период'");
		Иначе
			НазваниеПериода = НСтр("ru = 'Текущий период'");	
		КонецЕсли; 
		Смещение = Индекс - НомерСреднегоПериода;
		Если Смещение > -2 И Смещение < 2 Тогда
			СтрСмещение = "";
		ИначеЕсли Смещение < 0 Тогда
			СтрСмещение = " " + Строка(Смещение+1);
		Иначе
			СтрСмещение = " +" + Строка(Смещение-1);
		КонецЕсли; 
		мПериоды[Индекс-1] = НазваниеПериода + СтрСмещение + " (" + СтрНачалоПериода + " - " + СтрКонецПериода + ")";
		НачалоПериода = НачалоПериода + ПериодГрафикаПлана * 86400;
	КонецЦикла; 
	
	Список = Элементы.ПериодВыводаПлана.СписокВыбора;
	Если Список.Количество() = 0 Тогда
		Для Индекс = 1 По ВсегоПериодов  Цикл
			Список.Добавить(Индекс-НомерСреднегоПериода, мПериоды[Индекс-1]);
		КонецЦикла; 
	Иначе
		Для Индекс = 0 По ВсегоПериодов-1  Цикл
			Список[Индекс].Представление = мПериоды[Индекс];
		КонецЦикла; 			
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ПланПосещений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ОбластиТабличногоДокумента

&НаКлиентеНаСервереБезКонтекста
Процедура ТДПолучитьНомераСтрокиИКолонкиОбласти(Адрес, НомерСтроки, НомерКолонки)
	
	ИндексРазделителя = Найти(Адрес, ":");
	Если ИндексРазделителя = 0 Тогда // передан адрес ячейки
		ТДПолучитьНомераСтрокиИКолонки(Адрес, НомерСтроки, НомерКолонки);
	Иначе // передан адрес области, в переменных возвращаем массивы - первый элемент массива - адрес первого угла области, второй элемент - адрес второго угла области
		НомерСтроки  = Новый Массив(2);
		НомерКолонки = Новый Массив(2);
		ТДПолучитьНомераСтрокиИКолонки(Лев(Адрес, ИндексРазделителя-1),  НомерСтроки[0], НомерКолонки[0]);
		ТДПолучитьНомераСтрокиИКолонки(Сред(Адрес, ИндексРазделителя+1), НомерСтроки[1], НомерКолонки[1]);
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ТДПолучитьНомераСтрокиИКолонки(Адрес, НомерСтроки = Неопределено, НомерКолонки = Неопределено)
	
	// передан адрес ячейки вида: RxCy
	ИндексС = Найти(Адрес, "C");
	НомерСтроки  = Число(Сред(Адрес, 2, ИндексС-2));
	НомерКолонки = Число(Сред(Адрес, ИндексС + 1));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТДПолучитьАдресПоСмещению(Адрес, СмещениеСтроки, СмещениеКолонки)
	
	// передан адрес ячейки вида: RxCy
	ИндексС = Найти(Адрес, "C");
	НомерСтроки  = Число(Сред(Адрес, 2, ИндексС-2));
	НомерКолонки = Число(Сред(Адрес, ИндексС + 1));
	Возврат "R"+Строка(НомерСтроки + СмещениеСтроки) + "C"+Строка(НомерКолонки + СмещениеКолонки) 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ТДПолучитьАдресаСтрокиИКолонки(Адрес, АдресСтроки = Неопределено, АдресКолонки = Неопределено)
	
	// передан адрес ячейки вида: RxCy
	ИндексС = Найти(Адрес, "C");
	АдресСтроки  = Лев(Адрес, ИндексС-1);
	АдресКолонки = Сред(Адрес, ИндексС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТДПолучитьАдресКолонки(Адрес)
	Возврат  Сред(Адрес, Найти(Адрес, "C"));
КонецФункции

// СлужебныеПроцедурыИФункции_ОбластиТабличногоДокумента
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_KT2000_Alcohol_Trade

&НаСервереБезКонтекста
Функция ПолучитьВладельцаСправочника(ОбъектСсылка)
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбъектСсылка.ПолучитьОбъект().Владелец;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКонтрагентов(НачальнаяСтрока = 0)
	
	Если Состав.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Если НачальнаяСтрока = 0 Тогда
		Для каждого СтрокаТ Из Состав Цикл
			СтрокаТ.Контрагент = ПолучитьВладельцаСправочника(СтрокаТ.ПунктРазгрузки);
		КонецЦикла; 
	Иначе
		ПоследняяСтрока = Состав.Количество() - 1;
		Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
			СтрокаТ = Состав[НомерСтроки];
			СтрокаТ.Контрагент = ПолучитьВладельцаСправочника(СтрокаТ.ПунктРазгрузки);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭлементыФормы()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	// Добавляем колонки в таблицу значений 'Состав'
	ИмяРеквизита 		= СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	ТипРеквизита 		= Новый ОписаниеТипов("СправочникСсылка." + СтррКонтекст.СпрТоргТочки.ВидСправочника);
	РодительРеквизита 	= "Состав";
	ЗаголовокРеквизита 	= СтррКонтекст.СпрТоргТочки.Представление;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, РодительРеквизита, ЗаголовокРеквизита));
	// Добавляем колонки в таблицу значений 'ПланПосещений'
	РодительРеквизита 	= "ПланПосещений";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, РодительРеквизита, ЗаголовокРеквизита));
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);	
	
	НоваяКолонка = Элементы.Добавить(СтррКонтекст.СпрТоргТочки.тзИмяЭлемента, Тип("ПолеФормы"), Элементы.СоставГруппаКолонкаТоргТочка); 
	НоваяКолонка.ПутьКДанным = "Состав." + СтррКонтекст.СпрТоргТочки.тзИмяКолонки; 
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	
	КомандаФормы = Команды.Найти("ПоказатьПартнеров");
	КомандаФормы.Заголовок = СтррКонтекст.СпрТоргТочки.Синоним;
	КомандаФормы.Подсказка = "Показать """ + СтррКонтекст.СпрТоргТочки.Синоним + """";
	
	КомандаФормы = Команды.Найти("ПодборПартнеров");
	КомандаФормы.Заголовок = "Из справочника """ + СтррКонтекст.СпрТоргТочки.Синоним + """";
	КомандаФормы.Подсказка = "Подбор из справочника """ + СтррКонтекст.СпрТоргТочки.Синоним + """";
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_KT2000_Alcohol_Trade
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_АдресаДоставки

&НаСервере
Функция АдресаДоставкиПолучитьСписок(Партнер)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ТекОбъект.АдресаДоставкиПолучитьПоПартнеру(гтзАдресаДоставки, Партнер);	
	
КонецФункции


//{{vd_180627 АКФ.
//akf осуществим выборку партнеров и торговых точек по нашему справочнику в разрезе торгового агента

&НаСервере
Функция АКФ_ПодборПоТПНаСервере()
	
	Если ТаблицаАгентов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	//1. Массив Агентов назначенных на этот список ТТ
	мАгенты_ТаблицаАгентов = Новый Массив;
	Для Каждого Элемент Из ТаблицаАгентов Цикл
	 	мАгенты_ТаблицаАгентов.Добавить(Элемент.Агент);
	КонецЦикла;
	
	//2. Массив справочника Торговые точки, которые уже есть в этом списке ТТ Состав
	мСостав = Новый Массив;
	Для Каждого Элемент Из Состав Цикл
		мСостав.Добавить(Элемент.АКФ_СпрТТ);  
	КонецЦикла;
	
	//3. Таблица значений которую нужно добавить в Состав
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	мТорговыеТочки = ТекОбъект.АКФ_ПодобратьТорговыеТочкиПоАгентам(мАгенты_ТаблицаАгентов, мСостав); 
	
	Возврат мТорговыеТочки 
	
КонецФункции

&НаКлиенте
Процедура АКФ_ПодборПоТП(Команда)
	
	мТорговыеТочки = АКФ_ПодборПоТПНаСервере();
	
	Для каждого Элемент Из мТорговыеТочки Цикл
		ЭтаФорма.Элементы.Состав.ДобавитьСтроку();
		НоваяСтрокаСостав = ЭтаФорма.Элементы.Состав.ТекущиеДанные;
		НоваяСтрокаСостав.АКФ_СпрТТ = Элемент;
		СоставПриИзменении(Элементы.Состав);
	КонецЦикла;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_АдресаДоставки
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти

//vd_180627 Добавлена
&НаСервере
Процедура ОбновитьТаблицуАгентовНаСервере()
	
	РеквизитыВосстановления = "НастройкиАгентов";
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(РеквизитыВосстановления);
	
	ТаблицаАгентов.Очистить();	
	
	ВсегоАгентов = 0;
	Для Каждого Элемент Из ТекОбъект.НастройкиАгентов Цикл
		Если Элемент.СсылкаСписокТТ = ID И ЗначениеЗаполнено(ID) Тогда
			НоваяСтрока = ТаблицаАгентов.Добавить();
			НоваяСтрока.Агент = Элемент.Пользователь;
			НоваяСтрока.ФИО = Элемент.Пользователь.ФизическоеЛицо; //vd_181203
			ВсегоАгентов = ВсегоАгентов + 1;
		Конецесли;
	КонецЦикла;
КонецПроцедуры

//vd_180627 Добавлена
&НаКлиенте
Процедура ОбновитьТаблицуАгентов(Команда)
	ОбновитьТаблицуАгентовНаСервере();
КонецПроцедуры





















