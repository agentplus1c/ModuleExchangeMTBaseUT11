
#Область Описание
	
/////////////////////////////////////////////////////////////////////////////
// Описание модуля работы с формой.
// 
// *** Общая информация.
// Форма предназначена для управления списком агентов и их настройками.
// 
// *** Тэги:
// 	#МУ# 			 - функционал работы с мобильными устройствами (МУ)
// 	#СписокВыбораМУ# - ... со списком выбора МУ
// 	#Статус# 		 - ... с колонкой СтатусНастройки
// 	#СТТ# 		 	 - ... со списком торговых точек
// 
// *** Принцип вывода иконки "Статус настроек торгового агента" (первая колонка в таблице "Торговые агенты").
// Если все настройки агента заполнены, выводится "зеленая галочка". Иначе выводится иконка "восклицательный знак".
// Настройки считаются заполненными, если выполнены 3 условия для строки таблицы (см. ОбновитьОписаниеСтатусаНастройкиАгента()):
// 1. Заполнено поле "Пользователь".
// 2. Заполнено поле "НастройкиМобильногоПриложения".
// 3. Заполнено поле "СсылкаМУ" (т.е. выбрано МУ для агента).
// 
// *** Выпадающий список выбора мобильных устройств для элемента формы НастройкиАгентов (колонка "ПредставлениеМУ").
// В настройках агента (каждой строке ТЗ НастройкиАгентов) в колонке СсылкаМУ хранится ссылка на МУ (уникальный идентификатор).
// Но показывать нужно представление МУ в НастройкиАгентов, а также при выборе МУ из выпадающего списка.
// Для этого (см. #Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиАгентов_СписокВыбораМУ):
// 1. Кроме колонки "СсылкаМУ" (не отображается) используется колонка "ПредставлениеМУ".
//    В колонке "СсылкаМУ" всегда хранится ссылка на выбранный МУ.
// 2. В колонке "ПредставлениеМУ" на момент до интерактивного выбора МУ и после выбора МУ хранится представление МУ.
// 3. Перед началом выбора МУ из списка (событие НастройкиАгентовВыбор()):
// 	  3.1 Заполняется СписокВыбора у редактируемой строки ТЗ: 
// 		  - Свойства "Значение" - идентификаторами МУ;
// 		  - Свойства "Представление" - представлениями МУ (процедура ЗаполнитьСписокВыбораМУ()).
// 	  3.2 Чтобы в выпадающем списке выделилось текущее выбранное значение, свойству "ПредставлениеМУ" текущей строки ТЗ
//	      присваивается идентификатор МУ этой же строки: СтрокаТ.ПредставлениеМУ = СтрокаТ.СсылкаМУ (по этой причине реквизит ПредставлениеМУ
// 		  составного типа: "Строка" и "УникальныйИдентификатор").
// 4. В момент выбора значения из списка (событие НастройкиАгентовПредставлениеМУОбработкаВыбора()):
//	  4.1 Отключается стандартная обработка выбора.
//	  4.2 Для корректного отображения выбранного значения в ТЗ:
//	  	  - Отключается стандартная обработка.
//	  	  - Очищается список выбора.
//	  	  - В список выбора добавляется выбранное пользователем значение, но добавляется только в виде представления.
//	  	  - Свойство "ПредставлениеМУ" редактируемой строки получает представление выбранного МУ.
//	  	  - Свойство "СсылкаМУ" редактируемой строки получает ссылку на МУ (внутренний идентификатор выбранного МУ).
//	  	  - Редактирование строки принудительно завершается.
// 5. При отмене выбора значения из списка (вызывается событие НастройкиАгентовПриОкончанииРедактирования()):
// 	  - У редактируемой строки свойство "ПредставлениеМУ" заполняется представлением выбранного МУ
// 	  	(выбранное ранее МУ содержится в свойстве "ВнутреннееЗначение").
// 6. При интерактивной очистке значения поля "ПредставлениеМУ" (событие НастройкиАгентовПредставлениеМУОчистка()):
//	  - Отключается стандартная обработка.
// 	  - У редактируемой строки очищаются свойства "ПредставлениеМУ" и "СсылкаМУ".
// 	  - Редактирование строки принудительно завершается.
// 7. Если список выбора был закрыт сразу без выбора (такое редко случается на уровне платформы, вероятно, при 
//    обновлении других элементов формы в момент открытия списка выбора), то в поле "ПредставлениеМУ" остается значение
//    идентификатора МУ. Чтобы это выявить используется обработка события НастройкиАгентовПриАктивизацииЯчейки():
//    если в текущей строке "ПредставлениеМУ" и "СсылкаМУ" совпадают, то свойство "ПредставлениеМУ" заново 
//    перезаписывается представлением МУ.
// 
/////////////////////////////////////////////////////////////////////////////

// Описание
#КонецОбласти

#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("ПрежниеЗначенияСтроки,АвтоКаталог,КонфигурацияУТ"); // общие значения модуля формы
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.ПрежниеЗначенияСтроки = Новый Структура("Пользователь,КаталогОбмена,ИдентификаторСтроки");
	СтррКонтекст.АвтоКаталог = ТекОбъект.НазваниеАвтоКаталога();
	
	стррВерсияКонфигурации = ТекОбъект.ВерсияКонфигурации();
	
	СтррКонтекст.КонфигурацияУТ = стррВерсияКонфигурации.Конфигурация;
	
	ВосстановитьНастройкиИВыгружаемыеДанные();
	
	// заполняем список для диалога копирования настроек
	КопируемыеНастройкиДляВыбора.Добавить("ОсновныеЗначения",  				"Основные значения", 	Истина);
	КопируемыеНастройкиДляВыбора.Добавить("НастройкиМобильногоПриложения",  "Настройки мобильного приложения", Истина);
	КопируемыеНастройкиДляВыбора.Добавить("ВыгружаемыеОбъекты", 			"Выгружаемые данные", 	Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	Элементы.ГруппаСостояние.ЦветФона 		= СтррКонтекст.Цвета.ФонСостояние;

	//ОбновитьСтатусТорговлиСКолес(); //vd_181217 Убран реквизит торговля с колес
	ОбновитьВсеСтатусы();
	УстановитьМодифицированостьФормы(Ложь);
	
КонецПроцедуры

// #МУ#Статус#СТТ#
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиМобильногоПриложенияИзмененияЗаписаны" Тогда
		
		СохранитьНастройкиМобильногоПриложения(Параметр);
		ОбновитьКолонкуСтатусНастройки();
		ОбновитьТекстСтатуса();
		
		//vd_181217 Отображение мобильного склада у выб агента
		//vd_190114 добавлено условие
		//Было:
		//Элементы.НастройкиАгентовМобильныйСклад.Видимость = 
		//	Элементы.НастройкиАгентов.ТекущиеДанные.НастройкиМобильногоПриложения.ТорговляCКолес.Значение;

		Если Элементы.НастройкиАгентов.ТекущиеДанные = Неопределено Тогда
			Элементы.НастройкиАгентовМобильныйСклад.Видимость = Ложь;
		Иначе
			Элементы.НастройкиАгентовМобильныйСклад.Видимость =
				Элементы.НастройкиАгентов.ТекущиеДанные.НастройкиМобильногоПриложения.ТорговляCКолес.Значение;
		КонецЕсли;
		//vd_181217
		
		УстановитьМодифицированостьФормы(Истина);
		
	ИначеЕсли ИмяСобытия = "АПМобильныеУстройстваИзменениеСпискаМУ" Тогда
		
		Если Параметр = "ИзмененСоставМУ" Тогда // обновляем только список МУ и колонку "МУ"
			ВосстановитьНастройкиСервер("МобильныеУстройства");
			ОбновитьКолонкуМУ();
		ИначеЕсли Параметр = "ИзмененыПривязкиМУкАгентам" Тогда // заново считываем все настройки агентов
			ВосстановитьНастройкиИВыгружаемыеДанные();
			ОбновитьВсеСтатусы();
		Иначе
			ВызватьИсключение("Неизвестный параметр оповещения у события ""АПМобильныеУстройстваИзменениеСпискаМУ"": " + Параметр);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "АППроверкаРедактированияНастроекАгентов" Тогда // запрос на изменение пользователя МУ или на удаление списка ТТ
		// событие отправлено из формы элемента МУ, или формы списка МУ, или формы списка "списков торговых точек"
		ПараметрОтвет = ЭтаФорма.Модифицированность;
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("НастройкиАгентовРедактируются") Тогда // результат нужно вернуть и в значении Параметр по ссылке
			Параметр.НастройкиАгентовРедактируются = ПараметрОтвет;
		КонецЕсли; 
		Оповестить("АПНастройкиАгентовРедактируются", ПараметрОтвет, Источник);
		
	ИначеЕсли ИмяСобытия = "АПСписокТорговыхТочекЗаписан" Тогда
		
		ВосстановитьНастройкиСервер("СпискиТорговыхТочек");
		
	ИначеЕсли ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АПНастройкиПараметровОбменаИзмененияЗаписаны" Тогда // Gri++ 18.07.17 записаны настройки модуля, могла быть изменена настройка ТорговляСКолес
		
		ВосстановитьНастройкиСервер();
		
		//ОбновитьСтатусТорговлиСКолес(); //vd_181217
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПНастройкиАгентов_Оповещение" Тогда
		
		Если Параметр.Свойство("Пользователь") И ЗначениеЗаполнено(Параметр.Пользователь) Тогда
			// нужно выделить форму на заданном пользователе
			мСтроки = Объект.НастройкиАгентов.НайтиСтроки(Новый Структура("Пользователь", Параметр.Пользователь));
			Если мСтроки.Количество() <> 0 Тогда
				Элементы.НастройкиАгентов.ТекущаяСтрока = мСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр.Свойство("Предупреждение") И Параметр.Предупреждение = "ПопыткаВыбораИзПустогоСправочника" Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Справочник агентов сейчас пустой. Добавьте новых агнтов и заполните их настройки.'"));
		ИначеЕсли Параметр.Свойство("Добавить") И Параметр.Добавить = Истина Тогда
			// сразу открываем окно добавления нового пользователя 
			НастройкиАгентовДобавитьНового();
		ИначеЕсли Параметр.Свойство("ВыделитьПервогоАгентаСОшибкой") И Параметр.ВыделитьПервогоАгентаСОшибкой Тогда
			// нужно найти первого агента с ошибкой и сделать эту строку текущей
			ВыделитьПервогоАгентаСОшибкой();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНастроитьМобильноеПриложение(Команда)
	
	Если Элементы.НастройкиАгентов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбран текущий пользователь.'")); 
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТорговыйПредставитель", Элементы.НастройкиАгентов.ТекущиеДанные.Пользователь);
		ПараметрыФормы.Вставить("НастройкиМобильногоПриложения", Элементы.НастройкиАгентов.ТекущиеДанные.НастройкиМобильногоПриложения);
		МодульК().ОткрытьФормуОбработки("НастройкиМобильногоПриложения", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКарточкуПользователя(Команда)
	ТекСтрока = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.Пользователь) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбран агент.'")); 
	Иначе
		ПоказатьЗначение(Неопределено, ТекСтрока.Пользователь);
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиКомандФормы_КопироаниеПрименениеНастроек

&НаКлиенте
Процедура КомандаКопироватьНастройкиПользователя(Команда)
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбран текущий пользователь.'")); 
	Иначе
		Оповещение = Новый ОписаниеОповещения("КопироватьНастройкиПользователяЗавершение", ЭтотОбъект);
		КопируемыеНастройкиДляВыбора.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите копируемые настройки агента'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьНастройкиПользователяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопияНастроек = Новый Структура; // в структуре будут только те свойства, которые соотвествуют копируемым структурам
	Для Каждого ЭлементСписка Из КопируемыеНастройкиДляВыбора Цикл
		Если ЭлементСписка.Пометка Тогда
			Если ЭлементСписка.Значение = "ОсновныеЗначения" Тогда
				Значение = Новый Структура("СсылкаСписокТТ,ОсновнаяОрганизация,ОсновнойСклад,МобильныйСклад,ОсновнойТипЦены,МинимальныйТипЦены"); // gi_180319 - добавлено МинимальныйТипЦены
				ЗаполнитьЗначенияСвойств(Значение, СтрокаТ);
			Иначе
				Значение = СтрокаТ[ЭлементСписка.Значение];
			КонецЕсли;
			КопияНастроек.Вставить(ЭлементСписка.Значение, Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьСообщения();	
	
	Если КопияНастроек.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрано значений для копирования.'"));
	Иначе
		Текст = НСтр("ru = 'Скопрированы настройки в память у пользователя ""%1"". Выберите нужных агентов и выберите пункт в конекстном меню ""Применить скопированные настройки"".'");
		Текст = СтрШаблон_(Текст, СтрокаТ.Пользователь);
		Сообщить(Текст);
	КонецЕсли;
	
	Элементы.НастройкиАгентовПрименитьСкопированныеНастройкиМобильногоПриложенияМеню.Доступность = КопияНастроек.Количество() > 0;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрименитьСкопированныеНастройкиПользователя(Команда)
	
	ПрименитьНастройкиДляВыделенныхАгентов(КопияНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗапомнитьНастройкиПоУмолчанию(Команда)

	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбран текущий пользователь.'")); 
	ИначеЕсли СтрокаТ.НастройкиМобильногоПриложения = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'У текущего пользователя не заполнены настройки мобильного приложения. Заполните настройки и повторите попытку.'")); 
	Иначе
		Текст = НСтр("ru = 'Запомнить настройки текущего пользователя как ""настройки по умолчанию""?'");		
		Оповещение = Новый ОписаниеОповещения("ЗапомнитьНастройкиПоУмолчаниюПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьНастройкиПоУмолчаниюПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
		Если СтрокаТ = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		НастройкиПоУмоланию = Новый Структура; 
		стррЗначение = Новый Структура("СсылкаСписокТТ,ОсновнаяОрганизация,ОсновнойСклад,ОсновнойТипЦены,МинимальныйТипЦены"); // gi_180319 - добавлено МинимальныйТипЦены
		ЗаполнитьЗначенияСвойств(стррЗначение, СтрокаТ);
		НастройкиПоУмоланию.Вставить("ОсновныеЗначения", стррЗначение);
		НастройкиПоУмоланию.Вставить("НастройкиМобильногоПриложения",  СтрокаТ.НастройкиМобильногоПриложения);
		НастройкиПоУмоланию.Вставить("ВыгружаемыеОбъекты", СтрокаТ.ВыгружаемыеОбъекты);
		
		СохранитьНастройкуСервер("НастройкиАгентаПоУмолчанию", НастройкиПоУмоланию);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПрименитьНастройкиПоУмолчанию(Команда)
	
	Если ТипЗнч(НастройкиПоУмоланию) <> Тип("Структура") Тогда
		НастройкиПоУмоланию = ПрочитатьНастройкуСервер("НастройкиАгентаПоУмолчанию");
		Если ТипЗнч(НастройкиПоУмоланию) <> Тип("Структура") Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = '""Настройки по умолчанию"" еще не задавались.'")); 
		КонецЕсли;
	КонецЕсли;
	
	ПрименитьНастройкиДляВыделенныхАгентов(НастройкиПоУмоланию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиДляВыделенныхАгентов(стррНастройки)
	
	Если ТипЗнч(стррНастройки) <> Тип("Структура") Или стррНастройки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мСтроки, Элементы.НастройкиАгентов.ВыделенныеСтроки);
	
	ОбъектТЧ = Объект.НастройкиАгентов;	
	Для Каждого ИдСтроки Из мСтроки Цикл
		СтрокаТ = ОбъектТЧ.НайтиПоИдентификатору(ИдСтроки);
		ПрименитьНастройкиДляСтроки(СтрокаТ, стррНастройки);
	КонецЦикла;
	
	Если мСтроки.Количество() > 1 Тогда
		Текст = НСтр("ru = 'Настройки успешно применены для выбранных пользователей.'");
	Иначе
		Текст = СтрШаблон_(НСтр("ru = 'Настройки успешно применены для выбранного пользователя (%1).'"), СтрокаТ.Пользователь);
	КонецЕсли;
	ОчиститьСообщения();
	Сообщить(Текст);
	
	ОбновитьВыгружаемыеДанныеПоТекущемуАгенту();
	ОбновитьИконкуИТекстСтатуса();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиДляСтроки(СтрокаТ, стррНастройки)
	
	Для Каждого ЭлементСтрр Из стррНастройки Цикл
		Если ЭлементСтрр.Ключ = "ОсновныеЗначения" Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТ, ЭлементСтрр.Значение);
		Иначе
			СтрокаТ[ЭлементСтрр.Ключ] = ЭлементСтрр.Значение; 
		КонецЕсли;
		ОбновитьИконкуСтатуса(СтрокаТ);
	КонецЦикла;

КонецПроцедуры

// ОбработчикиКомандФормы_КопироаниеПрименениеНастроек
#КонецОбласти 

#Область ОбработчикиКомандФормы_СохранениеВХранилище

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)

	УстановитьМодифицированостьФормы(Ложь);
	СохранитьНастройкиВыгружаемыхДанных();
	СохранитьНастройкиКлиент();
	
	Оповестить("АПНастройкиАгентовИзмененияЗаписаны");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаСохранитьВсе(Неопределено);
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиКомандФормы_СохранениеВХранилище
#КонецОбласти 

&НаКлиенте
Процедура ПоказатьМобильныеУстройстваПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		МодульК().КомандаВыполнить("ПоказатьМобильныеУстройства", ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроставитьКаталогОбмена(Команда)
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбран текущий пользователь.'")); 
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТ.СсылкаМУ) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрано мобильное устройство (МУ) для текущего пользователя.'")); 
	Иначе
		СтрокаТ.КаталогОбмена = СтррКонтекст.АвтоКаталог; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиАгентов

&НаКлиенте
Процедура НастройкиАгентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	НастройкиАгентовДобавитьНового();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовДобавитьНового()
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Пользователь = ?(СтрокаТ <> Неопределено, СтрокаТ.Пользователь, ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));

	стррПараметры = Новый Структура;
	стррПараметры.Вставить("РежимВыбора",      		Истина);
	стррПараметры.Вставить("МножественныйВыбор", 	Истина);	
	стррПараметры.Вставить("ВыборГрупп", 			Ложь);
	стррПараметры.Вставить("ЗакрыватьПриВыборе", 	Истина);
	стррПараметры.Вставить("ТекущаяСтрока",    		Пользователь);
	стррПараметры.Вставить("РежимОткрытияОкна", 	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Форма = ПолучитьФорму("Справочник.Пользователи.ФормаВыбора", стррПараметры, Элементы.НастройкиАгентов, ЭтаФорма.УникальныйИдентификатор);
	Форма.Открыть();
	
КонецПроцедуры

// Процедура вызывается после выбора пользователя при попытке добавления новой строки.
// Форма выбора пользователя открывается в режиме множественного выбора, поэтому в параметре ВыбранноеЗначение - всегда массив.
&НаКлиенте
Процедура НастройкиАгентовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбраноНесколько = (ВыбранноеЗначение.Количество() > 1);
	Если ВыбраноНесколько Тогда
		ОчиститьСообщения();		
	КонецЕсли; 

	СтрокаТ = Неопределено;
	стррПоиск = Новый Структура("Пользователь");
	ЕстьИзменения = Ложь;
	
	ТЗ = Объект.НастройкиАгентов;
	Для Каждого Пользователь Из ВыбранноеЗначение Цикл
		стррПоиск.Пользователь = Пользователь;
		мСтроки = ТЗ.НайтиСтроки(СтррПоиск);
		Если мСтроки.Количество() > 0 Тогда
			Текст = СтрШаблон_(НСтр("ru = 'Пользователь ""%1"" уже выбран.'"), Пользователь);
			Если ВыбраноНесколько Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Иначе // выбран один пользователь
				ПоказатьПредупреждение(Неопределено, Текст);
				СтрокаТ = мСтроки[0]; // для выделения строки на форме
			КонецЕсли;
		Иначе
			НастройкиАгентовДобавитьАгента(Пользователь);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Если СтрокаТ <> Неопределено Тогда // значит нужно выделить строку
		Элементы.НастройкиАгентов.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		УстановитьМодифицированостьФормы(Истина);		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПриИзменении(Элемент)

	СтрокаТ = Элемент.ТекущиеДанные;
		
	Если Элемент.ТекущийЭлемент.Имя = "НастройкиАгентовПользователь" Тогда
		
		// Проверяем, не выбрали ли пользователя, который уже есть в таблице
		Если ЗначениеЗаполнено(СтрокаТ.Пользователь) Тогда
			НайдСтроки = Объект.НастройкиАгентов.НайтиСтроки(Новый Структура("Пользователь", СтрокаТ.Пользователь));
			Если НайдСтроки.Количество() > 1 Тогда // т.е. в таблице как минимум есть два таких пользователя 
				// восстанавливаем прежнее значение из настроек МП
				ПрежниеЗначения = СтррКонтекст.ПрежниеЗначенияСтроки;
				Если ПрежниеЗначения.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор() Тогда
					СтрокаТ.Пользователь = ПрежниеЗначения.Пользователь;
				КонецЕсли;
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Данный пользователь уже присутствует в таблице.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.НастройкиАгентов.ЗакончитьРедактированиеСтроки(Ложь); // почему-то в платформе (8.3.8.1784) продолжается редактирование поля (выделен текст поля синим фоном)
		
	КонецЕсли;
	
	ОбновитьИконкуИТекстСтатуса(СтрокаТ);
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПриАктивизацииСтроки(Элемент)

	ОбновитьВыгружаемыеДанныеПоТекущемуАгенту();
	ОбновитьТекстСтатуса();
	
	//vd_181217
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.НастройкиМобильногоПриложения <> Неопределено Тогда
		Элементы.НастройкиАгентовМобильныйСклад.Видимость = Элемент.ТекущиеДанные.НастройкиМобильногоПриложения.ТорговляCКолес.Значение;  //vd_181217
	Иначе
		Элементы.НастройкиАгентовМобильныйСклад.Видимость = Ложь;
	КонецЕсли;
		
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		// Запоминаем некоторые значения текущей строки на случай, если потребуется восстановить прежнее значение в строке
		ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
		СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
		СТТОбновитьВыбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
		Текст = НСтр("ru = 'Удалить выбранных торговых агентов (выбрано: %1) ?'");
		Текст = СтрШаблон_(Текст, Элемент.ВыделенныеСтроки.Количество());
	Иначе
		Текст = НСтр("ru = 'Удалить торгового агента?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НастройкиАгентовПередУдалениемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Массив = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Элементы.НастройкиАгентов.ВыделенныеСтроки);
		
		ТЗ = Объект.НастройкиАгентов;	
		Для Каждого идСтроки Из Массив Цикл
			ТЗ.Удалить(ТЗ.Индекс(ТЗ.НайтиПоИдентификатору(идСтроки)));
		КонецЦикла;
		
		Если ТЗ.Количество() = 0 Тогда
			ОбновитьТекстСтатуса();
		КонецЕсли;
		
		УстановитьМодифицированостьФормы(Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПередНачаломИзменения(Элемент, Отказ)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "НастройкиАгентовПользователь" Тогда 
		// Перед изменением пользователя запоминаем его начальное значение, чтобы после изменения проверить нового пользователя
		// на наличие уже добавленных в таблицу НастройкиАгентов, и отменить изменения, если пользователь уже есть в таблице.
		ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
		СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовКаталогОбменаПриИзменении(Элемент)
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(СокрЛП(СтрокаТ.КаталогОбмена)) = НРег(СтррКонтекст.АвтоКаталог) Тогда
		Возврат; // название каталога будет назначено автоматически
	КонецЕсли;
	
	Каталог = НРег(СтрокаЛатиницей(СтрокаТ.КаталогОбмена));
	
	ИсключаемыеСимволы = " .,;:?!-+\/*=%<>{}@'""|&"; // запрещенные символы в названии файлов
	ВсегоИсключать = СтрДлина(ИсключаемыеСимволы);
		
	Для Поз = 1 По ВсегоИсключать Цикл // цикл исключения запрещенных символов
		ИсключитьСимвол = Сред(ИсключаемыеСимволы, Поз, 1);
		Каталог = СтрЗаменить(Каталог, ИсключитьСимвол, "");
	КонецЦикла;
	
	Если Не ПустаяСтрока(Каталог) Тогда
		
		ПропуститьИдентификатор = СтрокаТ.ПолучитьИдентификатор();
		мСтроки = Объект.НастройкиАгентов.НайтиСтроки(Новый Структура("КаталогОбмена", Каталог));
		НайденнаяСтрока = Неопределено;
		
		Для Каждого СтрокаТЧ Из мСтроки Цикл
			
			Если СтрокаТЧ.ПолучитьИдентификатор() <> ПропуститьИдентификатор Тогда
				НайденнаяСтрока = СтрокаТЧ;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ПрежниеЗначения = СтррКонтекст.ПрежниеЗначенияСтроки;
			Если ПрежниеЗначения.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор() Тогда		
				Каталог = ПрежниеЗначения.КаталогОбмена;
			Иначе
				Каталог = СтррКонтекст.АвтоКаталог;
			КонецЕсли;
			Текст = СтрШаблон_(НСтр("ru = 'Данный каталог уже указан в таблице для агента ""%1"" (строка N %2).'"), 
				НайденнаяСтрока.Пользователь, НайденнаяСтрока.ПолучитьИдентификатор() + 1);
			ПоказатьПредупреждение(Неопределено, Текст);
			
		КонецЕсли;

	КонецЕсли;

	СтрокаТ.КаталогОбмена = Каталог;
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиАгентов_СписокВыбораМУ
// События, используемые для интерактивного выбора МУ из списка.
// #МУ#СписокВыбораМУ#

&НаКлиенте
Процедура НастройкиАгентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если Поле.Имя <> "НастройкиАгентовПредставлениеМУ" Или СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораМУ(Элемент.ТекущийЭлемент.СписокВыбора, СтрокаТ.СсылкаМУ);
	СтрокаТ.ПредставлениеМУ = СтрокаТ.СсылкаМУ; // чтобы в выпадающем списке выделилось текущее значение

КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПредставлениеМУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	ПредставлениеМУ = ПолучитьПредставлениеМУ(ВыбранноеЗначение);
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(ПредставлениеМУ);
	СтрокаТ.ПредставлениеМУ = ПредставлениеМУ;
	СтрокаТ.СсылкаМУ = ВыбранноеЗначение;
	Элементы.НастройкиАгентов.ЗакончитьРедактированиеСтроки(Ложь); 
	ОбновитьИконкуИТекстСтатуса(СтрокаТ);
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Нужно обновить представление выбранного МУ в поле "ПредставлениеМУ", т.к. в случае отмены редактирования 
	// или клике за пределами выпадающего списка в поле "ПредставлениеМУ" показывается идентификатор МУ.
	ПроверитьИОбновитьПредставлениеМУ(Элемент);
	Если Не ОтменаРедактирования Тогда
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПриАктивизацииЯчейки(Элемент)
	
	ПроверитьИОбновитьПредставлениеМУ(Элемент);
	
КонецПроцедуры

// #Статус#
&НаКлиенте
Процедура НастройкиАгентовПредставлениеМУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	СтрокаТ.ПредставлениеМУ = "";
	СтрокаТ.СсылкаМУ = Неопределено;
	Элементы.НастройкиАгентов.ЗакончитьРедактированиеСтроки(Ложь); 
	ОбновитьИконкуИТекстСтатуса(СтрокаТ); 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыНастройкиАгентов_СписокВыбораМУ
#КонецОбласти

// ОбработчикиСобытийЭлементовТаблицыФормыНастройкиАгентов
#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормыОсновныеЗначения
// События, используемые при интерактивном изменении основных значений

&НаКлиенте
Процедура НастройкиАгентовОсновноеЗначениеПриИзменении(Элемент)
	УстановитьМодифицированостьФормы(Истина);
КонецПроцедуры

// #СТТ#
&НаКлиенте
Процедура СписокТорговыхТочекПриИзменении(Элемент)
	
	СТТИзменитьТекущееЗначениеАгента();
	
КонецПроцедуры

// #СТТ#
&НаКлиенте
Процедура СписокТорговыхТочекОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ПустаяСтрока(СписокТорговыхТочек) И СписокТорговыхТочек <> "00000000-0000-0000-0000-000000000000" Тогда
		СтррПараметры = Новый Структура("ID", Новый УникальныйИдентификатор(СписокТорговыхТочек));
		МодульК().ОткрытьФормуОбработки("СписокТорговыхТочек", СтррПараметры, СтррПараметры.ID);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТорговыхТочекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ID = Новый УникальныйИдентификатор(?(ЗначениеЗаполнено(СписокТорговыхТочек), СписокТорговыхТочек, "00000000-0000-0000-0000-000000000000"));
	СтррПараметры  = Новый Структура("ID,ДляВыбора", ID, Истина);
	Если ЭтаФорма.КлючУникальности = Неопределено Тогда
		ЭтаФорма.КлючУникальности = Новый УникальныйИдентификатор;
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("СписокТорговыхТочекВыборЗавершение", ЭтотОбъект, Неопределено);
	МодульК().ОткрытьФормуОбработки("СпискиТорговыхТочек", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТорговыхТочекВыборЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт
	
	Если СтррРезультат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СписокТорговыхТочек = СтррРезультат.ID;
	СТТИзменитьТекущееЗначениеАгента();
	
КонецПроцедуры

&НаКлиенте
Процедура СТТИзменитьТекущееЗначениеАгента()
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		// на форме в выпадающем списке у нас выводятся значения типа "Строка", значение нужно преобразовать в УникальныйИдентификатор
		СтрID = ?(ПустаяСтрока(СписокТорговыхТочек), "00000000-0000-0000-0000-000000000000", СписокТорговыхТочек);
		СтрокаТ.СсылкаСписокТТ = Новый УникальныйИдентификатор(СтрID); 
	КонецЕсли;
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
	//((vd_181217
	//Было:
	//Если Объект.ТорговляСКолес Тогда
	//	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	//	ОбновитьИконкуИТекстСтатуса(СтрокаТ);
	//КонецЕсли;
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	
	Если СтрокаТ.НастройкиМобильногоПриложения.ТорговляCКолес.Значение = Истина Тогда
		ОбновитьИконкуИТекстСтатуса(СтрокаТ);
	КонецЕсли;
		
	//))vd_181217
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормыОсновныеЗначения
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПользовательскиеНастройки

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	СохранитьНастройкиВыгружаемыхДанных();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыПользовательскиеНастройки
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

// Преобразует исходную строку в транслит.
&НаКлиенте
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	
	Результат = "";
	
	Буквы = "аa,бb,вv,гg,дd,еe,ёe,жzh,зz,иi,йy,кk,лl,мm,нn,оo,пp,рr,сs,тt,уu,фf,хkh,цts,чch,шsh,щshch,ъ,ыy,ь,эe,юyu,яya,";
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		Если КодСимвола(Символ) < 128 Тогда
			СимволЛатиницей = Символ;
		Иначе
			ПозНачала = Найти(Буквы, НРег(Символ)); // Поиск соответствия без учета регистра.			
			Если ПозНачала = 0 Тогда
				// Другие символы остаются "как есть".
				СимволЛатиницей = Символ;
			Иначе
				ПозНачала = ПозНачала + 1;
				ПозКонца = ПозНачала;
				Пока Сред(Буквы, ПозКонца, 1) <> "," Цикл
					ПозКонца = ПозКонца + 1;
				КонецЦикла;
				СимволЛатиницей = Сред(Буквы, ПозНачала, ПозКонца - ПозНачала);
				Если Символ = ВРег(Символ) Тогда
					СимволЛатиницей = ВРег(СимволЛатиницей); // восстанавливаем регистр
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 
 
// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВыгружаемыеДанные

&НаСервере
Процедура ЗагрузитьНастройкиВыгружаемыхДанных()

	ТекОбъект = РеквизитФормыВЗначение("Объект");

	ИмяМакета = ?(СтррКонтекст.КонфигурацияУТ = "УТ_GR", "СКДВыгружаемыеДанныеGR", "СКДВыгружаемыеДанные");
	СхемаКомпоновки = ТекОбъект.ПолучитьМакет(ИмяМакета);
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	ЗаполнитьНастройкиКомпоновщика(СхемаКомпоновки, НастройкиКомпоновки);

КонецПроцедуры

// Процедура переносит содержимое компоновщика КомпоновщикНастроекПользовательскиеНастройки
// (на форме раздел "Выгружаемые данные") в текущую строку агента.
&НаКлиенте
Процедура СохранитьНастройкиВыгружаемыхДанных()

	Если Элементы.НастройкиАгентов.ТекущиеДанные <> Неопределено Тогда
		Элементы.НастройкиАгентов.ТекущиеДанные.ВыгружаемыеОбъекты = КомпоновщикНастроек.ПользовательскиеНастройки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиКомпоновщика(СхемаКомпоновки, НастройкиКомпоновки)

	Адрес = Новый УникальныйИдентификатор();
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Адрес);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	ВыгружаемыеДанныеПоУмолчанию = НастройкиКомпоновки;

КонецПроцедуры

&НаКлиенте
Процедура ВыгужаемыеДанныеЗаполнитьЛевыеЗначения()

	КомпоновщикНастроек.ЗагрузитьНастройки(ВыгружаемыеДанныеПоУмолчанию);	
	Отборы = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ОтборыПоУмолчанию = ВыгружаемыеДанныеПоУмолчанию.Отбор.Элементы;
	Для Каждого ЭлементПоУмолчанию Из ОтборыПоУмолчанию Цикл
		ЭлементОтбора = Отборы.Найти(ЭлементПоУмолчанию.ИдентификаторПользовательскойНастройки);
		Если ЭлементОтбора <> Неопределено Тогда
			ЭлементОтбора.ЛевоеЗначение = ЭлементПоУмолчанию.ЛевоеЗначение;
			ЭлементОтбора.ПредставлениеПользовательскойНастройки = ЭлементПоУмолчанию.ПредставлениеПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыгружаемыеДанныеПоТекущемуАгенту(СтрокаТ = Неопределено)

	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновляем на форме выгружаемые данные по агенту
	ВыгужаемыеДанныеЗаполнитьЛевыеЗначения(); // вывели пустые правые значения выгружаемых данных
	НастройкиАгента = СтрокаТ.ВыгружаемыеОбъекты;
	Если НастройкиАгента <> Неопределено Тогда
		// заполняем правые значения выгружаемых данных
		Для Каждого Элемент Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			ЭлементНастройки = НастройкиАгента.Элементы.Найти(Элемент.ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Элемент, ЭлементНастройки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ВыгружаемыеДанные
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Хранилище

&НаСервере
Функция СохранитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ЗаполнитьНазванияКаталоговАгентов();
	ТекОбъект.СохранитьЗначенияНастроекОбработки("НастройкиАгентов");
	
	Возврат ТекОбъект.СОДПопыткаСгенерироватьФайлНастройки();

КонецФункции

// Финальная клиентская функция сохранения настроек агентов.
&НаКлиенте
Процедура СохранитьНастройкиКлиент()
	
	стррФайлСОД = СохранитьНастройкиСервер();
	Если стррФайлСОД.Свойство("Текст") И стррФайлСОД.Свойство("Кодировка") И стррФайлСОД.Свойство("ПолноеИмяФайла") Тогда
		стррФайлСОД.Текст.Записать(стррФайлСОД.ПолноеИмяФайла, стррФайлСОД.Кодировка);
	КонецЕсли;

КонецПроцедуры

// #МУ#СТТ#
&НаСервере
Процедура ВосстановитьНастройкиСервер(РеквизитыВосстановления = "")

	Если РеквизитыВосстановления = "" Тогда
		//vd_181217 РеквизитыВосстановления = "НастройкиАгентов,МобильныеУстройства,СпискиТорговыхТочек,ТорговляСКолес";
		РеквизитыВосстановления = "НастройкиАгентов,МобильныеУстройства,СпискиТорговыхТочек";
	КонецЕсли;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(РеквизитыВосстановления);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Если 0 <> Найти(РеквизитыВосстановления, "СпискиТорговыхТочек") Тогда
		СТТОбновитьСписокВыбора();	
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИВыгружаемыеДанные()
	
	ВосстановитьНастройкиСервер();
	ЗагрузитьНастройкиВыгружаемыхДанных();
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьНастройкуСервер(ИмяНастройки)
	
	Возврат РеквизитФормыВЗначение("Объект").ПрочитатьЗначениеНастройки(ИмяНастройки);

КонецФункции

&НаСервере
Процедура СохранитьНастройкуСервер(ИмяНастройки, Значение)
	
	РеквизитФормыВЗначение("Объект").СохранитьЗначениеНастройки(ИмяНастройки, Значение);

КонецПроцедуры

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныеУстройства
// #МУ#

&НаКлиенте
Процедура СохранитьНастройкиМобильногоПриложения(НастройкиМобильногоПриложения)
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		СтрокаТ.НастройкиМобильногоПриложения = НастройкиМобильногоПриложения;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКолонкуМУ()

	СтррОтбор = Новый Структура("ID");
	тзМУ = Объект.МобильныеУстройства;
	
	Для Каждого СтрокаТ Из Объект.НастройкиАгентов Цикл
		Если ЗначениеЗаполнено(СтрокаТ.СсылкаМУ) Тогда
			СтррОтбор.ID = СтрокаТ.СсылкаМУ;
			МассивМУ = тзМУ.НайтиСтроки(СтррОтбор);
			СтрокаТ.ПредставлениеМУ = ?(МассивМУ.Количество() = 0, "", МассивМУ[0].Наименование);
		Иначе
			СтрокаТ.ПредставлениеМУ = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет список МУ для выбора. Заполняет только свободными МУ (т.е. которые еще не закреплены
// ни за одним из агентов).
// В параметре ОбязательнаяСсылкаМУ передается идентификатор МУ, который нужно обязательно включить
// в список выбора (нужно для показа в списке уже выбранного МУ для текущей строки).
// #СписокВыбораМУ#
&НаКлиенте
Процедура ЗаполнитьСписокВыбораМУ(Список, ОбязательнаяСсылкаМУ)
	
	//Сначала получаем массив занятых идентификаторов МУ
	мИдентификаторы = Новый Массив;
	Для Каждого СтрокаТ Из Объект.НастройкиАгентов Цикл
		Если ЗначениеЗаполнено(СтрокаТ.СсылкаМУ) И СтрокаТ.СсылкаМУ <> ОбязательнаяСсылкаМУ Тогда
			мИдентификаторы.Добавить(СтрокаТ.СсылкаМУ);
		КонецЕсли;
	КонецЦикла;
	
	Список.Очистить();
	Для Каждого ЭлементМУ Из Объект.МобильныеУстройства Цикл
		Если мИдентификаторы.Найти(ЭлементМУ.ID) = Неопределено Тогда
			Список.Добавить(ЭлементМУ.ID, ЭлементМУ.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Если Список.Количество() = 0 Тогда
		
		Текст     = НСтр("ru = 'Нет свободных МУ'");
		Пояснение = НСтр("ru = 'Добавьте новое мобильное устройство (МУ).'");
		Ссылка = "";
		ПоказатьОповещениеПользователя(Текст, Ссылка, Пояснение, БиблиотекаКартинок.Информация32);
	
		Текст = НСтр("ru = 'Нет свободных мобильных устройств. Добавить новое мобильное устройство?'");
		Оповещение = Новый ОписаниеОповещения("ПоказатьМобильныеУстройстваПродолжить", ЭтотОбъект, "ПриВыбореМУ");
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеМУ(СсылкаМУ)
	
	Результат = "";
	
	Если ЗначениеЗаполнено(СсылкаМУ) Тогда
		МассивМУ = Объект.МобильныеУстройства.НайтиСтроки(Новый Структура("ID", СсылкаМУ));
		Если МассивМУ.Количество() > 0 Тогда
			Результат = МассивМУ[0].Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПроверитьИОбновитьПредставлениеМУ(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "НастройкиАгентовПредставлениеМУ" Тогда
		СтрокаТ = Элемент.ТекущиеДанные;
		Если СтрокаТ <> Неопределено И СтрокаТ.ПредставлениеМУ = СтрокаТ.СсылкаМУ Тогда
			СтрокаТ.ПредставлениеМУ = ПолучитьПредставлениеМУ(СтрокаТ.СсылкаМУ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_МобильныеУстройства
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СпискиТорговыхТочек
// #СТТ#

&НаСервере
Процедура СТТОбновитьСписокВыбора()

	Список = Элементы.СписокТорговыхТочек.СписокВыбора;
	Список.Очистить();

	тзСТТ = Объект.СпискиТорговыхТочек;
	
	Для Каждого СтрокаТ Из тзСТТ Цикл
		Если ЗначениеЗаполнено(СтрокаТ.ID) Тогда
			// вынуждены УникальныйИдентификатор преобразовывать в строку, иначе на форме в списке не показывается выбранное значение
			Список.Добавить(Строка(СтрокаТ.ID), СтрокаТ.Наименование); 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СТТОбновитьВыбор()

	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	СписокТорговыхТочек = ?(СтрокаТ <> Неопределено, Строка(СтрокаТ.СсылкаСписокТТ), "");

КонецПроцедуры

// СлужебныеПроцедурыИФункции_СпискиТорговыхТочек
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Статусы
// #Статус#

&НаКлиенте
Процедура ОбновитьКолонкуСтатусНастройки()

	Для Каждого СтрокаТ Из Объект.НастройкиАгентов Цикл
		ОбновитьИконкуСтатуса(СтрокаТ);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьИконкуИТекстСтатуса(СтрокаТ = Неопределено)
	
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	КонецЕсли;
	
	ОбновитьИконкуСтатуса(СтрокаТ);
	ОбновитьТекстСтатуса(СтрокаТ);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьИконкуСтатуса(СтрокаТ, ЕстьИзменения = Неопределено)

	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеДоИзменения = СтрокаТ.СтатусНастроек;
	
	Если Не ЗначениеЗаполнено(СтрокаТ.Пользователь) Тогда
		СтрокаТ.СтатусНастроек = 2; // Восклицательный знак
	ИначеЕсли Не СтрокаТ.Работает Тогда
		СтрокаТ.СтатусНастроек = 3; // Серая галка
	ИначеЕсли СтрокаТ.НастройкиМобильногоПриложения = Неопределено Или Не ЗначениеЗаполнено(СтрокаТ.СсылкаМУ) Тогда
		СтрокаТ.СтатусНастроек = 2; // Восклицательный знак
	//vd_181217 ИначеЕсли Объект.ТорговляСКолес И (Не ЗначениеЗаполнено(СтрокаТ.МобильныйСклад) Или СтрокаТ.МобильныйСклад = СтрокаТ.ОсновнойСклад) Тогда	
	ИначеЕсли СтрокаТ.НастройкиМобильногоПриложения.ТорговляCКолес.Значение И (Не ЗначениеЗаполнено(СтрокаТ.МобильныйСклад) Или СтрокаТ.МобильныйСклад = СтрокаТ.ОсновнойСклад) Тогда
		СтрокаТ.СтатусНастроек = 2; // Восклицательный знак
	Иначе
		СтрокаТ.СтатусНастроек = 1; // Зеленая галка
	КонецЕсли;
	
	Если ЗначениеДоИзменения <> СтрокаТ.СтатусНастроек Тогда
	    ЕстьИзменения = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обновляет текст статуса в нижней части экрана и итог количества строк в таблице
&НаКлиенте
Процедура ОбновитьТекстСтатуса(СтрокаТ = Неопределено)
	
	Статус = "";
	
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТ <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТ.Пользователь) Тогда
			
			Статус = Статус + НСтр("ru = 'Пользователь не заполнен.'") + " ";
			
		ИначеЕсли Не СтрокаТ.Работает Тогда
			
			Статус = Статус + НСтр("ru = 'Агент не работает (больничный, отпуск).'") + " ";
			
		Иначе
			
			Если СтрокаТ.НастройкиМобильногоПриложения = Неопределено Тогда
				Статус = Статус + НСтр("ru = 'Мобильное приложение не настроено.'") + " ";
			КонецЕсли;
		
			Если Не ЗначениеЗаполнено(СтрокаТ.СсылкаМУ) Тогда
				Статус = Статус + НСтр("ru = 'Мобильное устройство не выбрано.'") + " ";
			КонецЕсли;

			//vd_181217 Если Объект.ТорговляСКолес Тогда
			Если СтрокаТ.НастройкиМобильногоПриложения <> Неопределено И СтрокаТ.НастройкиМобильногоПриложения.ТорговляCКолес.Значение Тогда  
				Если Не ЗначениеЗаполнено(СтрокаТ.МобильныйСклад) Тогда
					Статус = Статус + НСтр("ru = 'Не заполнен мобильный склад.'") + " ";
				ИначеЕсли СтрокаТ.МобильныйСклад = СтрокаТ.ОсновнойСклад Тогда 
					Статус = Статус + НСтр("ru = 'Значения ""Мобильный склад"" и ""Основной склад"" не должны совпадать, укажите другое значение.'") + " ";
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		// СД_290617
		// С очисткой реквизитов МобильныйСклад или ОсновнойСклад существует проблема из-за срабатывания обработчика НастройкиАгентовПриАктивизацииСтроки, в котором
		// повторно вызывается ОбновитьТекстСтатуса и соответственно очищается статус, проверка на сравнение складов не осуществляется и выводится сообщение, что настройки агента заданы.
		// поэтому оставил пока как есть, т.к. нужно обсудить как лучше это реализовать.
		Если Статус = "" Тогда
			Статус = НСтр("ru = 'Настройки агента заданы.'");
		КонецЕсли;
		
		Если СтрокаТ.НастройкиМобильногоПриложения = Неопределено Тогда
			КартинкаКнопки = Элементы.ДекорацияКартинкаВнимание.Картинка;
		Иначе
			КартинкаКнопки = ПустаяКартинка;
		КонецЕсли; 
		Если Элементы.НастройкиАгентовНастроитьМобильноеПриложение.Картинка <> КартинкаКнопки Тогда
			Элементы.НастройкиАгентовНастроитьМобильноеПриложение.Картинка = КартинкаКнопки;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияСтатус.Заголовок = Статус;
	
	Если ВсегоСтрок <> Объект.НастройкиАгентов.Количество() Тогда // для вывода количества строк в подвале
		ВсегоСтрок = Объект.НастройкиАгентов.Количество();
		Элементы.НастройкиАгентовПользователь.ТекстПодвала = ?(ВсегоСтрок = 0, "", НСтр("ru = 'Всего: '") + Строка(ВсегоСтрок));
	КонецЕсли;
	
	// боремся с отображением "всех иконок" в Платформе - когда в НастройкиАгентов нет строк - убираем видимость иконки статуса
	Если Элементы.НастройкиАгентовСтатусНастроекИконка.Видимость <> (ВсегоСтрок > 0) Тогда
		Элементы.НастройкиАгентовСтатусНастроекИконка.Видимость = (ВсегоСтрок > 0);
	КонецЕсли;
	
КонецПроцедуры

// #МУ#
&НаКлиенте
Процедура ОбновитьВсеСтатусы()
	
	ОбновитьКолонкуСтатусНастройки();
	ОбновитьКолонкуМУ();
	ОбновитьИконкуИТекстСтатуса();	
	
КонецПроцедуры

//vd_181217 Не используем
//&НаКлиенте
//Процедура ОбновитьСтатусТорговлиСКолес()
//	
//	Элементы.НастройкиАгентовМобильныйСклад.Видимость = Объект.ТорговляСКолес;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПервогоАгентаСОшибкой()
	
	Для каждого СтрокаТ Из Объект.НастройкиАгентов Цикл
		Если СтрокаТ.СтатусНастроек = 2 Тогда // Восклицательный знак
			Элементы.НастройкиАгентов.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли; 
	КонецЦикла;  
	
КонецПроцедуры

// Процедура обновляет значения статуса настройки по всем торговым агентам.
&НаКлиенте
Процедура ВнешнийВызовОбновитьСтатусыНастройки() Экспорт
	
	ВосстановитьНастройкиИВыгружаемыеДанные();
	
	ЕстьИзмененияСтатуса = Ложь;
	Для Каждого СтрокаТ Из Объект.НастройкиАгентов Цикл
		ОбновитьИконкуСтатуса(СтрокаТ, ЕстьИзмененияСтатуса);
	КонецЦикла;
	
	Если ЕстьИзмененияСтатуса Тогда
		СохранитьНастройкиКлиент();
		Оповестить("АПНастройкиАгентовИзмененияЗаписаны");
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Статусы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВнешнееСозданиеАгентов

//	Функция создает новых агентов из пользователей, указанных в структуре.
//	
//	Параметры:
//		стррПараметры - Структура - структура со свойствами:
//			* СвязиМУиПользователей - структура со свойствами:
//  			 * ПользователиНеВАгентах 	 - массив структур ("СсылкаМУ,Пользователь") - пользователи, которых нет среди агентов, но проставленные для МУ;
//				 * ОтсутствующиеПользователи - массив структур ("СсылкаМУ,ИмяПользователя") - имена пользователей, которых нужно добавить в справочник "Пользователи".
//			* БыстраяНастройка - Булево - если значение Истина, то выполняется неинтерактивно;
//			* Сообщения - массив текстовых сообщений для неинтерактивного вывода.
&НаКлиенте
Процедура ВнешнийВызовСоздатьАгентов(стррПараметры) Экспорт
	
	стррСвязи = стррПараметры.СвязиМУиПользователей;
	// цикл создания новых пользователей и перенесения их в агенты
	Если стррСвязи.ОтсутствующиеПользователи.Количество() <> 0 
			И СоздатьНовыхПользователей(стррСвязи.ОтсутствующиеПользователи) Тогда // создаем новых пользователей
		Для каждого стррЭлемент Из стррСвязи.ОтсутствующиеПользователи Цикл
			НастройкиАгентовДобавитьАгента(стррЭлемент.Пользователь);
			// Не выполняем операцию: СтрокаТ.СсылкаМУ = стррЭлемент.СсылкаМУ, т.к. эту операцию выполнит позже модуль 
			// МобильныеУстройства - после интерактивного подтверждения пользователем записи новых МУ, загруженных из ЛК.
		КонецЦикла;
	КонецЕсли; 
	
	// цикл перенесения существующих пользователей в агенты
	Для каждого стррЭлемент Из стррСвязи.ПользователиНеВАгентах Цикл
		НастройкиАгентовДобавитьАгента(стррЭлемент.Пользователь);
		// Не выполняем операцию: СтрокаТ.СсылкаМУ = стррЭлемент.СсылкаМУ, т.к. эту операцию выполнит позже модуль 
		// МобильныеУстройства - после интерактивного подтверждения пользователем записи новых МУ, загруженных из ЛК.
	КонецЦикла; 
	
	СохранитьНастройкиКлиент();
	
	Оповестить("АПНастройкиАгентовИзмененияЗаписаны", стррПараметры, "ВнешнееСозданиеАгентов");	
	
	Если ЭтаФорма.Открыта() Тогда // если форма настроек агентов была открыта, то нужно отобразить на форме новых агентов
		ВосстановитьНастройкиСервер();
		ОбновитьВсеСтатусы();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовДобавитьАгента(Пользователь) 
	
	СтрокаТ = Объект.НастройкиАгентов.Добавить();
	СтрокаТ.Пользователь  = Пользователь;
	СтрокаТ.Работает 	  = Истина;
	СтрокаТ.КаталогОбмена = СтррКонтекст.АвтоКаталог;
	ОбновитьИконкуСтатуса(СтрокаТ);
	
КонецПроцедуры

// Функция создает новых пользователей Учетной системы. Созданные пользователи закрепляются за группой 
// пользователей, возвращенную процедурой Объект.ПолучитьГруппуПользователейТорговыеАгенты().
// Ванимание! Процедура модифицирует элементы массива мИменаПользователей - добавляет свойство "Пользователь" и указывает
// в нем ссылку на созданного пользователя.
//	Если операция завершена успешно, возвращает Истина.
&НаСервере
Функция СоздатьНовыхПользователей(мИменаПользователей)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		
		ГруппаПользователей = ТекОбъект.ПолучитьГруппуПользователейТорговыеАгенты();
		ГруппаОбъект = ГруппаПользователей.ПолучитьОбъект();
		
		Для каждого стррЭлемент Из мИменаПользователей Цикл
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = стррЭлемент.ИмяПользователя;
			НовыйПользователь.Записать();
			ГруппаОбъект.Состав.Добавить().Пользователь = НовыйПользователь.Ссылка;
			стррЭлемент.Вставить("Пользователь", НовыйПользователь.Ссылка);
		КонецЦикла;
		
		ГруппаОбъект.Записать();
		Возврат Истина;
		
	Исключение
		
		Сообщить("Ошибка создания новых пользователей! Причина: " + ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки; 
	
КонецФункции

// СлужебныеПроцедурыИФункции_ВнешнееСозданиеАгентов
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_НастройкиПоУмолчанию

&НаКлиенте
Функция ПолучитьИлиИнициализироватьНастройкуПоУмолчанию()
	
	Если ТипЗнч(НастройкиПоУмоланию) <> Тип("Структура") Тогда
		стррНастройки = ПрочитатьНастройкуСервер("НастройкиАгентаПоУмолчанию");
	Иначе
		стррНастройки = НастройкиПоУмоланию;
	КонецЕсли;
	
	Если ТипЗнч(стррНастройки) <> Тип("Структура") Тогда // настройка "по умолчанию" еще ни разу не сохранялась
		Модуль = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "НастройкиМобильногоПриложения", 
			Новый Структура("ПоУмолчанию", Истина), ЭтаФорма, "АПВнешнийВызов");
		стррНастройкиМобильногоПриложения = Модуль.ВнешнийВызовСоздатьНастройкиПоУмолчанию();
		стррОсновныеЗначения = Новый Структура("СсылкаСписокТТ,ОсновнаяОрганизация,ОсновнойСклад,ОсновнойТипЦены,МинимальныйТипЦены"); // gi_180319 - добавлено МинимальныйТипЦены
		
		стррНастройки = Новый Структура;
		стррНастройки.Вставить("ОсновныеЗначения", стррОсновныеЗначения);
		стррНастройки.Вставить("НастройкиМобильногоПриложения",  стррНастройкиМобильногоПриложения);
		ВыгужаемыеДанныеЗаполнитьЛевыеЗначения();		
		стррНастройки.Вставить("ВыгружаемыеОбъекты", КомпоновщикНастроек.ПользовательскиеНастройки); // Неопределено

	КонецЕсли; 
	
	Возврат стррНастройки;
	
КонецФункции

&НаКлиенте
Процедура ВнешнийВызовПроставитьНастройки() Экспорт
	
	стррНатсройки = ПолучитьИлиИнициализироватьНастройкуПоУмолчанию();
	
	ВосстановитьНастройкиИВыгружаемыеДанные();
	
	Для Каждого СтрокаТ Из Объект.НастройкиАгентов Цикл
		Если СтрокаТ.СтатусНастроек <> 2 Тогда 
			Продолжить; // ищем статус "Восклицательный знак"
		ИначеЕсли СтрокаТ.НастройкиМобильногоПриложения <> Неопределено Тогда
			Продолжить; // ищем только тех агентов, у кого не заданы настройки мобильного приложения - это признак, что настройки для
						// агента еще не задавались.
		КонецЕсли;
		ПрименитьНастройкиДляСтроки(СтрокаТ, стррНатсройки);
	КонецЦикла;
	
	СохранитьНастройкиКлиент();
	Оповестить("АПНастройкиАгентовИзмененияЗаписаны");
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_НастройкиПоУмолчанию
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти