&НаКлиенте
Перем МодульМТ;  // Общий клиентский модуль со спецификой мобильной торговли

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");			
	
	СтррКонтекст = Новый Структура; // общие значения модуля формы
	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ID");	
	ТекОбъект.ВОКонтекстФормыДополнить(СтррКонтекст, "_Фотографии", Ложь);
	ПрочестьОбъектИзХранилища(Параметры.ID);
	
	ТекОбъект.ВОПриСозданииФормыЭлемента(ЭтотОбъект);
	
	ВладелецФайла = Параметры.УИДВладельца;
	
	Настройки = ТекОбъект.ПрочитатьЗначенияНастроек("КаталогДанных");

	ПодкаталогФотграфий = ТекОбъект.ПодкаталогДанных("Фотографии",Настройки.КаталогДанных);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МодульМТ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщийМТ", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийМТ"); // в СтррКонтекст есть заполненное свойство "ВХОбщиеПараметры"
	МодульМТ.ВОПриОткрытии(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ХранимыйФайл) Тогда
		
		Файл = Новый файл(ПодкаталогФотграфий + ХранимыйФайл);
		
		Если Файл.Существует() Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТолькоПоместить",Истина);
			
			Оповещение  =  Новый ОписаниеОповещения("ОбработатьВыборФайла",   ЭтотОбъект, ДополнительныеПараметры);
			НачатьПомещениеФайла(Оповещение,,Файл.ПолноеИмя, Ложь, ЭтаФорма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;	
	 	
	ФормаОбновитьЗаголовок();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Сохранить(Команда)
	
	ТекстОшибки = "";
	ОчиститьСообщения();
	
	Наименование = СокрЛП(Наименование); // для исключения совпадений наименований без крайних пробелов
	
	Если ПустаяСтрока(Наименование) Тогда
		ТекстОшибки = НСтр("ru = 'Заполните наименование.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Наименование");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда // ошибок нет, можем записать элемент
		
		Если Не ЗначениеЗаполнено(ID) Тогда // значит добавляем новый МУ
			ID = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		СохранитьОбъектВХранилищеКлиент();
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаФайла) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСохраненияФайлов", ЭтаФорма);
		
		Файл = Новый ОписаниеПередаваемогоФайла(ИмяФайла + Расширение, АдресХранилищаФайла);
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Файл);
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогОткрытияФайла.Фильтр = ФильтрДляКартинок();
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		
		НачатьПолучениеФайлов(ОписаниеОповещения,ПолучаемыеФайлы, ДиалогОткрытияФайла, Истина);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульМТ.КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыЭлементовФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ФотоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение  =  Новый ОписаниеОповещения("ОбработатьВыборФайла",   ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр  = ФильтрДляКартинок();
	
	Если ДиалогВыбора.Выбрать() Тогда

		Модифицированность = Истина;
		НачатьПомещениеФайла(Оповещение,,ДиалогВыбора.ПолноеИмяФайла,Ложь, ЭтаФорма.УникальныйИдентификатор);
	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьОбъектВХранилище()

	Статус = 3;
	стрРеквизитыШапки = "Статус,Наименование,ВладелецФайла,ДатаМодификацииУниверсальная,ДатаСоздания,ИмяФайла,Размер,Расширение,Описание,ХранимыйФайл";
	
	ОбъектКакОбъект = РеквизитФормыВЗначение("Объект");
	//Настройки = ОбъектКакОбъект.ПрочитатьЗначенияНастроек("КаталогДанных");

	//КаталогФотографий = ОбъектКакОбъект.ПодкаталогДанных("Фотографии",Настройки.КаталогДанных);	
	
	IDБезПробелов = СтрЗаменить(ID, "-","_");
	ПутьКФайлу = ПодкаталогФотграфий + IDБезПробелов + Расширение;
	
	Если ЗначениеЗаполнено(АдресХранилищаФайла) Тогда
		
		ДД = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);
		ДД.Записать(ПутьКФайлу); 
		
	КонецЕсли;	
	
	ХранимыйФайл = IDБезПробелов + Расширение;
	
	стррОбъект = Новый Структура(стрРеквизитыШапки); // сохраняемые реквизиты объекта
	ЗаполнитьЗначенияСвойств(СтррОбъект, ЭтаФорма);
	  
	
	ОбъектКакОбъект.ВОЭлементСохранить(СтррКонтекст.ВО, ID, стррОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбъектВХранилищеКлиент()
	
	МодульМТ.ВОПередЗаписьюЭлемента(ЭтотОбъект);
	
	СохранитьОбъектВХранилище();
	ЭтаФорма.Модифицированность = Ложь;
	Оповестить("АПЭлементСправочникаЗаписан_" + СтррКонтекст.ВО.ВидОбъекта, ID);
	
КонецПроцедуры

&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ID = КлючID;
	стррОбъект = ТекОбъект.ВОЭлементЗагрузить(СтррКонтекст.ВО, ID);
	
	Если стррОбъект = Неопределено Тогда // создание нового документа, заполняем документ значениями по умолчанию

	Иначе
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, стррОбъект);
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Сохранить(Неопределено);
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		
		Если Файл.Существует() Тогда
			
			Если ДополнительныеПараметры = Неопределено Тогда
				ИмяФайла = Файл.ИмяБезРасширения;
				Если Наименование = "" Тогда
					Наименование = Файл.Имя;
				КонецЕсли;
				Если Описание = "" Тогда
					Описание = ВыбранноеИмяФайла;
				КонецЕсли;
				Размер = Файл.Размер();
				Расширение = Файл.Расширение;
				ДатаСоздания = ТекущаяДата();
				ДатаМодификацииУниверсальная = Файл.ПолучитьВремяИзменения();
			КонецЕсли;
			
			АдресХранилищаФайла = Адрес;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


//&НаСервере
//// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
////
//// Параметры:
////  ВладелецФайлов                 - Ссылка - объект, к которому добавляется файл.
////  ИмяБезРасширения               - Строка - имя файла без расширения.
////  РасширениеБезТочки             - Строка - расширение файла (без точки вначале).
////  ВремяИзменения                 - Дата   - (не используется) дата и время изменения файла (местное время).
////  ВремяИзмененияУниверсальное    - Дата   - дата и время изменения файла (UTC+0:00),
////                                            если не указана, тогда используется ТекущаяУниверсальнаяДата().
////  АдресФайлаВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище.
////  АдресВременногоХранилищаТекста - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
////  Описание                       - Строка - текстовое описание файла.
////
////  НоваяСсылкаНаФайл              - Неопределено - создать новую ссылку на файл в стандартном справочнике
////                                   или в нестандартном, но единственном справочнике. Когда у владельца файла несколько
////                                   справочников, требуется обязательно передать ссылку, иначе будет вызвано
////                                   исключение.
////                                 - Ссылка - ссылка на элемент справочника хранения файлов,
////                                   которую следует использовать для добавляемого файла.
////                                   Должна соответствовать одному из типов справочников хранения файлов владельца
////                                   файлов.
////
//// Возвращаемое значение:
////  СправочникСсылка - ссылка на созданный присоединенный файл.
////
//Функция ДобавитьФайл(Знач ИмяБезРасширения,
//                     Знач РасширениеБезТочки = Неопределено,
//                     Знач ВремяИзменения = Неопределено,
//                     Знач ВремяИзмененияУниверсальное = Неопределено,
//                     Знач АдресФайлаВоВременномХранилище,
//                     Знач АдресВременногоХранилищаТекста = "",
//                     Знач Описание = "",
//                     Знач НоваяСсылкаНаФайл = Неопределено) Экспорт
//	
//	// Если расширение не задано явно, выделяем его из имени файла.
//	Если РасширениеБезТочки = Неопределено Тогда
//		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
//		Если ЧастиИмениФайла.Количество() > 1 Тогда
//			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
//			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
//		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
//		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
//	КонецЕсли;
//	
//	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
//	
//	ПрисоединенныйФайл = Новый Структура;	
//	
//	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайла;
//	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
//	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
//	ПрисоединенныйФайл.Описание                     = Описание;
//	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
//	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
//	ПрисоединенныйФайл.ТипХраненияФайла             = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
//	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
//	
//	СвояТранзакцияОткрыта = Ложь;
//	
//	Попытка
//			// Добавление в один из томов (где есть свободное место).
//			//СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,
//			//	ИмяБезРасширения, РасширениеБезТочки, , ПрисоединенныйФайл.Зашифрован);
//			//ПрисоединенныйФайл.Том = СведенияОФайле.Том;
//			//ПрисоединенныйФайл.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
//		
//		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
//		ИзвлеченныйТекст = "";
//		
//		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
//			ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
//			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
//			
//		ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
//			// Тексты извлекаются сразу, а не в фоновом задании.
//			СтатусИзвлеченияТекста = ПрисоединенныеФайлыСлужебный.ИзвлечьТекст(
//				ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
//		КонецЕсли;
//		
//		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
//		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
//		ПрисоединенныйФайл.Заполнить(Неопределено);
//		ПрисоединенныйФайл.Записать();
//		
//		Если СвояТранзакцияОткрыта Тогда
//			ЗафиксироватьТранзакцию();
//		КонецЕсли;
//	
//	Исключение
//		ИнформацияОбОшибке = ИнформацияОбОшибке();
//		
//		Если СвояТранзакцияОткрыта Тогда
//			ОтменитьТранзакцию();
//		КонецЕсли;
//		
//		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
//		                             |%2'");
//		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			ШаблонСообщения,
//			ИмяБезРасширения + "." + РасширениеБезТочки,
//			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
//		
//		ЗаписьЖурналаРегистрации(
//			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
//			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
//			УровеньЖурналаРегистрации.Ошибка,
//			,
//			,
//			КомментарийЖурналаРегистрации);
//		
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			ШаблонСообщения,
//			ИмяБезРасширения + "." + РасширениеБезТочки,
//			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
//	КонецПопытки;
//	
//	Возврат ПрисоединенныйФайл.Ссылка;
//	
//КонецФункции

// Помещает файл с диска в хранилище присоединенных файлов (веб-клиент).
// 
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ПрисоединенныйФайл      - Ссылка, Неопределено - ссылка на добавленный файл, либо
//                                                       Неопределено, если файл не был помещен;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                                                      объекта оповещения.
//  ВладелецФайла           - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами - Структура.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
&НаКлиенте
Процедура ПоместитьВыбранныеФайлыВХранилищеВеб(ОбработчикРезультата, Знач ВладелецФайла, Знач ИдентификаторФормы)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьВыбранныеФайлыВХранилищеВебЗавершение", ЭтотОбъект, Параметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, ИдентификаторФормы);
	
КонецПроцедуры

//&НаКлиенте
//Процедура ОбновитьСостояниеОСохраненииФайлов(Знач ВыбранныеФайлы,
//											 Знач Файл,
//											 Знач ТекущаяПозиция = Неопределено,
//											 ИмяСоздаваемогоФайла = "");
//	
//	Если Файл = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СохраняемоеИмяФайла = ?(ПустаяСтрока(ИмяСоздаваемогоФайла), Файл.Имя, ИмяСоздаваемогоФайла);
//	
//	РазмерВМб = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(Файл.Размер() / (1024 * 1024));
//	
//	Если ВыбранныеФайлы.Количество() > 1 Тогда
//		
//		Если ТекущаяПозиция = Неопределено Тогда
//			Состояние(НСтр("ru = 'Сохранение файлов завершено.'"));
//		Иначе
//			ИндикаторПроцент = ТекущаяПозиция * 100 / ВыбранныеФайлы.Количество();
//			
//			НадписьПодробнее = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб) ...'"), СохраняемоеИмяФайла, РазмерВМб);
//				
//			ТекстСостояния = НСтр("ru = 'Сохранение нескольких файлов.'");
//			
//			Состояние(ТекстСостояния, ИндикаторПроцент, НадписьПодробнее, БиблиотекаКартинок.Информация32);
//		КонецЕсли;
//	Иначе
//		Если ТекущаяПозиция = Неопределено Тогда
//			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Сохранение файла ""%1"" (%2 Мб)
//				           |завершено.'"), СохраняемоеИмяФайла, РазмерВМб);
//		Иначе
//			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб).
//				           |Пожалуйста, подождите...'"), СохраняемоеИмяФайла, РазмерВМб);
//		КонецЕсли;
//		ПоказатьОповещениеПользователя(ТекстПояснения);
//	КонецЕсли;
//	
//КонецПроцедуры


&НаКлиенте
Функция ФильтрДляКартинок()
	
	Возврат "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	+ "Формат TIFF (*.tif)|*.tif|"
	+ "Формат GIF (*.gif)|*.gif|"
	+ "Формат PNG (*.png)|*.png|"
	+ "Формат icon (*.ico)|*.ico|"
	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";
	
КонецФункции

&НаКлиенте
Процедура ОбработкаСохраненияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт 

	//Для Каждого ПолученныйФайл Из ПолученныеФайлы Цикл
	//	
	//КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ФормаОбновитьЗаголовок()
		
	ЭтаФорма.Заголовок = НСтр("ru = 'Прикрепленная фотография'");	
	
КонецПроцедуры

#КонецОбласти