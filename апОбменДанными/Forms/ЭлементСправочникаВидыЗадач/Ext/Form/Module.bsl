#Область ГлобальныеПеременные

&НаКлиенте
Перем МодульМТ;  // Общий клиентский модуль со спецификой мобильной торговли

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ID");
	ТекОбъект.ВОКонтекстФормыДополнить(СтррКонтекст, "_ВидыЗадач", Ложь);	
	ПрочестьОбъектИзХранилища(Параметры.ID);
	
	ТекОбъект.ВОПриСозданииФормыЭлемента(ЭтотОбъект);
	
	ТипЗадачиСписок = ТекОбъект.ТипыЗадач();
	ТипЗадачиСтрока = Строка(ТипЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Загружаем общий клиентский модуль "МодульОбщийМТ". В параметре "Параметры" важно передавать структуру с заполненным
	// свойством "ВХОбщиеПараметры" - оно используется для предотвращения повторной загрузки текущей обработки.
	МодульМТ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщийМТ", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийМТ"); // в СтррКонтекст есть заполненное свойство "ВХОбщиеПараметры"
	
	ЗаполнитьСписокВыбораТиповЗадач();
	
	ВывестиИнформациюТипаЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ОчиститьСообщения();
	
	Наименование = СокрЛП(Наименование); // для исключения совпадений наименований без крайних пробелов
	
	Если ПустаяСтрока(Наименование) Тогда
		ТекстОшибки = НСтр("ru = '* Заполните поле ""Наименование"".'");
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Наименование");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЗадачи) Тогда
		ТекстОшибки = НСтр("ru = 'Заполните поле ""Тип задачи"".'");
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Тип задачи");
	КонецЕсли;
	
	
	
	Если ПустаяСтрока(ТекстОшибки) Тогда 		
		Если Не ЗначениеЗаполнено(ID) Тогда 
			ID = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		СохранитьОбъектВХранилищеКлиент();
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	Иначе
		Информация = ТекстОшибки;
		Элементы.Информация.ЦветТекста = Новый Цвет(255, 0, 0); //Красный
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаОК(Неопределено);
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	ВывестиИнформациюТипаЗадач();
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТиповЗадач()
	
	Для Каждого Элемент Из ТипЗадачиСписок Цикл
		Элементы.ТипЗадачиПредставление.СписокВыбора.Добавить(Строка(Элемент.Значение), Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюТипаЗадач() 	
	Элементы.Информация.ЦветТекста = Новый Цвет(0, 0, 0); // Черный //Новый Цвет(128, 128, 128); серый
	Информация = ПолучитьСправкуТипаЗадач();
Конецпроцедуры

&НаКлиенте
Функция ПолучитьСправкуТипаЗадач() 
	
	Если НЕ ЗначениеЗаполнено(ТипЗадачи) И ТипЗнч(ТипЗадачи) <> Тип("УникальныйИдентификатор") Тогда
		Возврат "";		
	КонецЕсли;
	
	сзСправка = Новый СписокЗначений;
	сзСправка.Добавить(Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26"), "Тип задачи предполагает, что пользователь должен внести значение даты в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("19661470-75A6-4EB4-BE94-44924664B3D1"), "Тип задачи предполагает, что пользователь должен ввести числовое значение в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D"), "Тип задачи предполагает, что пользователь должен ввести строковое значение в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E"), "Тип задачи предполагает, что пользователь должен ввести факт исполнения или неисполнения задачи.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("B483E5F9-95E6-4E2D-B6B2-D5954FCC25AE"), "Тип задачи предполагает, что торговый агент должен сделать снимок с помощью фотокамеры МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("061879D3-E400-4CC8-B4F9-999C3399F47C"), "Тип задачи предполагает, что должен быть совершен обмен данными с учетной системой.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("EADED006-5271-4497-9222-79541D23E3FA"), "Тип задачи предполагает, что будет создан документ ""Заказ"" в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("D6176C16-130D-40D8-AD70-13A39C957927"), "Тип задачи предполагает, что будет создан документ ""Реализация"" в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("57EC9BD4-C2EC-47E0-86C1-B06211735F32"), "Тип задачи предполагает, что будет создан документ ""Перемещение"" в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("79E5B0F6-B019-41FE-9214-C7A204E05974"), "Тип задачи предполагает, что будет создан документ ""Поступление"" в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("EC84CE42-A9C3-4936-94FB-595EC1E84AEF"), "Тип задачи предполагает, что будет создан документ ""ВозвратТоваров"" в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("2EC90B5A-56FF-4338-AEAA-2416B8923BF8"), "Тип задачи предполагает, что будет создан документ ""ПКО"" в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("8BED83C4-4428-4206-89D1-A31790130937"), "Тип задачи предполагает, что будет создан документ ""РКО"" в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("544B81FD-49DA-453E-9B9C-EEC549CBEF10"), "Тип задачи предполагает, что будет создан документ ""Мерчендайзинг"" в МУ.");
	сзСправка.Добавить(Новый УникальныйИдентификатор("2F7826F4-2665-49FA-95E7-E7C8CC6EBF0E"), "Тип задачи предполагает, что будет создан документ ""Посещение"" в МУ.");
	
	Результат = сзСправка.НайтиПоЗначению(ТипЗадачи);
	Если Результат = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Результат.Представление;		
	КонецЕсли;	

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Хранилище

// Процедура считывает объект (список торговых точек) из хранилища значений. 
&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ID = КлючID;
	стррОбъект = ТекОбъект.ВОЭлементЗагрузить(СтррКонтекст.ВО, ID);
	Если стррОбъект = Неопределено Тогда // создание нового элемента справочника
		Наименование = НСтр("ru = 'Название нового задания'");
	Иначе
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, стррОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбъектВХранилищеКлиент()
	
	МодульМТ.ВОПередЗаписьюЭлемента(ЭтотОбъект);
	
	СохранитьОбъектВХранилище();
	ЭтаФорма.Модифицированность = Ложь;
	Оповестить("АПЭлементСправочникаЗаписан_" + СтррКонтекст.ВО.ВидОбъекта, ID);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбъектВХранилище()

	стррОбъект = Новый Структура("Статус, Наименование, ТипЗадачи, Группа, ВопросАнкеты"); //Группа, ВопросАнкеты - пока не используется на форме 
	ЗаполнитьЗначенияСвойств(СтррОбъект, ЭтаФорма);
	РеквизитФормыВЗначение("Объект").ВОЭлементСохранить(СтррКонтекст.ВО, ID, стррОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипызадачОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипЗадачи = Новый УникальныйИдентификатор(ВыбранноеЗначение);
	Информация = ПолучитьСправкуТипаЗадач();
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти
