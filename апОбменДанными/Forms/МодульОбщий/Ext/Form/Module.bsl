
#Область ГлобальныеПеременные

&НаКлиенте
Перем гЭтоLinuxКлиент; // для ускорения работы функции ЭтоLinuxКлиент
&НаКлиенте
Перем гМодульМТ; // общий клиентский модуль для работы с виртуальными объектами

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СтрНачинаетсяС_(Строка, СтрокаПоиска)
	
	Возврат Найти(Строка, СтрокаПоиска) = 1;
	
КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтррКонтекст = Новый Структура("ПутьКФорме,ВХОбщиеПараметры,СпрТоргТочки");
	ЗаполнитьЗначенияСвойств(СтррКонтекст, Параметры);
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область Прочие

&НаКлиенте
Процедура ВывестиСообщение(стррРезультат, Текст, ЕстьОшибки = Неопределено, Путь = "")
	
	стррСообщение = Новый Структура("Описание,Путь", Текст, Путь);
	стррРезультат.Сообщения.Добавить(стррСообщение);
	Если ЕстьОшибки <> Неопределено Тогда
		стррРезультат.ЕстьОшибки = ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ЭтоLinuxКлиент() Экспорт
	
	Если гЭтоLinuxКлиент = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		гЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		             Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	КонецЕсли; 
				 
	Возврат гЭтоLinuxКлиент;
	
КонецФункции

&НаСервере
Функция ПоследнийЭлементСтроки(СтрВыражение, СимволРазделитель = ".") Экспорт

	Если Найти(СтрВыражение, СимволРазделитель) <> 0 Тогда 
		Результат = "";
		Индекс = СтрДлина(СтрВыражение);
		Символ = Сред(СтрВыражение, Индекс, 1);
		Пока Символ <> СимволРазделитель Цикл // в цикле ищем справа налево первый символ-разделительр
			Результат = Символ + Результат;
			Индекс = Индекс - 1;
			Символ = Сред(СтрВыражение, Индекс, 1);
		КонецЦикла;
	Иначе
		Результат = СтрВыражение;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Прочие
#КонецОбласти 


#Область ФайловыеОперации

&НаКлиенте
Функция СоздатьПодкаталогиДанных(КаталогДанных) Экспорт

	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения", Ложь, Новый Массив);
	
	Если ПустаяСтрока(КаталогДанных) Тогда
		Текст = "Не указан каталог в параметре ""Каталог данных"".";
		ВывестиСообщение(СтррРезультат, Текст, Истина, "Объект.КаталогДанных");
		Возврат СтррРезультат;
	КонецЕсли;
	
	Каталог = СокрЛП(КаталогДанных);
	Если Не ПроверитьИСоздатьКаталог(Каталог) Тогда
		Текст = "Не удалось создать каталог, указанный в параметре ""Каталог данных"": " + Каталог;
		ВывестиСообщение(СтррРезультат, Текст, Истина, "Объект.КаталогДанных");
		Возврат СтррРезультат;
	КонецЕсли;
	
	Результат = Истина;
	
	ПолучитьПодкаталогиДанныхСервер();
	
	КаталогСл = ДополнитьСлешВПуть(Каталог);
	
	Для Каждого Элемент Из СтррКонтекст.ПодкаталогиДанных Цикл
		ПодКаталог = КаталогСл + Элемент.Значение;
		Если Не ПроверитьИСоздатьКаталог(ПодКаталог) Тогда
			Текст = "Не удалось создать подкаталог назначения """ + Элемент.Ключ + """: " + ПодКаталог;
			ВывестиСообщение(СтррРезультат, Текст, Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтррРезультат;
	
КонецФункции 

// Проверяет существование каталога, если он не существует, то создается новый.
&НаКлиенте
Функция ПроверитьИСоздатьКаталог(ПутьККаталогу)

	Если КаталогСуществует(ПутьККаталогу) Тогда
		Возврат Истина;
	Иначе
		СоздатьКаталог(ПутьККаталогу);
		Возврат КаталогСуществует(ПутьККаталогу);
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция КаталогСуществует(ПутьККаталогу)
	
	КаталогОбъект = Новый Файл(ПутьККаталогу);
	Возврат КаталогОбъект.Существует() И КаталогОбъект.ЭтоКаталог();
	
КонецФункции

&НаКлиенте
Функция ФайлСуществует(ПутьКФайлу) Экспорт
	
	ФайлОбъект = Новый Файл(ПутьКФайлу);
	Возврат ФайлОбъект.Существует();
	
КонецФункции

&НаКлиенте
Функция ДополнитьСлешВПуть(Каталог)

	Слеш = ?(ЭтоLinuxКлиент(), "/", "\");
	
	Если Прав(Каталог, 1) <> Слеш Тогда
		Возврат Каталог + Слеш;
	Иначе
		Возврат Каталог;		
	КонецЕсли;

КонецФункции 

&НаСервере
Процедура ПолучитьПодкаталогиДанныхСервер()
	
	Если Не СтррКонтекст.Свойство("ПодкаталогиДанных") Тогда
		СтррКонтекст.Вставить("ПодкаталогиДанных", РеквизитФормыВЗначение("Объект").ПодкаталогиДанных());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяПодкаталогаДанных(ИмяСвойства, Каталог = Неопределено) Экспорт
	
	Если Не СтррКонтекст.Свойство("ПодкаталогиДанных") Тогда
		ПолучитьПодкаталогиДанныхСервер();
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Не СтррКонтекст.ПодкаталогиДанных.Свойство(ИмяСвойства, Результат) Тогда
		ВызватьИсключение("Функция ИмяПодкаталогаДанных(), неизвестный параметр ИмяСвойства = " + ИмяСвойства);
	КонецЕсли;
	
	Если Каталог <> Неопределено Тогда
		Если ЭтоLinuxКлиент() Тогда
			Путь = СтрЗаменить(Каталог, "\", "/");
		Иначе
			Путь = СтрЗаменить(Каталог, "/", "\");
		КонецЕсли; 
		Результат = ДополнитьСлешВПуть(Путь) + Результат;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// ФайловыеОперации
#КонецОбласти 


#Область ОпределениеКонфигурации
// Аналогичные функции объявлены в модуле обработки (ПоколениеКонфигурации, СравнитьВерсии, ВерсияКонфигурацииСервер).

// Функция сравнивает идентификатор текущей конфигурации (в глобальной переменной гБазоваяКонфигурация) с проверяемым 
// идентификатором конфигурации (в параметре СтрКонфигурация).
// Возвращает Истина, если идентификатор текущей конфигурации соответствует идентификатору проверяемой конфигурации и 
// и операция сравнения версии (переданная вместе с идентификатором) верна.
// Формат идентификатора конфигурации: "P_V1.V2.V3.V4", где P - префикс конфигурации, V1-V4 - вресия конфигурации.
// Версия может быть неполной. Примеры: "УТ_11.1.15.120", "УТ_11.1"
// 	Параметры:
// 		СтрКонфигурация - Строка - операция сравнеия и идентификатор сравниваемой конфигурации.
// 		
// Примечание: есть аналогичная функция в модуле обработки.	
&НаКлиенте
Функция ПоколениеКонфигурации(СтрКонфигурация) Экспорт 
	
	Если Не стррКонтекст.Свойство("КэшСравненияКонфигураций") Тогда
	    стррКонтекст.Вставить("КэшСравненияКонфигураций", Новый Соответствие);
		стррВерсияКонфигурации = ВерсияКонфигурацииСервер();
		стррКонтекст.Вставить("БазоваяКонфигурация", стррВерсияКонфигурации.БазоваяКонфигурация); 
	КонецЕсли; 
	
	КэшСравненияКонфигураций = стррКонтекст.КэшСравненияКонфигураций;	
	БазоваяКонфигурация 	 = стррКонтекст.БазоваяКонфигурация;	
	
	Значение = КэшСравненияКонфигураций.Получить(СтрКонфигурация);
	
	Если Значение = Неопределено Тогда
		
		Индекс1 = Найти(БазоваяКонфигурация, "_");
		Индекс2 = Найти(СтрКонфигурация, "_");
		
		Если Индекс2 = 0 Тогда
			ВызватьИсключение("Функция ПоколениеКонфигурации(): указан параметр без префикса ""_""! Параметр = """ + СтрКонфигурация + """.");
		КонецЕсли; 
		
		Префикс1 = Лев(БазоваяКонфигурация, Индекс1);
		Префикс2 = Лев(СтрКонфигурация, Индекс2);
		
		ЗнакСравнения = "";
		Для Индекс = 1 По 2 Цикл
			Символ = Сред(Префикс2, Индекс, 1);
			Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда // знаки "<=>"
				ЗнакСравнения = ЗнакСравнения + Символ;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗнакСравнения = "" Тогда
			ЗнакСравнения = "=";
		Иначе
			Префикс2 = Сред(Префикс2, СтрДлина(ЗнакСравнения) + 1);
		КонецЕсли;
		
		Если Префикс1 <> Префикс2 Тогда // сравниваем префиксы конфигураций
			
			Значение = Ложь;
			
		Иначе
			
			Сравнение = СравнитьВерсии(Сред(БазоваяКонфигурация, Индекс1+1), Сред(СтрКонфигурация, Индекс2+1));
			
			Если ЗнакСравнения = ">=" Тогда
				Значение = (Сравнение >= 0);
			ИначеЕсли ЗнакСравнения = "<=" Тогда
				Значение = (Сравнение <= 0);
			ИначеЕсли ЗнакСравнения = "<" Тогда
				Значение = (Сравнение < 0);
			ИначеЕсли ЗнакСравнения = ">" Тогда
				Значение = (Сравнение > 0);
			ИначеЕсли ЗнакСравнения = "=" Тогда
				Значение = (Сравнение = 0);
			Иначе
				ВызватьИсключение("Функция ПоколениеКонфигурации() - неизвестный оператор сравнения: " + ЗнакСравнения);
			КонецЕсли;
			
		КонецЕсли;
		
		КэшСравненияКонфигураций.Вставить(СтрКонфигурация, Значение);
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

// Сравнивает две строки версий. Если передана не полная версия, то сравнивается только общая начальная часть версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2)
	
	мВерсия1 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1), ".");
	мВерсия2 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2), ".");
	
	ВГраница = Мин(мВерсия1.Количество(), мВерсия2.Количество()) - 1;
	
	Результат = 0;
	Для Разряд = 0 По ВГраница Цикл
		Результат = Число(мВерсия1[Разряд]) - Число(мВерсия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВерсияКонфигурацииСервер()
	
	Возврат РеквизитФормыВЗначение("Объект").ВерсияКонфигурации();
	
КонецФункции

// ОпределениеКонфигурации
#КонецОбласти 


#Область РаботаСФормами

// Универсальная команда открытия форм (форм обработки и форм типовых объектов конфигурации).
&НаКлиенте
Процедура КомандаВыполнить(Элемент, Модуль = Неопределено) Экспорт
	
	ЭлементИмя = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Элемент.Имя);
	
	Если Найти(ЭлементИмя, "_N") <> 0 Тогда 
		// Отсекаем финальную часть строки, начиная с символа _N - т.к. на форме могут быть одинаковые по назначению
		// и поведению элементы с именами, к примеру, "КомандаУдалить" И "КомандаУдалить_N1".
		ЭлементИмя = Лев(ЭлементИмя, Найти(ЭлементИмя, "_N") - 1);
	КонецЕсли; 
	
	Если ЭлементИмя = "ПоказатьГлавнуюФорму" Тогда
		ОткрытьФормуОбработки("ГлавнаяФорма");
	ИначеЕсли ЭлементИмя = "ПоказатьПартнеров" Тогда
		стррКонтекстМодуля = ?(Модуль <> Неопределено, Модуль.СтррКонтекст, СтррКонтекст);
		Если стррКонтекстМодуля.Свойство("СпрТоргТочки") И ТипЗнч(стррКонтекстМодуля.СпрТоргТочки) = Тип("Структура")  Тогда
			ВидСправочника = стррКонтекстМодуля.СпрТоргТочки.ВидСправочника;
		Иначе
			ВидСправочника = "Партнеры";
		КонецЕсли; 
		ОткрытьФорму("Справочник." + ВидСправочника + ".ФормаСписка");
	ИначеЕсли ЭлементИмя = "Справка" Тогда
		ОткрытьФормуОбработки("МодульСправки").ВнешнийВызовОткрытьСправку(Модуль.ЭтаФорма.ИмяФормы);
	ИначеЕсли СтрНачинаетсяС_(ЭлементИмя, "Показать") Тогда
		ОткрытьФормуОбработки(Сред(ЭлементИмя, 9));
	ИначеЕсли СтрНачинаетсяС_(ЭлементИмя, "ДокументыУТ") Тогда
		ОткрытьФорму("Документ." + Сред(ЭлементИмя, 12) + ".ФормаСписка");
	ИначеЕсли СтрНачинаетсяС_(ЭлементИмя, "СправочникУТ") Тогда
		ОткрытьФорму("Справочник." + Сред(ЭлементИмя, 13) + ".ФормаСписка");
	ИначеЕсли СтрНачинаетсяС_(ЭлементИмя, "ОбработкаУТ") Тогда
		ОткрытьФорму("Обработка." + Сред(ЭлементИмя, 12) + ".Форма");
	ИначеЕсли СтрНачинаетсяС_(ЭлементИмя, "ОтчетУТ") Тогда
		ОткрытьФорму("Отчет." + Сред(ЭлементИмя, 8) + ".Форма");
	ИначеЕсли СтрНачинаетсяС_(ЭлементИмя, "Справочник") Или СтрНачинаетсяС_(ЭлементИмя, "Документы") Тогда
		ОткрытьФормуОбработки(ЭлементИмя);
	//((av_060818
	ИначеЕсли ЭлементИмя = "ПрикрепленныеФотографии" Тогда
	   ОткрытьФормуОбработки(ЭлементИмя, Модуль.СтррКонтекст);
	//))av_060818	
	Иначе
		ВызватьИсключение("Процедура КомандаВыполнить() - неизвестная команда Элемент.Имя = " + ЭлементИмя);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(РазделСправки) Экспорт

	ОткрытьФормуОбработки("МодульСправки").ВнешнийВызовОткрытьСправку(РазделСправки);
	
КонецПроцедуры

// Функция открывает форму обработки. Обязательно открывать формы обработки только этой функцией!
&НаКлиенте
Функция ОткрытьФормуОбработки(ИмяФормы, стррПараметры = Неопределено, Уникальность = Неопределено, Оповещение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СтррКонтекст.ВХОбщиеПараметры) Тогда
		ВызватьИсключение("Модуль был загружен без параметра со свойством ""ВХОбщиеПараметры"" - используется для контроля уникальности запуска обработки.");
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(СтррКонтекст.ПутьКФорме) Тогда
		ВызватьИсключение("Модуль был загружен без параметра со свойством ""ПутьКФорме"" - используется для открытия форм обрботки.");
	КонецЕсли; 
	Если стррПараметры = Неопределено Тогда
		стррПараметры = Новый Структура;
	КонецЕсли; 
	стррПараметры.Вставить("ВХОбщиеПараметры", СтррКонтекст.ВХОбщиеПараметры); // свойство "ВХОбщиеПараметры" используется для контроля уникальности запуска обработки
	Возврат ОткрытьФорму(СтррКонтекст.ПутьКФорме + ИмяФормы, стррПараметры, ЭтаФорма, Уникальность,,, Оповещение);
	
КонецФункции

// Процедура открывает форму элемента виртуального объекта (справочника, документа).
//  Параметры:
//		Параметр - Структура, Строка - системные свойства виртуального объекта (Структура) или вид виртульного объекта (Строка)
//		ID 		 - УникальныйИдентификатор - идентификатор виртуального объекта.
&НаКлиенте
Процедура ВООткрытьФорму(Параметр, ID = Неопределено) Экспорт
	
	МодульМТ().ВООткрытьФорму(Параметр, ID);
	
КонецПроцедуры

&НаКлиенте
Функция МодульМТ()

	Если гМодульМТ = Неопределено Тогда
	    гМодульМТ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщийМТ", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийМТ"); // в СтррКонтекст есть заполненное свойство "ВХОбщиеПараметры"
	КонецЕсли; 
	
	Возврат гМодульМТ;

КонецФункции 

&НаКлиенте
Процедура ПоказатьНаКартеОбъект(Ссылка, Описание) Экспорт
	
	МодульМТ().ПоказатьНаКартеОбъект(Ссылка, Описание);
	
КонецПроцедуры

// РаботаСФормами
#КонецОбласти    
