#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5  
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	
	СтррКонтекст = Новый Структура("СтатусыСправочников,СтатусНастройкиОбмена,СтатусФоновогоЗадания,ОткрытиеПоНавигации,ЗакрытьФорму,Местоположение,ИнтерфейсТакси,ИсправитьРазмерыЭлементов,ВремяМестоположения");
	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры); 
	СтррКонтекст.Местоположение 	 = ТекОбъект.ПрочитатьЗначениеНастройки("МестоположениеДляИнформера"); // местоположение пользователя для виджета информера главного окна
	СтррКонтекст.ВремяМестоположения = ТекОбъект.ПрочитатьЗначениеНастройки("ВремяМестоположения"); // время определения последнего местоположения
	
	// признаки автоматического отключения настроек "ВыгружатьХарактеристикиНоменклатуры", "ИспользоватьКонтрагентов", "ИспользоватьДоговорыИлиСоглашения"
	СтррКонтекст.Вставить("ОтключенаНастройкаВыгружатьХарактеристикиНоменклатуры", 	Ложь);
	СтррКонтекст.Вставить("ОтключенаНастройкаИспользоватьКонтрагентов", 			Ложь);
	СтррКонтекст.Вставить("ОтключенаНастройкаИспользоватьДоговорыИлиСоглашения", 	Ложь);
	// считываем настройки конфигурации для сравнения с настройками обмена модуля.
	КонстантаИспользоватьХарактеристикиНоменклатуры = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	КонстантаИспользоватьПартнеровИКонтрагентов		= Константы.ИспользоватьПартнеровИКонтрагентов.Получить();
	КонстантаИспользованиеСоглашенийСКлиентами		= Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	КонстантаИспользоватьДоговорыСКлиентами			= Константы.ИспользоватьДоговорыСКлиентами.Получить();
	
	СтррЗначенияНастроек = ТекОбъект.ПрочитатьЗначенияНастроек("ИспользоватьХарактеристики,ИспользоватьКонтрагентов,ИспользоватьДоговорыИлиСоглашения", Ложь);
	
	Если НЕ КонстантаИспользоватьХарактеристикиНоменклатуры И СтррЗначенияНастроек.ИспользоватьХарактеристики Тогда 
		ТекОбъект.СохранитьЗначениеНастройки("ИспользоватьХарактеристики", Ложь); // отключаем настройку "ВыгружатьХарактеристикиНоменклатуры"
		СтррКонтекст.ОтключенаНастройкаВыгружатьХарактеристикиНоменклатуры = Истина;
	КонецЕсли;
	
	Если НЕ КонстантаИспользоватьПартнеровИКонтрагентов И СтррЗначенияНастроек.ИспользоватьКонтрагентов Тогда 
		ТекОбъект.СохранитьЗначениеНастройки("ИспользоватьКонтрагентов", Ложь); // отключаем настройку "ИспользоватьКонтрагентов"
		СтррКонтекст.ОтключенаНастройкаИспользоватьКонтрагентов = Истина;
	КонецЕсли;
	
	Если НЕ КонстантаИспользоватьДоговорыСКлиентами 
		И КонстантаИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать 
		И Не ПустаяСтрока(СтррЗначенияНастроек.ИспользоватьДоговорыИлиСоглашения)
	Тогда 
		ТекОбъект.СохранитьЗначениеНастройки("ИспользоватьДоговорыИлиСоглашения", ""); // отключаем настройку "ИспользоватьДоговорыИлиСоглашения"
		СтррКонтекст.ОтключенаНастройкаИспользоватьДоговорыИлиСоглашения = Истина;
	КонецЕсли;
	
	СтррКонтекст.ЗакрытьФорму = Ложь; // используется для запрета запуска второго экземпляра обработки
	
	СтррКонтекст.Вставить("ИнформацияОбОбновлении", Неопределено); // строка информации об обновлении версии обработки
	
	Если СтррКонтекст.ВХОбщиеПараметры = Неопределено Тогда
		СтррПараметры = Новый Структура("КлючСеанса", Новый УникальныйИдентификатор);
		СтррКонтекст.ВХОбщиеПараметры = ПоместитьВоВременноеХранилище(СтррПараметры);
		СтррКонтекст.ОткрытиеПоНавигации = Ложь;
		СтррКонтекст.ИнформацияОбОбновлении = ТекОбъект.ИнициализироватьДанныеВХранилищеДляНовойВерсии();
	Иначе // значит форма открыта из другой формы обработки обмена данными по команде навигации
		СтррКонтекст.ОткрытиеПоНавигации = Истина;
	КонецЕсли; 
	
	СтррКонтекст.ИнтерфейсТакси = ТекОбъект.КонфигурацияРазмерностьЭлементовФормыДляТакси() 
		И ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
		
	СтррКонтекст.ИсправитьРазмерыЭлементов = ТекОбъект.КонфигурацияРежимСовместимости("<=8.3.6") 
		И ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
		
	СтррКонтекст.Вставить("АдресСтраницыПриветствия", "agentplus.online");
	
	ПрочестьНастройкиСервер();	
	ОбновитьГотовностьСправочников();
	ОбновитьГотовностьНастроекОбмена();
	ОбновитьГотовностьФоновогоЗадания();
	
	ЗаполнитьРазделы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если СтррКонтекст.ЗакрытьФорму Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ЭтаФорма.Заголовок = "Агент Плюс: Мобильная торговля (ver. " + СтррКонтекст.Версия + ")";
	
	Цвета = СтррКонтекст.Цвета;
	Элементы.ГруппаРазделы.ЦветФона 		= Цвета.ПолеГлавноеОкно;
	Элементы.ГруппаКоманднаяПанель.ЦветФона = Цвета.ФонРаздела;	
	Элементы.Разделы.ЦветФона  			= Цвета.ПолеГлавноеОкно;
	Элементы.Разделы.ЦветРамки 			= Цвета.ПолеГлавноеОкно;
	
	ЕстьЗамечания = ОбновитьСтатусГотовности(Ложь);
	
	ПодключитьОбработчикОжидания("ОбновитьСтатусГотовностиПоТаймеру", 3600, Ложь);
	
	ИзмениласьВерсияОбработки = ЗначениеЗаполнено(СтррКонтекст.ИнформацияОбОбновлении);
	Если ИзмениласьВерсияОбработки Тогда // изменилась версия обработки
		ОчиститьСообщения();
		Сообщить(СтррКонтекст.ИнформацияОбОбновлении);
		Элементы.ПоказатьИсторияВерсий_N1.Видимость = Истина;
	Иначе
		Элементы.ПоказатьИсторияВерсий_N1.Видимость = Ложь;		
	КонецЕсли;
	
	// отменяем автозапуск обмена, если изменилась версия обработки - на всякий случай, чтобы пользователь увидел сообщения об изменениях.	
	Если Объект.АвтозапускОбменаДанными И Не ЕстьЗамечания И Не ИзмениласьВерсияОбработки И Не СтррКонтекст.ОткрытиеПоНавигации Тогда
		Элементы.ДекорацияЗапускОбмена.Видимость = Истина;
		ТаймерЗапускаОбмена = 6; // таймаут на 5 секунд - секунда отнимется при прямом вызове обработчика ПоказатьОбменДаннымиПоТаймеру()
		ПоказатьОбменДаннымиПоТаймеру();
		ПодключитьОбработчикОжидания("ПоказатьОбменДаннымиПоТаймеру", 1, Ложь);
	Иначе
		Элементы.ДекорацияЗапускОбмена.Видимость = Ложь;
	КонецЕсли;
	
	Если Не СтррКонтекст.ОткрытиеПоНавигации Тогда
		Оповестить("АППроверкаУникальностиЗапускаОбработкиОбмена", СтррКонтекст.ВХОбщиеПараметры);	
	КонецЕсли; 
	
	Если Не СтррКонтекст.ИнтерфейсТакси Тогда
		Элементы.СтрокаБраузера.Ширина   = Элементы.СтрокаБраузера.Ширина * 2.6;
		Элементы.БыстраяНастройка.Ширина = 19;
		Элементы.БыстраяНастройка.Высота = 2;
	КонецЕсли; 
	
	Если СтррКонтекст.ИсправитьРазмерыЭлементов	Тогда // изменение высоты расширенных подсказок для более старых версий платформы 1С
		
		стррЭлементы = Новый Структура;
		
		// Раздел "Обмен данными"
		стррЭлементы.Вставить("НастройкаМодуляОбмена", 		2);
		стррЭлементы.Вставить("ПоказатьНастройкиАгентов", 	3);
		
		// Раздел "Справочники"
		стррЭлементы.Вставить("ПоказатьСпискиТорговыхТочек", 	3);
		стррЭлементы.Вставить("ПоказатьКатегорииДокументов", 	3);
		стррЭлементы.Вставить("ПоказатьСтатусыПартнеров", 		3);
		стррЭлементы.Вставить("СправочникРезультатыПосещений", 	3);
		
		// Раздел "Документы"
		стррЭлементы.Вставить("ДокументыПосещений", 		2);
		стррЭлементы.Вставить("ДокументыМерчендайзинга", 	3);
		
		// Раздел "Планирование и контроль"
		стррЭлементы.Вставить("ПоказатьСпискиТорговыхТочек_N1", 		3);
		стррЭлементы.Вставить("ПоказатьОтчетВыполнениеПланаПосещений", 	2);
		стррЭлементы.Вставить("ПоказатьРедакторМеток", 					2);
		
		// Раздел "Сервис"
		стррЭлементы.Вставить("НастройкаМодуляОбменаСервис", 	2);
		стррЭлементы.Вставить("ПоказатьЖурналОбменаДанными_N1", 2);
		стррЭлементы.Вставить("БыстраяНастройкаВСервисе", 		2);
		
		Для каждого ЭлементСтруктуры Из стррЭлементы Цикл
			Элементы[ЭлементСтруктуры.Ключ + "РасширеннаяПодсказка"].Высота = ЭлементСтруктуры.Значение;
		КонецЦикла; 
		
		Элементы.СкрыватьБыструюНастройкуСервис.Заголовок = НСтр("ru = 'Скрывать ""Быструю настройку""'");
		
	КонецЕсли; 
	// В информационное поле выводятся предупреждения для пользователя, в том случае когда настройки обмена могут конфликтовать с настройками конфигурации УС.
	Элементы.ИнформационноеПоле.Видимость = Ложь;
	
	ИтоговаяСтрока 	= Новый Массив;
	ШрифтОбычный	= Новый Шрифт(,8);
	ШрифтПолуЖирный = Новый Шрифт(,8, Истина);
	ПереводСтроки	= Новый ФорматированнаяСтрока(Символы.ПС);
	
	Если СтррКонтекст.ОтключенаНастройкаВыгружатьХарактеристикиНоменклатуры Тогда
		
		Элементы.ИнформационноеПоле.Видимость = Истина;
		Элементы.ИнформационноеПоле.Высота = 7;
		
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Предупреждение: '"), ШрифтПолуЖирный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Автоматически выключена настройка - ""Выгружать характеристики номенклатуры"" (перейти на закладку Обмен данными - Общие настройки - '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Основные'"), ШрифтОбычный,,,"ПерейтиНаЗакладкуОсновныеХарактеристикиНоменклатуры")); // ссылка и ее строковое представление для обработчика "ИнформационноеПолеОбработкаНавигационнойСсылки"
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '). '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(ПереводСтроки);
		
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Причина: в настройках конфигурации выключена функциональная опция ""Использовать характеристики номенклатуры"" (перейти в раздел НСИ и Администрирование - Настройка НСИ - '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Номенклатура'"), ШрифтОбычный,,,"НастройкиНоменклатуры")); // ссылка и ее строковое представление для обработчика "ИнформационноеПолеОбработкаНавигационнойСсылки"
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ').'"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(ПереводСтроки);
		
	КонецЕсли;
	
	Если СтррКонтекст.ОтключенаНастройкаИспользоватьКонтрагентов Тогда
		
		Элементы.ИнформационноеПоле.Видимость = Истина;
		Элементы.ИнформационноеПоле.Высота = Элементы.ИнформационноеПоле.Высота + 7;
		
		Если ИтоговаяСтрока.Количество() > 0 Тогда 
			ИтоговаяСтрока.Добавить(ПереводСтроки);	
		КонецЕсли;
		
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Предупреждение: '"), ШрифтПолуЖирный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Автоматически выключена настройка - ""Использовать контрагентов"" (перейти на закладку Обмен данными - Общие настройки - '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Основные'"), ШрифтОбычный,,,"ПерейтиНаЗакладкуОсновныеИспользоватьКонтрагентов"));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '). '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(ПереводСтроки);
		
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Причина: в настройках конфигурации выключена функциональная опция ""Независимо вести партнеров и контрагентов"" (перейти в раздел НСИ и Администрирование - Настройка НСИ - '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'CRM и маркетинг'"), ШрифтОбычный,,,"CRMИМаркетинг"));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ').'"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(ПереводСтроки);
		
	КонецЕсли;
	
	Если СтррКонтекст.ОтключенаНастройкаИспользоватьДоговорыИлиСоглашения Тогда
		
		Элементы.ИнформационноеПоле.Видимость = Истина;
		Элементы.ИнформационноеПоле.Высота = Элементы.ИнформационноеПоле.Высота + 7;
		
		Если ИтоговаяСтрока.Количество() > 0 Тогда 
			ИтоговаяСтрока.Добавить(ПереводСтроки);	
		КонецЕсли;

		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Предупреждение: '"), ШрифтПолуЖирный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Автоматически выключена настройка - ""Использовать договоры или соглашения"" (Обмен данными - Общие настройки - '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Основные'"), ШрифтОбычный,,,"ПерейтиНаЗакладкуОсновныеИспользоватьДоговорыИлиСоглашения"));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '). '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(ПереводСтроки);
		
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Причина: в настройках конфигурации выключены функциональные опции ""Использовать договоры с клиентами"" и ""Использование соглашений с клиентами"" (перейти в раздел НСИ и Администрирование - Настройка НСИ - '"), ШрифтОбычный));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Продажи'"), ШрифтОбычный,,,"Продажи"));
		ИтоговаяСтрока.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ').'"), ШрифтОбычный));
		
	КонецЕсли;
	
	ИнформационноеПоле = Новый ФорматированнаяСтрока(ИтоговаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиПараметровОбменаИзмененияЗаписаны" Тогда
		
		ПрочестьВсеНастройкиИОбновитьСтатус();
		
	ИначеЕсли ИмяСобытия = "АПНастройкиАгентовИзмененияЗаписаны" 
		Или ИмяСобытия = "АПМобильныеУстройстваИзменениеСпискаМУ" 
		Или ИмяСобытия = "АПОбновленыНастройкиФоновогоЗадания" 
		Или ИмяСобытия = "Запись_РегламентныеЗадания" // оповещение от УТ о записи регламентного задания
	Тогда
		
		ОбновитьСтатусГотовности(Истина);
		
	ИначеЕсли ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПЗакрытьОбработкуОбменДанными" И Параметр = СтррКонтекст.ВХОбщиеПараметры Тогда
		
		Состояние("Обработка обмена данными уже запущена.");
		СтррКонтекст.ЗакрытьФорму = Истина;
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();		
		КонецЕсли;  
		
	КонецЕсли;

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)
	
	РазделСправки = Неопределено;
	
	СтрокаТ = Элементы.Разделы.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		Если СтрокаТ.Раздел = "Главная" Тогда // если находимся на "Домашней странице", то показываем "Общий раздел" справки.
			РазделСправки = ЭтаФорма.ИмяФормы;
		Иначе
			РазделСправки = ЭтаФорма.ИмяФормы + "_" + СтрокаТ.Раздел;
		КонецЕсли; 
	КонецЕсли;
	
	МодульК().КомандаСправка(РазделСправки);
	
КонецПроцедуры

#Область ОбработчикиКомандФормы_Обработки

&НаКлиенте
Процедура КомандаНастройкиОбщие(Команда)
	
	ОткрытьНастройкиОбмена(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура КомандаБыстраяНастройка(Команда)
	
	Текст = НСтр("ru = 'Запустить быструю настройку модуля обмена данными?'");
	Оповещение = Новый ОписаниеОповещения("КомандаБыстраяНастройкаПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБыстраяНастройкаПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		МодульК().ОткрытьФормуОбработки("БыстраяНастройка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбменДаннымиПоТаймеру()
	
	ТаймерЗапускаОбмена = ТаймерЗапускаОбмена - 1;
	Текст = НСтр("ru = 'Автозапуск обмена данными через %1 сек.'");
	Элементы.АвтозапускОбменаДанными.Заголовок = СтрШаблон_(Текст, ТаймерЗапускаОбмена);
	Если ТаймерЗапускаОбмена = 0 Тогда
		Элементы.ДекорацияЗапускОбмена.Видимость = Ложь;	
		Если Объект.АвтозапускОбменаДанными Тогда // флажок пользователь мог снять сразу после открытия формы
			МодульК().КомандаВыполнить("ПоказатьОбменДанными");
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиКомандФормы_Обработки
#КонецОбласти

#Область ОбработчикиКомандФормы_Виджет

&НаКлиенте
Процедура КомандаУказатьМестоположение(Команда)
	
	стррПараметры = Новый Структура("Местоположение", СтррКонтекст.Местоположение);
	Оповещение = Новый ОписаниеОповещения("КомандаУказатьМестоположениеПродолжить", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборМестоположения", СтррПараметры,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КомандаУказатьМестоположениеПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			СтррКонтекст.Местоположение = Результат;
			СтрокаБраузера = ПолучитьАдресСтраницыПриветствия();
			СохранитьЗначениеНастройки("МестоположениеДляИнформера", СтррКонтекст.Местоположение);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейти(Команда)
	
	Меню = Новый СписокЗначений;
	
	МодульКарты = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст);
	КодСтраны = МодульКарты.КодСтраныМестоположения(СтррКонтекст.Местоположение);
	Если КодСтраны = "UA" Тогда
		Меню.Добавить("Сайт_ua", "www.agentplus.com.ua",, Элементы.ДекорацияАгентПлюс.Картинка);
	Иначе
		Меню.Добавить("Сайт_ru", "www.agentplus.ru",, 	  Элементы.ДекорацияАгентПлюс.Картинка);	
	КонецЕсли; 
	Меню.Добавить("ЛичныйКабинет", НСтр("ru = 'Личный кабинет'"),, Элементы.ДекорацияЛК.Картинка);
	Оповещение = Новый ОписаниеОповещения("КомандаПерейтиПродолжить", ЭтотОбъект);	
	ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.Перейти);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПродолжить(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "Сайт_ru" Тогда
			ЗапуститьПриложение("http://www.agentplus.ru/");
		ИначеЕсли Результат.Значение = "Сайт_ua" Тогда
			ЗапуститьПриложение("http://www.agentplus.com.ua/");
		ИначеЕсли Результат.Значение = "ЛичныйКабинет" Тогда
			ЗапуститьПриложение("https://agentplus.online/");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиКомандФормы_Виджет
#КонецОбласти 

#Область ОбработчикиКомандФормы_Видео

&НаКлиенте
Процедура КомандаПоказатьВидео(Команда)
	
	ствВидео = Новый Соответствие;
	ствВидео.Вставить("ВидеоНастройкиМодуляГлавная", 	"https://youtu.be/AzV0kxY8IMw");	
	
	ствВидео.Вставить("ВидеоКаналАгентПлюс", 			"https://www.youtube.com/user/agentplusinc");
	ствВидео.Вставить("ВидеоНачальнаяНастройкаМодуля", 	"https://youtu.be/AzV0kxY8IMw");
	ствВидео.Вставить("ВидеоМТРелиз20", 				"https://youtu.be/9xuXBQDa6Yg");

	ИмяЭлемента = ЭтаФорма.ТекущийЭлемент.Имя;
	Если ствВидео.Получить(ИмяЭлемента) <> Неопределено Тогда
	    ЗапуститьПриложение(ствВидео.Получить(ИмяЭлемента)); 
	Иначе
		ВызватьИсключение("Неизвестный элемент формы для запуска видео: " + ИмяЭлемента);
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиКомандФормы_Видео
#КонецОбласти

&НаКлиенте
Процедура КомандаТест(Команда)
	
	КомандаТестСервер("Проверяем сообщение");
	
КонецПроцедуры

&НаСервере
Процедура КомандаТестСервер(ТекстСообщения)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.БотОтправитьСообщение(ТекстСообщения);
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НадписьСтатусНажатие(Элемент)
	
	Если Элемент.Имя = "НадписьГотовностьАгентов" Тогда
		МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("ВыделитьПервогоАгентаСОшибкой", Истина));
	ИначеЕсли Элемент.Имя = "НадписьГотовностьМУ" Тогда
		МодульК().КомандаВыполнить("ПоказатьМобильныеУстройства");
	ИначеЕсли Элемент.Имя = "НадписьГотовностьНастроекОбмена" Тогда
		ОткрытьНастройкиОбмена(Истина);		
	ИначеЕсли Элемент.Имя = "НадписьОбменДанными" Тогда
		МодульК().КомандаВыполнить("ПоказатьОбменДанными");
	ИначеЕсли Элемент.Имя = "НадписьГотовностьРегламентногоЗадания" Тогда
		МодульК().КомандаВыполнить("ПоказатьРегистрацияРегламентногоЗадания");
	Иначе
		ВызватьИсключение("Неизвестный элемент для обработки события ПриНажатии(): " + Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда 
		Если СтрокаТ.ИконкаРаздела < 9 Тогда // подменяем иконку текущего раздела на белую
			СтрокаТ.ИконкаРаздела = СтрокаТ.ИконкаРаздела + 9;
		КонецЕсли;
		Для каждого стзТабРазделы Из тзРазделы Цикл
			Если стзТабРазделы <> СтрокаТ Тогда
			    Если стзТабРазделы.ИконкаРаздела > 9 Тогда
					стзТабРазделы.ИконкаРаздела = стзТабРазделы.ИконкаРаздела - 9;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ПереключитьСтраницу(СтрокаТ.Раздел);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаБраузераПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ДанныеСобытия.Anchor <> Неопределено И ЗначениеЗаполнено(ДанныеСобытия.Anchor.href) Тогда
		СтандартнаяОбработка = Ложь;
		ЗапуститьПриложение(ДанныеСобытия.Anchor.href);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьБыструюНастройкуПриИзменении(Элемент)
	
	СохранитьНастройкуСервер("СкрыватьБыструюНастройку");
	Если Объект.СкрыватьБыструюНастройку Тогда // если изменен флажок на домашней странице, его не скрываем
	    ОчиститьСообщения();
		Сообщить(НСтр("ru = 'Изменения вступят в силу после перезапуска обработки.'"));
	Иначе
		ОбновитьСтатусГотовности(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозапускОбменаДаннымиПриИзменении(Элемент)
	
	Элементы.АвтозапускОбменаДанными.Заголовок = НСтр("ru = 'Автозапуск обмена данными'");
	ОтключитьОбработчикОжидания("ПоказатьОбменДаннымиПоТаймеру");
	Элементы.ДекорацияЗапускОбмена.Видимость = Ложь;
	СохранитьНастройкуСервер("АвтозапускОбменаДанными");
	
	Если Объект.АвтозапускОбменаДанными Тогда
		Текст = НСтр("ru = 'Запустить обмен данными с мобильными устройствами?'");
		Оповещение = Новый ОписаниеОповещения("АвтозапускОбменаДаннымиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозапускОбменаДаннымиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		МодульК().КомандаВыполнить("ПоказатьОбменДанными");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 

&НаКлиенте
Процедура ОткрытьНастройкиОбмена(УчестьСтатусНастроек)
	
	МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
	
	Если УчестьСтатусНастроек Тогда
		стррСтатус = СтррКонтекст.СтатусНастройкиОбмена;
		Если Не стррСтатус.Готово Тогда
			Если 0 <> Найти(стррСтатус.КодСостояния, "Каталог") Тогда
				стррПараметры = Новый Структура("Закладка,Сообщение", "ГруппаКаталоги", "УказатьКаталог");
				Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", стррПараметры);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодироватьСтрокуСервер(Стр)
	Возврат КодироватьСтроку(Стр, СпособКодированияСтроки.URLВКодировкеURL);
КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Форма

&НаКлиенте
Процедура ПереключитьСтраницу(ИмяСтраницы)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Группа" + ИмяСтраницы];
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРазделы()
	
	СтрокаТ = тзРазделы.Добавить();
	СтрокаТ.ИконкаРаздела 		 = 1; // 2 - иконка домика с восклицательным знаком
	СтрокаТ.ПредставлениеРаздела = НСтр("ru = 'Домашняя страница'");
	СтрокаТ.Раздел 				 = "Главная";
	
	СтрокаТ = тзРазделы.Добавить();
	СтрокаТ.ИконкаРаздела 		 = 3;
	СтрокаТ.ПредставлениеРаздела = НСтр("ru = 'Обмен данными'");
	СтрокаТ.Раздел 				 = "ОбменДанными";
	
	СтрокаТ = тзРазделы.Добавить();
	СтрокаТ.ИконкаРаздела 		 = 4;
	СтрокаТ.ПредставлениеРаздела = НСтр("ru = 'Справочники'");
	СтрокаТ.Раздел 				 = "Справочники";
	
	СтрокаТ = тзРазделы.Добавить(); // sd_23082017
	СтрокаТ.ИконкаРаздела 		 = 5;
	СтрокаТ.ПредставлениеРаздела = НСтр("ru = 'Документы'");
	СтрокаТ.Раздел 				 = "Документы";
	
	СтрокаТ = тзРазделы.Добавить();
	СтрокаТ.ИконкаРаздела 		 = 6;
	СтрокаТ.ПредставлениеРаздела = НСтр("ru = 'Планирование и контроль'");
	СтрокаТ.Раздел 				 = "ПланированиеИКонтроль";
	
	СтрокаТ = тзРазделы.Добавить();
	СтрокаТ.ИконкаРаздела 		 = 7;
	СтрокаТ.ПредставлениеРаздела = НСтр("ru = 'Сервис'");
	СтрокаТ.Раздел 				 = "Сервис";
	
	СтрокаТ = тзРазделы.Добавить();
	СтрокаТ.ИконкаРаздела 		 = 8;
	СтрокаТ.ПредставлениеРаздела = НСтр("ru = 'Помощь'");
	СтрокаТ.Раздел 				 = "Помощь";
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Форма
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ПрочестьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы());
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");

КонецПроцедуры

&НаСервере
Функция НастройкиФормы()

	Возврат "ВерсияНастроек,АвтозапускОбменаДанными,СкрыватьБыструюНастройку,ПроверятьРегламентноеЗадание";
	
КонецФункции // НастройкиФормы()

&НаСервере
Процедура СохранитьЗначениеНастройки(ИмяНастройки, Значение)
	РеквизитФормыВЗначение("Объект").СохранитьЗначениеНастройки(ИмяНастройки, Значение);
КонецПроцедуры

&НаСервере
Процедура ОбновитьГотовностьСправочников()
	
	СтррКонтекст.СтатусыСправочников 
		= РеквизитФормыВЗначение("Объект").ГотовностьСправочников("НастройкиАгентов,МобильныеУстройства");
	
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьГотовностьНастроекОбмена()
	
	СтррКонтекст.СтатусНастройкиОбмена = РеквизитФормыВЗначение("Объект").ГотовностьНастроекОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГотовностьФоновогоЗадания()
	
	Если Объект.ПроверятьРегламентноеЗадание Тогда
		СтррКонтекст.СтатусФоновогоЗадания = РеквизитФормыВЗначение("Объект").ГотовностьФоновогоЗадания();
	Иначе
		СтррКонтекст.СтатусФоновогоЗадания = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочестьСписокАгентовИзНастроек()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки("НастройкиАгентов");
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ПрочестьВсеНастройкиИОбновитьСтатус()
	ПрочестьНастройкиСервер();
	ОбновитьГотовностьНастроекОбмена();
	ОбновитьГотовностьФоновогоЗадания();
	ОбновитьСтатусГотовности(Ложь);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуСервер(ИмяНастройки)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначенияНастроекОбработки(ИмяНастройки); 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Статусы

// Функция проверяет готовность модуля к работе (готовность настроек модуля) и выводит
// на форме информацию о его готовности.
&НаКлиенте
Функция ОбновитьСтатусГотовности(ПрочитатьИзНастроек)
	
	Если ПрочитатьИзНастроек Тогда
		Попытка
			ОбновитьГотовностьСправочников();
		Исключение
			ПоказатьПредупреждение(Неопределено, "Запущен второй экземпляр обработки в фоновом режиме. Закройте текущую обработку или ее фоновый сеанс (отмените регламентное задание).");
		КонецПопытки;
		ОбновитьГотовностьНастроекОбмена();
		ОбновитьГотовностьФоновогоЗадания();
	КонецЕсли;
	
	ЕстьЗамечания = Ложь;
	Элементы.ДекорацияПриветствие.Заголовок = ПолучитьПриветствие();
	СтрокаБраузера = ПолучитьАдресСтраницыПриветствия();
	
	////////////////////////////////////////////////
	// обновляем статус готовности справочников
	
	СтррСтатус = СтррКонтекст.СтатусыСправочников.НастройкиАгентов;
	Если СтррСтатус.Готово Тогда
		Элементы.НадписьГотовностьАгентов.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьАгентов.Видимость = Истина;
		Элементы.НадписьГотовностьАгентов.Заголовок = СтррСтатус.Описание;
	КонецЕсли;
	
	СтррСтатус = СтррКонтекст.СтатусыСправочников.МобильныеУстройства;
	Если СтррСтатус.Готово Тогда
		Элементы.НадписьГотовностьМУ.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьМУ.Видимость = Истина;
		Элементы.НадписьГотовностьМУ.Заголовок = СтррСтатус.Описание;
	КонецЕсли;
	
	////////////////////////////////////////////////
	// обновляем статус настроек обмена
	
	СтррСтатус = СтррКонтекст.СтатусНастройкиОбмена;
	Если СтррСтатус.Готово Тогда
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Истина;
		Элементы.НадписьГотовностьНастроекОбмена.Заголовок = СтррСтатус.Описание;
	КонецЕсли;
	
	////////////////////////////////////////////////
	// обновляем статус готовности фонового задания
	
	ВидимостьБыстройНастройки = Неопределено; // быстрая настройка не исправит проблемы регистраци фонового задания, но может  исправить другие замечания (если они есть)
	
	СтррСтатус = СтррКонтекст.СтатусФоновогоЗадания;
	Если СтррСтатус = Неопределено Тогда
		Элементы.НадписьГотовностьРегламентногоЗадания.Видимость = Ложь;
	ИначеЕсли СтррСтатус.РегистрацияОбработки.Готово И СтррСтатус.РегламетноеЗадание.Готово Тогда
		Элементы.НадписьГотовностьРегламентногоЗадания.Видимость = Ложь;
	Иначе
		Если Не ЕстьЗамечания Тогда
			ВидимостьБыстройНастройки = Ложь; // это единственное замечание к настройкам обрабтки (регистрация как фонового задания), скрываем предложение быстрой настройки
		КонецЕсли; 
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьРегламентногоЗадания.Заголовок = НСтр("ru = 'Есть замечания к настройке регламентного задания.'");
		Элементы.НадписьГотовностьРегламентногоЗадания.Видимость = Истина;
	КонецЕсли; 
	
	Элементы.ДекорацияСтатус.Заголовок = ?(ЕстьЗамечания, 
				НСтр("ru = 'Пожалуйста, примите меры:'"), 
				НСтр("ru = 'Все готово к работе. Замечаний нет.'"));
				
	Элементы.ДекорацияЗамечанияОтступ.Видимость	   = ЕстьЗамечания;					
	Элементы.ДекорацияЗамечанияОтступ1.Видимость   = ЕстьЗамечания;
	
	Если ВидимостьБыстройНастройки = Неопределено Тогда
		ВидимостьБыстройНастройки = Не Объект.СкрыватьБыструюНастройку И ЕстьЗамечания;		
	КонецЕсли; 
	Элементы.ДекорацияБыстраяНастройка.Видимость   = ВидимостьБыстройНастройки;
	Элементы.ГруппаБыстраяНастрокаКнопка.Видимость = ВидимостьБыстройНастройки;
				
	Элементы.НадписьОбменДанными.Видимость = Не ЕстьЗамечания;
	Элементы.АвтозапускОбменаДанными.Видимость = Не ЕстьЗамечания;
	
	тзРазделы[0].ИконкаРаздела = ?(ЕстьЗамечания, 2, 1);
	
	Возврат ЕстьЗамечания;

КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусГотовностиПоТаймеру()
	
	ОбновитьСтатусГотовности(Истина);
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Статусы
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Приветствие

&НаКлиенте
Функция ПолучитьВремяСуток()
	
	ТекДата = ТекущаяДата();
	Час = Час(ТекДата) + Минута(ТекДата) / 60;
	
	Если (Час >= 22  И Час <= 24) Или (Час >= 0 И Час <= 5) Тогда
		Результат = "night";
	ИначеЕсли (Час > 5) И (Час <= 11) Тогда
		Результат = "morning";
	ИначеЕсли (Час > 11) И (Час <= 15.5) Тогда
		Результат = "day";
	Иначе
		Результат = "evening";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяПользователяПолучить()
	
	Имя = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
	// пытаемся убрать фамилию
	Поз = Найти(Имя, " ");
	Если Поз = 0 Тогда
	    Возврат Имя;
	Иначе
		ИО = СокрЛ(Прав(Имя, СтрДлина(Имя) - Поз));
		Если СтрДлина(ИО) < 5 Тогда
		    Возврат Имя;
		Иначе
			Возврат ИО;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьАдресСтраницыПриветствия()
	
	Адрес = "https://%1/Widget?time=%2&city=%3&cityen=%4";
	Город = "Москва";
	City  = "Moscow";
	
	Если ТипЗнч(СтррКонтекст.Местоположение) <> Тип("Структура") Тогда // местоположение пользователя еще не задано
		
		ПолучитьМестоположение = Ложь;
		Если ТипЗнч(СтррКонтекст.ВремяМестоположения) <> Тип("Дата") Тогда
			ПолучитьМестоположение = Истина;
		ИначеЕсли НачалоДня(СтррКонтекст.ВремяМестоположения) <> НачалоДня(ТекущаяДата()) Тогда
			ПолучитьМестоположение = Истина;
		КонецЕсли; 
		
		Если ПолучитьМестоположение Тогда
			// определяем местоположение по IP-адресу
			МодульКарты = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст);
			стррМестоположение = МодульКарты.МестоположениеПользователяПолучить();
			Если стррМестоположение.Свойство("error") Тогда
				Сообщить(НСтр("ru = 'Не удалось определить местоположение для информации о погоде. Причина:'") + Символы.ПС + стррМестоположение.error);
			Иначе
				СтррКонтекст.Местоположение = стррМестоположение;
			    СохранитьЗначениеНастройки("МестоположениеДляИнформера", СтррКонтекст.Местоположение);
			КонецЕсли; 
			СтррКонтекст.ВремяМестоположения = ТекущаяДата();
			СохранитьЗначениеНастройки("ВремяМестоположения", СтррКонтекст.ВремяМестоположения);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ТипЗнч(СтррКонтекст.Местоположение) = Тип("Структура") Тогда
		//((vd_190312
		//Попытка
		//	Город = СтррКонтекст.Местоположение.city_ru;
		//	City  = СтррКонтекст.Местоположение.city_en;
		//Исключение
		//КонецПопытки;
		Если СтррКонтекст.Местоположение.Свойство("city_ru") И ЗначениеЗаполнено(СтррКонтекст.Местоположение.city_ru) Тогда
			Город = СтррКонтекст.Местоположение.city_ru;
		КонецЕсли;
		Если СтррКонтекст.Местоположение.Свойство("city_en") И ЗначениеЗаполнено(СтррКонтекст.Местоположение.city_en) Тогда
			City = СтррКонтекст.Местоположение.city_en;
		КонецЕсли;		
		//))vd_190312
	КонецЕсли;
	            	
	Если Не ЗначениеЗаполнено(Город) И ЗначениеЗаполнено(City) Тогда
		Город = City;
	КонецЕсли; 
	
	Адрес = СтрШаблон_(Адрес, СтррКонтекст.АдресСтраницыПриветствия, ПолучитьВремяСуток(), Город, City);
	Адрес = КодироватьСтрокуСервер(Адрес);
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПриветствие() 
	
	ВремяСуток = ПолучитьВремяСуток();

	Если ВремяСуток = "night" Тогда
	    Приветствие = НСтр("ru = 'Доброй ночи'");
	ИначеЕсли ВремяСуток = "morning" Тогда
		Приветствие = НСтр("ru = 'Доброе утро'");
	ИначеЕсли ВремяСуток = "day" Тогда
		Приветствие = НСтр("ru = 'Добрый день'");
	Иначе
		Приветствие = НСтр("ru = 'Добрый вечер'");
	КонецЕсли;
	
	Имя = ИмяПользователяПолучить();
	Если Не ПустаяСтрока(Имя) Тогда
		Приветствие = Приветствие + ", " + Имя;    
	КонецЕсли;	
	Приветствие = Приветствие + "!";
	
	Возврат Приветствие;
	
КонецФункции

&НаКлиенте
Процедура ИнформационноеПолеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаЗакладкуОсновныеХарактеристикиНоменклатуры" Тогда 
		
		МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
		стррПараметры = Новый Структура("Закладка,Сообщение", "ГруппаОсновные", "УказатьВыгружатьХарактеристикиНоменклатуры");
		Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", стррПараметры);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаЗакладкуОсновныеИспользоватьКонтрагентов" Тогда
		
		МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
		стррПараметры = Новый Структура("Закладка,Сообщение", "ГруппаОсновные", "УказатьИспользоватьКонтрагентов");
		Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", стррПараметры);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаЗакладкуОсновныеИспользоватьДоговорыИлиСоглашения" Тогда
		
		МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
		стррПараметры = Новый Структура("Закладка,Сообщение", "ГруппаОсновные", "УказатьИспользоватьДоговорыИлиСоглашения");
		Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", стррПараметры);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НастройкиНоменклатуры"
		  Или НавигационнаяСсылкаФорматированнойСтроки = "CRMИМаркетинг"
		  Или НавигационнаяСсылкаФорматированнойСтроки = "Продажи" Тогда 
		  
		  ОткрытьФорму(
				"Обработка.ПанельАдминистрированияУТ.Форма." + НавигационнаяСсылкаФорматированнойСтроки,
		  		Новый Структура,
				ЭтаФорма, 
				"Обработка.ПанельАдминистрированияУТ.Форма." + НавигационнаяСсылкаФорматированнойСтроки + ".ОтдельноеОкно");
	
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Приветствие
#КОнецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти
