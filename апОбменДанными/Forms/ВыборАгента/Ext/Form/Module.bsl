#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК; // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Не Параметры.Свойство("ПараметрыВыбора") Тогда
		ВызватьИсключение("Ожидается свойство 'ПараметрыВыбора'.");
	КонецЕсли;
	
	СтррКонтекст =  Параметры.ПараметрыВыбора;	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	СтрСвойства = "Пользователь";
	Если Не ТекОбъект.СтруктураЕстьСвойства(СтррКонтекст, СтрСвойства) Тогда
		ВызватьИсключение("У переданной структуры ""ПараметрыВыбора"" должны быть свойства: " + СтрСвойства);
	КонецЕсли;
	
	ПрочитатьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	Элементы.ГруппаСостояние.ЦветФона 		= СтррКонтекст.Цвета.ФонСостояние;
	
	Если СтррКонтекст.Свойство("МножественныйВыбор") И СтррКонтекст.МножественныйВыбор = Истина Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Выберите торговых агентов'");
	КонецЕсли;
	
	ОбновитьКолонкуМУ();	
	Если ПоказатьТолькоРаботающих Тогда
		ОбновитьСписокАгентовКлиент();
	КонецЕсли; 
	ВыделитьСтрокуПоПользователю(СтррКонтекст.Пользователь);
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	Иначе
		КодСтатуса = Неопределено;
		СтррКонтекст.Свойство("КодСтатусаАгента", КодСтатуса);
		Если КодСтатуса <> Неопределено И СтрокаТ.СтатусНастроек <> КодСтатуса Тогда
			Текст = НСтр("ru = 'Данного агента нельзя выбрать по причине:'") + Символы.ПС + Элементы.ДекорацияСтатус.Заголовок;
			ПоказатьПредупреждение(Неопределено, Текст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтррКонтекст.Свойство("МножественныйВыбор") И СтррКонтекст.МножественныйВыбор = Истина Тогда
		Результат = Новый Массив;
		Для каждого идСтроки Из Элементы.НастройкиАгентов.ВыделенныеСтроки Цикл
			СтрокаТ = Объект.НастройкиАгентов.НайтиПоИдентификатору(ИдСтроки);
			Результат.Добавить(СтрокаТ.Пользователь);
		КонецЦикла; 
	Иначе
		Результат = СтрокаТ.Пользователь;
	КонецЕсли; 
	
	Закрыть(Результат);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьТолькоРаботающих(Команда)
	
	ПоказатьТолькоРаботающих = Не ПоказатьТолькоРаботающих;
	ОбновитьСписокАгентовКлиент();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы_НавигацияПоФормам

&НаКлиенте
Процедура КомандаПоказатьТорговыхАгентов(Команда)
	
	НастройкиАгентовОткрытьНастройки(Ложь);
	
КонецПроцедуры

// ОбработчикиКомандФормы_НавигацияПоФормам
#КонецОбласти

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТабНастройкиАгентов

&НаКлиенте
Процедура НастройкиАгентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КомандаВыбрать(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПриАктивизацииСтроки(Элемент)
	
	ОбновитьТекстСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	НастройкиАгентовОткрытьНастройки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАгентовОткрытьНастройки(ДляДобавленияНового)
	
	СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	Пользователь = ?(СтрокаТ = Неопределено, Неопределено, СтрокаТ.Пользователь);
	МодульК().ОткрытьФормуОбработки("НастройкиАгентов", СтррКонтекст);
	стррПараметры = Новый Структура("Пользователь,Добавить", Пользователь, ДляДобавленияНового);
	Оповестить("АПНастройкиАгентов_Оповещение", стррПараметры);
	
	Закрыть();	
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыТабНастройкиАгентов
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ПрочитатьНастройки()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки("НастройкиАгентов,МобильныеУстройства");
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ТабНастройкиАгентов

&НаКлиенте
Процедура ОбновитьКолонкуМУ()

	СтррОтбор = Новый Структура("ID");
	тзМобильныеУстройства = Объект.МобильныеУстройства;
	
	Для Каждого СтрокаТ Из Объект.НастройкиАгентов Цикл
		Если ЗначениеЗаполнено(СтрокаТ.СсылкаМУ) Тогда
			СтррОтбор.ID = СтрокаТ.СсылкаМУ;
			МассивМУ = тзМобильныеУстройства.НайтиСтроки(СтррОтбор);
			СтрокаТ.ПредставлениеМУ = ?(МассивМУ.Количество() = 0, "", МассивМУ[0].Наименование);
		Иначе
			СтрокаТ.ПредставлениеМУ = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуПоПользователю(Пользователь)
	
	мСтроки = Объект.НастройкиАгентов.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
	Если мСтроки.Количество() <> 0 Тогда
		Элементы.НастройкиАгентов.ТекущаяСтрока = мСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокАгентовКлиент()
	
	ЭтаФорма.Элементы.ТабНастройкиАгентовПоказатьТолькоРаботающих.Пометка = ПоказатьТолькоРаботающих;
	
	Если ПоказатьТолькоРаботающих Тогда
		мУдаляемыеСтроки = Новый Массив;
		ТЗ = Объект.НастройкиАгентов;
		Для каждого СтрокаТ Из ТЗ Цикл
			Если СтрокаТ.СтатусНастроек <> 1 Тогда
				мУдаляемыеСтроки.Добавить(СтрокаТ.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
		Если мУдаляемыеСтроки.Количество() <> 0 Тогда
			Для Каждого ИдСтроки Из мУдаляемыеСтроки Цикл
				ТЗ.Удалить(ТЗ.Индекс(ТЗ.НайтиПоИдентификатору(ИдСтроки)));
			КонецЦикла;
			ОбновитьТекстСтатуса();
		КонецЕсли;
	Иначе
		ПрочитатьНастройки();
		ОбновитьКолонкуМУ();
		ОбновитьТекстСтатуса();
	КонецЕсли; 

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ТабНастройкиАгентов
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СтатусыСтрокиТабНастройкиАгентов

// Процедура обновляет текст статуса в нижней части экрана и итог количества строк в таблице
&НаКлиенте
Процедура ОбновитьТекстСтатуса(СтрокаТ = Неопределено)
	
	Статус = "";
	
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = Элементы.НастройкиАгентов.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТ <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТ.Пользователь) Тогда
			
			Статус = Статус + НСтр("ru = 'Пользователь не заполнен.'") + " ";
			
		ИначеЕсли Не СтрокаТ.Работает Тогда
			
			Статус = Статус + НСтр("ru = 'Агент не работает (больничный, отпуск).'") + " ";
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаТ.СсылкаМУ) Тогда
				Статус = Статус + НСтр("ru = 'Мобильное устройство (МУ) у агента не выбрано. Для выбора МУ перейдите в ""Настройки агентов"".'") + " ";
			КонецЕсли;
		
		КонецЕсли;
		
		Если Статус = "" Тогда
			Если СтрокаТ.СтатусНастроек = 2 Тогда
				Статус = НСтр("ru = 'Есть критичные замечания к настройкам агента. Подробнее смотрите ""Настройки агентов"".'");
			Иначе
				Статус = НСтр("ru = 'Настройки агента заданы.'");				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияСтатус.Заголовок = Статус;
	
	Если ВсегоСтрок <> Объект.НастройкиАгентов.Количество() Тогда // для вывода количества строк в подвале
		ВсегоСтрок = Объект.НастройкиАгентов.Количество();
		Элементы.ТабНастройкиАгентовПользователь.ТекстПодвала = ?(ВсегоСтрок = 0, "", НСтр("ru = 'Всего: '") + Строка(ВсегоСтрок));
	КонецЕсли;
	
	// боремся с отображением "всех иконок" в Платформе - когда в ТабНастройкиАгентов нет строк - убираем видимость иконки статуса
	Если Элементы.ТабНастройкиАгентовСтатусНастроекИконка.Видимость <> (ВсегоСтрок > 0) Тогда
		Элементы.ТабНастройкиАгентовСтатусНастроекИконка.Видимость = (ВсегоСтрок > 0);
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_СтатусыСтрокиТабНастройкиАгентов
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти