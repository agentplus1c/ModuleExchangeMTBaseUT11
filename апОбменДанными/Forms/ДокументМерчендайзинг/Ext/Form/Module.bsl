
#Область ГлобальныеПеременные

&НаКлиенте
Перем МодульМТ;  // Общий клиентский модуль со спецификой мобильной торговли

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");			
	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ID");	
	ТекОбъект.ВОКонтекстФормыДополнить(СтррКонтекст, "_Мерчендайзинг", Ложь);
	ПрочестьОбъектИзХранилища(Параметры.ID);
	
	ТекОбъект.ВОПриСозданииФормыЭлемента(ЭтотОбъект);
	
	Элементы.ТоварыХарактеристика.Видимость = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Загружаем общий клиентский модуль "МодульОбщийМТ". В параметре "Параметры" важно передавать структуру с заполненным
	// свойством "ВХОбщиеПараметры" - оно используется для предотвращения повторной загрузки текущей обработки.
	МодульМТ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщийМТ", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийМТ"); // в СтррКонтекст есть заполненное свойство "ВХОбщиеПараметры"
	МодульМТ.ВОПриОткрытии(ЭтотОбъект);
	
	ФормаОбновитьЗаголовок();
	ФормаОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	//(av_270818
	Если Команда.Имя = "ПрикрепленныеФотографии" Тогда
		Если Модифицированность	Или Не ЗначениеЗаполнено(ID) Тогда
			Сообщить("Документ нужно записать перед выполнением команды");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//)av_270818
		
	МодульМТ.КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	СохранитьОбъектВХранилищеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	СохранитьОбъектВХранилищеКлиент(1); // признак Проведен
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	СохранитьОбъектВХранилищеКлиент(1); // признак Проведен
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	МодульМТ.ПартнерПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	МодульМТ.КонтрагентПриИзменении(ЭтотОбъект, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("КонтрагентНачалоВыбораЗавершение", ЭтотОбъект);
	стррПараметры = ?(ЗначениеЗаполнено(Партнер), Новый Структура("Отбор", Новый Структура("Партнер", Партнер)), Неопределено);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", стррПараметры,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МодульМТ.КонтрагентНачалоВыбораЗавершение(ЭтотОбъект, Результат, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	МодульМТ.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	МодульМТ.ДоговорПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	МодульМТ.СоглашениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сначала выберите клиента.'"));
		Возврат;
	КонецЕсли;
	
	Если МодульМТ.ПоколениеКонфигурации("<=УТ_11.1") Тогда
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Партнер, Соглашение, Дата);
		
	ИначеЕсли МодульМТ.ПоколениеКонфигурации("<=УТ_11.2") Тогда
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Партнер, Соглашение, Дата,,,,Объект);
	
	Иначе
		
		стррПараметры = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
		
		стррПараметры.Элемент                     = Элемент;
		стррПараметры.Партнер                     = Партнер;
		стррПараметры.Документ                    = Соглашение;
		стррПараметры.ДатаДокумента               = Дата;
		стррПараметры.ДанныеФормыСтруктура        = Объект;
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(стррПараметры, СтандартнаяОбработка);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы_РеквизитыМТ

&НаКлиенте
Процедура ИнфоМТВремяСозданияНажатие(Элемент, СтандартнаяОбработка)
	
	МодульМТ.РеквизитМТПриНажатииСсылки(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементМТСведенияНажатие(Элемент)
	
	стррРезультат = МодульМТ.РеквизитМТПриНажатииСсылки(ЭтотОбъект, Элемент);
	Если ТипЗнч(стррРезультат) = Тип("Структура") Тогда // нужно показать выбор из меню
	  	ПоказатьВыборИзМеню(стррРезультат.Оповещение, стррРезультат.Меню, Элемент);
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы_РеквизитыМТ
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ЭлементФормыПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПересчитатьЗначенияСумм();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПересчитатьЗначенияСумм();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПересчитатьЗначенияСумм("Цена");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ПересчитатьИтогСуммыДокумента();
	ФормаОбновитьЗаголовок();
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы_Товары
#КонецОбласти

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Хранилище

// Процедура считывает объект (документ) из хранилища значений.
&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ID = КлючID;
	стррОбъект = ТекОбъект.ВОЭлементЗагрузить(СтррКонтекст.ВО, ID);
	
	Если стррОбъект = Неопределено Тогда // создание нового документа, заполняем документ значениями по умолчанию

	Иначе
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, стррОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьОбъектВХранилищеКлиент(НовыйСтатус = Неопределено)
	
	МодульМТ.ВОПередЗаписьюЭлемента(ЭтотОбъект, НовыйСтатус);
	
	СохранитьОбъектВХранилище();
	УстановитьМодифицированостьФормы(Ложь);
	Оповестить("АПДокументЗаписан_" + СтррКонтекст.ВО.ВидОбъекта, ID);
	
	Возврат Истина;
	
КонецФункции

// Процедура сохраняет объект (документ) в хранилище значений.
&НаСервере
Процедура СохранитьОбъектВХранилище()
	
	стрРеквизитыШапкиОсн = "Статус,Дата,Номер,ВремяНачала,ВремяОкончания,Широта,Долгота,АдресПоГеокодеру,Менеджер,Комментарий,ДокументОснование";
	стрРеквизитыШапкиДоп = "Партнер,Контрагент,Соглашение,Организация,Договор,СуммаДокумента";
	стрРеквизитыТЧ		 = "Товары";
	стррОбъект = Новый Структура(стрРеквизитыШапкиОсн + "," + стрРеквизитыШапкиДоп + "," + стрРеквизитыТЧ); // сохраняемые реквизиты объекта
	ЗаполнитьЗначенияСвойств(СтррОбъект, ЭтаФорма,, стрРеквизитыТЧ);
	
	стррОбъект.Товары = Товары.Выгрузить();
	
	РеквизитФормыВЗначение("Объект").ВОЭлементСохранить(СтррКонтекст.ВО, ID, стррОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьОбъектВХранилищеКлиент() Тогда
			Закрыть();
		КонецЕсли; 
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте
Процедура ФормаОбновитьВидимостьЭлементов()
	
	МодульМТ.ФормаСведенияИзМТОбновить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОбновитьЗаголовок()
	
	ВсегоСтрок = Товары.Количество();
	
	Если СуммаДокумента = 0 Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Мерчендайзинг'");	
	Иначе
		ЭтаФорма.Заголовок = СтрШаблон_(НСтр("ru = 'Мерчендайзинг (Сумма: %1)'"), Формат(СуммаДокумента, "ЧДЦ=2"));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогСуммыДокумента()
	
	СуммаДокумента = Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим = Истина) Экспорт
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.Сохранить.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПроверитьИОбновитьУпаковку(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТ = Элементы.Товары.ТекущиеДанные;

	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ТоварыУпаковкаНачалоВыбораЗавершение", ЭтотОбъект);
	стррПараметры = ?(ЗначениеЗаполнено(СтрокаТ.Номенклатура), Новый Структура("Номенклатура", СтрокаТ.Номенклатура), Неопределено);
	ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.Форма.ФормаВыбораИзДокументов", стррПараметры,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтрокаТ = Элементы.Товары.ТекущиеДанные;
		СтрокаТ.Упаковка = Результат;
		ПроверитьИОбновитьУпаковку(СтрокаТ);
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

&НаСервере
Функция УпаковкаНоменклатурыПоУмолчанию(Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИОбновитьУпаковку(СтрокаТ)
	
	Если Не ЗначениеЗаполнено(СтрокаТ.Упаковка) И ЗначениеЗаполнено(СтрокаТ.Номенклатура) Тогда
		СтрокаТ.Упаковка = УпаковкаНоменклатурыПоУмолчанию(СтрокаТ.Номенклатура);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗначенияСумм(РеквизитПересчета = Неопределено)
	
	СтрокаТ = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрежняяСумма = СтрокаТ.Сумма;
	
	Если РеквизитПересчета = "Цена" Тогда
		Если СтрокаТ.КоличествоУпаковок = 0 Тогда
			СтрокаТ.Цена = СтрокаТ.Сумма;	
		Иначе
			СтрокаТ.Цена = СтрокаТ.Сумма / СтрокаТ.КоличествоУпаковок;	
		КонецЕсли; 
	Иначе
		СтрокаТ.Сумма = СтрокаТ.КоличествоУпаковок * СтрокаТ.Цена;
	КонецЕсли;
	
	СуммаДокумента = СуммаДокумента + СтрокаТ.Сумма - ПрежняяСумма;
	
	ФормаОбновитьЗаголовок();
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции
#КонецОбласти 
