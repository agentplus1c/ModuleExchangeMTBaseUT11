
#Область Описание
	
/////////////////////////////////////////////////////////////////////////////
// Описание модуля работы с формой.
// 
// 
// *** Общая информация.
// Форма предназначена для настроек обмена данными с мобильным приложением (Агент Плюс: Мобильная торговля Базовая 2.0).
// 
// *** Возможность открытия формы с активной закладкой раздела через обработчик событий "ОбработкаОповещения".
// В переменной "ИмяСобытия" - указывается значение "АПНастройкиМодуля_ПоказатьНаФорме" тип Строка.
// В структуре "Параметры":
//		1) свойство "Закладка"  - необходимо указать имя группы элемента формы соответствующей закладки раздела.
//		2) свойство "Сообщение" - указывается значение для оповещения пользователя.
// Также имеется возможность выбрать на форме нужную закладу через сообщение "АПНастройкиМодуля_ПоказатьНаФорме"
// 
/////////////////////////////////////////////////////////////////////////////

// Описание                     
#КонецОбласти


#Область ГлобальныеПеременные

&НаКлиенте
Перем гМодульК;  // общий клиентский модуль
&НаКлиенте
Перем МодульЛК; // модуль работы с "Личным кабинетом"

//&НаКлиенте	   //vd_190312 Не используется
//Перем гАПОбъект; // объект из внешней компоненты APPlus.dll, используется только для обмена через "Агент Плюс: Службу обмена данными" (СОД)

// ГлобальныеПеременные
#КонецОбласти


#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СтррКонтекст = Новый Структура("СтатусыСправочников,КаталогИзменен,ИспользоватьЗаказы,СбросНастроек,ПроводитьДокументыСписок");
	
	СтррКонтекст.Вставить("Конфигурация"); // KT2000_Alcohol_Trade признаки для получения свойств конфигурации
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.СбросНастроек 	= Ложь;	
	СтррКонтекст.КаталогИзменен = Ложь; // признак, что при записи настроек нужно будет создать подкаталоги
	СтррКонтекст.ИспользоватьЗаказы = Константы.ИспользоватьЗаказыКлиентов.Получить(); // для проверки варианта загрузки заказов
	
	ТекОбъект.ЗаполнитьСпособыОбмена(Элементы.СпособОбмена.СписокВыбора);
	СправочникиПрочитатьИзНастроекГотовностьКОбмену();
	
	ТекОбъект.ЗаполнитьРежимыВыгрузкиКодовНоменклатуры(Элементы.РежимВыгрузкиКодовНоменклатуры.СписокВыбора);
	ТекОбъект.ЗаполнитьВариантыРегистровОстатковНоменклатуры(Элементы.РегистрОстатковТоваров.СписокВыбора);
	ТекОбъект.ЗаполнитьСпособыВыгрузкиДоговоров(Элементы.ИспользоватьДоговорыИлиСоглашения.СписокВыбора);
	ТекОбъект.ЗаполнитьРежимыВыгрузкиВУД(Элементы.РежимВыгрузкиВУД.СписокВыбора);
	
	ВосстановитьНастройкиСервер();
	
	ИзменитьДоступностьНастроекИспользоватьКонтрагентов();
	ИзменитьДоступностьНастроекИспользоватьДоговорыИлиСоглашения();
	ИзменитьДоступностьНастроекИспользоватьХарактеристики();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	

	Элементы.СгенерироватьНастройкиАгентПлюсСОД.РасширеннаяПодсказка.ЦветТекста = СтррКонтекст.Цвета.ТекстПояснение;
	
	ОбновитьСтатусГотовности(Ложь);

	ИзменитьДоступностьВыгрузкиПерсональныхЦен();	
	//ИзменитьДоступностьВыгружатьКодыНоменклатурыВНаименование(); //vd_190613
	ИзменитьДоступностьНастроекИсторииПродаж();
	ИзменитьДоступностьНастроекВыгрузкиЗаказов();
	//vd_181214ИзменитьДоступностьНастроекВыгрузкиПеремещений(); // sd_25082017
	ИзменитьДоступностьНастроекМаршрута();
	ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	ИзменитьДоступностьРегистрацииРегламентногоЗадания();
	
	НастройкиВыгрузкиКлиентовПриОткрытииФормы(); //vd_180428 Изменено название.
	
	ЗаполнитьСпискиВыбора();                                                  
	ОбновитьВидНастроекОбмена();
	//ОбновитьСпособРасчетаДолгов(); //vd_190228 Не используется
	ОбновитьПредупреждениеДляЭлементов();
	
	
	ОбновитьВидимостьСтатусовЗагрузкиЗаказов(); 	
	УстановитьМодифицированостьФормы(Ложь);
	
	Если ПустаяСтрока(Объект.КаталогДанных) Тогда // первым делом просим указать каталог данных
		Элементы.РазделыНастроек.ТекущаяСтраница = Элементы.ГруппаКаталоги;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИнформацияОСбросеНастроек) Тогда
		Элементы.ИнформацияОСбросеНастроек.ЦветТекста = СтррКонтекст.Цвета.ТекстВнимание;	
		Элементы.ИнформацияОСбросеНастроек.Видимость = Истина;
		Элементы.ИнформацияОСбросеНастроек.Подсказка = ИнформацияОСбросеНастроек;
	Иначе
		Элементы.ИнформацияОСбросеНастроек.Видимость = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КаталогОбмена) И Не ПустаяСтрока(Объект.КаталогДанных) Тогда
		ПодключитьОбработчикОжидания("СоздатьКаталогОбменаИнтерактивно", 1, Истина);
	КонецЕсли;
		
	Элементы.ГруппаКаталогДанныхРекомендация.ЦветФона = СтррКонтекст.Цвета.ФонВнимание;
	
	ОбновитьРекомендациюДляКаталогаДанных();
	
	////{{vd_180322 Баг 37993. Статусы реализации . Так реализовано тк УС блокирует выбор значений СтатусыРеализацийТоваровУслуг.
	//сзПеречисленияРеализаций = ПолучитьПеречисленияРеализаций();
	////Элементы.СтатусРеализацияТоваровУслуг.СписокВыбора.Очистить();
	//Для Каждого Элемент Из сзПеречисленияРеализаций Цикл
	//	Элементы.СтатусРеализацияТоваровУслуг.СписокВыбора.Добавить(Элемент);	
	//КонецЦикла;
	////}}vd_180322 Баг 37993. Статусы реализации
	
	НастроитьПроводитьДокументыСписок = "Настроить";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиАгентовИзмененияЗаписаны" Тогда
		
		ОбновитьСтатусГотовности(Истина);
		
	ИначеЕсли ИмяСобытия = "АПМобильныеУстройстваИзменениеСпискаМУ" Тогда
		
		ОбновитьСтатусГотовности(Истина);
		
	ИначеЕсли ИмяСобытия = "АПЛКОповещение" Тогда // оповещение от модуля ЛК
		
		Если Параметр.ВидДанных = "ВсеНастройки" Или Параметр.ВидДанных = "КаналыОбмена" Тогда
			Если Параметр.ЕстьОшибки Тогда
				ВывестиСообщения(Параметр, Ложь);
			ИначеЕсли Параметр.ВидДанных = "ВсеНастройки" Тогда
				ЛКЗагрузитьНастройкиПродолжить(Параметр);
			Иначе // Параметр.ВидДанных = "КаналыОбмена"
				ЛКЗагрузитьНастройкиОбменаПродолжить(Параметр.Результат, Источник = "БыстраяНастройка");
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПЗакрытьФормуОбработки" Тогда
		
		Если Параметр = "*" Или Найти(","+Параметр+",", ",НастройкиМодуля,") <> 0 Тогда
			Если ЭтаФорма.Открыта() Тогда
				ЭтаФорма.Модифицированность = Ложь;
				ЭтаФорма.Закрыть();
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПНастройкиМодуля_ПоказатьНаФорме" Тогда
		
		Если Не ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Открыть();
		КонецЕсли; 
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("Закладка") Тогда
				Элементы.РазделыНастроек.ТекущаяСтраница = Элементы[Параметр.Закладка];
			КонецЕсли; 
			
			Если Параметр.Свойство("Сообщение") Тогда
				Если Параметр.Сообщение = "ВыбратьВыгружатьМаршруты" Тогда
					Текст = НСтр("ru = 'Выберите флажок ""Интервал выгрузки маршрутов"" и укажите размер интервала.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ВыгружатьМаршруты");
				ИначеЕсли Параметр.Сообщение = "МаксимальноеРасстояниеОтТТ" Тогда
					Текст = НСтр("ru = 'Подсказка: в параметре указывается максимально допустимое расстояние (в метрах) от торговой точки при создании документов в мобильном устройстве.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.МаксимальноеРасстояниеОтТТ");	
				ИначеЕсли Параметр.Сообщение = "УказатьКаталог" Тогда
					Текст = НСтр("ru = 'Укажите каталог данных.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
				ИначеЕсли Параметр.Сообщение = "УказатьВыгружатьХарактеристикиНоменклатуры" Тогда 
					Текст = НСтр("ru = 'Настройка ""Выгружать характеристики номенклатуры"" автоматически выключена, т.к. в конфигурации учетной системы не используются характеристики номенклатуры.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				ИначеЕсли Параметр.Сообщение = "УказатьИспользоватьКонтрагентов" Тогда
					Текст = НСтр("ru = 'Настройка ""Использовать контрагентов"" автоматически выключена, т.к. в конфигурации учетной системы отключена функциональная опция ""Независимо вести партнеров и контрагентов"".'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				ИначеЕсли Параметр.Сообщение = "УказатьИспользоватьДоговорыИлиСоглашения" Тогда
					Текст = НСтр("ru = 'Настройка ""Использовать договоры или соглашения"" автоматически выключена, т.к. в конфигурации учетной системы не используются соглашения (договоры).'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				Иначе
					ВызватьИсключение("Неизвестное значение свойства Параметр.Сообщение = " + Параметр.Сообщение);
				КонецЕсли; 
			КонецЕсли; 

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Не СтррКонтекст.СбросНастроек И ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормы_СОД

&НаКлиенте
Процедура КомандаСгенерироватьНастройкиАгентПлюсСОД(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Текст = НСтр("ru='Перед генерацией настроек АП:СОД требуется сохранить настройки, измененные на этой форме. Сохранить настройки?'");
		Оповещение = Новый ОписаниеОповещения("КомандаСгенерироватьНастройкиАгентПлюсСОДПродолжить", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		СОДСоздатьФайлНастроек();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСгенерироватьНастройкиАгентПлюсСОДПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьНастройкиКлиент() Тогда
			СОДСоздатьФайлНастроек();
		КонецЕсли;
	Иначе
		ОчиститьСообщения();
		Текст = НСтр("ru='Настройки для службы обмена ""Агент Плюс: СОД"" не сгенерированы!'");
		ПоказатьПредупреждение(Неопределено, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПанельУправленияАПСОД(Команда)
	
	Каталог = Объект.СОДПутьКПанелиУправления;
	Если Не ПустаяСтрока(Каталог) Тогда
		Файл = Новый Файл(Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe");
		Если Файл.Существует() Тогда
			СОДОткрытьПанель();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ВыбратьЛокально", НСтр("ru='Выбрать файл локально'"));
	Кнопки.Добавить("Скачать", НСтр("ru='Скачать с www.agentplus.ru'"));
	Кнопки.Добавить("Отмена",  НСтр("ru='Отмена'"));
	
	Оповещение = Новый ОписаниеОповещения("КомандаОткрытьПанельУправленияАПСОДПродолжить", ЭтаФорма, Неопределено);
	Текст = НСтр("ru='Не указано расположение файла панели управления ""APlusSrvPanel.exe"". Выберите нужное действие.'");
	ПоказатьВопрос(Оповещение, Текст, Кнопки);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПанельУправленияАПСОДПродолжить(ИмяКнопки, ДополнительныеПараметры) Экспорт

	Если ИмяКнопки = Неопределено Или ИмяКнопки = "Отмена" Тогда
		Возврат; 
	ИначеЕсли ИмяКнопки = "ВыбратьЛокально" Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Укажите файл управления службой ""APlusSrvPanel.exe"".'");
		ДиалогВыбораФайла.Фильтр = НСтр("ru='Приложение (*.exe)|*.exe'");
		ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("СОДВыборФайлаПанелиУправленияЛокальноПродолжить", ЭтаФорма, "ВыбратьЛокально"));
	ИначеЕсли ИмяКнопки = "Скачать" Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Укажите каталог назначения для скачивания службы обмена Агент Плюс: СОД.'");
		ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("СОДВыборФайлаПанелиУправленияЛокальноПродолжить", ЭтаФорма, "Скачать"));
	Иначе
		ВызватьИсключение("КомандаОткрытьПанельУправленияАПСОДПродолжить() - неизвестное значение параметра: " + ИмяКнопки);
	КонецЕсли;
	
КонецПроцедуры //КомандаОткрытьПанельУправленияАПСОДПродолжить

// ОбработчикиКомандФормы_СОД
#КонецОбласти 

&НаКлиенте
Процедура КомандаПроверкаПодключения(Команда)
	
	ПроверитьПодключениекFTP();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКаталогДанныхПоУмолчанию(Команда)
	
	Если МодульК().ЭтоLinuxКлиент() Тогда
		КомандаКаталогДанныхПоУмолчаниюПродолжить(КодВозвратаДиалога.Да, Неопределено);
	Иначе
		Сеть = Новый COMObject("wscript.network"); 
		ПользовательОС = Сеть.Username;	
		Оповещение = Новый ОписаниеОповещения("КомандаКаталогДанныхПоУмолчаниюПродолжить", ЭтаФорма, Неопределено);
		Текст = НСтр("ru='Внимание будет указан каталог, доступный только для текущего пользователя Windows (пользователь: %1). При работе ""1С:Предприятия"" в офисной сети каталог не будет доступен для других пользователей, это ограничит использование модуля обмена другими пользователями! Продолжить?'");
		Текст = СтрШаблон_(Текст, ПользовательОС);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКаталогДанныхПоУмолчаниюПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		УстановитьКаталогДанныхПоУмолчанию(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКаталогЛогов(Команда)
	
	Если ПроверитьГотовностьПодкаталогов() Тогда
		Каталог = МодульК().ИмяПодкаталогаДанных("Логи", Объект.КаталогДанных);
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКаталогТреков(Команда)

	Если ПроверитьГотовностьПодкаталогов() Тогда
		Каталог = МодульК().ИмяПодкаталогаДанных("Треки", Объект.КаталогДанных);
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьНастройкиКлиент()
	
	Если СтррКонтекст.КаталогИзменен Или ПустаяСтрока(Объект.КаталогДанных) Тогда // проверяем и создаем все подкаталоги
		СтррРезультат = МодульК().СоздатьПодкаталогиДанных(Объект.КаталогДанных);
		ОчиститьСообщения();
		Если СтррРезультат.ЕстьОшибки Тогда
			Для Каждого СтррСообщение Из СтррРезультат.Сообщения Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррСообщение.Описание,, СтррСообщение.Путь);
			КонецЦикла;
			Если Не ПустаяСтрока(Объект.КаталогДанных) Тогда
				Текст = НСтр("ru='Проверьте права доступа к каталогу ""%1"" или укажите другой каталог данных.'");
				Текст = СтрШаблон_(Текст, Объект.КаталогДанных);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
			КонецЕсли;
			Возврат Ложь;			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользоватьАдресаДоставки И Не ЗначениеЗаполнено(Объект.ВидКИАдресДоставки) Тогда
		ОчиститьСообщения();
		Текст = НСтр("ru='Укажите вид контактной информации для выгрузки адресов доставки!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ВидКИАдресДоставки");
		Возврат Ложь;
	КонецЕсли; 
	
	УстановитьМодифицированостьФормы(Ложь);
	
	СтррФайлСОД = СохранитьНастройкиСервер(); // если нужно обновить файл настроек СОД, файл обновляется
	
	Если СтррФайлСОД.Свойство("Текст") И СтррФайлСОД.Свойство("Кодировка") И СтррФайлСОД.Свойство("ПолноеИмяФайла") Тогда
		СтррФайлСОД.Текст.Записать(СтррФайлСОД.ПолноеИмяФайла, СтррФайлСОД.Кодировка);
	КонецЕсли;
	
	Оповестить("АПНастройкиПараметровОбменаИзмененияЗаписаны");
	
	// { *** Обновление статусов настроек торговых агентов.
	// Если был изменен флажок "Торговля с колес", то в настройках у всех торговых агентов нужно проверить заполнение реквизита МобильныйСклад.
	// Для этого вызываем в модуле "НастройкиАгентов" процедуру ВнешнийВызовОбновитьСтатусыНастройки().
	// Не делаем проверку изменения флажка "Торговля с колес", т.к. на будущее в обработке будут и другие параметры, которые потребует
	// обновления статусов настроек у торговых агентов.
	МодульНА = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "НастройкиАгентов", СтррКонтекст, ЭтаФорма);
	МодульНА.ВнешнийВызовОбновитьСтатусыНастройки();
	// } ***
	
	ПроверитьИСохранитьСпособыДоставки();  //vd_180402 ВидыДоставки. Добавил.


	
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)
	
	СохранитьНастройкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьНастройкиКлиент() Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

//vd_190312 Не используется
//&НаКлиенте
//Процедура КомандаУстановитьКомпонентуAPPlusDLL(Команда)

//	Если МодульК().ЭтоLinuxКлиент()	Тогда
//		Текст = НСтр("ru='Установка компонент поддерживается только для ОС Windows!'");
//		ПоказатьПредупреждение(Неопределено, Текст);
//		Возврат;
//	КонецЕсли;
//	
//	Если гАПОбъект = Неопределено Тогда
//		ПопыткаЗагрузитьВнешнююКомпоненту();
//	КонецЕсли; 
//	
//	Если гАПОбъект <> Неопределено Тогда
//		Оповещение = Новый ОписаниеОповещения("ОтветНаВопросУстановитьДругуюВерсиюКомпоненты", ЭтаФорма, "СброситьНачальныеНастройки");
//		Текст = СтрШаблон_(НСтр("ru='Компонента APPlus.dll уже установлена (версия компоненты: %1). Хотите установить другую версию?'"), гАПОбъект.Версия());
//		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
//	Иначе
//		ПолучитьВнешнююКомпонентуAPPlus();
//	КонецЕсли; 
//	
//КонецПроцедуры

//vd_190312 Не используется
//&НаКлиенте
//Процедура ОтветНаВопросУстановитьДругуюВерсиюКомпоненты(РезультатОтвета, ДополнительныеПараметры) Экспорт
//	
//	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
//		ПолучитьВнешнююКомпонентуAPPlus();
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьНачальныеНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаСброситьНастройкиПродолжить", ЭтаФорма, "СброситьНачальныеНастройки");
	Текст = НСтр("ru='Очистить настройки для инициализации? После обработку нужно перезапустить для новой инициализации настроек.'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьВсеНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаСброситьНастройкиПродолжить", ЭтаФорма, "СброситьВсеНастройки");
	Текст = НСтр("ru='Внимание! Все настройки модуля будут очищены (в т.ч. очищены все служебные справочники: ""Настройки агентов"", ""Мобилные устройства"" и т.д).'")
		+ Символы.ПС + НСтр("ru='Очистить все настройки? После обработку нужно будет перезапустить.'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьНастройкиПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		
		СтррРезультат = СброситьНастройкиСервер(ДополнительныеПараметры);
		Если СтррРезультат.ОшибокНет Тогда
			СтррКонтекст.СбросНастроек = Истина;
			Закрыть();
			Оповестить("АПНастройкиСброшены");
		Иначе
			Текст = НСтр("ru='Не удалось сбросить настройки! Описание ошибки:'") + Символы.ПС + СтррРезультат.Описание;
			ПоказатьПредупреждение(Неопределено, Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СброситьНастройкиСервер(Режим)

	СтррРезультат = Новый Структура("ОшибокНет,Описание", Истина);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если Режим = "СброситьНачальныеНастройки" Тогда
		ТекОбъект.СохранитьЗначениеНастройки("ВерсияНастроек", "");
	ИначеЕсли Режим = "СброситьВсеНастройки" Тогда
		ТекОбъект.СброситьВсеНастройкиМодуля(СтррРезультат);
	Иначе
		ВызватьИсключение("Функция СброситьНастройкиСервер(), неизвестный параметр Режим = " + Режим);
	КонецЕсли;
	
	Возврат СтррРезультат;

КонецФункции

#Область ОбработчикиКомандФормы_ВзамодействиеСЛК

&НаКлиенте
Процедура КомандаВыгрузитьНастройкиВФайл(Команда)
	
	СтррРезультат = ЛКВыгрузитьНастройкиВФайлСервер(); // настройки в виде xml-файла сохраняются в хранилище
	ВывестиСообщения(стррРезультат, Истина);
	Если СтррРезультат.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(СтррРезультат.АдресВХ);
	
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В хранилище отсутствует XML-файл настроек.'"));
		
	Иначе // выбираем папку для сохранения файла
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПолноеИмяФайла = "apconfig.xml";
		Диалог.Расширение = "xml";
		Диалог.Фильтр = СтрШаблон_(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Диалог.Расширение);
		
		Если Диалог.Выбрать() Тогда
			Данные.Записать(Диалог.ПолноеИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настройки сохранены в файл: '") + Диалог.ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКПолучитьНастройкиОбмена(Команда)
	
	ЛКЗагрузитьДанные("КаналыОбмена");

КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКПолучитьВсеНастройки(Команда)
	
	ЛКЗагрузитьДанные("ВсеНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьЛичныйКабинет(Команда)
	
	Модуль = ЛКЗагрузитьМодуль();
	Модуль.Открыть();

КонецПроцедуры

// ОбработчикиКомандФормы_ВзамодействиеСЛК
#КонецОбласти 

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)

	РазделСправки = "";
	Если Элементы.РазделыНастроек.ТекущаяСтраница <> Неопределено Тогда
		РазделСправки = Элементы.РазделыНастроек.ТекущаяСтраница.Имя;
	КонецЕсли; 
	
	Если РазделСправки = "" Или РазделСправки = "ГруппаОбменДанными" Тогда
		РазделСправки = ЭтаФорма.ИмяФормы;
	Иначе
		РазделСправки = ЭтаФорма.ИмяФормы + "_" + РазделСправки;
	КонецЕсли;
	
	МодульК().КомандаСправка(РазделСправки);
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьСтатусНажатие(Элемент)
	
	Если Элемент.Имя = "НадписьГотовностьАгентов" Тогда
		МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("ВыделитьПервогоАгентаСОшибкой", Истина));		
	ИначеЕсли Элемент.Имя = "НадписьГотовностьМУ" Тогда
		МодульК().КомандаВыполнить("ПоказатьМобильныеУстройства");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИсториюПродажПриИзменении(Элемент)
	
	ИзменитьДоступностьНастроекИсторииПродаж();
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьЦветомПросроченныеДолгиПриИзменении(Элемент)
	
	ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхДолговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	стррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Цвет,ЦветПоУмолчанию", Объект.ЦветПросроченныхДолгов, "255,0,0"));
	Оповещение = Новый ОписаниеОповещения("ЦветПросроченныхВыборЗавершение", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборЦвета", стррПараметры, ЭтаФорма.КлючУникальности, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ЦветПросроченныхДолгов = Результат.Цвет;
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхДолговОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	
	ОбновитьВидНастроекОбмена();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог("КаталогДанных", СокрЛП(Элемент.ТекстРедактирования));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	
	Имя = Элемент.Имя;
	
	ПоляУдаленияПробелов = "FTPАдрес,FTPПользователь,FTPКаталогСервера,СОДАдрес";
	Если 0 <> Найти(","+ПоляУдаленияПробелов+",", ","+Имя+",") Тогда
		Объект[Имя] = СокрЛП(Объект[Имя]);
	КонецЕсли;
	
	//vd_180425 Баг 38395 
	Если Имя = "ИспользоватьДоговорыИлиСоглашения" Тогда
		ИзменитьДоступностьВыгрузкиПерсональныхЦен();
	КонецЕсли;
	
	//vd_180425 Баг 38395 
	Если Имя = "ИспользоватьПунктыРазгрузки" ИЛИ 
		 Имя = "ИспользоватьКонтрагентов" ИЛИ 
		 Имя = "ИспользоватьАдресаДоставки" ИЛИ 
		 Имя = "РежимВыгрузкиРекомендуемый"
	Тогда
		НастройкиВыгрузкиКлиентовПриИзменении(Имя);
	КонецЕсли;
	
	//vd_180403 Баг 38200 37993. Статусы реализации
	//vd_181214 Если Имя = "РежимЗагрузкиЗаказов" ИЛИ Имя = "ТорговляСКолес" Тогда
	Если Имя = "РежимЗагрузкиЗаказов" Тогда 
		ОбновитьВидимостьСтатусовЗагрузкиЗаказов();	
	КонецЕсли;
	
	//vd_181214 Исключена настройка торговля с колес. 
	//Если Имя = "ТорговляСКолес" Тогда // sd_25082017
	//	ИзменитьДоступностьНастроекВыгрузкиПеремещений();
	//КонецЕсли;
	
	Если Имя = "МаксКоличествоВиртуальныхДокументов" Тогда
		Если Объект.МаксКоличествоВиртуальныхДокументов < 10 Тогда
			Объект.МаксКоличествоВиртуальныхДокументов = 10; 
			// ^ Нулевое или слишком маленькое значение может вызвать у пользователя впечатление об ошибке - когда после загрузки
			// новых документов из МУ старые сегодняшние документы исчезают в журнале виртуальных документов.
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьМодифицированостьФормы(Истина); //vd_180712 Перенесена из начала в конец процедуры

КонецПроцедуры

// vd_180425 Баг 38395. Добавил.
//
// Параметры:
//  ИмяЭлемента	 - Строка	    - имя элимента на форме, которое вызвало событие
//
&НаКлиенте
Процедура НастройкиВыгрузкиКлиентовПриИзменении(ИмяЭлемента = Неопределено)
	
	Если ИмяЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтррКонтекст.Конфигурация = "УТ_АП" Тогда 
		
		Если ИмяЭлемента = "ИспользоватьПунктыРазгрузки" Тогда
			Если Объект.ИспользоватьПунктыРазгрузки Тогда
				Объект.ИспользоватьКонтрагентов = Истина;
			Иначе
				Объект.ИспользоватьКонтрагентов = Ложь;
			Конецесли;
		КонецЕсли;
		
		Если ИмяЭлемента = "ИспользоватьПунктыРазгрузки" ИЛИ ИмяЭлемента = "ИспользоватьКонтрагентов" ИЛИ ИмяЭлемента = "ИспользоватьАдресаДоставки" Тогда
			НастройкиИспользоватьПунктыРазгрузкиПриИзмененииДляУТАП();
		КонецЕсли;
		
	Иначе
	
		Если ИмяЭлемента = "ИспользоватьКонтрагентов" Тогда
			Если Объект.ИспользоватьКонтрагентов Тогда
	        	Объект.ИспользоватьАдресаДоставки = Ложь;
				Элементы.ИспользоватьАдресаДоставки.Доступность = Ложь;
			ИначеЕсли НЕ Объект.РежимВыгрузкиРекомендуемый Тогда //vd_180712 РежимВыгрузкиРекомендуемый Иначе именено на ИначеЕсли НЕ Объект.РежимВыгрузкиРекомендуемый
				Элементы.ИспользоватьАдресаДоставки.Доступность = Истина;
			КонецЕсли;				
		КонецЕсли;
		
		Если ИмяЭлемента = "ИспользоватьАдресаДоставки" Тогда
			Если Объект.ИспользоватьАдресаДоставки Тогда
				Объект.ИспользоватьКонтрагентов	  			  = Ложь;
				Элементы.ИспользоватьКонтрагентов.Доступность = Ложь;
				Если Не ЗначениеЗаполнено(Объект.ВидКИАдресДоставки) Тогда
					Объект.ВидКИАдресДоставки = ПолучитьВидКИАдресДоставкиПоУмолчанию();
				КонецЕсли;
			Иначе
				Элементы.ИспользоватьКонтрагентов.Доступность = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		//vd_180712 РежимВыгрузкиРекомендуемый
		Если ИмяЭлемента = "РежимВыгрузкиРекомендуемый" Тогда
			Если Объект.РежимВыгрузкиРекомендуемый Тогда
				Элементы.ИспользоватьАдресаДоставки.Доступность = Ложь;
			ИначеЕсли НЕ Объект.ИспользоватьКонтрагентов Тогда
				Элементы.ИспользоватьАдресаДоставки.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;	

		Элементы.РежимВыгрузкиРекомендуемый.Доступность  = Не Объект.ИспользоватьАдресаДоставки; //vd_180712 РежимВыгрузкиРекомендуемый
 
		Элементы.ВидКИАдресДоставки.Доступность = Объект.ИспользоватьАдресаДоставки;
		
	КонецЕсли;
	
КонецПроцедуры

//vd_180425 Баг 38395. Добавил. Использовать соглашения с пунктами разгрузки нельзя. 
&НаКлиенте 
Процедура НастройкиИспользоватьПунктыРазгрузкиПриИзмененииДляУТАП(ПриОткрытииФормы = Ложь)
	
	Если СтррКонтекст.Конфигурация = "УТ_АП" Тогда 
		
		Элементы.ИспользоватьПунктыРазгрузки.Доступность = Истина;
		Элементы.ИспользоватьКонтрагентов.Доступность    = Истина;
		Элементы.ИспользоватьАдресаДоставки.Доступность  = Истина;
		
		Если Объект.ИспользоватьАдресаДоставки Тогда
			Объект.ИспользоватьПунктыРазгрузки = Ложь;
			Объект.ИспользоватьКонтрагентов	   = Ложь;
			Элементы.ИспользоватьПунктыРазгрузки.Доступность = Ложь;
			Элементы.ИспользоватьКонтрагентов.Доступность	 = Ложь;
			
		ИначеЕсли Объект.ИспользоватьПунктыРазгрузки = Ложь И Объект.ИспользоватьКонтрагентов = Истина Тогда
			Объект.ИспользоватьПунктыРазгрузки = Ложь;
			Объект.ИспользоватьАдресаДоставки  = Ложь;
			Элементы.ИспользоватьАдресаДоставки.Доступность  = Ложь;
			Элементы.ИспользоватьПунктыРазгрузки.Доступность = Ложь;
			
		ИначеЕсли Объект.ИспользоватьПунктыРазгрузки = Истина Тогда
			Объект.ИспользоватьАдресаДоставки  = Ложь;
			Элементы.ИспользоватьАдресаДоставки.Доступность  = Ложь;
			
		Иначе
			Объект.ИспользоватьПунктыРазгрузки = Ложь;
			Объект.ИспользоватьКонтрагентов	   = Ложь;
			Объект.ИспользоватьАдресаДоставки  = Ложь;
			Элементы.ИспользоватьПунктыРазгрузки.Доступность = Истина;
			Элементы.ИспользоватьКонтрагентов.Доступность    = Истина;
			Элементы.ИспользоватьАдресаДоставки.Доступность  = Истина;
		КонецЕсли;
		
				
		Если Объект.ИспользоватьПунктыРазгрузки Тогда
			Элементы.ИспользоватьКонтрагентов.Вид 				   = ВидПоляФормы.ПолеВвода;
			Элементы.ИспользоватьКонтрагентов.ФорматРедактирования = "БЛ=Партнера; БИ=Контрагента";
			Элементы.ИспользоватьКонтрагентов.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Лево; 
			Элементы.ИспользоватьКонтрагентов.Заголовок			   = "В качестве ""Клиента"" использовать";
			Элементы.ИспользоватьКонтрагентов.Подсказка 		   = "Пункты разгрузки могут использоватся с контрагентами или партнерами.";
			Элементы.ИспользоватьКонтрагентов.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Иначе
			Если НЕ ПриОткрытииФормы Тогда
				стррРеквизитыНачальныеЗначения = НастройкиПолучитьНачальныеЗначения();
				Элементы.ИспользоватьКонтрагентов.Заголовок  = стррРеквизитыНачальныеЗначения.ИспользоватьКонтрагентовСиноним; 
				Элементы.ИспользоватьКонтрагентов.Подсказка  = стррРеквизитыНачальныеЗначения.ИспользоватьКонтрагентовПодсказка;
				Элементы.ИспользоватьКонтрагентов.Вид 				   = ВидПоляФормы.ПолеФлажка;
				Элементы.ИспользоватьКонтрагентов.ВидФлажка 		   = ВидФлажка.Флажок;
				Элементы.ИспользоватьКонтрагентов.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Право;		
				Элементы.ИспользоватьКонтрагентов.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
			КонецЕсли;
		Конецесли;
		
		Элементы.ВидКИАдресДоставки.Доступность = Объект.ИспользоватьАдресаДоставки;
		
	КонецЕсли;
	
КонецПроцедуры

// vd_180425 Баг 38395. Добавил.
//
// Параметры:
//  стррРеквизиты	 - Структура - 
// 
// Возвращаемое значение:
//  Структура - Возвращает структуру с результатами
//                                     
&НаСервере
Функция НастройкиПолучитьНачальныеЗначения(стррРеквизиты = Неопределено)
	
	Если стррРеквизиты = Неопределено Тогда 
		стррРезультат = Новый Структура("ИспользоватьКонтрагентовСиноним, ИспользоватьКонтрагентовПодсказка");
	Иначе
		стррРезультат = стррРеквизиты;
	КонецЕсли;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	//Если стррРезультат.Свойство("ИспользоватьКонтрагентов") Тогда
	//	стррРезультат.ИспользоватьКонтрагентовСиноним   = ТекОбъект.ПрочитатьЗначениеНастройки("ИспользоватьКонтрагентов");
	//КонецЕсли;
	
	Если стррРезультат.Свойство("ИспользоватьКонтрагентовСиноним") Тогда
		стррРезультат.ИспользоватьКонтрагентовСиноним   = ТекОбъект.Метаданные().Реквизиты.ИспользоватьКонтрагентов.Синоним;
	КонецЕсли;
	
	Если стррРезультат.Свойство("ИспользоватьКонтрагентовПодсказка") Тогда
		стррРезультат.ИспользоватьКонтрагентовПодсказка = ТекОбъект.Метаданные().Реквизиты.ИспользоватьКонтрагентов.Подсказка;
	КонецЕсли;
	
	возврат стррРезультат;	
КонецФункции

//vd_180425 Баг 38395. перенес в ЭлементФормыПриИзменении()
//&НаКлиенте
//Процедура ИспользоватьДоговорыИлиСоглашенияПриИзменении(Элемент)
//	
//	ИзменитьДоступностьВыгрузкиПерсональныхЦен();
//	УстановитьМодифицированостьФормы(Истина);
//	
//КонецПроцедуры

//vd_180425 Баг 38395. перенес в ЭлементФормыПриИзменении()
//&НаКлиенте
//Процедура ВыгружатьАдресаДоставкиПриИзменении(Элемент)
//	
//КонецПроцедуры

&НаКлиенте
Процедура РежимВыгрузкиКодовНоменклатурыПриИзменении(Элемент)
	
	//ИзменитьДоступностьВыгружатьКодыНоменклатурыВНаименование(); //vd_190613
	УстановитьМодифицированостьФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзмененииСПредупреждением(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

//vd_190228 Не используется.
//&НаКлиенте
//Процедура СпособРасчетаПросроченныхДолговПриИзменении(Элемент)
//	УстановитьМодифицированостьФормы(Истина);
//	 ОбновитьСпособРасчетаДолгов(); 	
//КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьМаршрутыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекМаршрута();
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)

	Если Найти(НРег(НавигационнаяСсылка), ".htm") = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если НавигационнаяСсылка = "СпискиТорговыхТочек" Или НавигационнаяСсылка = "НастройкиАгентов" Тогда
			МодульК().ОткрытьФормуОбработки(НавигационнаяСсылка);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЗаказыПриИзменении(Элемент)
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекВыгрузкиЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьПеремещенияПриИзменении(Элемент) // sd_25082017  
	УстановитьМодифицированостьФормы(Истина);
	//ИзменитьДоступностьНастроекВыгрузкиПеремещений(); //vd_181214 Исключена настройка торговля с колес.  
КонецПроцедуры

&НаКлиенте
Процедура FTPПарольОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.FTPПароль.РежимПароля = Не Элементы.FTPПароль.РежимПароля;
	
КонецПроцедуры

&НаКлиенте
Процедура СОДПортПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Объект.КаталогОбмена) Тогда
		ЗапуститьПриложение("explorer.exe """ + Объект.КаталогОбмена + """");
	Иначе
		Текст = НСтр("ru='Не указан ""Каталог обмена"". Каталог обмена назначается автоматически после указания ""Каталога данных"" на закладке ""Каталоги"".'");
		ПоказатьПредупреждение(Неопределено, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветнаяВыгрузкаПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьРегламентноеЗаданиеПриИзменении(Элемент)
	ИзменитьДоступностьРегистрацииРегламентногоЗадания();
	УстановитьМодифицированостьФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);	
	ОбновитьПутиПодкаталоговДанных();
	
	Элементы.КаталогДанныхПоУмолчанию.Видимость = ПустаяСтрока(Объект.КаталогДанных);
	
	ОбновитьРекомендациюДляКаталогаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer.exe """ + Объект.КаталогДанных + """");

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтообменПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	//ОбновитьВидАвтообмена(); 					//vd_190312

КонецПроцедуры

&НаКлиенте
Процедура ИнтервалАвтообменаПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКаталогДаннныхРекомендацияПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "Windows" Или НавигационнаяСсылка = "Linux" Тогда
		МодульК().КомандаСправка(ЭтаФорма.ИмяФормы + "_КаталогДанныхДляСервера_" + НавигационнаяСсылка);
	Иначе
		ВызватьИсключение("Неизвестная навигационная ссылка: " + НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

//vd_190408 Добавлена
&НаКлиенте
Процедура НастроитьПроводитьДокументыСписокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияВыбораПроводитьДокументыСписок", ЭтотОбъект);
	
	Объект.ПроводитьДокументыСписок.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите документы'"));

КонецПроцедуры

//vd_190408 Добавлена
&НаКлиенте
Процедура ОбработкаОповещенияВыбораПроводитьДокументыСписок(ЗначениеВыбора, ДопПараметры) Экспорт 
	Если ЗначениеВыбора <> Неопределено Тогда
		ЭлементФормыПриИзменении(Элементы.НастроитьПроводитьДокументыСписок);		
	КонецЕсли;	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

&НаСервереБезКонтекста
Функция КонстантыПолучитьЗначение(ИмяКонстанты)

	Возврат Константы[ИмяКонстанты].Получить();	
	
КонецФункции

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ВосстановитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект));
	
	ТекОбъект.ПроводитьДокументыСписок = ТекОбъект.ПрочитатьЗначениеНастройки("ПроводитьДокументыСписок"); //vd_190408
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	ИнформацияОСбросеНастроек = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиСброшены");
	
	Если ПустаяСтрока(Объект.РегистрОстатковТоваров) Тогда
		Объект.РегистрОстатковТоваров = "СвободныеОстатки";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиИзВХ(АдресФайлаНастроекЛКВХранилище, ТолькоНастройкиОбмена)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТолькоНастройкиОбмена Тогда
		ИменаНастроек = "СпособОбмена,FTPАдрес,FTPПароль,FTPПользователь,FTPКаталогСервера,FTPПассивныйРежим,ИспользоватьАвтообмен";
	Иначе
		ИменаНастроек = НастройкиФормы(ТекОбъект);
	КонецЕсли;
	
	Результат = ТекОбъект.ЗагрузитьЗначенияНастроекОбработкиИзВХ(ИменаНастроек, АдресФайлаНастроекЛКВХранилище);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СохранитьНастройкиСервер(ИменаНастроек = Неопределено)

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если ИменаНастроек = Неопределено Тогда
		ИменаНастроек = НастройкиФормы(ТекОбъект);
	КонецЕсли; 
	
	ТекОбъект.СохранитьЗначенияНастроекОбработки(ИменаНастроек);
	
	ТекОбъект.СохранитьЗначениеНастройки("ПроводитьДокументыСписок", ТекОбъект.ПроводитьДокументыСписок); //vd_190408

	Возврат ТекОбъект.СОДПопыткаСгенерироватьФайлНастройки();

КонецФункции

&НаСервере
Функция НастройкиФормы(ТекОбъект)

	СтрРеквизиты = "";
	Реквизиты = ТекОбъект.Метаданные().Реквизиты;
	ЭлементыФормы = ЭтаФорма.Элементы;
	Для Каждого ЭлементМетаданных Из Реквизиты Цикл
		Если ЭлементыФормы.Найти(ЭлементМетаданных.Имя) <> Неопределено Тогда
			СтрРеквизиты = СтрРеквизиты + ЭлементМетаданных.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Лев(СтрРеквизиты, СтрДлина(СтрРеквизиты)-1);
	
КонецФункции 

&НаСервере
Процедура СохранитьНастройкиКаталогов()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначенияНастроекОбработки("КаталогДанных,КаталогОбмена");
	ТекОбъект.СОДПопыткаСгенерироватьФайлНастройки();

КонецПроцедуры

&НаСервере
Процедура СправочникиПрочитатьИзНастроекГотовностьКОбмену()
	
	СтррКонтекст.СтатусыСправочников 
		= РеквизитФормыВЗначение("Объект").ГотовностьСправочников("НастройкиАгентов,МобильныеУстройства");
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Форма

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

&НаКлиенте
Функция ВывестиСообщения(стррРезультат, ОчиститьСообщения = Ложь)
	
	Если ОчиститьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Для Каждого Значение Из СтррРезультат.Сообщения Цикл
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Значение.Описание);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусГотовности(ПрочитатьИзНастроек)
	
	Если ПрочитатьИзНастроек Тогда
		СправочникиПрочитатьИзНастроекГотовностьКОбмену();
	КонецЕсли;
	
	ЕстьЗамечания = Ложь;	
	
	стррСтатус = СтррКонтекст.СтатусыСправочников.НастройкиАгентов;
	Если стррСтатус.Готово Тогда
		Элементы.НадписьГотовностьАгентов.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьАгентов.Видимость = Истина;
		Элементы.НадписьГотовностьАгентов.Заголовок = стррСтатус.Описание;
	КонецЕсли;
	
	Элементы.КаталогДанныхПредупреждение.Видимость = (стррСтатус.Количество > 0);	
	
	стррСтатус = СтррКонтекст.СтатусыСправочников.МобильныеУстройства;
	Если стррСтатус.Готово Тогда
		Элементы.НадписьГотовностьМУ.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьМУ.Видимость = Истина;
		Элементы.НадписьГотовностьМУ.Заголовок = стррСтатус.Описание;
	КонецЕсли;
	
	кнГенерацияНастроекСОД = Элементы.СгенерироватьНастройкиАгентПлюсСОД;
	кнГенерацияНастроекСОД.РасширеннаяПодсказка.ЦветТекста = СтррКонтекст.Цвета.ТекстПояснение;
	кнГенерацияНастроекСОД.Доступность = Не ЕстьЗамечания;

	Если ЕстьЗамечания Тогда
		кнГенерацияНастроекСОД.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		кнГенерацияНастроекСОД.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Для обновления настроек требуется устранить замечания в настройках.'");
	Иначе
		кнГенерацияНастроекСОД.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		кнГенерацияНастроекСОД.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Обновление настроек для Службы Обмена Данными (СОД) с мобильными устройствами.'");
	КонецЕсли;
	
	кнГенерацияНастроекСОД.Доступность = стррСтатус.Готово;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()

	ЗаполнитьСпособыЗагрузкиЗаказов(Элементы.РежимЗагрузкиЗаказов.СписокВыбора);
	//ЗаполнитьСпособыРасчетаПросроченныхДолгов(Элементы.СпособРасчетаПросроченныхДолгов.СписокВыбора); //vd_190228 Не используется

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидНастроекОбмена()

	Если Объект.СпособОбмена = "КаталогОбмена" Тогда
		Элементы.ГруппаПараметрыОбмена.Видимость 	= Ложь;
		Элементы.КаталогОбмена.Видимость 	= Истина;
	Иначе
		Элементы.ГруппаПараметрыОбмена.Видимость = Истина;
		
		СтраницыПараметровОбмена = Элементы.ГруппаПараметрыОбмена.ПодчиненныеЭлементы;
		Если Объект.СпособОбмена = "FTP" Тогда
			Элементы.СтраницаFTP.Видимость   = Истина; //vd_190312 
			Элементы.СтраницаСОД.Видимость   = Ложь;   //vd_190312
			Элементы.КаталогОбмена.Видимость = Ложь;
			Элементы.ГруппаПараметрыОбмена.ТекущаяСтраница = СтраницыПараметровОбмена.СтраницаFTP;
		Иначе
			Элементы.СтраницаFTP.Видимость   = Ложь;   //vd_190312
			Элементы.СтраницаСОД.Видимость   = Истина; //vd_190312
			Элементы.КаталогОбмена.Видимость = Истина;
			Элементы.ГруппаПараметрыОбмена.ТекущаяСтраница = СтраницыПараметровОбмена.СтраницаСОД;
		КонецЕсли;
		
	КонецЕсли;
	
	//ОбновитьВидАвтообмена(); //vd_190312
	ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Ложь);

КонецПроцедуры

//vd_190228 Не используется
//&НаКлиенте
//Процедура ОбновитьСпособРасчетаДолгов()
//	
//	Если Объект.СпособРасчетаПросроченныхДолгов = "НеУчитывать" Или Не ЗначениеЗаполнено(Объект.СпособРасчетаПросроченныхДолгов) Тогда
//		Элементы.ИнтервалПросроченныхДолгов.Доступность 	  	= Ложь;
//		Элементы.ВыгружатьТолькоПросроченныеДолги.Доступность 	= Ложь;
//		Элементы.ВыделятьЦветомПросроченныеДолги.Доступность 	= Ложь;
//		Элементы.ЦветПросроченныхДолгов.Доступность 			= Ложь;
//	ИначеЕсли Объект.СпособРасчетаПросроченныхДолгов = "ПоДоговору" Тогда
//		Элементы.ИнтервалПросроченныхДолгов.Доступность 	  	= Ложь;
//		Элементы.ВыгружатьТолькоПросроченныеДолги.Доступность 	= Истина;
//		Элементы.ВыделятьЦветомПросроченныеДолги.Доступность 	= Истина;
//		Элементы.ЦветПросроченныхДолгов.Доступность 			= Истина;
//	ИначеЕсли Объект.СпособРасчетаПросроченныхДолгов = "ПоКоличествуДнейПросрочки" Тогда
//		Элементы.ИнтервалПросроченныхДолгов.Доступность 	  	= Истина;
//		Элементы.ВыгружатьТолькоПросроченныеДолги.Доступность 	= Истина;
//		Элементы.ВыделятьЦветомПросроченныеДолги.Доступность 	= Истина;
//		Элементы.ЦветПросроченныхДолгов.Доступность 			= Истина;
//	Иначе
//		Текст = СтрШаблон_("Неизвестное значение реквизита Объект.СпособРасчетаПросроченныхДолгов = ""%1"".", Объект.СпособРасчетаПросроченныхДолгов);
//		ВызватьИсключение(Текст);
//	КонецЕсли;

//КонецПроцедуры

//vd_190228 Не используется
//&НаКлиенте
//Процедура ОбновитьВидАвтообмена()
//	
//	Элементы.ИнтервалАвтообмена.Доступность = (Объект.СпособОбмена <> "АПСОД" И Объект.ИспользоватьАвтообмен);
//	
//КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеДляЭлемента(ИмяЭлемента)
	
	имяГруппыВыделения = "ГруппаВыделить" + ИмяЭлемента;
	Элементы[имяГруппыВыделения].ЦветФона = ?(Объект[ИмяЭлемента], СтррКонтекст.Цвета.ФонВнимание, СтррКонтекст.Цвета.Авто);
	имяДекорации = "ДекорацияВыделить" + ИмяЭлемента;
	Элементы[имяДекорации].Видимость = Объект[ИмяЭлемента];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеДляЭлементов()
	
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИзображенияПартнеров");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИзображенияТоваров");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИсториюПродаж");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьМаршруты");
	ОбновитьПредупреждениеДляЭлемента("ИспользоватьПланыПродажПоТоварнымКатегориям"); //vd_181106
	
КонецПроцедуры	

//vd_180322 Баг 37993. Статусы реализации
&НаКлиенте
Процедура ОбновитьВидимостьСтатусовЗагрузкиЗаказов()
	
	//((vd_181214
	//Элементы.СтатусЗаказовКлиентов.Видимость        = Ложь;
	//Элементы.СтатусРеализацияТоваровУслуг.Видимость = Ложь;	
	//
	//Если Объект.ТорговляСКолес = Истина И Объект.РежимЗагрузкиЗаказов = "ЗагружатьКакЗаказ" Тогда
	//	Элементы.СтатусЗаказовКлиентов.Видимость        = Истина;
	//	Элементы.СтатусРеализацияТоваровУслуг.Видимость = Истина;
	//ИначеЕсли Объект.ТорговляСКолес = Истина И Объект.РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" Тогда
	//	Элементы.СтатусРеализацияТоваровУслуг.Видимость = Истина;
	//ИначеЕсли Объект.РежимЗагрузкиЗаказов = "ЗагружатьКакЗаказ" Тогда
	//	Элементы.СтатусЗаказовКлиентов.Видимость        = Истина;
	//ИначеЕсли Объект.РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" Тогда
	//	Элементы.СтатусРеализацияТоваровУслуг.Видимость = Истина;			
	//КонецЕсли;
	
	Если Объект.РежимЗагрузкиЗаказов = "ЗагружатьКакЗаказ" Тогда
		Элементы.СтатусЗаказовКлиентов.Видимость = Истина;
	Иначе
		Элементы.СтатусЗаказовКлиентов.Видимость = Ложь;
	КонецЕсли;	
	//))vd_181214
	
КонецПроцедуры

//vd_180426 Изменена
&НаКлиенте
Процедура НастройкиВыгрузкиКлиентовПриОткрытииФормы()
	
	Если СтррКонтекст.Конфигурация = "УТ_АП" Тогда
		Элементы.ИспользоватьПунктыРазгрузки.Видимость 	= Истина;
		НастройкиИспользоватьПунктыРазгрузкиПриИзмененииДляУТАП(Истина);
		Элементы.РежимВыгрузкиРекомендуемый.Доступность = Ложь; //vd_180712 РежимВыгрузкиРекомендуемый 
		Элементы.РежимВыгрузкиРекомендуемый.Подсказка = "Данная опция не поддерживается «1С:Предприятие 8. Управление торговлей алкогольной продукцией»"; //vd_180712 РежимВыгрузкиРекомендуемый
	Иначе
		Элементы.ИспользоватьПунктыРазгрузки.Видимость 	= Ложь;
		Если Объект.ИспользоватьАдресаДоставки И Не ЗначениеЗаполнено(Объект.ВидКИАдресДоставки) Тогда
			Объект.ВидКИАдресДоставки = ПолучитьВидКИАдресДоставкиПоУмолчанию();
		КонецЕсли;
		Если Объект.ИспользоватьКонтрагентов И Объект.ИспользоватьАдресаДоставки Тогда
			Сообщить("Конфликт настроек. Изменены настройки: ""Использовать адреса доставки"" и ""Использовать контрагентов"" ");
			УстановитьМодифицированостьФормы(Истина);
			Объект.ИспользоватьАдресаДоставки = Истина;
			Объект.ИспользоватьКонтрагентов   = Истина;
		Конецесли;
		Элементы.ИспользоватьКонтрагентов.Доступность    = Не Объект.ИспользоватьАдресаДоставки;
		Элементы.ИспользоватьАдресаДоставки.Доступность  = Не Объект.ИспользоватьКонтрагентов;
		// vd_180712 РежимВыгрузкиРекомендуемый
		Если Объект.РежимВыгрузкиРекомендуемый Тогда
			Элементы.ИспользоватьАдресаДоставки.Доступность = Ложь;
		КонецЕсли;
		Элементы.РежимВыгрузкиРекомендуемый.Доступность  = Не Объект.ИспользоватьАдресаДоставки; // vd_180712 РежимВыгрузкиРекомендуемый
		Элементы.ВидКИАдресДоставки.Доступность 	     = Объект.ИспользоватьАдресаДоставки;
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Процедура ИзменитьДоступностьНастроекИспользоватьКонтрагентов()
	
	Элементы.ИспользоватьКонтрагентов.Доступность = Константы.ИспользоватьПартнеровИКонтрагентов.Получить();
		
КонецПроцедуры 

&НаСервере
Процедура ИзменитьДоступностьНастроекИспользоватьДоговорыИлиСоглашения()
	
	Элементы.ИспользоватьДоговорыИлиСоглашения.Доступность = 
		Константы.ИспользованиеСоглашенийСКлиентами.Получить() <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать 
		Или Константы.ИспользоватьДоговорыСКлиентами.Получить();
		
КонецПроцедуры 

&НаСервере
Процедура ИзменитьДоступностьНастроекИспользоватьХарактеристики()
	
	Элементы.ИспользоватьХарактеристики.Доступность = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
		
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьДоступностьНастроекИсторииПродаж()
	
	//vd_181214 Элементы.НастройкиИстрииПродаж.Доступность = Объект.ВыгружатьИсториюПродаж;
	Элементы.НастройкиИстрииПродаж.Видимость = Объект.ВыгружатьИсториюПродаж;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьВыгрузкиПерсональныхЦен()
	Элементы.ВыгружатьПерсональныеЦены.Доступность = 
		Объект.ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" И Элементы.ИспользоватьДоговорыИлиСоглашения.Доступность;
КонецПроцедуры

//vd_190613 Не используется
//&НаКлиенте
//Процедура ИзменитьДоступностьВыгружатьКодыНоменклатурыВНаименование()
//	Элементы.ВключатьКодыНоменклатурыВНаименование.Доступность = ЗначениеЗаполнено(Объект.РежимВыгрузкиКодовНоменклатуры);
//КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьНастроекВыгрузкиЗаказов()
	Элементы.ИнтервалВыгрузкиЗаказов.Доступность 		  = Объект.ВыгружатьЗаказы;
	Элементы.ВыгружатьЗаказыПоПартнерамАгента.Доступность = Объект.ВыгружатьЗаказы;
КонецПроцедуры

//vd_181214 Не используется
//&НаКлиенте
//Процедура ИзменитьДоступностьНастроекВыгрузкиПеремещений() // sd_25082017
//	Элементы.ВыгружатьПеремещения.Доступность = Объект.ТорговляСКолес;
//	Элементы.ИнтервалВыгрузкиПеремещений.Доступность = Объект.ВыгружатьПеремещения;
//КонецПроцедуры
	
&НаКлиенте
Процедура ИзменитьДоступностьНастроекМаршрута()
	Элементы.ИнтервалВыгрузкиМаршрутов.Доступность = Объект.ВыгружатьМаршруты;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов()

	Элементы.ЦветПросроченныхДолгов.Доступность = Объект.ВыделятьЦветомПросроченныеДолги;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьРегистрацииРегламентногоЗадания()
	Элементы.ПоказатьРегистрацияФоновогоЗадания.Доступность = Объект.ПроверятьРегламентноеЗадание;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпособыЗагрузкиЗаказов(Список)
	
	Список.Очистить(); //vd_180329 
	
	СтррВидыДокументов = ПолучитьПредставленияВидовДокументов();
	
	Если СтррКонтекст.ИспользоватьЗаказы Тогда
		Текст = СтрШаблон_(НСтр("ru='Загружать как документ ""%1""'"), СтррВидыДокументов.ЗаказКлиента);	
		Список.Добавить("ЗагружатьКакЗаказ", Текст);
	КонецЕсли;
	
	Текст = СтрШаблон_(НСтр("ru='Загружать как документ ""%1""'"), СтррВидыДокументов.РеализацияТоваровУслуг);
	Список.Добавить("ЗагружатьКакРеализацию", Текст);
	
	//{{vd_180329
	Если СтррКонтекст.ИспользоватьЗаказы = Ложь Тогда
		Элементы.РежимЗагрузкиЗаказов.Подсказка = НСтр("ru='Способ загрузки документов ""Заказ"" из мобильного устройства в УТ. Для загрузки документа как ""Заказ клиента"" дожна быть включена константа учетной системы ""ИспользоватьЗаказыКлиентов""'");
		Элементы.РежимЗагрузкиЗаказов.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
		
	Если СтррКонтекст.ИспользоватьЗаказы = Ложь И Объект.РежимЗагрузкиЗаказов <> "ЗагружатьКакЗаказ" И ЗначениеЗаполнено(Объект.РежимЗагрузкиЗаказов) Тогда
		Элементы.РежимЗагрузкиЗаказов.Доступность = Ложь;
	Иначе
		Элементы.РежимЗагрузкиЗаказов.Доступность = Истина;	
	КонецЕсли;	
	//}}vd_180329

КонецПроцедуры

&НаСервере
Функция ПолучитьПредставленияВидовДокументов()
	
	СтррВидыДокументов = Новый Структура("ЗаказКлиента,РеализацияТоваровУслуг");
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ПолучитьПредставленияВидовОбъектов(СтррВидыДокументов);
	Возврат СтррВидыДокументов;
	
КонецФункции

////vd_190228 Не используется
//&НаКлиенте
//Процедура ЗаполнитьСпособыРасчетаПросроченныхДолгов(Список)

//	Список.Добавить("НеУчитывать", 					НСтр("ru='Не учитывать просрочку'"));
//	Список.Добавить("ПоДоговору", 					НСтр("ru='По договору'"));
//	Список.Добавить("ПоКоличествуДнейПросрочки", 	НСтр("ru='По заданному количеству дней просрочки'"));

//КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРежимыВыгрузкиВУД(Список)

	Список.Добавить("НеУчитывать", 					НСтр("ru='Не учитывать просрочку'"));
	Список.Добавить("ПоДоговору", 					НСтр("ru='По договору'"));
	Список.Добавить("ПоКоличествуДнейПросрочки", 	НСтр("ru='По заданному количеству дней просрочки'"));

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Интерактивно)
	
	//((vd_190312
	//Если Объект.СпособОбмена = "КаталогОбмена" Тогда 
	//	МинЗначение = 5;
	//ИначеЕсли Объект.СпособОбмена = "FTP"  Тогда
	//	МинЗначение = 15;
	//ИначеЕсли Объект.СпособОбмена = "АПСОД" Тогда
	//Иначе
	//	МинЗначение = -1; // минимальное значение не важно
	//КонецЕсли;
	МинЗначение = 5;
	//))vd_190312
	
	Если Объект.ИнтервалАвтообмена < МинЗначение Тогда
		Объект.ИнтервалАвтообмена = МинЗначение;
		УстановитьМодифицированостьФормы(Истина);
		Если Интерактивно Тогда
			ОчиститьСообщения();
			Текст = СтрШаблон_(НСтр("ru='Минимально допустмое значение для выбранного способа обмена данными: %1 сек.'"), МинЗначение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ИнтервалАвтообмена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Форма
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Каталоги

&НаКлиенте
Процедура ВыбратьКаталог(ИмяРеквизита, Каталог)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = ?(ПустаяСтрока(Каталог), Объект[ИмяРеквизита], Каталог);
	ДиалогВыбораФайла.Показать(
		Новый ОписаниеОповещения("УстановитьВыбранныйПуть", ЭтаФорма, Новый Структура("ИмяРеквизита", ИмяРеквизита)));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранныйПуть(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныеФайлы[0];
		УстановитьМодифицированостьФормы(Истина);
		Если ДополнительныеПараметры.ИмяРеквизита = "КаталогДанных" Тогда
			ОбновитьПутиПодкаталоговДанных();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//функция возвращает путь каталога файла
&НаКлиентеНаСервереБезКонтекста 
Функция ФСВернутьКаталогФайла(Знач ИмяФайла)
	
	Если ПустаяСтрока(ИмяФайла) Тогда
        Возврат "";
	КонецЕсли;
	
	ИмяФайла = СокрЛП(ИмяФайла);
	Если Прав(ИмяФайла,2) = "\\" Тогда
	    Возврат ИмяФайла;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.ЭтоКаталог() Тогда
        Возврат ИмяФайла;
	КонецЕсли;
	
	//убираем имя файла на конце
	ПромИмяФайла = ИмяФайла; 
	ПромПоз = 0;
	Поз = Найти(ПромИмяФайла, "\");
	Пока Поз <> 0 Цикл
		ПромПоз = ПромПоз + Поз;
		ПромИмяФайла= Прав(ПромИмяФайла, СтрДлина(ПромИмяФайла) - Поз);
		Поз = Найти(ПромИмяФайла, "\");
	КонецЦикла;
	
	Возврат ?(ПромПоз = 0, "", Лев(ИмяФайла, ПромПоз));
	
КонецФункции  

// Процедура устанавливает подкаталоги каталога данных.
&НаКлиенте
Процедура ОбновитьПутиПодкаталоговДанных(Интерактивно = Истина)
	
	Если Интерактивно Тогда
		СтррКонтекст.КаталогИзменен = Истина;		
	КонецЕсли; 

	Объект.КаталогДанных = СокрЛП(Объект.КаталогДанных);
	Объект.КаталогОбмена = МодульК().ИмяПодкаталогаДанных("КаталогОбмена", Объект.КаталогДанных);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьГотовностьПодкаталогов()
	
	Если ПустаяСтрока(Объект.КаталогДанных) Тогда
		ОчиститьСообщения();		
		Текст = НСтр("ru = 'Сначала укажите каталог данных и сохраните изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
		Возврат Ложь;
	ИначеЕсли СтррКонтекст.КаталогИзменен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сначала сохраните изменения.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СоздатьКаталогОбменаИнтерактивно() Экспорт
	
	Если ПустаяСтрока(Объект.КаталогОбмена) И Не ПустаяСтрока(Объект.КаталогДанных) Тогда
		Текст = НСтр("ru = 'В настройках не указан каталог обмена. Создать каталог автоматически?'")
			+ Символы.ПС + НСтр("ru = '(будет создан каталог: ""%1"")'");
		Текст = СтрШаблон_(Текст, МодульК().ИмяПодкаталогаДанных("КаталогОбмена", Объект.КаталогДанных));
		Оповещение = Новый ОписаниеОповещения("СоздатьКаталогОбменаИнтерактивноПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогОбменаИнтерактивноПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		УстановитьМодифицированостьФормы(Истина);
		ОбновитьПутиПодкаталоговДанных();
	КонецЕсли;
	
КонецПроцедуры

// Процедура может вызываться из других модулей.
&НаКлиенте
Процедура УстановитьКаталогДанныхПоУмолчанию(Интерактивно) Экспорт
	
	Объект.КаталогДанных = КаталогДокументов() + "APMT";
	ОбновитьПутиПодкаталоговДанных(Интерактивно);
	Если Интерактивно Тогда
		УстановитьМодифицированостьФормы(Истина);
		ОбновитьРекомендациюДляКаталогаДанных();
	Иначе // нужно записать изменения в хранилище настроек
		СохранитьНастройкиКаталогов();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПроверитьКаталогДанных()

	стррРезультат = Новый Структура("ТипСервера,Кластер,Описание");
	
	стррПараметры = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	стррПараметры.Свойство("Srvr", стррРезультат.Кластер);
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИспользуетсяLinuxСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64);	
	
	Если Лев(СокрЛ(Объект.КаталогДанных), 2) = "\\" Или стррРезультат.Кластер <> Неопределено Тогда
		
		стррРезультат.ТипСервера = ?(ИспользуетсяLinuxСервер, "Linux", "Windows");
		
		Текст = "";
		Если стррРезультат.Кластер <> Неопределено Тогда
			Текст = Текст 
				+ СтрШаблон_(НСтр("ru='Для сервера ""%1"" требуется сетевой полный доступ к каталогу данных. '"), стррРезультат.Кластер);
		Иначе
			Текст = Текст + НСтр("ru='Требуется сетевой полный доступ к каталогу данных. '");
		КонецЕсли; 

		Текст = Текст + НСтр("ru='Ваша учетная система настроена на работу с %1-сервером. Пожалуйста, учтите рекомендации по '");
		Текст = СтрШаблон_(Текст, стррРезультат.ТипСервера);
		
		мСтроки = Новый Массив;		
		мСтроки.Добавить(Текст);
		мСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='этой ссылке'"),,,, стррРезультат.ТипСервера));
		мСтроки.Добавить(".");
		стррРезультат.Описание = Новый ФорматированнаяСтрока(мСтроки);
					 
	КонецЕсли; 
	
	Возврат стррРезультат;

КонецФункции 

&НаКлиенте
Процедура ОбновитьРекомендациюДляКаталогаДанных()
	
	стррРезультат = ПроверитьКаталогДанных();
	
	Если стррРезультат.Кластер = Неопределено И стррРезультат.ТипСервера = Неопределено Тогда
		Элементы.ГруппаКаталогДанныхРекомендация.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКаталогДанныхРекомендация.Видимость = Истина;
		Если стррРезультат.Кластер <> Неопределено Тогда
			Текст = СтрШаблон_(НСтр("ru='Текущая база данных ""1С:Предприятия"" подключена через кластер серверов ""%1"". Сервер ""%1"" должен иметь полный доступ к указанному каталогу данных.'"), 
				стррРезультат.Кластер);
		Иначе		
			Текст = СтрШаблон_(НСтр("ru='Требуется полный сетевой доступ к каталогу данных.'"), 
				стррРезультат.Кластер);
		КонецЕсли; 
		Элементы.ДекорацияКаталогДанныхРекомендация.Заголовок = Текст;
		Элементы.ГруппаКаталогДанныхРекомендацияРасширеннаяПодсказка.Заголовок = стррРезультат.Описание;
	КонецЕсли; 
	
КонецПроцедуры
 
// СлужебныеПроцедурыИФункции_Каталоги
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_APPlus

//vd_190312 Не используется
//&НаКлиенте
//Процедура ПолучитьВнешнююКомпонентуAPPlus()
//	
//	Кнопки = Новый СписокЗначений;
//	Кнопки.Добавить("ВыбратьЛокально", НСтр("ru='Выбрать путь к папке с компонентой'"));
//	Кнопки.Добавить("Скачать", НСтр("ru='Скачать с www.agentplus.ru'"));
//	Кнопки.Добавить("Отмена",  НСтр("ru='Отмена'"));
//	
//	Оповещение = Новый ОписаниеОповещения("ПолучитьВнешнююКомпонентуAPPlusПродолжить", ЭтаФорма, Неопределено);
//	Текст = НСтр("ru='Для установки компоненты ""APPlus.dll"" выберите нужное действие.'")
//		+ Символы.ПС + НСтр("ru='Внимание! 1С:Предприятие должно быть запущено от имени администратора Windows!'");
//	ПоказатьВопрос(Оповещение, Текст, Кнопки);
//	
//КонецПроцедуры

//vd_190312 Не используется
//&НаКлиенте
//Процедура ПолучитьВнешнююКомпонентуAPPlusПродолжить(ИмяКнопки, ДополнительныеПараметры) Экспорт
//	
//	Если ИмяКнопки = Неопределено Или ИмяКнопки = "Отмена" Тогда
//		
//		Возврат; 
//		
//	ИначеЕсли ИмяКнопки = "ВыбратьЛокально" Тогда
//		
//		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
//		Оповещение = Новый ОписаниеОповещения("ПолучитьВнешнююКомпонентуAPPlusУказатьПродолжить", ЭтаФорма);
//		ДиалогВыбораФайла.Показать(Оповещение);
//		
//	ИначеЕсли ИмяКнопки = "Скачать" Тогда
//		
//		Путь = СкачатьКомпонентуAPPlus(); // функция возвращает путь к папке, в которую была скачана комнонента
//		УстановитьИПроверитьВнешнююКомпонентуAPPlus(Путь);
//		
//	Иначе
//		ВызватьИсключение("ПолучитьВнешнююКомпонентуAPPlusПродолжить() - неизвестное значение параметра: " + ИмяКнопки);
//	КонецЕсли;
//	
//КонецПроцедуры

//vd_190312 Не используется
//&НаКлиенте
//Процедура УстановитьИПроверитьВнешнююКомпонентуAPPlus(Путь)
//	
//	Результат = УстановитьВнешнююКомпонентуAPPlus(Путь);
//	Если Результат = 0 Тогда // код успешного завершения бат-файла
//		гАПОбъект = Неопределено;
//		ПопыткаЗагрузитьВнешнююКомпоненту();
//		Если гАПОбъект = Неопределено Тогда
//			ПоказатьПредупреждение(Неопределено, Нстр("ru = 'Ошибка загрузки компоненты в память!'"));
//		Иначе
//			Текст = СтрШаблон_(НСтр("ru='Компонента APPlus.dll успешно установлена (версия компоненты: %1).'"), гАПОбъект.Версия());
//			ПоказатьПредупреждение(Неопределено, Текст);
//		КонецЕсли; 
//	ИначеЕсли Результат <> -1000 Тогда
//		ПоказатьПредупреждение(Неопределено, Нстр("ru = 'Операция установки компоненты не завершена!'"));
//	КонецЕсли;
//	
//КонецПроцедуры

//vd_190312 Не используется
//&НаКлиенте
//Процедура ПолучитьВнешнююКомпонентуAPPlusУказатьПродолжить(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

//	Если ВыбранныеФайлы = Неопределено Тогда
//		Возврат; // отказ выбора файла
//	ИначеЕсли ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
//		Путь = ВыбранныеФайлы[0];
//		УстановитьИПроверитьВнешнююКомпонентуAPPlus(Путь);
//	Иначе		
//		ВызватьИсключение("СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - неизвестное значение: ВыбранныеФайлы = " + ВыбранныеФайлы);
//	КонецЕсли;
//	
//КонецПроцедуры

//vd_190312 Не используется
//&НаКлиенте
//Функция СкачатьКомпонентуAPPlus()

//	Путь = КаталогВременныхФайлов();
//	Путь = Путь + ?(Прав(Путь,1)<>"\", "\", "") + "APDLL";
//	ФайлАрхива = Путь + "\" + "applus.zip";	
//	СоздатьКаталог(Путь);
//	ОчиститьСообщения();	
//	Текст = СтрШаблон_(Нстр("ru = 'Компонента скачивается во временную папку ""%1""...'"), Путь);
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);

//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Скачивание...'"));	
//	Соединение = Новый HTTPСоединение("www.agentplus.ru");
//	HTTPОтвет = Соединение.Получить("/download/applus.zip", ФайлАрхива);
//	Если HTTPОтвет.КодСостояния <> 200 Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru = 'Ошибка работы с Интернет (%1)'"), HTTPОтвет.КодСостояния));
//		Возврат Неопределено;
//	КонецЕсли;
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Распаковка...'"));
//	Архив = Новый ЧтениеZipФайла(ФайлАрхива);
//	Архив.ИзвлечьВсе(Путь);
//	Архив.Закрыть();
//	
//	УдалитьФайлы(Путь, "*.zip");  
//	
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Архив успешно распакован.'"));
//	
//	Возврат Путь;

//КонецФункции

//vd_190312 Не используется
// Устанавливает внешнюю компоненту APPlus.dll. Установка происходит путем запуска файла "reg_ap.bat".
// Путь к папке с файлом компоненты передается в параметре "Путь".
// 	Параметры:
//		Путь - Строка - путь к папке с файлами компоненты (обязательно в папке должен быть файл "reg_ap.bat".
//	Возвращаемое значение:
//		Число, Неопределено - Код результата установки компоненты:
//		0 - установка успешно завершена.
//		-1000 - установка не завершена и показано пользователю предупреждение.
//		любое другое значение - ошибка установки компоненты.
//&НаКлиенте
//Функция УстановитьВнешнююКомпонентуAPPlus(Знач Путь)
//	
//	Путь = Путь + ?(Прав(Путь,1)<>"\", "\", "");
//	
//	БатФайл = Путь + "reg_ap.bat";
//	Если Не МодульК().ФайлСуществует(БатФайл) Тогда
//		Текст = СтрШаблон_(Нстр("ru = 'Не найден файл регистрации компоненты! (Файл: ""%1"")'"), БатФайл);
//		ПоказатьПредупреждение(Неопределено, Текст);
//		Возврат -1000; // признак возврата из регистрации с уже показанным предупреждением
//	КонецЕсли;
//	
//	СисИнфо = Новый СистемнаяИнформация;
//	ИнфоТипПлатформы = СисИнфо.ТипПлатформы;
//	
//	Если ИнфоТипПлатформы = ТипПлатформы.Windows_x86 Тогда //32 разряда
//		Параметр1 = "32";
//	ИначеЕсли ИнфоТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда //64 разряда
//		Параметр1 = "64";
//	Иначе
//		ВызватьИсключение("Непредусмотренный тип платофрмы Windows для установки компоненты! Тип: " + Строка(ИнфоТипПлатформы));
//	КонецЕсли;
//	
//	Параметр2 = КаталогПрограммы();
//	
//	
//	КодВозврата = Неопределено;	
//	Попытка
//		ЗапуститьПриложение(БатФайл + " " + Параметр1 + " """ + Параметр2 + """",, Истина, КодВозврата);
//	Исключение
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось установить компоненту APPlus.dll. Причина: " + ОписаниеОшибки());
//	КонецПопытки;	
//	
//	Возврат КодВозврата;

//КонецФункции

//vd_190312 Не используется
//&НаКлиенте
//Процедура ПопыткаЗагрузитьВнешнююКомпоненту()
//	
//	Если гАПОбъект = Неопределено Тогда
//		гАПОбъект = ЗагрузитьВнешнююКомпонентуAPPlus();
//	КонецЕсли;
//	
//КонецПроцедуры

//vd_190312 Не используется

// Загружает внешнюю компоненту APPlus.dll.
//  
//&НаКлиенте
//Функция ЗагрузитьВнешнююКомпонентуAPPlus()
//	
//	Результат = Неопределено;
//	
//	Попытка				
//		РезультатПодключения = ПодключитьВнешнююКомпоненту("AddIn.AddInObject.1");
//		Результат = Новый("AddIn.CeDataExch");		
//	Исключение
//		ОчиститьСообщения();
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось подключить внешнюю компоненту APPlus.dll!");								
//	КонецПопытки;		
//		
//	Возврат Результат;
//	
//КонецФункции


// СлужебныеПроцедурыИФункции_APPlus
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_СОД

&НаСервере
Функция СОДСоздатьФайлНастроекСервер()
	
	Возврат РеквизитФормыВЗначение("Объект").СОДСгенерироватьФайлНастройки();
	
КонецФункции

// Создание xml-файла настроек АП СОД.
&НаКлиенте
Процедура СОДСоздатьФайлНастроек()
	
	ОчиститьСообщения();	
	
	ЕстьОшибки = Ложь;
	
	Если ПустаяСтрока(Объект.КаталогОбмена) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан каталог в поле ""Каталог обмена""!'"),, "Объект.КаталогОбмена");
		ЕстьОшибки = Истина;
	Иначе
		КаталогНаДиске = Новый Файл(Объект.КаталогОбмена);
		Если Не КаталогНаДиске.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не существует каталога, указанного в поле ""Каталог обмена""!'"),, "Объект.КаталогОбмена");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		СтррРезультат = СОДСоздатьФайлНастроекСервер();
		Если СтррРезультат.Замечания.Количество() > 0 Тогда
			Для Каждого Замечание Из СтррРезультат.Замечания Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Замечание.Описание,, "Объект." + Замечание.Реквизит);
			КонецЦикла;
			ЕстьОшибки = Истина;
		Иначе
			СтррРезультат.Текст.Записать(СтррРезультат.ПолноеИмяФайла, СтррРезультат.Кодировка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Создан файл настроек службы обмена данными:'") + " """ + СтррРезультат.ПолноеИмяФайла + """");
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Текст = НСтр("ru='Настройки для службы обмена ""Агент Плюс: СОД"" не сгенерированы!'");
		ПоказатьПредупреждение(Неопределено, Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СОДВыборФайлаПанелиУправленияЛокальноПродолжить(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат; // отказ выбора файла
	ИначеЕсли ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Путь = ВыбранныеФайлы[0];
	Иначе		
		ВызватьИсключение("СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - неизвестное значение: ВыбранныеФайлы = " + ВыбранныеФайлы);
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыбратьЛокально" Тогда
	
		Каталог = ФСВернутьКаталогФайла(Путь);
		
		ПутьПанельСОД = Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe";
		ФайлПанелиСОД = Новый Файл(ПутьПанельСОД);
		
		Если Не ФайлПанелиСОД.Существует() Тогда 
			Текст = СтрШаблон_(НСтр("ru='Не найден файл панели управления службы обмена данными ""%1"". Хотите указать другой путь?'"), ПутьПанельСОД);
			Оповещение = Новый ОписаниеОповещения("СОДОткрытьПанельУправленияПовторить", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			Объект.СОДПутьКПанелиУправления = Каталог;
			УстановитьМодифицированостьФормы(Истина);
			СОДОткрытьПанель();				
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "Скачать" Тогда
		
		ФайлАрхива = Путь + ?(Прав(Путь,1)<>"\", "\", "") + "aps_app.zip";	
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru = 'Соединение с %1 ...'"), "www.agentplus.ru"));
		Соединение = Новый HTTPСоединение("www.agentplus.ru");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Скачивание...'"));
		HTTPОтвет = Соединение.Получить("/download/aps_app.zip", ФайлАрхива);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru = 'Ошибка работы с Интернет (%1)'"), HTTPОтвет.КодСостояния));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Распаковка...'"));
		Архив = Новый ЧтениеZipФайла(ФайлАрхива);
		Архив.ИзвлечьВсе(Путь);
		Архив.Закрыть();
		
		УдалитьФайлы(Путь, "*.zip");  
		
		Объект.СОДПутьКПанелиУправления = Путь;
		УстановитьМодифицированостьФормы(Истина);
		
		СОДОткрытьПанель();
		
	Иначе
		ВызватьИсключение("СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - неизвестное значение: ДополнительныеПараметры = " + ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры //КомандаОткрытьПанельУправленияАПСОДПродолжить

&НаКлиенте
Процедура СОДОткрытьПанель()
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Запустить", 	НСтр("ru='Запустить'"));
	Кнопки.Добавить("ОткрытьПапку", НСтр("ru='Открыть папку'"));
	Кнопки.Добавить("Отмена", 		НСтр("ru='Отмена'"));
	
	Оповещение = Новый ОписаниеОповещения("СОДОткрытьПанельПродолжить", ЭтаФорма, Неопределено);
	Текст = НСтр("ru='Выберите нужное действие для запуска панели управления службы обмена данными (СОД):'") + Символы.ПС;
	
	Текст = Текст + Символы.Таб + СтрШаблон_("[%1]", Кнопки.Получить(0)) + Символы.Таб + " - " 
		+ НСтр("ru='если 1С:Предприятие запущено с правами Администратора системы;'") + Символы.ПС;
	Текст = Текст + Символы.Таб + СтрШаблон_("[%1]", Кнопки.Получить(1)) + Символы.Таб + " - " 		
		+ НСтр("ru='для запуска СОД через контекстное меню с правами Администратора.'");
	ПоказатьВопрос(Оповещение, Текст, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура СОДОткрытьПанельПродолжить(ИмяКнопки, ДополнительныеПараметры) Экспорт
	
	Каталог = Объект.СОДПутьКПанелиУправления;
	
	Если ИмяКнопки = Неопределено Или ИмяКнопки = "Отмена" Тогда
		Возврат;
	ИначеЕсли ИмяКнопки = "Запустить" Тогда
		ПутьПанельСОД = Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe";
		ЗапуститьПриложение("explorer.exe """ + ПутьПанельСОД + """");
	ИначеЕсли ИмяКнопки = "ОткрытьПапку" Тогда
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");			
	Иначе
		ВызватьИсключение("СОДОткрытьПанельПродолжить() - неизвестное значение: ИмяКнопки = " + ИмяКнопки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СОДОткрытьПанельУправленияПовторить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        КомандаОткрытьПанельУправленияАПСОД(Неопределено);
    КонецЕсли;
	
КонецПроцедуры 

// СлужебныеПроцедурыИФункции_СОД
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_FTP

&НаКлиенте
Процедура ПроверитьПодключениекFTP()
	
	Если ПустаяСтрока(Объект.FTPАдрес)
		Или ПустаяСтрока(Объект.FTPПользователь) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Указаны не все параметры соединения с FTP-сервером! Работа с FTP невозможна!'"));
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Подключение к FTP-серверу...'"));
	
	Попытка
		ПодключениеFTP = Новый FTPСоединение(Объект.FTPАдрес, , Объект.FTPПользователь, Объект.FTPПароль,, Объект.FTPПассивныйРежим, 60);		
		ТекстСообщения = "ru='Подключение к FTP-серверу выполнено успешно'";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(ТекстСообщения));
	Исключение
		ТекстСообщения = "ru=""Ошибка подключения. " + СтрЗаменить(ОписаниеОшибки(), "'", """") + """";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(ТекстСообщения));
	КонецПопытки;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_FTP
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ЛК

// Процедура вызывается из модуля БыстраяНастройка.
&НаКлиенте 
Процедура ВнешнийВызовЛКЗагрузитьКаналыОбмена() Экспорт
	
	ЛКЗагрузитьДанные("КаналыОбмена", Истина); // результат вернется через оповещение "АПЛКОповещение" с источником "БыстраяНастройка"
	
КонецПроцедуры

&НаКлиенте 
Процедура ЛКЗагрузитьДанные(ВидДанных, БыстраяНастройка = Ложь)

	Модуль = ЛКЗагрузитьМодуль();
	Модуль.ВнешнийВызовЗагрузитьДанныеИзЛК(ВидДанных, БыстраяНастройка); // Процедура возвращает результат через оповещение "АПЛКОповещение".
	
КонецПроцедуры

&НаКлиенте 
Процедура ЛКЗагрузитьНастройкиОбменаПродолжить(КаналОбмена, БыстраяНастройка)
	//ОтладкаСохранитьЗначениеКаналовОбмена(КаналыОбмена);

	Если КаналОбмена.ExchangeWay = "FTP" Тогда
		Объект.СпособОбмена = "FTP";
	ИначеЕсли КаналОбмена.ExchangeWay = "SOD" Тогда
		Объект.СпособОбмена = "АПСОД";
	Иначе
		Текст = НСтр("ru='Из ЛК получен неизвестный способ обмена данными (""%1""). Вероятно, используется устарешвая версия обработки обмена данными. Обратитесь в техническую поддержку компании ""Агент Плюс"".'");
		Текст = СтрШаблон_(Текст, КаналОбмена.ExchangeWay);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Если БыстраяНастройка Тогда
			стррПараметры = Новый Структура("ЕстьОшибки,Описание", Истина, Текст);
			Оповестить("АПНастройкиПараметровОбмена_БыстраяНастройка", стррПараметры); // в параметре возвращаем описание ошибки, чтобы закрепить его в ТЗ статуса быстрых настроек
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	Если Объект.СпособОбмена = "FTP" Тогда
		Объект.FTPАдрес 		= КаналОбмена.Host;
		Объект.FTPПользователь  = КаналОбмена.Login;
		Объект.FTPПароль    	= КаналОбмена.Password;
		Объект.FTPПассивныйРежим= КаналОбмена.IsPassiveConnection;
		Объект.FTPКаталогСервера= КаналОбмена.CompanyFTPFolder;
	ИначеЕсли Объект.СпособОбмена = "АПСОД" Тогда
		Объект.СОДАдрес 		= КаналОбмена.Host;
		Объект.СОДПорт 			= КаналОбмена.Port;
	КонецЕсли; 
	
	Если БыстраяНастройка Тогда
		СохранитьНастройкиСервер("СпособОбмена,FTPАдрес,FTPПользователь,FTPПароль,FTPПассивныйРежим,FTPКаталогСервера,СОДАдрес,СОДПорт");
		Оповестить("АПНастройкиПараметровОбмена_БыстраяНастройка", Неопределено);
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Модифицированность = Ложь;
			ЭтаФорма.Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	УстановитьМодифицированостьФормы(Истина);	
	ОбновитьВидНастроекОбмена();
	
	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Из ЛК успешно получены настройки обмена данными.'"));
	
КонецПроцедуры	

&НаСервере
Процедура ОтладкаСохранитьЗначениеКаналовОбмена(КаналыОбмена)
	ЗначениеВФайл("D:\Bak\Channels.dat", КаналыОбмена);
КонецПроцедуры	

&НаКлиенте 
Процедура ЛКЗагрузитьНастройкиПродолжить(СтррПараметры)
	
	ТолькоНастройкиОбмена = СтррПараметры.ДополнительныйПараметр;
	
	// Имя скачанного файла настроек в СтррПараметры.ИмяФайлаНастроек
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтррПараметры.ИмяФайлаНастроек));
	СтррРезультат = ЗагрузитьНастройкиИзВХ(Адрес, ТолькоНастройкиОбмена);
	ВывестиСообщения(стррРезультат, Ложь);	
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Текст = НСтр("ru = 'Обнаружены ошибки при чтении значений настроек. Новые настройки не загружены.'");	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	ИначеЕсли СтррРезультат.ВсегоИзменений = 0 Тогда
		Текст = НСтр("ru = 'Значения загруженных настроек не отличаются от текущих.'");	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	// Сюда попадаем, когда загружены новые настройки 
	
	УстановитьМодифицированостьФормы(Истина);
	
	Если ТолькоНастройкиОбмена Тогда
		ОбновитьВидНастроекОбмена();
	Иначе
		ОбновитьВидНастроекОбмена();
		ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЛКВыгрузитьНастройкиВФайлСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ТекОбъект.СохранитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект), Истина);

КонецФункции

&НаКлиенте
Функция ЛКЗагрузитьМодуль()
	
	Если МодульЛК = Неопределено Тогда
		МодульЛК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "ЛичныйКабинет", СтррКонтекст, ЭтаФорма);
	КонецЕсли; 
	
	Возврат МодульЛК;

КонецФункции

&НаСервере
Функция ПолучитьВидКИАдресДоставкиПоУмолчанию()
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки");
	Если Не ЗначениеЗаполнено(ВидКИ) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	КонецЕсли; 
	Возврат ВидКИ;
	
КонецФункции

//vd_180322 Баг 37993. Статусы реализации . Так реализовано тк УС блокирует выбор значений СтатусыРеализацийТоваровУслуг.
&НаКлиенте
Процедура СтатусРеализацияТоваровУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Элемент.СписокВыбора.Очистить();
	
	сзПеречисленияРеализаций = ПолучитьСтатусыРеализаций();
	
	Для Каждого ссзЭлемент Из сзПеречисленияРеализаций Цикл
		
		Элемент.СписокВыбора.Добавить(ссзЭлемент.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

//vd_180322 Баг 37993. Статусы реализации. Добавил
&НаСервере
Функция ПолучитьСтатусыРеализаций(стрТекстРедактирования = Неопределено)
	
	сзРезультат = Новый СписокЗначений();
	МенеджерСтатусыРеализацийТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг;
 
    Для Каждого Элемент Из МенеджерСтатусыРеализацийТоваровУслуг Цикл
		сзРезультат.Добавить(Элемент);
    КонецЦикла;
	
	Возврат сзРезультат;	
	
КонецФункции

//vd_180402 ВидыДоставки. Добавил.
&НаКлиенте
Процедура ПроверитьИСохранитьСпособыДоставки()
	
	//Выбрать доступные значения способов доставки в локументе заказ
	ФормаДокументаЗаказ = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента");
	сзДокументаЗаказ = ФормаДокументаЗаказ.Элементы.СпособДоставки.СписокВыбора;
	ОбраьотатьСпособыДоставки(сзДокументаЗаказ);
	
КонецПроцедуры

//vd_180402 ВидыДоставки. Добавил.
&НаСервере
Процедура ОбраьотатьСпособыДоставки (сзДокументаЗаказ)
	
	Если сзДокументаЗаказ.Количество() = 0 Тогда
		ПеречисленияВКонфигурации = Перечисления.СпособыДоставки;
	Иначе
		ПеречисленияВКонфигурации = Новый Массив;
		Для Каждого Элемент Из сзДокументаЗаказ Цикл
			ПеречисленияВКонфигурации.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
		
	ТекОбъект 			 = РеквизитФормыВЗначение("Объект");	
	
	ИмяНастройки = "GUIDПеречисленийСпособыДоставки";
	ЗначениеНастройки = ТекОбъект.ПрочитатьЗначениеНастройки(ИмяНастройки); 
	
	Если ЗначениеНастройки = Неопределено Тогда
		ЗначениеНастройки = Новый Соответствие;
	КонецЕсли;   	
	
	ПеречисленияВХранилищеНовые = Новый Соответствие; //Если соответствие пустое, то значения в хранилище соответствуют значениям в конфигурации
	
	//Заполняет ТЗ
	Для Каждого Элемент Из ПеречисленияВКонфигурации Цикл
		
		гуидПеречисления = ЗначениеНастройки.Получить(Элемент);	
		
		Если гуидПеречисления = Неопределено Тогда
			гуидПеречисления = Новый УникальныйИдентификатор();
			ПеречисленияВХранилищеНовые.Вставить(Элемент, гуидПеречисления); 
		КонецЕсли;			
				
	КонецЦикла;
	
	//Сохранить в хранилище гуиды перечислений, если их нет в хранилище.
	Если ПеречисленияВХранилищеНовые.Количество() > 0 Тогда	
		Для Каждого Элемент Из ПеречисленияВКонфигурации Цикл
			ПоискЗначения = ПеречисленияВХранилищеНовые.Получить(Элемент);
			Если ПоискЗначения <> Неопределено Тогда
				ПеречисленияВХранилищеНовые.Вставить(Элемент, ПоискЗначения);	
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.СохранитьЗначениеНастройки(ИмяНастройки, ПеречисленияВХранилищеНовые);
	КонецЕсли;	
	
КонецПроцедуры

//vd_180402 ВидыДоставки. Добавил.
&НаСервере
Функция СпособДоставкиНачалоВыбораНаСервере()
	
	ТекОбъект 	      = РеквизитФормыВЗначение("Объект");	
	ИмяНастройки	  = "GUIDПеречисленийСпособыДоставки";
	ЗначениеНастройки = ТекОбъект.ПрочитатьЗначениеНастройки(ИмяНастройки); 

	Возврат ЗначениеНастройки;

КонецФункции   

//vd_180402 ВидыДоставки. Добавил.
&НаКлиенте
Процедура СпособДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.СписокВыбора.Очистить();
	
	ПроверитьИСохранитьСпособыДоставки();
	
	ЗначениеНастройки = СпособДоставкиНачалоВыбораНаСервере();
	
	Для Каждого СтрокаЗначения Из ЗначениеНастройки Цикл
		Элемент.СписокВыбора.Добавить(СтрокаЗначения.Ключ);		
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти


















