
#Область ГлобальныеПеременные

&НаКлиенте
Перем МодульКарты;  // общий клиентский модуль работы с картами
&НаКлиенте
Перем гМодульК;  // общий клиентский модуль. 

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//vd_181119
	//СтррКонтекст = Новый Структура("Повторно,ИнтерфейсТакси,ИсправитьРазмерыЭлементов,КаталогИконок,КартаЦентр,СписокВсеВидыДокументов,"
	//	+ "СсылкаСписокТТ,Маркеры,МаксНомерИконки,КаталогДанных,ЦветаТреков");
	СтррКонтекст = Новый Структура("Повторно,ИнтерфейсТакси,ИсправитьРазмерыЭлементов,КаталогИконок,КартаЦентр,СписокВсеВидыДокументов,"
		+ "СсылкаСписокТТ,КаталогДанных");
		
		
	СтррКонтекст.Повторно = Ложь;
	
	//СтррКонтекст.Маркеры  = Новый Массив; //vd_181123 не используется
	//СтррКонтекст.МаксНомерИконки = 20; // максимальный номер пронумерованной иконки на карте //vd_181123 не используется
	//СтррКонтекст.ЦветаТреков = СтрРазделить_("000080,FF0000,2D9900,B200FF,FF7F7F,00BAD9,B5030C,404040,007380,FF00E6,997B00,0034FF,A85454,00D935,786EC1"); //vd_181119 неисполбзуется
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.КаталогДанных 			 = ТекОбъект.ПрочитатьЗначениеНастройки("КаталогДанных");
	СтррКонтекст.КартаЦентр 			 = ТекОбъект.ПрочитатьЗначениеНастройки("КартаЦентр"); // центр карты, выбранный до этого пользователем 
	СтррКонтекст.СписокВсеВидыДокументов = ТекОбъект.ПолучитьВсеВидыОбъектовДля1C("Документ", "СоздаваемыеВМУ");
	СтррКонтекст.КаталогИконок 			 = ТекОбъект.ПолучитьВебКаталогИконок();
	
	СтррКонтекст.ИнтерфейсТакси = ТекОбъект.КонфигурацияРазмерностьЭлементовФормыДляТакси() 
		И ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
		
	СтррКонтекст.ИсправитьРазмерыЭлементов = ТекОбъект.КонфигурацияРежимСовместимости("<=8.3.6") 
		И ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	
	ТаймингАктуальностиМестоположенияАгента = 15;
	ДопустимаяУдаленностьОтТТ = ТекОбъект.ПрочитатьЗначениеНастройки("МаксимальноеРасстояниеОтТТ");
	
	ЛегендаЗаполнить();
	
	//СтррМаркер = Новый Структура("Широта,Долгота,Заголовок", 0, 0, ""); //vd_181123 не используем
	
	//{{vd_181113
	ТаймерОжидания 	  = Новый Структура("Включен, Время, Попытка, ОбработкаДанных", Ложь, ТекущаяДата(), 0, Ложь, Ложь); 
	МакетЗагружен  = Ложь; 																												 
	//}}vd_181113
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтррКонтекст.ИнтерфейсТакси Тогда
		Элементы.ГруппаЛеваяОбласть.Ширина = 40;
	КонецЕсли; 
	
	Если СтррКонтекст.ИсправитьРазмерыЭлементов Тогда
		Элементы.ГруппаЛеваяОбласть.Ширина = 20;
		Элементы.ДопустимаяУдаленностьОтТТ.Заголовок = НСтр("ru = 'Удаленность'"); // в конфигурациях в режиме совместимости 8.3.6 искажается положение элементов из-за длинного заголовка 
	КонецЕсли; 
	
	МодульКарты	= ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульКартыКлиент");	
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
	МодульКарты.ЗаполнитьСписокДоступныхКарт(Элементы.ИсточникКарты.СписокВыбора);
	Если Не ЗначениеЗаполнено(ИсточникКарты) ИЛИ  ИсточникКарты = "GoogleMaps" Тогда //vd_181120 убираем гугл карты	
		ИсточникКарты = Элементы.ИсточникКарты.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты;
	
	Элементы.ПланФакт.Отображение = ОтображениеТаблицы.Дерево;		
	
	Если СтррКонтекст.КартаЦентр = Неопределено Тогда
		СтррКонтекст.КартаЦентр = МодульКарты.ПолучитьКоординатыПользователя();
		МодульКарты.СохранитьЦентрКартыКлиент(СтррКонтекст.КартаЦентр);
	КонецЕсли;
	
	Если ВидыДокументов.Количество() = 0 Тогда // если список пустой, заполняем его всеми видами документов
		ВидыДокументов = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 	
	КонецЕсли; 

	Если ДатаОтчета = '00010101'  Тогда
		ДатаОтчета = ТекущаяДата();
	КонецЕсли; 
	
	Если ТаймингАктуальностиМестоположенияАгента = 0 Тогда
		ТаймингАктуальностиМестоположенияАгента = 15;
	КонецЕсли; 
	
	ЛегендаОбновитьТайминги();
	
	ФормаВидимостьДопИнформации();
	ИспользоватьТочкиТрекаПоВремениПриИзменении("ПриОткрытии"); //vd_181123
	ДействиеОбработкаСобытий("КартаОбновитьМакет");             //vd_181123
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	СтррКонтекст.Повторно = Истина; // признак, что форма открыта повторно, используется чтобы учитывать загрузку карты в ПолеБраузера	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда 		// второй экземпляр обработки спрашивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

//vd_181016 Сильно изменена логика 
&НаКлиенте
Процедура ВнешнийВызовПоказатьТрек(стррНастройкиФормы) Экспорт
	
	РежимРеальногоВремени			= Ложь;
	РежимРеальногоВремениПриИзменении("ПроцедураВнешнийВызовПоказатьТрек"); //vd_181122 ФормаПриИзмененииРежимаРеальногоВремени();

	Если стррНастройкиФормы <> Неопределено Тогда
		
		Если стррНастройкиФормы.Свойство("СписокВидыДокументов") Тогда
			ВидыДокументов = стррНастройкиФормы.СписокВидыДокументов.Скопировать();
		КонецЕсли;
		
		Если стррНастройкиФормы.Свойство("ТолькоПроведенныеДокументы") Тогда
			ТолькоПроведенныеДокументы = стррНастройкиФормы.ТолькоПроведенныеДокументы;
		КонецЕсли;
		
		Если стррНастройкиФормы.Свойство("Период") Тогда
			ДатаОтчета = стррНастройкиФормы.Период.ДатаНачала;		
		КонецЕсли;
		
		Если стррНастройкиФормы.Свойство("Агент") Тогда
			мАгенты = Новый Массив;
			мАгенты.Добавить(стррНастройкиФормы.Агент);
			ДействиеОбработкаСобытий("ПланФактДобавить", мАгенты);
		КонецЕсли;

		ДействиеОбработкаСобытий("КартаОбновитьКарту");		

	КонецЕсли;
		
	
КонецПроцедуры


// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

//vd_181122 Полностью изменена логика
&НаКлиенте
Процедура КомандаОбновитьОтчет(Команда)
	
	ИспользоватьТочкиТрекаПоВремениПриИзменении("Команда" + Команда);
	ДействиеОбработкаСобытий("ПланФактОбновить");
	ДействиеОбработкаСобытий("КартаОбновитьМакет");
	
КонецПроцедуры

//vd_181121 Полностью изменена логика
&НаКлиенте
Процедура КомандаОчиститьДерево(Команда)
	
	ДействиеОбработкаСобытий("ПланФактОчистить");
	ДействиеОбработкаСобытий("КартаОбновитьКарту");

КонецПроцедуры

&НаКлиенте
Процедура КомандаСортироватьПоФактуПосещения(Команда)
	
	ДеревоПланФактСортировать("ИндексФакта,ИндексПлана");
	ДеревоПланФактРазвернуть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСортироватьПоПлануПосещения(Команда)
	
	ДеревоПланФактСортировать("ИндексПлана,ИндексФакта");
	ДеревоПланФактРазвернуть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежимПодробнойИнформацииВДеревеМаршрута(Команда)
	
	РежимДополнительнойИнфомации = Не РежимДополнительнойИнфомации;
	ФормаВидимостьДопИнформации();
	
	ДействиеОбработкаСобытий("ПланФактОбновить"); //vd_181122 ФормаОбновитьПланФакт();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьКоординаты(Команда)
	
	мПартнеры = Новый Массив;
	мСтроки = Элементы.ПланФакт.ВыделенныеСтроки;
	Для каждого идСтроки Из мСтроки Цикл
		СтрокаД = ПланФакт.НайтиПоИдентификатору(идСтроки);
		Если ЗначениеЗаполнено(СтрокаД.Партнер) Тогда
			мПартнеры.Добавить(СтрокаД.Партнер);
		КонецЕсли; 
	КонецЦикла; 
	
	Если мПартнеры.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите в таблице партнеров для редактирования координат.'"));
	Иначе
		Форма = МодульК().ОткрытьФормуОбработки("РедакторМеток", СтррКонтекст);
		Форма.ВнешнийВызовДобавитьИПоказатьПартнеров(мПартнеры);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетВыполнениеПланаПосещений(Команда)
	
	Если ДатаОтчета = Дата('00010101') Тогда
		Текст = НСтр("ru = 'Укажите дату отчета.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ДатаОтчета");
		Возврат;
	КонецЕсли;
	
	ВыбранныйАгент = ПланФактПолучитьТекущегоАгента(Истина);
	
	Если ВыбранныйАгент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррПараметры = Новый Структура("Агент,Период,СписокВидыДокументов,ТолькоПроведенныеДокументы,ВыделитьДень");
	стррПараметры.Агент  = ВыбранныйАгент;
	стррПараметры.Период = Новый СтандартныйПериод(НачалоМесяца(ДатаОтчета), КонецМесяца(ДатаОтчета));
	стррПараметры.СписокВидыДокументов 		 = ВидыДокументов;
	стррПараметры.ТолькоПроведенныеДокументы = ТолькоПроведенныеДокументы;
	стррПараметры.ВыделитьДень 				 = ДатаОтчета;
	
	Форма = МодульК().ОткрытьФормуОбработки("ОтчетВыполнениеПланаПосещений", СтррКонтекст);
	Форма.ВнешнийВызовСформироватьОтчет(стррПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

//vd_181122 Добавлена
&НаКлиенте 
Процедура ИспользоватьТочкиТрекаПоВремениПриИзменении(Элемент)

	Элементы.ЗначениеТочкиТрекаПоВремени.Доступность 	= ИспользоватьТочкиТрекаПоВремени;
	Элементы.ДекорацияТаймингАктуальности.Доступность 	= ИспользоватьТочкиТрекаПоВремени;
	Элементы.ТочкиТрекаПоВремени.Видимость			  	= ИспользоватьТочкиТрекаПоВремени;
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		ДействиеОбработкаСобытий("КартаОбновитьКарту");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВидимостьДопИнформации()
	
	Элементы.МаршрутАдресПартнераОтдельнойСтрокой.Пометка 	= РежимДополнительнойИнфомации;
	Элементы.МаршрутГруппаИнформация.Видимость 				= РежимДополнительнойИнфомации;
	Элементы.МаршрутГруппаВерх.Видимость 					= Истина;
	
КонецПроцедуры

//vd_181122 Полностью изменена логика
&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	
	ДействиеОбработкаСобытий("ПланФактОбновить");
	ДействиеОбработкаСобытий("КартаОбновитьКарту");
	
КонецПроцедуры

//vd_181122 Полностью изменена логика
&НаКлиенте
Процедура РежимРеальногоВремениПриИзменении(Элемент)
	
	Элементы.ДатаОтчета.Доступность = Не РежимРеальногоВремени;
	
	Если РежимРеальногоВремени Тогда
		ДатаОтчета = ТекущаяДата();
		ПодключитьОбработчикОжидания("РежимРеальногоВремениОбработка", 30, Ложь); //Циклический
	Иначе
		ОтключитьОбработчикОжидания("РежимРеальногоВремениОбработка");
	КонецЕсли; 
	
КонецПроцедуры

//vd_181122 Добавлена
&НаКлиенте
Процедура РежимРеальногоВремениОбработка()
	
	ДействиеОбработкаСобытий("ПланФактОбновить");
	ДействиеОбработкаСобытий("КартаОбновитьКарту");	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКартыПриИзменении(Элемент)
	
	ДействиеОбработкаСобытий("КартаОбновитьМакет"); //vd_181122 КартаОбновитьТекущийМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляПометки = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> ВидыДокументов.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиСпискаВидовДокументов", ЭтотОбъект);
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите документы, включаемые в отчет'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиСпискаВидовДокументов(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолучатель = ВидыДокументов;
	СписокПолучатель.Очистить();
	
	Для Каждого Элемент из Список Цикл
		Если Элемент.Пометка Тогда					
			СписокПолучатель.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймингАктуальностиМестоположенияАгентаПриИзменении(Элемент)
	
	Если ТаймингАктуальностиМестоположенияАгента < 1 Тогда
		ТаймингАктуальностиМестоположенияАгента = 1;
	КонецЕсли;
	
	ЛегендаОбновитьТайминги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймингАктуальностиМестоположенияАгентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// vd_181122 При нажатии на линию трека отображает окошко информации трека
&НаКлиенте
Процедура ПолеБраузераПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Button = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Источник = ДанныеСобытия.Button;
	
	Если Источник.id = "ClickEvent" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Источник.apObjectType = "polyline" Тогда
			
			Документ = Элемент.Document;
			
			ОкноБраузера = Документ.parentWindow; // IE
		    Если ОкноБраузера = Неопределено Тогда
		        ОкноБраузера = Документ.defaultView; // Прочие браузеры
			КонецЕсли;
			
			Координаты = СтрРазделить_(Источник.apValue);
			
			Широта  = СтрокуВЧисло(Координаты[0]);
			Долгота = СтрокуВЧисло(Координаты[1]);
			стррЗначения = ТрекПолучитьДанныеДляКоординаты(Источник.apObjectID, КоординатаИзWGS84вNMEA(Широта), КоординатаИзWGS84вNMEA(Долгота));
			Если стррЗначения.КодОшибки <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(стррЗначения.ТекстОшибки);
				Возврат;
			Иначе
				ОкноБраузера.setBalloon(Широта, Долгота, Строка(стррЗначения.Агент));
			КонецЕсли; 
			
		Иначе
			
			//...
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

//vd_181123 Событие при нажатии на ссылку в расширенной подсказке "Допустимая удаленность от ТТ"
&НаКлиенте
Процедура ФормаДекорацияУдаленностьРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбщиеНастройки_Основные" Тогда
		СтандартнаяОбработка = Ложь;
		МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
		стррПараметры = Новый Структура("Закладка,Сообщение", "ГруппаОсновные", "МаксимальноеРасстояниеОтТТ");
		Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", стррПараметры);
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти

#Область ОбработчикиСобытийДереваПланФакт

//vd_181016 Полностью Изменена логика
// Процедура - Форма обновить отчет. Без Обновления макета. Или Добавить что то на карту.
// Важно!!! Процедура вызывается только через ДействиеОбработкаПланФакт()
// Параметры:
//		Действие	- Строка - ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить. Действия с План факт. 
//		мАгенты		- массив - массив агентов, если неопределено то обновить данные по всем Агентам в ПланФакт
//
&НаКлиенте
Процедура ПланФактОбновить(Действие = "ПланФактОбновить", мАгенты = Неопределено)  

	ПодключитьТаймер = НЕ МакетЗагружен; //Для того чтобы параллельно не было обращения к карте со стороны карты и обработчика.
	
	Если ДатаОтчета = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТекущийАгент = ПланФактПолучитьТекущегоАгента(); // запоминаем текущего агента
	
	//1. Изменить дерево ПланФакт. Изменяет только дерево. Нет действий с треками, маркерами и картой. (не определяется в ПланФакт АГЕНТЫ/Время АГЕНТЫ/Иконка)
	Если Действие = "ПланФактДобавить" Тогда
		//1.1 Проверка
		Если НЕ ТипЗнч(мАгенты) = Тип("Массив") ИЛИ мАгенты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		//1.2 Получение мАгентыНовые и проверка на уже добавленные. 
		мАгентыНовые = Новый Массив;                			// Новые агенты, которых нет в дереве ПланФакт и их требуется добавит.  
		ДеревоУровеньАгенты 	= ПланФакт.ПолучитьЭлементы(); 	// Коллекция элементов дерева верхнего уровня.
		мДеревоУровеньАгенты	= Новый Массив;                 // Массив элементов дерева верхнего уровня.
		Для Каждого Элемент Из ДеревоУровеньАгенты Цикл
			мДеревоУровеньАгенты.Добавить(Элемент.Агент);	
		КонецЦикла;
		Для Каждого Элемент из мАгенты Цикл 
			сдзПоиск = мДеревоУровеньАгенты.Найти(Элемент);
			Если сдзПоиск = Неопределено Тогда
				мАгентыНовые.Добавить(Элемент);		
			Иначе
				Текст = НСтр("ru = 'Агент ""%1"" уже добавлен в таблицу.'");	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Текст, Элемент));
			КонецЕсли;
		КонецЦикла;
		//1.3 Добавление новых агентов ПланФакт	
		Если мАгентыНовые.Количество() = 0 Тогда
			Возврат;
		Иначе
			ДеревоПланФактИзменить(мАгентыНовые, Действие);
		КонецЕсли;
		
	ИначеЕсли Действие = "ПланФактУдалить" Тогда
		ДеревоПланФактИзменить(мАгенты, Действие);
		
	ИначеЕсли Действие = "ПланФактОбновить" ИЛИ Действие = "ПланФактОчистить" Тогда
		ДеревоПланФактИзменить(Неопределено, Действие);
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	
	//2. Заполнить/Изменить тз КартаТреки 
	Если Действие = "ПланФактДобавить" Тогда
		ТрекиПрочитатьТрекиАгентов(мАгентыНовые, Действие);
	ИначеЕсли Действие = "ПланФактУдалить" Тогда
		ТрекиПрочитатьТрекиАгентов(мАгенты, Действие);
	ИначеЕсли Действие = "ПланФактОбновить" ИЛИ Действие = "ПланФактОчистить" Тогда
		ТрекиПрочитатьТрекиАгентов(Неопределено, Действие);
	КонецЕсли;
	
	
	//3. Заполнить в ПланФакт АГЕНТЫ/Время АГЕНТЫ/Иконка
	Если Действие = "ПланФактОбновить" ИЛИ Действие = "ПланФактУдалить" Тогда
		ДеревоПланФактЗаполнитьВремяИконкаАгаента(Неопределено, Действие);
	ИначеЕсли Действие = "ПланФактДобавить" Тогда
		ДеревоПланФактЗаполнитьВремяИконкаАгаента(мАгентыНовые, Действие);	
	КонецЕсли;	
	
	
	//4. Заполнить Маркеры ТТ
	МаркерыЗаполнитьКартаМаркерыТТ(Действие);

	ДеревоПланФактРазвернуть(Неопределено);
	ПланФактУстановитьТекущегоАгента(ТекущийАгент); // восстанавливаем выбор текущего агента

	МаркерыПромежутковВремени(ТекущийАгент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	стррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Пользователь,МножественныйВыбор", ПланФактПолучитьТекущегоАгента(), Истина));
	Оповещение = Новый ОписаниеОповещения("ПланФактДобавлениеЗавершение", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборАгента", стррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

//vd_181010 Изменена логика
&НаКлиенте
Процедура ПланФактДобавлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Массив") ИЛИ Результат.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ДействиеОбработкаСобытий("ПланФактДобавить", Результат);
	ДействиеОбработкаСобытий("КартаОбновитьКарту");
	

КонецПроцедуры

//vd_181010 Полностью изменена логика
&НаКлиенте
Процедура ПланФактПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Агент) Тогда
		мАгенты = Новый Массив;
		мАгенты.Добавить(Элемент.ТекущиеДанные.Агент);
		
		ДействиеОбработкаСобытий("ПланФактУдалить", мАгенты);
		ДействиеОбработкаСобытий("КартаОбновитьКарту");
		
	КонецЕсли;
		
КонецПроцедуры

//vd_181122 Полностью изменена логика
&НаКлиенте
Процедура ПланФактПриАктивизацииСтроки(Элемент)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
		
		//Переход к треку
	    СтррРегион = Неопределено;
		Если СтрокаД.Иконка = 1 Тогда
			// иконка агента СтрокаД.Иконка = 1 означает, что трека нет
		Иначе
			стррПоиск = Новый Структура("Агент", СтрокаД.Агент);
			мКартаТреки = КартаТреки.НайтиСтроки(стррПоиск);
			Если мКартаТреки.Количество() > 0 И мКартаТреки[0].ТрекЕсть = Истина Тогда
				СтррРегион = мКартаТреки[0].РегионТрека;	
			КонецЕсли;		
		КонецЕсли;;
		ДействиеОбработкаСобытий("КартаПоказатьРегион", СтррРегион);
		
	    //Добавление точек в таблицу КартаТочкиТрекаПоВремени
		ДействиеОбработкаСобытий("МаркерыПромежутковВремени", СтрокаД.Агент);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаД.Партнер) Тогда
		
		//Перейти к Маркеру ТТ
		СтррМаркер = Новый Структура("Широта, Долгота", СтрокаД.Широта, СтрокаД.Долгота);
		ДействиеОбработкаСобытий("КартаПерейтиКМаркеру", СтррМаркер);
			
	КонецЕсли;   	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "МаршрутПредставление" Тогда
		Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
			МодульК().ОткрытьФормуОбработки("НастройкиАгентов");
			Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("Пользователь", СтрокаД.Агент));
		ИначеЕсли ЗначениеЗаполнено(СтрокаД.Партнер) Тогда
			ПоказатьЗначение(Неопределено, СтрокаД.Партнер);
		ИначеЕсли ЗначениеЗаполнено(СтрокаД.Документ) Тогда
			Если ТипЗнч(СтрокаД.Документ) = Тип("Структура") Тогда // виртуальный документ
				стррДокумент = СтрокаД.Документ;
				МодульК().ВООткрытьФорму(стррДокумент);
			Иначе // обычный документ
				ПоказатьЗначение(Неопределено, СтрокаД.Документ);			
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПланФактПолучитьТекущегоАгента(ПоказатьПредупреждение = Ложь)
	
	ВыбранныйАгент = Неопределено;
	
	СтрокаД = Элементы.ПланФакт.ТекущиеДанные;
	Пока СтрокаД <> Неопределено Цикл // в цикле поднимаемся вверх по ветке дерева до агента
		Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
			ВыбранныйАгент = СтрокаД.Агент;
			Прервать;
		Иначе
	        СтрокаД = СтрокаД.ПолучитьРодителя();
		КонецЕсли;
	КонецЦикла; 
	
	Если ВыбранныйАгент = Неопределено И ПоказатьПредупреждение Тогда
		Если ПланФакт.ПолучитьЭлементы().Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Добавьте в таблицу нужного агента.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите в таблице нужного агента.'"));
		КонецЕсли; 	
	КонецЕсли; 
	
	Возврат ВыбранныйАгент;
	
КонецФункции

&НаКлиенте
Процедура ПланФактУстановитьТекущегоАгента(Агент)
	
	Возврат;
	
	Если Не ЗначениеЗаполнено(Агент) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Агент = ПланФактПолучитьТекущегоАгента()  Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл
		Если СтрокаД.Агент = Агент Тогда
			Элементы.ПланФакт.ТекущаяСтрока = СтрокаД.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// ОбработчикиСобытийДереваПланФакт
#КонецОбласти

#Область ОбработчикиСобытийМаркерыПромежутковВремени

//vd_181123 Добавлена
&НаКлиенте
Процедура ТочкиТрекаПоВремениПриАктивизацииСтроки(Элемент)
	
	ДействиеОбработкаСобытий("КартаОбновитьКарту");
	
КонецПроцедуры

//vd_181123 Добавлена
&НаКлиенте
Процедура ТочкиТрекаПоВремениВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	стзЭлемент = Элемент.ТекущиеДанные;
	Если стзЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррМаркер = Новый Структура("Широта,Долгота", стзЭлемент.Широта, стзЭлемент.Долгота); 
	ДействиеОбработкаСобытий("КартаПерейтиКМаркеру", стррМаркер);

КонецПроцедуры

//vd_181008 Добавлена
&НаКлиенте
Процедура МаркерыПромежутковВремени(Агент)
	
	Если НЕ ИспользоватьТочкиТрекаПоВремени Тогда
		Возврат;
	ИначеЕсли ЗначениеТочкиТрекаПоВремени < 1 Тогда	
		ЗначениеТочкиТрекаПоВремени = 60;
	КонецЕсли;
	
	КартаТочкиТрекаПоВремени.Очистить();            
	
	// Получаем Трек агента
	ПараметрыОтбора = Новый Структура ("Агент", Агент);
	мстзТреки = КартаТреки.НайтиСтроки(ПараметрыОтбора);
	
	Если мстзТреки.Количество() > 0 И мстзТреки[0].ТрекЕсть = Истина Тогда
		
		Трек = мстзТреки[0].Трек;
		ТрекКоличество = Трек.Количество();
	
		// Получаем координаты маркеров из ТрековАгента и заносим в Таблицу КартаТочкиТрекаПоВремени
		// Добавляем Точку начала
		НоваяСтрока = КартаТочкиТрекаПоВремени.Добавить();
		НоваяСтрока.Широта  = Трек[0].Широта; 
		НоваяСтрока.Долгота = Трек[0].Долгота;
		НоваяСтрока.Время   = Трек[0].Время;
		// Добавляем все промежуточные точки
		ВремяПоиска = Трек[0].Время + (ЗначениеТочкиТрекаПоВремени * 60); //+1 для того чтобы первая точка не попала.
		Для Каждого Элемент Из Трек Цикл
			Если Элемент.Время >= ВремяПоиска Тогда
				ВремяПоиска = Элемент.Время + (ЗначениеТочкиТрекаПоВремени * 60);
				НоваяСтрока = КартаТочкиТрекаПоВремени.Добавить();
				НоваяСтрока.Широта  = Элемент.Широта; 
				НоваяСтрока.Долгота = Элемент.Долгота;
				НоваяСтрока.Время   = Элемент.Время;
			КонецЕсли		
		КонецЦикла;
		
		Если КартаТочкиТрекаПоВремени.Количество() > 1 И КартаТочкиТрекаПоВремени[КартаТочкиТрекаПоВремени.Количество() - 1].Время <> Трек[ТрекКоличество - 1].Время Тогда
			// Добавляем последнюю точку
			НоваяСтрока = КартаТочкиТрекаПоВремени.Добавить();
			НоваяСтрока.Широта  = Трек[ТрекКоличество - 1].Широта; 
			НоваяСтрока.Долгота = Трек[ТрекКоличество - 1].Долгота;
			НоваяСтрока.Время   = Трек[ТрекКоличество - 1].Время;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если гМодульК = Неопределено Тогда
	    гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;

КонецФункции 

// Функция возвращает структуру наличия реквизитов у переданных видов документов.
&НаСервере
Функция ПолучитьПризнакиНаличияРеквизитов(списВидыДокументов, стрРеквизиты)
	
	стррРезультат = Новый Структура;
	мРеквизиты = СтрРазделить_(стрРеквизиты);

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого Элемент Из списВидыДокументов Цикл
		Если ТекОбъект.ВДокЭтоВиртуальныйДокумент(Элемент.Значение) Тогда
		    Реквизиты = ТекОбъект.ВДокРеквизитыШапкиМассив(Элемент.Значение);
		Иначе	
			Реквизиты = Метаданные.Документы[Элемент.Значение].Реквизиты;
		КонецЕсли;
		стррРеквизиты = Новый Структура;
		Для Каждого ИмяРеквизита Из мРеквизиты Цикл
			Если Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				стррРеквизиты.Вставить(ИмяРеквизита);
			КонецЕсли; 
		КонецЦикла; 
		стррРезультат.Вставить(Элемент.Значение, стррРеквизиты);
	КонецЦикла; 
	
	Возврат стррРезультат;
	
КонецФункции

//vd_181015 Добавлена
&НаКлиенте
Процедура ВывестиСообщение(Знач ТекстСообщения)
	
	//vd_181128
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "'", "");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, """", "");
	
	Текст = НСтр("ru = '" + Формат(ТекущаяДата(), "ДЛФ=В") + " " + ТекстСообщения + "'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "");
	
КонецПроцедуры		

// Функция выделяет из строки вида "N. ЧЧ:ММ - ЧЧ:ММ" строку "ЧЧ:ММ - ЧЧ:ММ"
&НаКлиентеНаСервереБезКонтекста
Функция ВыделитьИнтервалВремени(стрВремя)

	Индекс = Найти(стрВремя, ".");
	Если Индекс = 0 Тогда
		Возврат стрВремя;
	Иначе
		Возврат Сред(стрВремя, Индекс + 1);
	КонецЕсли; 

КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПреобразованиеЗначений

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	стрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			стрЧисло = стрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			стрЧисло = стрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(стрЧисло), 0, Число(стрЧисло));

КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
&НаКлиентеНаСервереБезКонтекста
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ПреобразованиеЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Легенда

&НаСервере
Процедура ЛегендаЗаполнить()
	
	Легенда.Очистить();
	
	СтрокаТ = Легенда.Добавить();
	СтрокаТ.Иконка 	 = 0;
	СтрокаТ.Описание = НСтр("ru = 'Не выполненное посещение по плану'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 1;
	СтрокаТ.Описание = НСтр("ru = 'Выполненное посещение по плану'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 2;
	СтрокаТ.Описание = НСтр("ru = 'Посещение в незапланированный день'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 3;
	СтрокаТ.Описание = НСтр("ru = 'Посещение отсутствующей в плане торговой точки'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 4;
	СтрокаТ.Описание = НСтр("ru = 'Начало трека'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 5;
	СтрокаТ.Описание = НСтр("ru = 'Конец трека'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 6;
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 7;
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 8;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЛегендаОписание(ЗначениеВМинутах, Шаг)

	СтрокаШаблон = ?(Шаг <> 3, НСтр("ru = 'Местоположение агента за %1 %2'"), НСтр("ru = 'Местоположение агента более %1 назад'"));
	
	Если ЗначениеВМинутах % 60 = 0 Тогда
		Величина = ЗначениеВМинутах / 60;
		Если Величина = 1 Тогда
			Если Шаг = 3 Тогда
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'часа'"));
			Иначе
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'последний'"), НСтр("ru = 'час'"));
			КонецЕсли; 
		ИначеЕсли Шаг = 3 Тогда
			Результат = СтрШаблон_(строкаШаблон, ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru = 'часа,часов,часов'")));
		Иначе
			Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'последние'"), ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru = 'час,часа,часов'")));
		КонецЕсли; 
	Иначе
		Величина = ЗначениеВМинутах;
		Если Величина = 1 Тогда
			Если Шаг = 3 Тогда
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'минуты'"));
			Иначе
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'последнюю'"), НСтр("ru = 'минуту'"));
			КонецЕсли; 
		ИначеЕсли Шаг = 3 Тогда
			Результат = СтрШаблон_(строкаШаблон, ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru = 'минуты,минут,минут'")));
		Иначе
			Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'последние'"), ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru = 'минуту,минуты,минут'")));
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЛегендаОбновитьТайминги()
	
	стррПоиск = Новый Структура("Иконка");
	
	стррПоиск.Иконка = 6;
	Легенда.НайтиСтроки(стррПоиск)[0].Описание = ЛегендаОписание(ТаймингАктуальностиМестоположенияАгента, 1);
		
	стррПоиск.Иконка = 7;
	Легенда.НайтиСтроки(стррПоиск)[0].Описание = ЛегендаОписание(2 * ТаймингАктуальностиМестоположенияАгента, 2);
		
	стррПоиск.Иконка = 8;
	Легенда.НайтиСтроки(стррПоиск)[0].Описание = ЛегендаОписание(2 * ТаймингАктуальностиМестоположенияАгента, 3);
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Легенда    
#КонецОбласти 

#Область Карты_КонверсияЗначений

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоординатаИзWGS84вNMEA(Координата)
	
	Возврат Цел(Координата)*100 + (Координата-Цел(Координата)) * 60;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), " ", ""), ",", ".");
	
КонецФункции

// СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений
#КонецОбласти 

#Область Карта_СлужебныеПроцедурыИФункции

// vd_181128 Изменеа из Процедуры на функцию
// 
// Возвращаемое значение:
// Истина  - Загружен без ошибок
// Ложь    - Загружен с ошибкой: В момент обновления карты диалоговый элемент "ПолеБраузера" сфокусирован.
&НаКлиенте
Функция КартаОбновитьТекущийМакет()
	
	МакетЗагружен = Ложь;
	
	// Важно, чтобы в момент обновления карты диалоговый элемент "ПолеБраузера" не был сфокусирован,
	// иначе происходит ошибка выполнения JavaScript. (Баг работы с COM-объеткми?).
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ПолеБраузера" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты; // Убираем фокус с "ПолеБраузера"
		Возврат Ложь; //vd_181128
	КонецЕсли;
	
	ТекстМакета	= МодульКарты.ПолучитьСкриптКарты(ИсточникКарты);	
	
	#Если Не ВебКлиент Тогда
		Документ = Элементы.ПолеБраузера.Документ;	              
		//Загрузка скрипта в COM обьект
		КартаЗагрузитьМакет(Документ, ТекстМакета);             
		
		ОкноБраузера = Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
		//Параметр, показывающий, что файл скрипта используется для Редактора маршрута		
		ОкноБраузера.name = КартаСформироватьПараметрРежимРедактора("Report", стррКонтекст.КартаЦентр);
	#Иначе
		ТекстСкрипта = ТекстМакета; 
	#КонецЕсли
	
	Возврат Истина; //vd_181128
	
	//ФормаОбновитьОтчет(Новый Структура("ОбновитьПланФакт", Ложь));  //vd_181010 Обнавление макета карты, План факт обновлять не нужно
	
КонецФункции   

// Выполняет загрузку скрипта карты из текста макета
//
//  Параметры:
//   Документ 		- COM-объект - поле html-документа
//   ТекстМакета 	- Строка - текст скрипта
//
&НаКлиенте
Процедура КартаЗагрузитьМакет(Документ, ТекстМакета)

	Попытка                                                                            
		Документ.designMode = "On";
		Документ.write(ТекстМакета);	
		Документ.designMode = "Off"; 
	Исключение
		Попытка
			Документ.body.document.designMode = "On";
			Документ.write(ТекстМакета);
			Документ.body.document.designMode = "Off";
		Исключение
			//Ошибка загрузки макета.
			ТекстСкрипта = ТекстМакета; //ТекстСкрипта - реквизит формы поля браузера.
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

//vd_181108 Добавлена
//В браузер загружен скрипт. Если скрипт загружен не корректно, отсутствует интернет итд, такие ситуация не обрабатывается. 
//Обработка корректности загрузки скрипта обрабатывается в обработке события таймера "КартаПроверкаЗагрузкиМакета". 
&НаКлиенте
Процедура КартаПолеБраузераДокументСформирован(Элемент)
	
	Таймер_Включить("КартаПроверкаЗагрузкиМакета");
	
КонецПроцедуры

// Формирует параметр "Режим редактора" (режим + координаты центра карты - при их наличии)
//
//  Параметры:
//   РежимРедактора - Строка - режим редактора
//   КартаСсылка    - СправочникСсылка.апОнлайнКарты - ссылка на карту
//   Широта 		- широта для позиционирования центра карты
//   Долгота    	- долгота для позиционирования центра карты
//  		Если параметры Широта и Долгота не указаны, 
//			то центр карты берется из атрибутов КартаСсылка.Широта и КартаСсылка.Долгота.
//
//  Возвращаемое значение:
//   РежимРедактора - Строка - режим редактора с координатами центра карты (при их наличии)  
//
&НаКлиентеНаСервереБезКонтекста
Функция КартаСформироватьПараметрРежимРедактора(РежимРедактора, стррЦентр = Неопределено) Экспорт
	
	Если ТипЗнч(стррЦентр) = Тип("Структура") И стррЦентр.Свойство("Широта") Тогда
		ШиротаСтр  = ЧислоВСтроку(КонвертироватьNMEAWGS84(стррЦентр.Широта));
		ДолготаСтр = ЧислоВСтроку(КонвертироватьNMEAWGS84(стррЦентр.Долгота));
	Иначе
		ШиротаСтр  = "0";
		ДолготаСтр = "0";
	КонецЕсли; 
	
	Возврат ШиротаСтр + "@" + ДолготаСтр + "@" + РежимРедактора;	
	
КонецФункции

//vd_181121 Добавлена
&НаКлиенте
Процедура КартаОбновитьКарту()
	
	//Очистить Карту
	КартаОчиститьВсе();
	
	//Добавить на карту: треки и маркеры трека (НачалоПути, КонецПути, фэйковые координаты, если есть)
	КартаДобавитьТрекиИМаркерыТрека();
	
	//Добавить на карту маркеры ТТ.     
	КартаДобавитьМаркерыТТ();
	
	//Добавить маркер из КартаТочкиТрекаПоВремени. (маркер точка трека по времени)
	КартаДобавитьМаркерТочкиТрекаПоВремени();
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты
#КонецОбласти 

#Область ДеревоПланФакта_СлужебныеПроцедурыИФункции

//vd_181115 Полностью изменена логика
// Изменить дерево ПланФакт. Изменяет только дерево. Нет действий с треками, точками и картой. (не обновляется в ПланФакт АГЕНТЫ/Время АГЕНТЫ/Иконка, определяются позже при считывании треков).
// Действия с План факт: ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить.
//
// Параметры:
//  мАгенты		 - масиив	 - Агенты которых требуется добавить или удалить в ПланФакт. Не используется если Действие = ПланФактОчистить или ПланФактОбновить
//  Действие	 - Строка	 - Действие события ПланФакт
//
&НаСервере
Процедура ДеревоПланФактИзменить(мАгенты, Действие)
	
	Дерево = ДанныеФормыВЗначение(ПланФакт, Тип("ДеревоЗначений"));
	ДеревоУровеньАгенты = Дерево.Строки;
	
	//Редактирование дерева ПланФакт, самый верхний уровень АГЕНТ
	Если Действие = "ПланФактДобавить" И мАгенты.Количество() > 0 Тогда
		Для Каждого Элемент из мАгенты Цикл 
			сдзНовая = ДеревоУровеньАгенты.Добавить();
			сдзНовая.Агент = Элемент;
			сдзНовая.Иконка = 1; // Трека нет
		КонецЦикла;
		
	ИначеЕсли Действие = "ПланФактУдалить" И мАгенты.Количество() > 0 Тогда
		Для Каждого Элемент из мАгенты Цикл
			сдзУдаление = ДеревоУровеньАгенты.Найти(Элемент, "Агент");
			Если сдзУдаление <> Неопределено Тогда
				ДеревоУровеньАгенты.Удалить(сдзУдаление);
			КонецЕсли;			
		КонецЦикла;
		ЗначениеВРеквизитФормы(Дерево, "ПланФакт");
		Возврат;		
		
	ИначеЕсли Действие = "ПланФактОбновить" Тогда
		//Обновляем данные по всем агентам
		
	ИначеЕсли Действие = "ПланФактОчистить" Тогда   
		Дерево.Строки.Очистить();
		ЗначениеВРеквизитФормы(Дерево, "ПланФакт");
		Возврат;
		
	Иначе
		//Ошибка
		Возврат;
	КонецЕсли;
	
	////++ПАРАМЕТРЫ //// 
	//Строки, структуры для обновления ПланФакт. Тех данные.
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	стррПараметры = Новый Структура("Агент,СсылкаСписокТТ");
	стррПараметры.Вставить("Период", Новый СтандартныйПериод(ДатаОтчета, ДатаОтчета));
	стррПараметры.Вставить("ТолькоПроведенныеДокументы", 	ТолькоПроведенныеДокументы);
	стррПараметры.Вставить("списокВидыДокументов", 			ВидыДокументов);
	стррПараметры.Вставить("ДобавитьВремяПосещения", 		Истина);
	стррПараметры.Вставить("ДобавитьКоординатыПартнеров", 	Истина);
	стррПараметры.Вставить("ВернутьФактПосещений", 			Истина);
	стррПараметры.Вставить("ИгнорироватьОтсутствиеПлана", 	Истина);
	стррПараметры.Вставить("ПронумероватьФактыПосещений", 	Истина);
	стррПараметры.Вставить("ДопустимаяУдаленностьОтТТ", 	ДопустимаяУдаленностьОтТТ); // gi_180307
	//Возвращает число 99 999
	ВнеПлана = ТекОбъект.ПланПосещенийНомерПунктаВнеПлана(); 
	Если РежимДополнительнойИнфомации Тогда
		//Возвращает строку Подразделение	
		стрРеквизитПодразделение = ТекОбъект.РеквизитОбъектаИзСписка(Метаданные.Справочники.Пользователи, "Подразделение,ТекущееПодразделение");
		//Структура с видами документов (ВидыДокументов)  и наличием в них реквизитов (СуммаДокумента,Валюта,Комментарий)
		стррФлагиНаличияРеквизитовДокументов = ПолучитьПризнакиНаличияРеквизитов(ВидыДокументов, "СуммаДокумента,Валюта,Комментарий");
	КонецЕсли;
	// Структура для поиска документов факта посещений
	стррПоиск = Новый Структура("Партнер"); 	
	////-- ПАРАМЕТРЫ ////
	
	//ОБНОВЛЕНИЕ дерева ПланФакт, кроме АГЕНТЫ/Время АГЕНТЫ/Иконка
	
	//УРОВЕНЬ АГЕНТЫ
	Для Каждого сдзПланФактУровеньАгент Из ДеревоУровеньАгенты Цикл
		Агент = сдзПланФактУровеньАгент.Агент;
		
		Если НЕ (Действие = "ПланФактОбновить" ИЛИ (Действие = "ПланФактДобавить" И мАгенты.Найти(Агент) <> Неопределено)) Тогда
			Продолжить;	
		КонецЕсли;
			
		//АГЕНТЫ/Представление.
		сдзПланФактУровеньАгент.Представление = Агент;
		
		//АГЕНТЫ/Информация. Заполняем подразделение агента. 
		Если РежимДополнительнойИнфомации Тогда
			Если стрРеквизитПодразделение = Неопределено Тогда
				сдзПланФактУровеньАгент.Информация = "";
			ИначеЕсли ЗначениеЗаполнено(Агент[стрРеквизитПодразделение]) Тогда
				сдзПланФактУровеньАгент.Информация = Агент[стрРеквизитПодразделение];
			Иначе
				сдзПланФактУровеньАгент.Информация = НСтр("ru = 'Подразделение не указано.'");
			КонецЕсли;
		КонецЕсли;
		
		//АГЕНТЫ/Время
		сдзПланФактУровеньАгент.Время = "";
		
		//Определяем список ТТ для агента.
		стррСвойстваСпискаТТ = ТекОбъект.ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент, Ложь);
		Если Действие = "ПланФактДобавить" Тогда
			Если стррСвойстваСпискаТТ.КодОшибки <> Неопределено И стррСвойстваСпискаТТ.КодОшибки <> "ДетализацияСТТБезПланаГрафика" Тогда
				Текст = СтрШаблон_(НСтр("ru = 'Не включен план для агента ""%1"". %2'"), Агент, стррСвойстваСпискаТТ.ТекстОшибки);	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецЕсли;
		КонецЕсли;
		
		//Получение таблиц:
		//		тзПланФактПосешений - Для добавления Партнеров  Уровень Партнер
		//  	тзФактПосещений		- Для добавления документов Уровень Документ
		стррПараметры.Агент 		 = Агент;
		стррПараметры.СсылкаСписокТТ = стррСвойстваСпискаТТ.СсылкаСписокТТ;
		тзПланФактПосешений  = ТекОбъект.ПолучитьПланФактПосещений(стррПараметры);
		тзФактПосещений 	 = стррПараметры.тзФактПосещений; 						// таблица документов посещений
		Если стррСвойстваСпискаТТ.ИспользоватьПорядокСписокТТ Тогда
			тзПланФактПосешений.Сортировать("П1");
		КонецЕсли; 
		ЕстьВиртуальныеДокументы = тзФактПосещений.Колонки.Найти("СсылкаВДок") <> Неопределено;
		
		//Удаляем более низкие уровни
		сдзПланФактУровеньАгент.Строки.Очистить();
		
		//УРОВЕНЬ ПАРТНЕРЫ
		Для каждого СтрокаТ Из тзПланФактПосешений Цикл
			
			Партнер = СтрокаТ.Партнер;
			
			//Определяем нужно ли добавлять Партнера в ПланФакт 
			ЕстьФакт = ЗначениеЗаполнено(СтрокаТ.Д1);
			Если СтрокаТ.П1 <> 0 Тогда
				Если ЕстьФакт Тогда
					Иконка = 3; // выполненное посещение по плану
				Иначе
					Иконка = 2; // не выполненное посещение
				КонецЕсли; 
			ИначеЕсли ЕстьФакт Тогда
				Если СтрокаТ.НомерВПлане < ВнеПлана Тогда
					Иконка = 4; // выполненное посещение вне плана для плановой ТТ
				Иначе
					Иконка = 5; // выполненное посещение вне плана для внеплановой ТТ
				КонецЕсли; 
			Иначе
				Продолжить; // ТТ есть в плане, но не на этот день. НЕ ДОБАВЛЯЕМ.
			КонецЕсли;

	        сдзПланФактУровеньПартнер = сдзПланФактУровеньАгент.Строки.Добавить();
		
			//ПАРТНЕРЫ/Партнер
			сдзПланФактУровеньПартнер.Партнер = Партнер;

			//ПАРТНЕРЫ/Иконка
			сдзПланФактУровеньПартнер.Иконка  = Иконка;
		
			//ПАРТНЕРЫ/Время и ПАРТНЕРЫ/ИндексФакта
			Если СтрокаТ.НФ1 <> 0 Тогда // номер факта
				сдзПланФактУровеньПартнер.Время   	= Строка(СтрокаТ.НФ1) + ". " + СтрокаТ.Д1;
				сдзПланФактУровеньПартнер.ИндексФакта = СтрокаТ.НФ1;
			Иначе
				сдзПланФактУровеньПартнер.Время   	= "";
				сдзПланФактУровеньПартнер.ИндексФакта = 99999; // чтобы после сортировки не посещенные ТТ были в конце
			КонецЕсли; 
			
			//ПАРТНЕРЫ/Широта и ПАРТНЕРЫ/Долгота
			сдзПланФактУровеньПартнер.Широта  = СтрокаТ.Широта;
			сдзПланФактУровеньПартнер.Долгота = СтрокаТ.Долгота;
			
			//ПАРТНЕРЫ/ИндексПлана
			Если СтрокаТ.П1 > 0 И СтрокаТ.П1 < 1000 Тогда // порядок по плану для отображения в дереве
				сдзПланФактУровеньПартнер.ИндексПлана = СтрокаТ.П1;
				стрПорядок = Строка(СтрокаТ.П1) + ". ";
			Иначе
				сдзПланФактУровеньПартнер.ИндексПлана = 1000;
				стрПорядок = "";
			КонецЕсли;
			
			//ПАРТНЕРЫ/Информация
			Если РежимДополнительнойИнфомации Тогда
				сдзПланФактУровеньПартнер.Информация = СтрокаТ.Адрес;
			КонецЕсли;
				
			//ПАРТНЕРЫ/Представление
			Если ПустаяСтрока(СтрокаТ.Адрес) Тогда
				сдзПланФактУровеньПартнер.Представление = стрПорядок + Партнер;
			Иначе
				сдзПланФактУровеньПартнер.Представление = стрПорядок + Партнер + "  -  " + СтрокаТ.Адрес;
			КонецЕсли; 
			
			//УРОВЕНЬ ДОКУМЕНТЫ
			Если ЕстьФакт Тогда // добавляем в дерево документы
				стррПоиск.Партнер = СтрокаТ.Партнер;
				мСтроки = тзФактПосещений.НайтиСтроки(стррПоиск);
			
				Для каждого стзФакт Из мСтроки Цикл
					сдзПланФактУровеньДокумент = сдзПланФактУровеньПартнер.Строки.Добавить();	
					
					//ДОКУМЕНТЫ/Представление 
					ЭтоВиртуальныйДокумент = ЕстьВиртуальныеДокументы И ЗначениеЗаполнено(стзФакт.СсылкаВДок);
					Если ЭтоВиртуальныйДокумент Тогда
						СсылкаДок = стзФакт.СсылкаВДок;
						тзЖурнала = ТекОбъект.ВОТЗЗагрузить(СсылкаДок.ВидДокумента, Истина); // ТЗ загружается из кэша
						стзЖурнала = тзЖурнала.Найти(СсылкаДок.ID, "ID");
						сдзПланФактУровеньДокумент.Представление = ТекОбъект.ВДокПредставление(СсылкаДок.ВидДокумента, стзЖурнала);
					Иначе
						СсылкаДок = стзФакт.Ссылка;
						сдзПланФактУровеньДокумент.Представление = Строка(СсылкаДок);
					КонецЕсли;
					
					//ДОКУМЕНТЫ/Документ
					сдзПланФактУровеньДокумент.Документ   = СсылкаДок;
					
					//ДОКУМЕНТЫ/Иконка
					Если СсылкаДок.Проведен Тогда
						сдзПланФактУровеньДокумент.Иконка = 7;
					ИначеЕсли СсылкаДок.ПометкаУдаления Тогда
						сдзПланФактУровеньДокумент.Иконка = 8;
					Иначе
						сдзПланФактУровеньДокумент.Иконка = 9;
					КонецЕсли;
					
					//ДОКУМЕНТЫ/Время
					ЗнакВнеТТ = ?(стзФакт.ЕстьПосещение, "", "*"); //Знак пусто или "*" для индикации создания документа вне ТТ или в ТТ 
					
					//((vd_190128
					Информация = "";
					Если НачалоДня(стзФакт.ВремяНачала) = НачалоДня(стзФакт.Дата) И НачалоДня(стзФакт.ВремяОкончания) = НачалоДня(стзФакт.Дата) Тогда
						сдзПланФактУровеньДокумент.Время = Формат(стзФакт.ВремяНачала, "ДФ=""HH:mm""") + ЗнакВнеТТ + " - " + Формат(стзФакт.ВремяОкончания, "ДФ=""HH:mm""") + ЗнакВнеТТ;
					Иначе
						//Условие выполняется , когда день датаначала или датаокончания отличается, тоесть из му пришло например 1 декаюбря а в 1С у документа стоит дат 2 декабря  
						сдзПланФактУровеньДокумент.Время = Формат(стзФакт.Дата, "ДФ=""HH:mm""") + ЗнакВнеТТ + " - " + Формат(стзФакт.Дата, "ДФ=""HH:mm""") + ЗнакВнеТТ + " (i)";
						Информация = "Дата/время создания в МУ: " + Формат(стзФакт.ВремяНачала, "ДФ=""HH:mm dd.MM.yyyy""") + " - " + Формат(стзФакт.ВремяОкончания, "ДФ=""HH:mm dd.MM.yyyy""") + " ";
					КонецЕсли;
					//))vd_190128
						
					//ДОКУМЕНТЫ/Информация
					Если РежимДополнительнойИнфомации Тогда
						Если ЭтоВиртуальныйДокумент Тогда
							ОбъектДок = стзЖурнала;
							стррРеквизиты = стррФлагиНаличияРеквизитовДокументов[СсылкаДок.ВидДокумента];
						Иначе
							ОбъектДок = СсылкаДок.ПолучитьОбъект();
							стррРеквизиты = стррФлагиНаличияРеквизитовДокументов[СсылкаДок.Метаданные().Имя];
						КонецЕсли;						
						стрИнформация = "";
						Если стррРеквизиты.Свойство("СуммаДокумента") Тогда
							стрИнформация = НСтр("ru = 'Сумма: '") + Формат(ОбъектДок.СуммаДокумента, "ЧДЦ=2");
						КонецЕсли; 
						Если стррРеквизиты.Свойство("Валюта") Тогда
							стрИнформация = стрИнформация + " " + ОбъектДок.Валюта;
						КонецЕсли; 
						Если стррРеквизиты.Свойство("Комментарий") И Не ПустаяСтрока(ОбъектДок.Комментарий) Тогда
							стрИнформация = стрИнформация + ?(ПустаяСтрока(стрИнформация), "", "; ") + НСтр("ru = 'Комментарий: '") + ОбъектДок.Комментарий;
						КонецЕсли; 
						сдзПланФактУровеньДокумент.Информация = Информация + стрИнформация;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(Дерево, "ПланФакт");	
	
КонецПроцедуры 

//vd_181116 Добавлена
//Заполняет в ПланФакт верхний уровень дерева АГЕНТЫ/Время АГЕНТЫ/Иконка
// Действия с План факт: ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить.
//
// Параметры:
//  мАгенты		 - масиив	 - Агенты у которых требуется обновитьв Время в ПланФакт, при Действие = ПланФактДобавить
//  Действие	 - Строка	 - Действие события ПланФакт
//
&НаСервере
Процедура ДеревоПланФактЗаполнитьВремяИконкаАгаента(мАгенты, Действие)

	Если Действие = "ПланФактДобавить" И мАгенты.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли Действие = "ПланФактОчистить" ИЛИ Действие = "ПланФактУдалить" Тогда
		Возврат;
	КонецЕсли;
		
	ДеревоУровеньАгенты = ПланФакт.ПолучитьЭлементы(); 	// Коллекция элементов дерева верхнего уровня АГЕНТЫ.
	Если ДеревоУровеньАгенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мЗанятыхЦветов = Новый Массив;
	
	Если Действие = "ПланФактДобавить" Тогда  
		Для Каждого сдзУровеньАгенты Из ДеревоУровеньАгенты Цикл
			Если сдзУровеньАгенты.Иконка > 0 Тогда
				мЗанятыхЦветов.Добавить(сдзУровеньАгенты.Иконка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	стррПоискАгент = Новый Структура("Агент");
	
	Для Каждого сдзУровеньАгенты Из ДеревоУровеньАгенты Цикл
		
		Агент = сдзУровеньАгенты.Агент;
		
		//Назначаем цвета только новым агентам
		Если Действие = "ПланФактДобавить" И мАгенты.Найти(Агент) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Определяем наличие трека
		стррПоискАгент.Агент = Агент;
		ПоискТрека = КартаТреки.НайтиСтроки(стррПоискАгент);
		
		// ПланФакт.Время и ПланФакт.Иконка
		КоличесвоСтрокТрека = ПоискТрека[0].Трек.Количество();
		Если КоличесвоСтрокТрека = 0 ИЛИ ПоискТрека[0].ТрекЕсть = Ложь Тогда
			сдзУровеньАгенты.Время 	= "";
			сдзУровеньАгенты.Иконка = 1; // иконка  означает, что трека нет
		    Продолжить;
		Иначе
			сдзУровеньАгенты.Время = Формат(ПоискТрека[0].Трек[0].Время, "ДФ='HH:mm'") + " - " + Формат(ПоискТрека[0].Трек[КоличесвоСтрокТрека - 1].Время, "ДФ='HH:mm'");
			сдзУровеньАгенты.Иконка = ДеревоПланФактПолучитьСвободныйЦветИконки(мЗанятыхЦветов);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДеревоПланФактСортировать(ИмяКолонки)
	
	Дерево = ДанныеФормыВЗначение(ПланФакт, Тип("ДеревоЗначений"));
    Для каждого СтрокаД Из Дерево.Строки Цикл
		СтрокаД.Строки.Сортировать(ИмяКолонки, Ложь);
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(Дерево, "ПланФакт");	
	
КонецПроцедуры

//vd_181123
&НаКлиенте
Процедура ДеревоПланФактРазвернуть(мАгенты = Неопределено)
	
	ЭлементДерево = Элементы.ПланФакт;
	
	Для Каждого СтрокаД Из ПланФакт.ПолучитьЭлементы() Цикл 
		Если мАгенты = Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
				ЭлементДерево.Развернуть(СтрокаД.ПолучитьИдентификатор(), Ложь);			
			КонецЕсли; 
		ИначеЕсли мАгенты.Найти(СтрокаД.Агент) <> Неопределено Тогда
			ЭлементДерево.Развернуть(СтрокаД.ПолучитьИдентификатор(), Ложь);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

//vd_181116 Добавлена
// Получить свободную иконку для Агента, максимум 24. ограничение задано в Элементы.МаршрутИконка.КартинкаЗначений
&НаСервере
Функция ДеревоПланФактПолучитьСвободныйЦветИконки(мЗанятыхЦветов)
	
	Счетчик = 9;
	
	Пока Счетчик <= 24 Цикл
		Счетчик = Счетчик + 1;
		Если мЗанятыхЦветов.Найти(Счетчик) = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Счетчик = 24 Тогда
		Если мЗанятыхЦветов.Найти(Счетчик) = Неопределено Тогда
			мЗанятыхЦветов.Добавить(Счетчик);
		КонецЕсли;
	Иначе
		мЗанятыхЦветов.Добавить(Счетчик);
	КонецЕсли;
	
	Возврат Счетчик;
КонецФункции

// Функция возвращает структуру с основными свойствами списка ТТ закрепленного за агентом - наименование, ссылку и описание ошибки.
&НаСервере
Функция ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент)

	Возврат РеквизитФормыВЗначение("Объект").ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент);

КонецФункции

// СлужебныеПроцедурыИФункции_ДеревоПланФакта
#КонецОбласти 

#Область Треки_Маркеры_СлужебныеПроцедурыИФункции

//vd_181011 Полностью изменена логика
// Считываем треки Агента из файла и записываем в реквизит формы КартаТреки 
// Изменяет строчку в ПланФакт.
// Действия с План факт: ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить.
//
// Параметры:
//  мАгенты		 - масиив	 - Агенты которых требуется добавить или удалить в ПланФакт. Не используется если Действие = ПланФактОчистить или ПланФактОбновить
//  Действие	 - Строка	 - Действие события ПланФакт
//
&НаСервере
Процедура ТрекиПрочитатьТрекиАгентов(мАгенты, Действие)
	
	стррПоискАгента = Новый Структура("Агент");
	
	//Удаление, добавление, очищение строчек в КартаТреки
	Если Действие = "ПланФактДобавить" И мАгенты.Количество() > 0 Тогда
		Для Каждого Элемент из мАгенты Цикл 
			стррПоискАгента.Агент = Элемент;
			мПоискКартаТреки = КартаТреки.НайтиСтроки(стррПоискАгента);
			Если мПоискКартаТреки.Количество() = 0 Тогда
				стзНоваяСтрока = КартаТреки.Добавить();
				стзНоваяСтрока.Агент 		 = Элемент;
			КонецЕсли;			
		КонецЦикла;
		
	ИначеЕсли Действие = "ПланФактУдалить" И мАгенты.Количество() > 0 Тогда
		Для Каждого Элемент из мАгенты Цикл 
			стррПоискАгента.Агент = Элемент;
			мПоискКартаТреки = КартаТреки.НайтиСтроки(стррПоискАгента);
			Для каждого Элемент Из мПоискКартаТреки Цикл
				КартаТреки.Удалить(Элемент);				
			КонецЦикла;
		КонецЦикла;
		Возврат;
		
	ИначеЕсли Действие = "ПланФактОбновить" Тогда
		//Обновляем существующие записи.	
		
	ИначеЕсли Действие = "ПланФактОчистить" Тогда
		//Удаляем все записи
		КартаТреки.Очистить();
		Возврат;
		
	Иначе
		//Ошибка
		Возврат;
		
	КонецЕсли;
	
	//ОБНОВИТЬ КартаТреки.Трек и КартаТреки.РегионТрека и КартаТреки.ТрекЕсть
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ОбщийКаталогТреков = ТекОбъект.ПодкаталогДанных("Треки", СтррКонтекст.КаталогДанных);  	// Общ каталог треков
	тзНастройкиАгентов = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов"); 			// НастройкиАгентов
	стррРегионТрека = Новый Структура("минШирота, минДолгота, максШирота, максДолгота");	// Структура региона трека

	
	Для Каждого стзКартаТреки Из КартаТреки Цикл 	
		
		Агент = стзКартаТреки.Агент;
		
		//При действии ПланФактДобавить обновляем только добавленные строки
		Если Действие = "ПланФактДобавить" Тогда
			мПоиск = мАгенты.Найти(Агент);
			Если мПоиск = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Обнуляем данные
		стзКартаТреки.Трек.Очистить();
		стзКартаТреки.ТрекЕсть			= Ложь;
		стзКартаТреки.РегионТрека		= Неопределено;
		стзКартаТреки.стррТрекИМаркеры  = Неопределено; //vd_181126
		
		//Каталог треков Агента
		стзПоискНастройкиАгента = тзНастройкиАгентов.Найти(Агент, "Пользователь");
		Если стзПоискНастройкиАгента = Неопределено ИЛИ ПустаяСтрока(стзПоискНастройкиАгента.КаталогОбмена) Тогда
			Текст = НСтр("ru = 'У агента ""%1"" не указан каталог обмена данными. Чтение треков невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Текст, Агент));
			Продолжить;
		Иначе	
			КаталогТрековАгента = ОбщийКаталогТреков + стзПоискНастройкиАгента.КаталогОбмена + "\";
		КонецЕсли;
		
		//Получение Трека Агента из файла
		стррТрекАгента = ТекОбъект.ТрекОткрытьФайл(ДатаОтчета, КаталогТрековАгента);
		Если стррТрекАгента.Трек.Количество() = 0 Тогда
			Продолжить;
		КонеЦесли;
		
		// Оптимизация
		Если ИпользоватьОптимизациюGPSтрека Тогда
			ВыполнитьОптимизацию(стррТрекАгента.Трек);
		КонецЕсли;
			
		//Заполняем Треки.Трек
		Для Каждого стзТрека Из стррТрекАгента.Трек Цикл
			Если НЕ ТрекТолькоПоСигналуGPS ИЛИ (ТрекТолькоПоСигналуGPS И стзТрека.ИсточникСигнала = 1) Тогда
				//Треки.Трек 
				стзНоваяСтрока = стзКартаТреки.Трек.Добавить();
				ЗаполнитьЗначенияСвойств(стзНоваяСтрока, стзТрека);
			КонецЕсли;
		КонецЦикла;
		
		//Заполняем Треки.ТрекЕсть
		Если стзКартаТреки.Трек.Количество() = 0 Тогда
			стзКартаТреки.ТрекЕсть = Ложь;
			Возврат;
		Иначе
			стзКартаТреки.ТрекЕсть = Истина;
		КонецЕсли;            
		
		//Заполняем Треки.РегионТрека 
		КопияТрек = стзКартаТреки.Трек.Выгрузить( ,"Широта, Долгота");
		КопияТрек.Сортировать("Широта");
		стррРегионТрека.минШирота   = КопияТрек[0].Широта;
		стррРегионТрека.максШирота  = КопияТрек[КопияТрек.Количество()-1].Широта;
		КопияТрек.Сортировать("Долгота");
		стррРегионТрека.минДолгота  = КопияТрек[0].Долгота;
		стррРегионТрека.максДолгота = КопияТрек[КопияТрек.Количество()-1].Долгота;
		стзКартаТреки.РегионТрека = стррРегионТрека;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ТрекПолучитьДанныеДляКоординаты(стрИдентификаторАгента, Широта, Долгота)

	стррРезультат = Новый Структура("КодОшибки,ТекстОшибки,Агент,Данные");
	
	Идентификатор = Новый УникальныйИдентификатор(стрИдентификаторАгента);
	
	Агент = Справочники.Пользователи.ПолучитьСсылку(Идентификатор);
	Если Не ЗначениеЗаполнено(Агент) Тогда
		стррРезультат.КодОшибки   = "АгентНеНайден";
		стррРезультат.ТекстОшибки = СтрШаблон_(НСтр("ru = 'Не найден агент с идентификатором ""%1""!'"), стрИдентификаторАгента);
		Возврат стррРезультат;
	КонецЕсли; 
	
	стррПоиск = Новый Структура("Агент", Агент);
	мСтроки = КартаТреки.НайтиСтроки(стррПоиск);
	Если мСтроки.Количество() = 0 Тогда
		стррРезультат.КодОшибки   = "ТрекНеНайден";
		стррРезультат.ТекстОшибки = СтрШаблон_(НСтр("ru = 'Не найден трек для агента ""%1""!'"), Агент);
		Возврат стррРезультат;
	КонецЕсли; 
	
	стррРезультат.Агент  = Агент;
    стррРезультат.Данные = "";
	
	Возврат стррРезультат;
	
КонецФункции

//vd_181106 Полностью изменена логика
//Заполняет реквизит формы тз КартаМаркерыТТ
// Действия с План факт: ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить.
//
// Параметры:
//  Действие	 - Строка	 - Действие события ПланФакт
&НаСервере
Процедура МаркерыЗаполнитьКартаМаркерыТТ(Действие)

	КартаМаркерыТТ.Очистить();
	
	Если Действие = "ПланФактОчистить" Тогда 
		Возврат;
	КонецЕсли;
	
	стррПоискПартнер	= Новый Структура("Партнер");

	ОдинАгент 		= (ПланФакт.ПолучитьЭлементы().Количество() = 1);
	МаксНомерИконки = 40;
	
	//ЛеревоЗначений ПланФакт первый уровень Агенты
	Для каждого сдзАгент Из ПланФакт.ПолучитьЭлементы() Цикл
		Агент = сдзАгент.Агент;

		//ДеревоЗначений ПланФакт второй уровень торговые точки (партнеры)
		Для каждого сдзПартнер Из сдзАгент.ПолучитьЭлементы() Цикл
			//ИконкаПартнера = 2 - tpnochek  - не выполненное посещение	
			//ИконкаПартнера = 3 - tpcheck   - выполненное посещение по плану
			//ИконкаПартнера = 4 - tpcheknp	 - выполненное посещение вне плана для плановой ТТ
			//ИконкаПартнера = 5 - tpcheknew - выполненное посещение вне плана для внеплановой ТТ
			ИконкаПартнера = сдзПартнер.Иконка;
			
			стррПоискПартнер.Партнер = сдзПартнер.Партнер;		
			мСтроки = КартаМаркерыТТ.НайтиСтроки(стррПоискПартнер);
			
			//1. Маркер добавляется впервые
			Если мСтроки.Количество() = 0 Тогда 				
				
				стзМаркеры = КартаМаркерыТТ.Добавить();
				стзМаркеры.Широта 	= сдзПартнер.Широта;
				стзМаркеры.Долгота  = сдзПартнер.Долгота;
				стзМаркеры.Партнер	= сдзПартнер.Партнер;
				
				//КодИконки = 200 - это не выполненное посещение, без нумерации
				//КодИконки = 201 - это не выполненное посещение, снумерацией
				//КодИконки = 300 - это выполненное посещение по плану, без нумерации
				стзМаркеры.КодИконки = ИконкаПартнера * 100;
				
				// Нумерация иконки
				Если ОдинАгент Тогда
					Если ИконкаПартнера = 2 Тогда // ИконкаПартнера = 2 это не посещенная ТТ по плану
						// нумерованная иконка плана
					    стзМаркеры.КодИконки = стзМаркеры.КодИконки + ?(сдзПартнер.ИндексПлана <= МаксНомерИконки, сдзПартнер.ИндексПлана, 0);
					Иначе
						// нумерованная иконка факта
					    стзМаркеры.КодИконки = стзМаркеры.КодИконки + ?(сдзПартнер.ИндексФакта <= МаксНомерИконки, сдзПартнер.ИндексФакта, 0);
					КонецЕсли;
				КонецЕсли;
				
				//2. Описание
				Если ИконкаПартнера <> 2 Тогда
					стзМаркеры.Описание = "<br>Посетил:<br>" + ВыделитьИнтервалВремени(сдзПартнер.Время) + ", " + Строка(Агент);
				КонецЕсли; 
				
			Иначе
				//2. Маркер партнера уже есть. Обновление	
				//Маркер
				стзМаркеры = мСтроки[0];
				// Маркер.Иконка
				Если ИконкаПартнера = 2 Тогда 
					//Не выполненное посещение. Иконка остается прежней.
				Иначе
					стзМаркеры.КодИконки = ИконкаПартнера * 100;
				КонецЕсли;
				// Маркер.Описание	
				Если ПустаяСтрока(стзМаркеры.Описание) Тогда
					стзМаркеры.Описание = "<br>Посетил:<br>" + ВыделитьИнтервалВремени(сдзПартнер.Время) + ", " + Строка(Агент);
				Иначе
					стзМаркеры.Описание = стзМаркеры.Описание + "<br>" + ВыделитьИнтервалВремени(сдзПартнер.Время) + ", " + Строка(Агент);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
	КонецЦикла;
	 
КонецПроцедуры

//vd_181015 Добавлена
Функция МаркерПолучитьИконкуПоКоду(КодИконки)
	
	Результат = "";
	
	Если КодИконки = 1 Тогда
		// Начало трека	
	    Результат = "trackstart3.png";
	ИначеЕсли КодИконки = 2 Тогда
		// Конец трека
		Результат = "trackend3.png";
		
	ИначеЕсли КодИконки = 3 Тогда
		// Зеленый агент
		Результат = "agent1.png";
		
	ИначеЕсли КодИконки = 4 Тогда
		// желтый агент
		Результат = "agent2.png";
		
	ИначеЕсли КодИконки = 5 Тогда
		// красный агент
		Результат = "agent3.png";
		
	ИначеЕсли КодИконки = 6 Тогда
		// Иконка кратного временного промежутка
		Результат = "agent4.png";

	ИначеЕсли КодИконки = 200 Тогда
		// КРАСНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, не нумерованная
		Результат = "tpnochek.png";	
		
	ИначеЕсли КодИконки > 200 И КодИконки < 241 Тогда
		// КРАСНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, нумерованная
		Результат = "tpnochek" + Строка(КодИконки - 200) + ".png";
		
	//ИначеЕсли КодИконки > 240 И КодИконки < 300 Тогда
		// КРАСНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, нумерованная, ГАЛОЧКА вместо номера
		// НЕТ ИКОНКИ НА FTP		
		
	ИначеЕсли КодИконки = 300 Тогда
		// ЗЕЛЕНАЯ ИконкаПартнера = 3 - tpcheck - выполненное посещение по плану, не нумерованная
		Результат = "tpcheck.png";	
		
	ИначеЕсли КодИконки > 300 И КодИконки < 321 Тогда
		// ЗЕЛЕНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, нумерованная
		Результат = "tpcheck" + Строка(КодИконки - 300) + ".png";
		
	ИначеЕсли КодИконки > 320 И КодИконки < 400 Тогда
		// ЗЕЛЕНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, нумерованная, ГАЛОЧКА вместо номера. 
		Результат = "tpcheck0.png";
		
	ИначеЕсли КодИконки = 400 Тогда
		// ФИОЛЕТОВАЯ ИконкаПартнера = 4 - tpcheknp	 - выполненное посещение вне плана для плановой ТТ, не нумерованная
		Результат = "tpcheknp.png";	
		
	ИначеЕсли КодИконки > 400 И КодИконки < 441 Тогда
		// ФИОЛЕТОВАЯ ИконкаПартнера = 4 - tpcheknp	 - выполненное посещение вне плана для плановой ТТ, нумерованная
		Результат = "tpcheknp" + Строка(КодИконки - 400) + ".png";
		
	ИначеЕсли КодИконки > 440 И КодИконки < 500 Тогда
		// ФИОЛЕТОВАЯ ИконкаПартнера = 4 - tpcheknp	 - выполненное посещение вне плана для плановой ТТ, нумерованная ГАЛОЧКА вместо номера. 
		Результат = "tpchecknew.png"; //некорректно  названа на FTP
		
	ИначеЕсли КодИконки = 500 Тогда 
		// ГОЛУБАЯ ИконкаПартнера = 5 - tpcheknew - выполненное посещение вне плана для внеплановой ТТ, не нумерованная
		Результат = "tpcheknew.png";
		
	ИначеЕсли КодИконки > 500 И КодИконки < 541 Тогда 
		// ГОЛУБАЯ ИконкаПартнера = 5 - tpcheknew - выполненное посещение вне плана для внеплановой ТТ, нумерованная
		Результат = "tpcheknew.png";
		
	ИначеЕсли КодИконки > 540 И КодИконки < 600 Тогда 
		// ГОЛУБАЯ ИконкаПартнера = 5 - tpcheknew - выполненное посещение вне плана для внеплановой ТТ, нумерованная ГАЛОЧКА вместо номера. 
		Результат = "tpcheknew.png";
		
	Иначе
		//Не найден вид иконки
		Результат = "point.png";
		
	КонецЕсли;	
	
	
	Результат = СтррКонтекст.КаталогИконок + Результат;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область Карта_СлужебныеПроцедурыИФункции

//vd_181015 Полностью изменена логика
&НаКлиенте
Процедура КартаПоказатьРегион(СтррРегион)
				
	Если МакетЗагружен = Ложь ИЛИ СтррРегион = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = Элементы.ПолеБраузера.Document;
	ОкноБраузера = Документ.parentWindow; // IE
	Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	Попытка
		ОкноБраузера.SetBounds(СтррРегион.МинШирота, СтррРегион.МинДолгота, СтррРегион.МаксШирота, СтррРегион.МаксДолгота);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//vd_181109 Сильно изменена логика
//Если стррМаркер <> Неопределено то это таймер ожидания
//
&НаКлиенте
Процедура КартаПерейтиКМаркеру(стррМаркер)
				
	Если МакетЗагружен = Ложь ИЛИ стррМаркер = Неопределено ИЛИ стррМаркер.Широта = 0 ИЛИ стррМаркер.Долгота = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Документ = Элементы.ПолеБраузера.Document;
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;

	Попытка
		ОкноБраузера.GoToMarker(стррМаркер.Широта, стррМаркер.Долгота);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//vd_181010 Добавлена
&НаКлиенте
Процедура КартаОчиститьВсе()

	Если МакетЗагружен = Ложь Тогда
		Возврат;
	Конецесли;
		        	
	Документ = Элементы.ПолеБраузера.Document;		
	ОкноБраузера 	= Документ.parentWindow; // IE
	Если ОкноБраузера = Неопределено Тогда
		ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	Попытка 
		ОкноБраузера.ClearCollection();
	Исключение
	КонецПопытки;

КонецПроцедуры

//vd_181015 Полностью изменена логика. 
//vd_181015 Переименована из КартаДобавитьТреки в КартаДобавитьТрекиИМаркерыТрека 
// Процедура - Добавляет на карту: треки и маркеры трека (НачалоПути, КонецПути, фэйковые координаты)
//
// Параметры:
//  УстановитьТаймер - Булево  - Если при добавлении на карту возникла ошибка запустить повторно (бесконечно с интервалом в 1 сек, до успешного выполнения). 
//  мАгенты			 - мАгенты - Агенты из ПланФакт, которых требуется добавить на карту. 
//  ОбновлятьДанные	 - Булево  - Если Ложь, то не добавляет треки, которые уже добавлены на карту, привязывается к Треки.ДобавленНаКарту
//
&НаКлиенте
Процедура КартаДобавитьТрекиИМаркерыТрека()
	
	Если МакетЗагружен = Ложь Тогда
		Возврат; 	
	КонецЕсли;
	
	Документ = Элементы.ПолеБраузера.Document;
	
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
			
	стррМаркер	= КартаПолучитьСтруктуруМаркера(); 
	
	стррТрек = КартаПолучитьСтруктуруТрека();
	стррТрек.Толщина 				= 3;
	стррТрек.Стиль   				= "solid";
	стррТрек.Прозрачность 			= 0.8;
	стррТрек.ЛинияКоординатПолигона = "";
	стррТрек.ЛинияВремя				= "";
	стррТрек.ЛинияРасстояние        = "";
	
	сзЦветаТреков = КартаПолучитьСписокЦветовТреков();
	
	Для Каждого Элемент Из КартаТреки Цикл
		
		Агент = Элемент.Агент;
		Трек  = Элемент.Трек;
		
		//1. Пропускаем Агентов у которых нет треков. 
		Если Элемент.ТрекЕсть = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		//2. Выводим сохраненный трек, если он сохранен (При обновлении треков стррТрекИМаркеры = Неопределено)
		Если Элемент.стррТрекИМаркеры <> Неопределено Тогда
			КартаДобавитьТрекНаКарту(ОкноБраузера, Элемент.стррТрекИМаркеры.стррТрек); 
			Для Каждого стррМаркер Из Элемент.стррТрекИМаркеры.мМаркеры Цикл
				КартаДобавитьМаркерНаКарту(ОкноБраузера, стррМаркер);				
			КонецЦикла;
			Продолжить;
		Иначе
			//3. Структура для сохранения трека
			стррТрекИМаркеры = Новый Структура("стррТрек, мМаркеры", , Новый Массив); //vd_181126
		КонецЕсли;
				
		//2. Формирование линий трека
		стрСписокШирота  = "";
		стрСписокДолгота = "";      
		стрСписокВремя 	 = "";
		
		Для каждого стзТрек Из Трек Цикл
			стрСписокШирота	 = стрСписокШирота  + Формат(стзТрек.Широта,  "ЧРД=.; ЧРГ=' '; ЧГ=0") + ";";
			стрСписокДолгота = стрСписокДолгота + Формат(стзТрек.Долгота, "ЧРД=.; ЧРГ=' '; ЧГ=0") + ";";
			стрСписокВремя 	 = стрСписокВремя 	+ стзТрек.Время + ";";
		КонецЦикла; 
		
		стрСписокШирота  = Лев(стрСписокШирота, СтрДлина(стрСписокШирота) -1);
		стрСписокДолгота = Лев(стрСписокДолгота,СтрДлина(стрСписокДолгота)-1);	
		стрСписокВремя 	 = Лев(стрСписокВремя, 	СтрДлина(стрСписокВремя)  -1);	
		
		стррТрек.ТочкиШироты   = стрСписокШирота;
		стррТрек.ТочкиДолготы  = стрСписокДолгота;
		стррТрек.ТочкиВремя    = стрСписокВремя;
		стррТрек.ЦветМаршрута  = сзЦветаТреков.НайтиПоЗначению(Агент).Представление; // "000088";
		стррТрек.ЛинияНазвание = Строка(Агент);
		стррТрек.ЛинияИД       = Строка(Агент.УникальныйИдентификатор());

		//3. Добавление трека на карту
		КартаДобавитьТрекНаКарту(ОкноБраузера, стррТрек);
		стррТрекИМаркеры.стррТрек = стррТрек; 
		
		//4. Получение маркера НачалоМаршрута.
		стррМаркер.Широта  	 = Трек[0].Широта;
		стррМаркер.Долгота 	 = Трек[0].Долгота;
		стррМаркер.КодИконки = 1; //Начало маршрута
		стррМаркер.Заголовок = Строка(Агент);
		стррМаркер.Описание  = НСтр("ru = 'Начало: '") + Формат(Трек[0].Время, "ДФ='HH:mm'");
		стррМаркер.Подвал 	 = "";
		стррМаркер.Подсказка = "";
		
		//5. Добавление маркера НачалоМаршрута на карту.
		КартаДобавитьМаркерНаКарту(ОкноБраузера, стррМаркер);
		стррТрекИМаркеры.мМаркеры.Добавить(стррМаркер);
		
		//6. Получение маркера КонецМаршрута.
		стррМаркер.Широта  	 = Трек[Трек.Количество()-1].Широта;
		стррМаркер.Долгота 	 = Трек[Трек.Количество()-1].Долгота;
		стррМаркер.Заголовок = Строка(Агент);
		стррМаркер.Подвал 	 = "";
		стррМаркер.Подсказка = "";
		Если РежимРеальногоВремени Тогда // внешний вид маркера конца зависит от режима реального времени
			//Иконка
			ВремяКонца = Трек[Трек.Количество()-1].Время;
			ОтладкаДельта = 0; //900  //vd_181126 ОтладкаДельта = 900;
			РазницаВремени = (ТекущаяДата() - ВремяКонца + ОтладкаДельта) / 60;
			Если РазницаВремени > 2 * ТаймингАктуальностиМестоположенияАгента Тогда
				стррМаркер.КодИконки = 5;  // красный агент
			ИначеЕсли РазницаВремени > ТаймингАктуальностиМестоположенияАгента Тогда
				стррМаркер.КодИконки = 4;  // желтый агент
			Иначе
				стррМаркер.КодИконки = 3;  // зеленый агент
			КонецЕсли; 
			//Описание
			стррМаркер.Описание = НСтр("ru = 'Время: '") + Формат(Трек[Трек.Количество()-1].Время, "ДФ='HH:mm'");
		Иначе
			//Иконка
			стррМаркер.КодИконки = 2; //Конец маршрута
			//Описание
			стррМаркер.Описание = НСтр("ru = 'Конец: '") + Формат(Трек[Трек.Количество()-1].Время, "ДФ='HH:mm'");
		КонецЕсли; 

		//7. Добавление маркера КонецМаршрута на карту.
		КартаДобавитьМаркерНаКарту(ОкноБраузера, стррМаркер);
		стррТрекИМаркеры.мМаркеры.Добавить(стррМаркер);
		
		//8. Сохраняем структуру трека для быстрого вывода в дальнейшем
		Элемент.стррТрекИМаркеры = стррТрекИМаркеры;

	КонецЦикла;
	
КонецПроцедуры

//vd_181015 Добавлена
&НаКлиенте
Процедура КартаДобавитьМаркерыТТ()
	
	Если МакетЗагружен = Ложь Тогда
		Возврат; 	
	КонецЕсли;
	
	стррМаркер = КартаПолучитьСтруктуруМаркера();
	
	Документ = Элементы.ПолеБраузера.Document;
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;     
	 
	Для Каждого Элемент Из КартаМаркерыТТ Цикл
		стррМаркер.Широта  	 = Элемент.Широта;
		стррМаркер.Долгота 	 = Элемент.Долгота;
		стррМаркер.КодИконки = Элемент.КодИконки; 
		стррМаркер.Заголовок = Строка(Элемент.Партнер);
		стррМаркер.Описание  = Элемент.Описание;
		стррМаркер.Подвал 	 = "";
		стррМаркер.Подсказка = "";
		КартаДобавитьМаркерНаКарту(ОкноБраузера, стррМаркер);
	КонецЦикла;
	
КонецПроцедуры

//vd_181015 Добавлена
// Функция - Карта добавить маркер на карту
//
// Параметры:
//  ОкноБраузера			 - 	 - 
//  стррМаркер				 - 	 - 
// 
// Возвращаемое значение:
// Булево  - Истина если точка добавлена на карту
//
&НаКлиенте
Процедура КартаДобавитьМаркерНаКарту(ОкноБраузера = Неопределено, стррМаркер)
	
	Если МакетЗагружен = Ложь Тогда
		Возврат; 	
	КонецЕсли;
			
	Если ОкноБраузера = Неопределено Тогда
		Документ = Элементы.ПолеБраузера.Document;
		ОкноБраузера = Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
	КонецЕсли;
	
	//КартаOSM
	//setMarker(lat, lon, icon, Header, Body, Footer, Help)
	//Yandex
	//setMarker(lat, lon, icon, Header, Body, Footer, Help, Order)
	//google
	//setMarker(lat, lon, icon, Header, Body, Footer, Help)
	
	ПутьИконки = МаркерПолучитьИконкуПоКоду(стррМаркер.КодИконки);     	
	
	Попытка
		Если ИсточникКарты = "YandexMaps" Тогда
			ОкноБраузера.setMarker(	
									стррМаркер.Широта,
									стррМаркер.Долгота, 
									ПутьИконки,
									стррМаркер.Заголовок, 
									стррМаркер.Описание, 
									стррМаркер.Подвал, 
									стррМаркер.Подсказка, 
									Ложь
								  );
		
		ИначеЕсли ИсточникКарты = "OSM" ИЛИ ИсточникКарты = "GoogleMaps" Тогда
			ОкноБраузера.setMarker(	
									стррМаркер.Широта,
									стррМаркер.Долгота, 
									ПутьИконки,
									стррМаркер.Заголовок, 
									стррМаркер.Описание, 
									стррМаркер.Подвал, 
									стррМаркер.Подсказка 
								  );
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//vd_181123 Добавлена
&НаКлиенте
Процедура КартаДобавитьМаркерТочкиТрекаПоВремени()
	
	Если 	МакетЗагружен = Ложь 
		ИЛИ НЕ ИспользоватьТочкиТрекаПоВремени	
		ИЛИ КартаТочкиТрекаПоВремени.Количество() = 0 
		ИЛИ Элементы.ПланФакт.ТекущиеДанные = Неопределено
		ИЛИ Элементы.ТочкиТрекаПоВремени.ТекущиеДанные = Неопределено
	Тогда
		Возврат;
	КонецЕсли;
	
	стррМаркер = КартаПолучитьСтруктуруМаркера();
	
	//Получаем агента
	Агент = Элементы.ПланФакт.ТекущиеДанные.Агент;
	Если НЕ ЗначениеЗаполнено(Агент) Тогда 
		СтрокаРодитель = ПланФакт.НайтиПоИдентификатору(Элементы.ПланФакт.ТекущаяСтрока).ПолучитьРодителя();
		Если СтрокаРодитель <> неопределено Тогда
			Агент = СтрокаРодитель.Агент;
			Если НЕ ЗначениеЗаполнено(Агент) Тогда
				СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
				Если СтрокаРодитель <> Неопределено Тогда
					Агент = СтрокаРодитель.Агент;
					Если НЕ ЗначениеЗаполнено(Агент) Тогда
						СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
						Если СтрокаРодитель <> Неопределено Тогда
							Агент = СтрокаРодитель.Агент;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если ТипЗнч(Агент) <> Тип("СправочникСсылка.Пользователи") Тогда
		Агент = "";
	Конецесли;
	
 	стррМаркер.Широта  	 = Элементы.ТочкиТрекаПоВремени.ТекущиеДанные.Широта;
	стррМаркер.Долгота 	 = Элементы.ТочкиТрекаПоВремени.ТекущиеДанные.Долгота;
	стррМаркер.КодИконки = 6; 
	стррМаркер.Заголовок = "Время: " + Строка(Формат(Элементы.ТочкиТрекаПоВремени.ТекущиеДанные.Время, "ДЛФ=В"));
	стррМаркер.Описание  = Строка(Агент);
	стррМаркер.Подвал 	 = "";
	стррМаркер.Подсказка = "";
	КартаДобавитьМаркерНаКарту(Неопределено, стррМаркер);
	
КонецПроцедуры	

//vd_181015 Добавлена
&НаКлиенте
Процедура КартаДобавитьТрекНаКарту(ОкноБраузера = Неопределено, стррТрек)
	
	Если МакетЗагружен = Ложь Тогда
		Возврат;
	КонецЕсли;		
	
	Если ОкноБраузера = Неопределено Тогда
		Документ = Элементы.ПолеБраузера.Document;
		ОкноБраузера = Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
	КонецЕсли;
	
	//setPolyline(pointsLat, pointsLon, pointsTimes, strokeColor, strokeWidth, strokeStyle, opacity, 
	//				strPolygone, strDuration, strDistance, strHint, strID)

	Попытка
		ОкноБраузера.setPolyline(
								стррТрек.ТочкиШироты,				// Широта точек
								стррТрек.ТочкиДолготы,              // Долгота точек
								стррТрек.ТочкиВремя,                // Время точек
								стррТрек.ЦветМаршрута,              // Цвет линии
								стррТрек.Толщина,                   // Толщина линии 
								стррТрек.Стиль,                     // Стиль линии
								стррТрек.Прозрачность,              // Прозрачность линии
								стррТрек.ЛинияКоординатПолигона,    // Не используем
								стррТрек.ЛинияВремя,                // Не используем
								стррТрек.ЛинияРасстояние,           // Не Используем
								стррТрек.ЛинияНазвание,				// Название линии (Агент)
								стррТрек.ЛинияИД                    // Идентификатор линии (ИДАгента)
									);
	Исключение 
	КонецПопытки;
	
КонецПроцедуры

//vd_181015 Добавлена
&НаКлиенте
Функция КартаПолучитьСтруктуруМаркера()
	
	стррМаркер = Новый Структура("Широта, Долгота, КодИконки, Заголовок, Описание, Подвал, Подсказка");
	
	Возврат стррМаркер; 
КонецФункции

//vd_181015 Добавлена
&НаКлиенте
Функция КартаПолучитьСтруктуруТрека()
	
	//setPolyline(pointsLat, pointsLon, pointsTimes, strokeColor, strokeWidth, strokeStyle, opacity, 
	//				strPolygone, strDuration, strDistance, strHint, strID)
					
	стррТрек = Новый Структура("ТочкиШироты, ТочкиДолготы, ТочкиВремя, ЦветМаршрута, Толщина, Стиль, Прозрачность," + 
									"ЛинияКоординатПолигона, ЛинияВремя, ЛинияРасстояние, ЛинияНазвание, ЛинияИД");
	
	Возврат стррТрек; 
КонецФункции

//vd_181119 Добавлена
&НаКлиенте
Функция КартаПолучитьСписокЦветовТреков()
	
	сзЦвета = Новый СписокЗначений;
	
	Для Каждого сдзПланФактАгент Из ПланФакт.ПолучитьЭлементы() Цикл
		Цвет = КартаПолучитьЦветаЛинии(сдзПланФактАгент.Иконка);
		сзЦвета.Добавить(сдзПланФактАгент.Агент, Цвет);
	КонецЦикла;
	
	Возврат сзЦвета;
	
КОнецФункции

//vd_181119 Добавлена
&НаКлиенте
Функция КартаПолучитьЦветаЛинии(Иконка)
	
	Результат = "";	
	Если Иконка < 10 ИЛИ Иконка > 23 Тогда
		Результат = "786EC1";	
	ИначеЕсли Иконка = 10 Тогда
		Результат = "000080"
	ИначеЕсли Иконка = 11 Тогда
		Результат = "FF0000";
	ИначеЕсли Иконка = 12 Тогда
		Результат = "2D9900";
	ИначеЕсли Иконка = 13 Тогда
		Результат = "B200FF";
	ИначеЕсли Иконка = 14 Тогда
		Результат = "FF7F7F";
	ИначеЕсли Иконка = 15 Тогда
		Результат = "00BAD9";
	ИначеЕсли Иконка = 16 Тогда
		Результат = "B5030C";
	ИначеЕсли Иконка = 17 Тогда
		Результат = "404040";
	ИначеЕсли Иконка = 18 Тогда
		Результат = "007380";
	ИначеЕсли Иконка = 19 Тогда
		Результат = "FF00E6";
	ИначеЕсли Иконка = 20 Тогда
		Результат = "997B00";
	ИначеЕсли Иконка = 21 Тогда
		Результат = "0034FF";
	ИначеЕсли Иконка = 22 Тогда
		Результат = "A85454";
	ИначеЕсли Иконка = 23 Тогда
		Результат = "00D935";
	Иначе
		//Ошибка, цвет по умолчанию.
		Результат = "786EC1";
	КонецЕсли;	
	
	Результат = "#" + Результат;
	
	Возврат Результат;	

КонецФункции

// Карта_СлужебныеПроцедурыИФункции
#КонецОбласти

#Область Таймер_СлужебныеПроцедурыИФункции

// vd_181016 Полностью изменена логика, параметры итд
//  Процедура включает таймер обработки очереди событий для поля браузера,
//  при этом в стек событий (ТаймерОжидания.Очередь) добавляется новое событие.
//  Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
//  Также должен быть объявлен реквизит формы ТаймерОжидания.
//  Реквизит формы "ТаймерОжидания" используется для организации очереди передачи команд в поле браузера,
//  т.к. поле браузера работает асинхронно и может запаздывать с реакцией на команды.
//
// Параметры:
//  Событие	 - Строка - Название события которое следует повторить. 
//
&НаКлиенте
Процедура Таймер_Включить(Событие, Параметры = Неопределено)
	
	//1. Проверка переданного названия события
	Если	Событие  = "КартаПроверкаЗагрузкиМакета"							// Проверка загрузки макета
		ИЛИ Событие  = "КартаОбновитьМакет"   	   								// Обновить Макет Карты
		ИЛИ Событие  = "КартаОбновитьКарту"          							// Вывести на карту все треки и маркеры
		ИЛИ Событие  = "КартаПерейтиКМаркеру" 	 								// Перейти к маркеру на карте                       
		ИЛИ Событие  = "КартаПоказатьРегион"  									// Показать регион на карте
		ИЛИ (Событие = "ПланФактДобавить"  		И Параметры <> Неопределено)    // Добавить агента в дерево
		ИЛИ (Событие = "ПланФактУдалить"  		И Параметры <> Неопределено)    // Удалить агента из дерева
		ИЛИ (Событие = "ПланФактОбновить")                                    	// Обновить дерево
		ИЛИ (Событие = "ПланФактОчистить")                                     	// Очистить дерево
		ИЛИ Событие  = "МаркерыПромежутковВремени"								// Заполнить таблицу КартаТочкиТрекаПоВремени

	Тогда
	
		Если Событие = "ПланФактДобавить" ИЛИ Событие = "ПланФактУдалить"  Тогда	
			стррОтбор = Новый Структура("Событие, Параметры", Событие, Параметры);
			мстзСобытие = ТаймерОжиданияСобытия.НайтиСтроки(стррОтбор);
			Если мстзСобытие.Количество() = 0 Тогда
				стзСобытие = ТаймерОжиданияСобытия.Добавить();
				стзСобытие.Событие   = Событие;
				стзСобытие.Время     = ТекущаяДата();
				
				Если ТипЗнч(Параметры) = Тип("Массив") Тогда
					//Нельзя передать массив в колонку ТЗ, выдает ошибку
					сзПараметры = Новый СписокЗначений;
					Для Каждого Элемент Из Параметры Цикл
						сзПараметры.Добавить(Элемент);
					КонецЦикла;
					стзСобытие.Параметры = сзПараметры;
				КонецЕсли;				
				
			Иначе
				мстзСобытие[0].Время = ТекущаяДата();
			КонецЕсли;
			
		Иначе
			стррОтбор = Новый Структура("Событие", Событие);
			мстзСобытие = ТаймерОжиданияСобытия.НайтиСтроки(стррОтбор);
			Если мстзСобытие.Количество() = 0 Тогда
				стзСобытие = ТаймерОжиданияСобытия.Добавить();
				стзСобытие.Событие = Событие;
			Иначе
				стзСобытие = мстзСобытие[0];
			КонецЕсли;
			стзСобытие.Время     = ТекущаяДата();
			стзСобытие.Параметры = Параметры;
		
		КонецЕсли;		
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Если ТаймерОжидания.Включен = Ложь И ТаймерОжиданияСобытия.Количество() > 0 Тогда
		ТаймерОжидания.Включен = Истина;
		ТаймерОжидания.Время   = ТекущаяДата();
		ТаймерОжидания.Попытка = 0;
		ПодключитьОбработчикОжидания("Таймер_Обработчик", 1, Ложь);  //Циклический
	КонецЕсли;
	
КонецПроцедуры                                    

//vd_181126 Полностью изменена логика
&НаКлиенте
Процедура Таймер_Обработчик()
	                 	
	Если ТаймерОжиданияСобытия.Количество() = 0 Тогда
		Таймер_Выключить();
		Возврат;
	КонецЕсли;    
	
	Если ТаймерОжидания.ОбработкаДанных = Ложь Тогда
		
		ТаймерОжидания.Попытка = ТаймерОжидания.Попытка + 1;
		
		ТаймерОжидания.ОбработкаДанных = Истина; //Разблокировка измениния данных
		
		//Возможно требуется запускать через попытку исключение
		Попытка
			Таймер_ОбработчикПланФакт();
			Таймер_ОбработчикМаркерыПромежутковВремени();
			Таймер_ОбработчикКарта();
			Результат = Истина;
		Исключение
			ВывестиСообщение("Ошибка подключения к модулю карты. Ошибка: " + ОписаниеОшибки());	
			Результат = Ложь;	
		КонецПопытки;
		
		Если ТаймерОжиданияСобытия.Количество() = 0 ИЛИ Результат = Ложь Тогда
			Таймер_Выключить();
		КонецЕсли;

	    ТаймерОжидания.ОбработкаДанных = Ложь; //Блокировка измениния данных
		
	КонецЕсли;
	
КонецПроцедуры

//vd_181128 Добавлена
&НаКлиенте
Процедура Таймер_ОбработчикПланФакт()
	
	Если ТаймерОжиданияСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	сттрОтбор = Новый Структура("Событие");
	
	//1. ПланФактОчистить
	сттрОтбор.Событие = "ПланФактОчистить";
	мСобытиеПланФактОчистить = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Если мСобытиеПланФактОчистить.Количество() > 0 Тогда
		
		СобытиеПланФактОчистить = мСобытиеПланФактОчистить[0];
		
		сттрОтбор.Событие = "ПланФактДобавить";
		стзПланФакт = СобытиеПланФактОчистить.НайтиСтроки(сттрОтбор);
		Для Каждого Элемент Из стзПланФакт Цикл
			Если Элемент.Время < СобытиеПланФактОчистить.Время Тогда
				ТаймерОжиданияСобытия.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;	
		
		сттрОтбор.Событие = "ПланФактУдалить";
		стзПланФакт = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
		Для Каждого Элемент Из стзПланФакт Цикл
			Если Элемент.Время < СобытиеПланФактОчистить.Время Тогда
				ТаймерОжиданияСобытия.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;	
			
		сттрОтбор.Событие = "ПланФактОбновить";
		стзПланФакт = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
		Для Каждого Элемент Из стзПланФакт Цикл
			Если Элемент.Время < СобытиеПланФактОчистить.Время Тогда
				ТаймерОжиданияСобытия.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		ТаймерОжиданияСобытия.Удалить(СобытиеПланФактОчистить);
		
		ПланФактОбновить("ПланФактОчистить");
		
	КонецЕсли;
	

	//2. ПланФактДобавить и ПланФактУдалить
	ствАгентыДобавить = Новый Соответствие;
	ствАгентыУдалить  = Новый Соответствие;
	
	сттрОтбор.Событие   = "ПланФактДобавить";
	мстзПланФактДобавить = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Для Каждого Элемент Из мстзПланФактДобавить Цикл
		Для каждого ссзАгент Из Элемент.Параметры Цикл
			Агент = ссзАгент.Значение;
			ПоискВремяДобавить = ствАгентыДобавить.Получить(Агент);
			Если ПоискВремяДобавить = Неопределено Тогда
				ствАгентыДобавить.Вставить(Агент, Элемент.Время);
			ИначеЕсли ПоискВремяДобавить < Элемент.Время Тогда
				ствАгентыДобавить[Агент] = Элемент.Время;
			КонецЕсли;			
		КонецЦикла;	
		ТаймерОжиданияСобытия.Удалить(Элемент);	
	КонецЦикла;
	
	сттрОтбор.Событие   = "ПланФактУдалить";
	мстзПланФактУдалить  = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	
	Для Каждого Элемент Из мстзПланФактУдалить Цикл
		Для каждого ссзАгент Из Элемент.Параметры Цикл
			Агент = ссзАгент.Значение;
			//Удаляем агента из ствАгентыДобавить, если далее он удаляется
			Если ствАгентыДобавить.Получить(Агент) <> Неопределено И ПоискВремяДобавить < Элемент.Время Тогда 
				ствАгентыДобавить.Удалить(Агент);
			КонецЕсли;
			//Добавляем в ствАгентыУдалить	
			Если ПоискВремяДобавить = Неопределено ИЛИ ПоискВремяДобавить < Элемент.Время Тогда
				ПоискВремяУдалить = ствАгентыУдалить.Получить(Агент);
				Если ПоискВремяУдалить = Неопределено Тогда
					ствАгентыУдалить.Вставить(Агент, Элемент.Время);
				ИначеЕсли ПоискВремяУдалить < Элемент.Время Тогда
					ствАгентыУдалить[Агент] = Элемент.Время;	
				КонеЦесли;  				
			КонецЕсли;
		КонецЦикла;	
		ТаймерОжиданияСобытия.Удалить(Элемент);	
	КонецЦикла;

	Если ствАгентыДобавить.Количество() > 0 Тогда
		мАгенты = Новый Массив;
		Для Каждого Элемент Из ствАгентыДобавить Цикл
			мАгенты.Добавить(Элемент.Ключ);	
		КонецЦикла;
		ПланФактОбновить("ПланФактДобавить", мАгенты);
	КонецЕсли;
	
	Если ствАгентыУдалить.Количество() > 0 Тогда
		мАгенты = Новый Массив;
		Для Каждого Элемент Из ствАгентыУдалить Цикл
			мАгенты.Добавить(Элемент.Ключ);	
		КонецЦикла;
		ПланФактОбновить("ПланФактУдалить", мАгенты);
	КонецЕсли;
	
	//3. ПланФактОбновить
	сттрОтбор.Событие = "ПланФактОбновить";
	мСобытиеПланФактОбновить = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Если мСобытиеПланФактОбновить.Количество() > 0 Тогда
		ТаймерОжиданияСобытия.Удалить(мСобытиеПланФактОбновить[0]);
		ПланФактОбновить("ПланФактУдалить");
	КонецЕсли;
	
КонецПроцедуры

//vd_181128 добавлена
&НаКлиенте
Процедура Таймер_ОбработчикМаркерыПромежутковВремени()
	
	Если ТаймерОжиданияСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	сттрОтбор = Новый Структура("Событие");
	
	сттрОтбор.Событие = "МаркерыПромежутковВремени";
	мСобытие = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Если мСобытие.Количество() > 0 Тогда
		ТаймерОжиданияСобытия.Удалить(мСобытие[0]);
		МаркерыПромежутковВремени(мСобытие[0].Параметры);
	КонецЕсли;
	
КонецПроцедуры

//vd_181128 добавлена
&НаКлиенте
Процедура Таймер_ОбработчикКарта()

	Если ТаймерОжиданияСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	сттрОтбор = Новый Структура("Событие");

	 //1. КартаОбновитьМакет
	сттрОтбор.Событие = "КартаОбновитьМакет";
	мСобытие = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Если мСобытие.Количество() > 0  Тогда
				
		//Удалить проверку КартаПроверкаЗагрузкиМакета, это задание добавится при загрузке контекста.
		сттрОтбор.Событие = "КартаПроверкаЗагрузкиМакета";
		мСобытиеПроверкаЗагрузкиМакета = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
		Для Каждого Элемент Из мСобытиеПроверкаЗагрузкиМакета Цикл
			ТаймерОжиданияСобытия.Удалить(Элемент);	
		КонецЦикла;	
		
		//vd_1881128
		Результат = КартаОбновитьТекущийМакет();
		Если Результат = Истина тогда
			// Макет удачно загружен, удаляем событие
			ТаймерОжиданияСобытия.Удалить(мСобытие[0]);
		Иначе
			// Макет НЕ загружен, обновляем событие
			ДействиеОбработкаСобытий("КартаОбновитьМакет");	
		КонецЕсли;  			
		
		Возврат; // Карта еще не загружена.
	КонецЕсли;	

	//2. КартаПроверкаЗагрузкиМакета
	сттрОтбор.Событие = "КартаПроверкаЗагрузкиМакета";
	мСобытие = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Если мСобытие.Количество() > 0  Тогда
		МакетЗагружен = Ложь;
		Документ = Элементы.ПолеБраузера.Document;
		ОкноБраузера = Документ.parentWindow; // IE
		Если ОкноБраузера = Неопределено Тогда
			ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
		Если ОкноБраузера.onloadOK = Истина И ОкноБраузера.initializeOK = Ложь Тогда
			//перегрузить карту, скрипт не загрузился
			МакетЗагружен = Ложь;
			Если ТаймерОжидания.Попытка > 1 Тогда
				ДействиеОбработкаСобытий("КартаОбновитьМакет");
				Если ТаймерОжидания.Попытка = 5 Тогда
					ВывестиСообщение("Не удалось загрузить макет карты. Возможно отсутствует соединение с Интернет.");	
					ВывестиСообщение("Ожидание подключения...");	
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОкноБраузера.onloadOK = Истина И ОкноБраузера.initializeOK = Истина Тогда
			//Скрипт загрузился
			МакетЗагружен = Истина;
		Иначе
			//Скрипт еще не загрузился
			МакетЗагружен = Ложь;
		КонецЕсли;
		
		Если МакетЗагружен = Истина Тогда
			ТаймерОжиданияСобытия.Удалить(мСобытие[0]);
			ДействиеОбработкаСобытий("КартаОбновитьКарту"); //Добавление в очередь 
			Если ТаймерОжидания.Попытка > 5 Тогда 
				ВывестиСообщение("Макет карты загружен.");	
			КонецЕсли;					
		КонецЕсли;
	КонецЕсли;
	
	//Проверка.
	Если ТаймерОжиданияСобытия.Количество() = 0 ИЛИ МакетЗагружен = Ложь Тогда
		Возврат;
	КонецЕсли;      
	
	//3. КартаОбновитьКарту
	сттрОтбор.Событие = "КартаОбновитьКарту";
	мСобытие = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Если мСобытие.Количество() > 0  Тогда
		ТаймерОжиданияСобытия.Удалить(мСобытие[0]);
		КартаОбновитьКарту();
	КонецЕсли;
	
	//4. ПерейтиКМаркеру или ПоказатьРегион. Обрабатываем последнее событие.
	стррПоследнееСобытие = Новый Структура("Время, Событие, Параметры", Дата(1,1,1), Неопределено, Неопределено);
	сттрОтбор.Событие = "КартаПерейтиКМаркеру";
	СобытиеПерейтиКМаркеру = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Для Каждого Элемент Из СобытиеПерейтиКМаркеру Цикл
		Если Элемент.Время > стррПоследнееСобытие.Время Тогда
			стррПоследнееСобытие.Время 		= Элемент.Время;
			стррПоследнееСобытие.Событие 	= Элемент.Событие;
			стррПоследнееСобытие.Параметры 	= Элемент.Параметры;
		КонецЕсли;
		ТаймерОжиданияСобытия.Удалить(Элемент);				
	КонецЦикла;
	сттрОтбор.Событие = "КартаПоказатьРегион";
	СобытиеПоказатьРегион  = ТаймерОжиданияСобытия.НайтиСтроки(сттрОтбор);
	Для Каждого Элемент Из СобытиеПоказатьРегион Цикл
		Если Элемент.Время > стррПоследнееСобытие.Время Тогда
			стррПоследнееСобытие.Время 		= Элемент.Время;
			стррПоследнееСобытие.Событие 	= Элемент.Событие;
			стррПоследнееСобытие.Параметры 	= Элемент.Параметры;
		КонецЕсли;
		ТаймерОжиданияСобытия.Удалить(Элемент);				
	КонецЦикла;
	Если стррПоследнееСобытие.Событие = "КартаПерейтиКМаркеру" Тогда
		КартаПерейтиКМаркеру(Параметры);
	ИначеЕсли стррПоследнееСобытие.Событие = "КартаПоказатьРегион" Тогда
		КартаПоказатьРегион(Параметры);
	КонецЕсли;
	
КонецПроцедуры

//vd_181112 Полностью изменена логика
&НаКлиенте
Процедура Таймер_Выключить()
	
	ТаймерОжидания.Включен = Ложь;
	ТаймерОжиданияСобытия.Очистить();
	ОтключитьОбработчикОжидания("Таймер_Обработчик");
	
КонецПроцедуры
	                      	
// vd_181120 Добавлена
&НаКлиенте
Процедура ДействиеОбработкаСобытий(Событие, Параметры = Неопределено)
	
	Если 	(Событие  = "ПланФактДобавить"		И Параметры <> Неопределено)	// Добавить в дерево агентов
		ИЛИ (Событие  = "ПланФактУдалить"  		И Параметры <> Неопределено)    // Удалить из дерева агентов
		ИЛИ (Событие  = "ПланФактОбновить")                                     // Обновить дерево
		ИЛИ (Событие  = "ПланФактОчистить")                                     // Очистить дерево
		ИЛИ	 Событие  = "КартаОбновитьМакет"   	   								// Обновить Макет Карты
		ИЛИ	 Событие  = "КартаОбновитьКарту"          							// Вывести на карту все треки и маркеры
		ИЛИ  Событие  = "КартаПерейтиКМаркеру" 								 	// Перейти к маркеру на карте                       
		ИЛИ  Событие  = "КартаПоказатьРегион"  									// Показать регион на карте
		ИЛИ  Событие  = "МаркерыПромежутковВремени"								// Заполнить таблицу КартаТочкиТрекаПоВремени

	Тогда
		Если ТаймерОжидания.ОбработкаДанных = Истина Тогда
			Таймер_Включить(Событие, Параметры);
		Иначе
			ТаймерОжидания.ОбработкаДанных = Истина;
			
			Если Событие = "ПланФактДобавить" ИЛИ Событие = "ПланФактУдалить" ИЛИ Событие = "ПланФактОбновить" ИЛИ Событие = "ПланФактОчистить" Тогда
				ПланФактОбновить(Событие, Параметры);
				
			ИначеЕсли Событие = "КартаОбновитьМакет" Тогда
				Если КартаОбновитьТекущийМакет() = Ложь Тогда
					Таймер_Включить(Событие);
				КонецЕсли;
				
			ИначеЕсли Событие = "КартаОбновитьКарту" Тогда	
				КартаОбновитьКарту();
				
			ИначеЕсли Событие = "КартаПерейтиКМаркеру" Тогда	
				КартаПерейтиКМаркеру(Параметры);	
				
			ИначеЕсли Событие = "КартаПоказатьРегион" Тогда	
				КартаПоказатьРегион(Параметры);
				
			ИначеЕсли Событие  = "МаркерыПромежутковВремени" Тогда
				МаркерыПромежутковВремени(Параметры);
				
			КонецЕсли;			
			
			ТаймерОжидания.ОбработкаДанных = Ложь;
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

// Таймер_СлужебныеПроцедурыИФункции
#КонецОбласти

//vd_181005 Процедуры перенесены из УД ОптимизацияТреков.epf ver 1.0.0.11 2018.08.10(1)
#Область ОптимизацияGPSтрека
&НаСервере
Процедура ВыполнитьОптимизацию(ТрекВТаблице)
	
	
	//ДлинаХэша (не точно):
	//7 - это 76 м.
	//8 - это 19 м.
	//9 - Это наверно 5 м.
	ДлинаХэша = 7;
	МинимальноеКоличествоТочекСОднимХэшом = 1;
	
	УдалениеОдинаковыхИНулевыхТочек(ТрекВТаблице);
	ОчисткаОтМусораГеоХэшинг(ТрекВТаблице, ДлинаХэша, МинимальноеКоличествоТочекСОднимХэшом); //  Убирает скачки.
	УдалениеОдинаковыхИНулевыхТочек(ТрекВТаблице);
	
КонецПроцедуры

&НаСервере
//vd_181008 Добавлена
//Удаляет точки с одинаковыми координатами.
//Удаляет точки с нулевыми координатами.
Процедура УдалениеОдинаковыхИНулевыхТочек(ТрекВТаблице)

	Если ТрекВТаблице.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиБезМусора = Новый Массив;
	стррКоординатыПредыдущейСтроки = Новый Структура("Широта, Долгота", ТрекВТаблице[0].Широта, ТрекВТаблице[0].Долгота);
	
	Если стррКоординатыПредыдущейСтроки.Широта <> 0 И стррКоординатыПредыдущейСтроки.Долгота <> 0 Тогда
		СтрокиБезМусора.Добавить(ТрекВТаблице[0]);
	КонецЕсли;
	
	Для Каждого Элемент Из ТрекВТаблице Цикл
		//Одинаковые точки
		Если Элемент.Широта = стррКоординатыПредыдущейСтроки.Широта И Элемент.Долгота = стррКоординатыПредыдущейСтроки.Долгота Тогда
			Продолжить;
		КонецЕсли;
		//Нулевые кординаты
		Если Элемент.Широта = 0 Или Элемент.Долгота = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		стррКоординатыПредыдущейСтроки.Широта  = Элемент.Широта;
		стррКоординатыПредыдущейСтроки.Долгота = Элемент.Долгота;
		СтрокиБезМусора.Добавить(Элемент);
	КонецЦикла;
	
	Если СтрокиБезМусора.Количество() <> ТрекВТаблице.Количество() Тогда
		ТрекВТаблице = ТрекВТаблице.Скопировать(СтрокиБезМусора);
	КонецЕсли; 
	
КонецПроцедуры

//vd_181008 Добавлена
// Процедура - Очистка от мусора гео хэшинг
// Очищает трек от "мусора" используя алгоритм геохэширования
// 
//Параметры:
//  ТрекВТаблице							 - 	ТаблицаЗначений - трек в таблице значений
//  ДлинаХэша								 - 	Число - длина вычисляемых хэшей для точек
//  МинимальноеКоличествоТочекСОднимХэшом	 - 	Число - количество точек с повторяющимся хэшем, которое указывает, что это была действительно точка, а не "скачок"
&НаСервере
Процедура ОчисткаОтМусораГеоХэшинг(ТрекВТаблице, ДлинаХэша, МинимальноеКоличествоТочекСОднимХэшом)
	
	ТрекВТаблице.Колонки.Добавить("Хэш");
	ТрекВТаблице.Колонки.Добавить("Количество");
	ТрекВТаблице.Колонки.Добавить("ОдинаковыхХэшейПодряд");
	ТрекВТаблице.Индексы.Добавить("Хэш");//Индекс!
	
	
	ХэшПредыдущейСтроки 	= "";
	ОдинаковыхХэшейПодряд 	= 1;
	НачальнаяТочка 			= Неопределено;
	КонечнаяТочка 			= Неопределено;
	СтрокиБезМусора 		= Новый Массив;
	ПредыдущаяСтрока 		= Неопределено;
	
	ПерваяСтрокаСКоординатами 		= Неопределено;
	ПоследняяСтрокаСКоординатами 	= Неопределено;
	
	Для Каждого Строка из ТрекВТаблице Цикл
		
		ШиротаWGS  = КонвертироватьNMEAWGS84(Строка.Широта);
		ДолготаWGS = КонвертироватьNMEAWGS84(Строка.Долгота);
		
		//Строка.Хэш = КодироватьВГеоХэш(Строка.ШиротаWGS, Строка.ДолготаWGS, ДлинаХэша);
		Строка.Хэш = КодироватьВГеоХэш(ШиротаWGS, ДолготаWGS, ДлинаХэша);
		
		
		Строка.Количество = 1;
		
		Если Строка.Хэш <> ХэшПредыдущейСтроки Тогда
			Если ОдинаковыхХэшейПодряд < МинимальноеКоличествоТочекСОднимХэшом Тогда 
				Если ПредыдущаяСтрока <> Неопределено Тогда
					СтрокиБезМусора.Удалить(СтрокиБезМусора.Количество()-1);
					Если СтрокиБезМусора.Количество() > 0 Тогда //откроем предыдущий отрезок
						
						Если СтрокиБезМусора.Получить(СтрокиБезМусора.Количество()-1).Хэш = Строка.Хэш Тогда
							
							СтрокиБезМусора.Удалить(СтрокиБезМусора.Количество()-1);
							ОдинаковыхХэшейПодряд = СтрокиБезМусора.Получить(СтрокиБезМусора.Количество()-1).ОдинаковыхХэшейПодряд+1;
							ПредыдущаяСтрока = Строка;
							ХэшПредыдущейСтроки = Строка.Хэш;
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				Если СтрокиБезМусора.Количество() > 0 Тогда
					СтрокиБезМусора.Получить(СтрокиБезМусора.Количество()-1).ОдинаковыхХэшейПодряд = ОдинаковыхХэшейПодряд;
				КонецЕсли;
				
				Если ПредыдущаяСтрока <> Неопределено Тогда
					СтрокиБезМусора.Добавить(ПредыдущаяСтрока);
				КонецЕсли;
				
			КонецЕсли;
			ХэшПредыдущейСтроки = Строка.Хэш;
			СтрокиБезМусора.Добавить(Строка);
			ОдинаковыхХэшейПодряд = 1;
		Иначе			
			ОдинаковыхХэшейПодряд = ОдинаковыхХэшейПодряд + 1;
		КонецЕсли;
		ПредыдущаяСтрока = Строка;
	КонецЦикла;
	
	Если СтрокиБезМусора.Количество() <> ТрекВТаблице.Количество() Тогда
		
		СтрокиБезМусора[0].Время = ТрекВТаблице[0].Время;
		СтрокиБезМусора[СтрокиБезМусора.Количество()-1].Время = ТрекВТаблице[ТрекВТаблице.Количество()-1].Время;
		
		ТрекВТаблице = ТрекВТаблице.Скопировать(СтрокиБезМусора);
	КонецЕсли;
	
	ТрекВТаблице.Сортировать("Время Возр");

КонецПроцедуры

&НаСервере
// Функция - Кодировать в гео хэш
//			Кодирование координат в геохэш
// Параметры:
//  Широта		 - 	Число - координата широты
//  Долгота		 - 	Число - координата долготы
//  ДлинаХэша	 - 	Число - длина хэша, который необходимо получить
// 
// Возвращаемое значение:
//  Строка - полученный хэш
//
Функция КодироватьВГеоХэш(Широта, Долгота, ДлинаХэша)
	
	Символы32 = "0123456789bcdefghjkmnpqrstuvwxyz";
	
	Хэш = "";
	ДлинаЧастиХэша = 0;
	
	минШирота = -90;
	максШирота = 90;
	
	минДолгота = -180;
	максДолгота = 180;
	
	ПоДолготе = Истина;
	Бит = 0;
	Индекс = 0;
	
	Пока ДлинаЧастиХэша < ДлинаХэша Цикл
		
		Если ПоДолготе Тогда
			
			СредняяДолгота = (минДолгота + максДолгота)/2;
			Если Долгота >= СредняяДолгота Тогда
				Индекс = Индекс*2+1;
				минДолгота = СредняяДолгота;
			Иначе
				Индекс = Индекс*2;
				максДолгота = СредняяДолгота;
			КонецЕсли;
			
		Иначе
			
			СредняяШирота = (минШирота + максШирота)/2;
			Если Широта >= СредняяШирота Тогда
				Индекс = Индекс*2+1;
				минШирота = СредняяШирота;
			Иначе
				Индекс = Индекс*2;
				максШирота = СредняяШирота;
			КонецЕсли;
			
		КонецЕсли;
		
		ПоДолготе = НЕ ПоДолготе;
		
		Если Бит < 4 Тогда
			Бит = Бит + 1;
		Иначе
			
			Хэш = Хэш + Сред(Символы32, Индекс+1, 1); //Индекс+1 - т.к. нумерация с 1 в строке
			Бит = 0;
			Индекс = 0;
			ДлинаЧастиХэша = ДлинаЧастиХэша + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Хэш;
	
КонецФункции


#КонецОбласти

