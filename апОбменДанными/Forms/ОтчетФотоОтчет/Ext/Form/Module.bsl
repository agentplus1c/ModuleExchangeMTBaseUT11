#Область ОписаниеПеременных

&НаКлиенте
Перем ОбработчикПослеФормированияНаКлиенте Экспорт;
&НаКлиенте
Перем ПараметрыОбработчика;
&НаКлиенте
Перем ВыполнятьЗамеры;
&НаКлиенте
Перем ИдентификаторЗамера;
&НаКлиенте
Перем Непосредственно;
&НаКлиенте
Перем ФормированиеПриОткрытии;
&НаКлиенте
Перем ИнтервалОжидания;
&НаКлиенте
Перем гМодульК;  // общий клиентский модуль

&НаСервере
Перем ОбъектФайлКартинки,ОбъектОбработкаКартинки, КаталогФото, КаталогУменьшенныхФото, гМодульКарты;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтррКонтекст = Новый Структура("ВОВсеСвойства");
	СтррКонтекст.Вставить("СпрТоргТочки"); // KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек
	
	ТекОбъект = РеквизитФормыВЗначение("Отчет");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	Настройки = ТекОбъект.ПрочитатьЗначенияНастроек("КаталогДанных");

	ПодкаталогФотграфий = ТекОбъект.ПодкаталогДанных("Фотографии",Настройки.КаталогДанных);	
	
	МаксимальноеРасстояниеОтТТ = ТекОбъект.ПрочитатьЗначениеНастройки("МаксимальноеРасстояниеОтТТ");
	// Определение ключевых параметров отчета.
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	ОтчетОбъект     = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	ОтчетПолноеИмя  = ОтчетМетаданные.ПолноеИмя();
	ПредопределенныеВарианты = Новый СписокЗначений;
	
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("СКДПараметровФотоОтчета");
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,ЭтаФорма.УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	Отчет.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	
	Если СхемаКомпоновкиДанных <> Неопределено Тогда
		Для Каждого Вариант Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			ПредопределенныеВарианты.Добавить(Вариант.Имя, Вариант.Представление);
		КонецЦикла;
	КонецЕсли;
	
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	Если ЗначениеЗаполнено(Параметры.КлючВарианта) Тогда
		КлючТекущегоВарианта = Параметры.КлючВарианта;
	Иначе
		КлючТекущегоВарианта = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ОтчетПолноеИмя + "/КлючТекущегоВарианта", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КлючТекущегоВарианта) И ПредопределенныеВарианты.Количество() > 0 Тогда
		КлючТекущегоВарианта = ПредопределенныеВарианты[0].Значение;
	КонецЕсли;
	
	
	// Сохранение параметров открытия формы.
	ФормаПараметры = Новый Структура(
	"КлючНазначенияИспользования, КлючПользовательскихНастроек,
	|СформироватьПриОткрытии, ТолькоПросмотр,
	|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	// Определение настроек отчета.
	ТипОтчетаСтрокой = ВариантыОтчетовКлиентСервер.ТипОтчета(Параметры.ФотоОтчет, Истина);
	Если ТипОтчетаСтрокой = Неопределено Тогда
		Информация      = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(ОтчетПолноеИмя);
		Параметры.ФотоОтчет = Информация.ФотоОтчет;
	КонецЕсли;
	НастройкиОтчета = ВариантыОтчетов.НастройкиФормыОтчета(Параметры.ФотоОтчет, КлючТекущегоВарианта, ОтчетОбъект);
	НастройкиОтчета.Вставить("РазрешеноВыбиратьВарианты", Истина);
	НастройкиОтчета.Вставить("СхемаМодифицирована", Ложь);
	НастройкиОтчета.Вставить("ПредопределенныеВарианты", ПредопределенныеВарианты);
	НастройкиОтчета.Вставить("АдресСхемы",   АдресСКД);
	НастройкиОтчета.Вставить("КлючСхемы",    "");
	НастройкиОтчета.Вставить("Контекстный",  ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") И ФормаПараметры.Отбор.Количество() > 0);
	НастройкиОтчета.Вставить("ПолноеИмя",    ОтчетПолноеИмя);
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	НастройкиОтчета.Вставить("ОтчетСсылка",  Параметры.ФотоОтчет);
	НастройкиОтчета.Вставить("Внешний",      ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка"));
	НастройкиОтчета.Вставить("Безопасный",   БезопасныйРежим() <> Ложь);
	ОбновитьИнформациюОВариантеОтчета();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета, ВариантыОтчетов.ПараметрыКлиента());
	
	НастройкиОтчета.Вставить("ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек", Истина);
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
		Элементы.ФормироватьСразу.Пометка = Истина;
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	// Параметры по умолчанию.
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "ВыводитьСуммуВыделенныхЯчеек", Истина) Тогда
		Элементы.АвтоСуммаКнопка.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Скрытие команд вариантов.
	ВидимостьКомандВариантовОтчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидимостьКомандВариантовОтчетов");
	Если ВидимостьКомандВариантовОтчетов = Ложь Тогда
		
		НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
		Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
			КлючНазначенияИспользования = Параметры.КлючВарианта;
			ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
		КонецЕсли;
	КонецЕсли;
	//Если НастройкиОтчета.РазрешеноИзменятьВарианты И Не ВариантыОтчетовПовтИсп.ПравоДобавления() Тогда
	//	НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
	//КонецЕсли;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	УстановитьВидимостьДоступность();
	
	// Тесная интеграция с почтой и рассылкой.
	ДоступнаОтправкаПисем = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		ДоступнаОтправкаПисем = МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем();
	КонецЕсли;
	Если ДоступнаОтправкаПисем Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
			МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
			МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		Иначе // Если в подменю одна команда, то выпадающий список не отображается.
			Элементы.ОтправитьПоПочте.Заголовок = Элементы.ГруппаОтправить.Заголовок + "...";
			Элементы.Переместить(Элементы.ОтправитьПоПочте, Элементы.ГруппаОтправить.Родитель, Элементы.ГруппаОтправить);
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтправить.Видимость = Ложь;
	КонецЕсли;	
	
	//ОтчетОбъект.ОтчетПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ПриОбновленииСоставаПользовательскихНастроекНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыполнятьЗамеры = Ложь;
	// В безопасном режиме доп. отчеты формируются непосредственно,
	// т.к. они не могут подключать себя и использовать собственные методы в фоновых заданиях.
	Непосредственно = НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный;
	ФормированиеПриОткрытии = Ложь;
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
	ПоказатьРезультатЗаполненияНастроек();
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	РезультатОбработан = Ложь;
	
	// Приемка результата из стандартных форм.
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("УправляемаяФорма") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета"
			Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;
			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаНастроек")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				БыстрыеНастройкиЗаполнитьКлиент(Результат);
				РезультатОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Механизмы расширения.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта()
		Или ИмяСобытия = "Запись_НаборКонстант" Тогда
		ОповещениеОбработано = Истина;
		ВариантыПанелиКлючТекущегоВарианта = " - ";
		ПодключитьОбработчикОжидания("ВидимостьДоступностьЕслиТребуется", 0.1, Истина);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если Не РежимВариантаОтчета() И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеНастройкиКД);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеНастройкиXML", НовыеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если Не РежимВариантаОтчета() И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		ОтчетНаименованиеТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "ВариантНаименование");
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
		//Если КлючТекущегоВарианта = Неопределено Тогда
		//	КлючТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "КлючВарианта");
		//КонецЕсли;
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	КонецЕсли;
	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
	КонецЕсли;
	
	// Обновление ссылки варианта отчета.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ОбновитьИнформациюОВариантеОтчета();
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//((OM_180307
	ПользовательскиеНастройкиДляУстановки = Неопределено;
	Если Параметры.Свойство("ПользовательскиеНастройкиДляУстановки", ПользовательскиеНастройкиДляУстановки) Тогда
		Для Каждого ЭлементНастройки из ПользовательскиеНастройкиДляУстановки.Элементы Цикл
			Если ЭлементНастройки.Использование Тогда
				
				ЭлементНовойНастройки = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
				ЗаполнитьЗначенияСвойств(ЭлементНовойНастройки, ЭлементНастройки);
				
			Конецесли;
		КонецЦикла;
	КонецЕсли;
	//))OM_180307 
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		// Подготовка к переинициализации.
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
	ПараметрыЗаполнения.Вставить("СтандартнаяОбработкаСобытия", СтандартнаяОбработка);
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	Если ПараметрыЗаполнения.СтандартнаяОбработкаСобытия <> СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПараметрыЗаполнения.СтандартнаяОбработкаСобытия;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
		Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
		
		Если Тип = "ЗначениеПараметраНастроек"
			И ТипЗнч(ПользовательскаяНастройкаКД.Значение) = Тип("СтандартныйПериод")
			И ПользовательскаяНастройкаКД.Использование Тогда
			
			ИдентификаторЭлемента = ОтчетыКлиентСервер.ПривестиИдентификаторКИмени(ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки);
			
			ПериодНачало    = Элементы.Найти(Тип + "_Начало_"    + ИдентификаторЭлемента);
			ПериодОкончание = Элементы.Найти(Тип + "_Окончание_" + ИдентификаторЭлемента);
			Если ПериодНачало = Неопределено Или ПериодОкончание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ПользовательскаяНастройкаКД.Значение;
			Если ПериодНачало.АвтоОтметкаНезаполненного
				И Не ЗначениеЗаполнено(Значение.ДатаНачала)
				И Не ЗначениеЗаполнено(Значение.ДатаОкончания) Тогда
				ТекстОшибки = НСтр("ru = 'Не указан период'");
				ПутьКДанным = ПериодНачало.ПутьКДанным;
			ИначеЕсли Значение.ДатаНачала > Значение.ДатаОкончания Тогда
				ТекстОшибки = НСтр("ru = 'Конец периода должен быть больше начала'");
				ПутьКДанным = ПериодОкончание.ПутьКДанным;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(НастройкиКД)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ОтчетыКлиентСервер.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД);
	НастройкиКД.ДополнительныеСвойства.Вставить("Адрес", ПоместитьВоВременноеХранилище(НовыеНастройкиКД));
	НастройкиКД = НовыеНастройкиКД;
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	ОбновитьИнформациюОВариантеОтчета();
	УстановитьВидимостьДоступность(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	ЗаполнитьКомандыВыбораВариантов();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка И ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Если ПерейтиПоСсылке(Область.Текст) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		Попытка
			ЗначениеРасшифровки = Область.Расшифровка;
		Исключение
			ЗначениеРасшифровки = Неопределено;
			// Для некоторых типов областей табличного документа (свойство ТипОбласти)
			// чтение расшифровки недоступно, поэтому делается попытка-исключение.
		КонецПопытки;
		
		Если ЗначениеРасшифровки <> Неопределено И ПерейтиПоСсылке(ЗначениеРасшифровки) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Если ПерейтиПоСсылке(Область.Маска) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Если Расшифровка.Свойство("ДокументID") Тогда
			
			ПараметрОткрытия = Новый Структура;
			ПараметрОткрытия.Вставить("ВидОбъекта", "_Мерчендайзинг");
			ПараметрОткрытия.Вставить("ID", Новый УникальныйИдентификатор(Расшифровка.ДокументID));
			МодульК().ВООткрытьФорму(ПараметрОткрытия, Новый УникальныйИдентификатор(Расшифровка.ДокументID));
			
		ИначеЕсли Расшифровка.Свойство("Описание") Тогда
			
			Оп = Новый ОписаниеОповещения("ВыполнитьПослеПредупреждение", ЭтотОбъект,);
			ПоказатьПредупреждение(Оп, Расшифровка.Описание);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Партнеры") Тогда
		
		ПоказатьЗначение(,Расшифровка);
		
	ИначеЕсли Расшифровка = "" Тогда
		
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеПредупреждение", ЭтотОбъект,);		
		ПоказатьПредупреждение(Оп, "Файл фотографии не найден");
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ID", Расшифровка);
		ОткрытьФорму("ВнешняяОбработка.апОбменДанными.Форма.ФормаПросмотраФото", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеПредупреждение(Параметр) Экспорт 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АнализЖурналаРегистрации") Тогда
		МодульАнализЖурналаРегистрацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АнализЖурналаРегистрацииКлиент");
		МодульАнализЖурналаРегистрацииКлиент.ФормаОтчетаОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоставОтчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		
		Уровень1 = Элемент.ТекущиеДанные;
		Уровень2 = Уровень1.ПолучитьЭлементы();
		МСтрок = Новый Массив;
		Для Каждого Элемент Из Уровень2 Цикл
			МСтрок.Добавить(Элемент.Данные);
		КонецЦикла;
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("Действие", "ТабличныйДокумент");
		ПараметрыФормирования.Вставить("Уровень1", Уровень1.Данные);
		Сформировать(ПараметрыФормирования);
		
	Иначе
		
		Уровень2 = Элемент.ТекущиеДанные;
		Уровень1 = Уровень2.ПолучитьРодителя();
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("Действие", "ТабличныйДокумент");
		ПараметрыФормирования.Вставить("Уровень1", Уровень1.Данные);
		ПараметрыФормирования.Вставить("Уровень2", Уровень2.ID);
		Сформировать(ПараметрыФормирования);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ФлажокИспользование_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	ОчиститьДеревоГруппировок();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВвода_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.Значение;
	ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
	//ОтчетыКлиент.ОтразитьИзмененияВПодчиненных(ЭтотОбъект, ИдентификаторЭлемента, ПользовательскаяНастройкаКД);
	ОчиститьДеревоГруппировок();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФлажокЗначения_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	Значение = ЭтотОбъект[Элемент.Имя];
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	ОчиститьДеревоГруппировок();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.СписокКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.ЗначениеКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидСравнения_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Подключаемый_ИзменитьВидСравнения(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Стандартный период.

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ЗначениеИмя     = СтрЗаменить(ПериодНачалоИмя, "_Начало_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодНачалоИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаНачала);
	Если Заполнено Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя = Элемент.Имя;
	ЗначениеИмя        = СтрЗаменить(ПериодОкончаниеИмя, "_Окончание_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодОкончаниеИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаОкончания);
	Если Заполнено Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	ОтчетыКлиент.ВыбратьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсе(Команда)
	ОчиститьВсеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеНаСервере()
	ОтчетТабличныйДокумент.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройки(Команда)
	Имя = НастройкиОтчета.ПолноеИмя + ".ФормаНастроек";
	
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	//ПараметрыФормы.Вставить("КлючВарианта",              Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("Вариант",                   Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета",     НастройкиОтчета);
	ПараметрыФормы.Вставить("ВариантНаименование", Строка(ОтчетНаименованиеТекущегоВарианта));
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ВсеНастройкиЗавершение", ЭтотОбъект);
	
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Ложь,
		НастройкиОтчета.КлючЗамеров + ".Настройки");
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, НастройкиОтчета.ПрефиксЗамеров);
	КонецЕсли;
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройкиЗавершение(Результат, ПараметрыВыполнения) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БыстрыеНастройкиЗаполнитьКлиент(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("НастройкиОтчета",                       НастройкиОтчета);
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	//ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");
	//Если ВариантМодифицирован Тогда
	//	ПараметрыЗаполнения.Вставить("СброситьНастройкиВарианта", Истина);
	//	ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	//КонецЕсли;
	ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Истина);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("СформироватьПередОтправкойПоПочте", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	
	ОчиститьСообщения();
	
	Элементы["СоставОтчета"].Видимость = Истина;
	ПараметрыФОрмирования = Новый Структура("Действие", "Дерево");
	
	ОчиститьДеревоГруппировок();

	Сформировать(ПараметрыФОрмирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	СтандартныеПодсистемыКлиент.ПоказатьРасчетЯчеек(ЭтотОбъект, ОтчетТабличныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	
	ФормироватьСразу = Не Элементы.ФормироватьСразу.Пометка;
	Элементы.ФормироватьСразу.Пометка = ФормироватьСразу;
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормироватьСразу", ФормироватьСразу);
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеОтчеты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантСсылка",     НастройкиОтчета.ВариантСсылка);
	ПараметрыФормы.Вставить("ОтчетСсылка",       НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормы.Вставить("ПодсистемаСсылка",  ФормаПараметры.Подсистема);
	ПараметрыФормы.Вставить("ОтчетНаименование", НастройкиОтчета.Наименование);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ПанельДругихОтчетов", ПараметрыФормы, ЭтотОбъект, Истина, , , , Блокировать);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок = СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
		Обработчик = Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьВариантОтчета(Команда)
	//Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	//Если Найденные.Количество() = 0 Тогда
	//	ПоказатьПредупреждение(, НСтр("ru = 'Вариант отчета не найден.'"));
	//	Возврат;
	//КонецЕсли;
	//ВариантФормы = Найденные[0];
	//НастройкиОтчета.Удалить("ФормаНастроекРасширенныйРежим");
	//ЗагрузитьВариант(ВариантФормы.КлючВарианта);
	//КлючУникальности = ОтчетыКлиентСервер.КлючУникальности(НастройкиОтчета.ПолноеИмя, ВариантФормы.КлючВарианта);
	//ПоказатьРезультатЗаполненияНастроек();
	//Если Элементы.ФормироватьСразу.Пометка Тогда
	//	ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьВидСравнения(Команда)
	ИдентификаторЭлемента = Прав(Команда.Имя, 32);
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораВидаСравнения", ЭтотОбъект, Контекст);
	ОтчетыКлиент.ИзменитьВидСравнения(ЭтотОбъект, ИдентификаторЭлемента, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаСравнения(ВидСравнения, Контекст) Экспорт
	Если ВидСравнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьВидСравнения");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыФормы.Вставить("ТолькоБыстрые", Истина);
	Обработчик = Новый ОписаниеОповещения("ИзменитьУсловияОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.УсловияОтборовОтчета", ПараметрыФормы, ЭтотОбъект, Истина, , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборовЗавершение(ВыборПользователя, Контекст) Экспорт
	Если ВыборПользователя = Неопределено
		Или ВыборПользователя = КодВозвратаДиалога.Отмена
		Или ВыборПользователя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьУсловияОтборов");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ПараметрыЗаполнения.Вставить("УсловияОтборов", ВыборПользователя);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Функция МодульК()
	
	Если гМодульК = Неопределено Тогда
		гМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат гМодульК;
	
КонецФункции 

&НаКлиенте
Процедура ОткрытьФотоДокумента(ФотоДокумента)
	
	#Если ВебКлиент Тогда
		ДанныеФайла = ПолучитьДанныеФайлаНаСервере(ФотоДокумента, УникальныйИдентификатор);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресКартинки"	, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПараметрыФормы.Вставить("Наименование"	, ДанныеФайла.Наименование);
		
		ОткрытьФорму("Отчет.апФотоОтчет.Форма.ФормаПросмотраФото", ПараметрыФормы,, Новый УникальныйИдентификатор);	
	#Иначе
		Попытка 
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФотоДокумента, УникальныйИдентификатор);
			ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
		Исключение
			ТекстСообщения = НСтр("ru='Повторите загрузку фотографии с мобильного устройства с включенным режимом ""ВЫГРУЖАТЬ ФОТОГРАФИИ"".'"); //расшифровка
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Задание = ФоновоеЗаданиеПроверитьНаСервере();
	Если Задание.Выполняется Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформирован Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет не сформирован'"), , Заголовок);
		КонецЕсли;
		ПослеФормированияНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПередОтправкойПоПочте(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоПочтеПослеФормирования", ЭтотОбъект);
		ОтчетыКлиент.СформироватьОтчет(ЭтотОбъект, Обработчик);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочтеПослеФормирования(ТабличныйДокументСформирован, ДополнительныеПараметры) Экспорт
	Если ТабличныйДокументСформирован Тогда
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАвто()
	
	ПараметрыФОрмирования = Новый Структура("Действие", "Дерево+ТабличныйДокумент");
	
	//"АгентТорговаяТочка"
	ПараметрыФормирования.Вставить("Уровень1", );
	ПараметрыФормирования.Вставить("Уровень2", );
	
	Сформировать(ПараметрыФОрмирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(ПараметрыФОрмирования)
	Отказ = Ложь;
	//ОтчетыКлиентПереопределяемый.ПередФормированием(ЭтотОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьВсеНаСервере();
	
	Если МожноФормироватьОтчет() Тогда
		СформироватьОтчетСервер(Отчет.КомпоновщикНастроек,ПараметрыФОрмирования, ОтчетТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МожноФормироватьОтчет() 
	
	Можно = Истина;
	
	Для Каждого ПНастройка Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ПНастройка.ИдентификаторПользовательскойНастройки = ПутьКПериоду Тогда
			СтПериод = ПНастройка.Значение;
			Если СтПериод.ДатаНачала > СтПериод.ДатаОкончания 
				Или Не ЗначениеЗаполнено(СтПериод.ДатаНачала)
				Или Не ЗначениеЗаполнено(СтПериод.ДатаНачала)
				Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Поле = ПутьКПериодуКД;
				Сообщение.Текст ="Неверно заполнен период";
				Сообщение.Сообщить();
				Можно = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПНастройка.Параметр = Новый ПараметрКомпоновкиДанных("КоличествоКолонок") Тогда
			
			Если ПНастройка.Значение =0 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст ="Неверно заполнено количество колонок";
				Сообщение.Сообщить();
				Можно = Ложь;
		
			КонецЕсли
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Можно;
	
КонецФункции

// Возвращает структуру, в которой каждый элемент соответствует параметру отчета. 
// Ключ элемента соответствует имени параметра, значение элемента - идентификатору параметра.
&НаСервере
Функция ПолучитьИдентификаторыПараметровОтчета(Настройки, Отчет) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = Отчет.КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	СтррРезультат = Новый Структура;
	
	Для Каждого Элемент Из Настройки.Отбор.Элементы Цикл
		ИмяПараметра = Строка(Элемент.ЛевоеЗначение);
		СтррРезультат.Вставить(ИмяПараметра, Элемент.ИдентификаторПользовательскойНастройки);
	КонецЦикла;
	
	Для Каждого Элемент Из Настройки.ПараметрыДанных.Элементы Цикл	
		ИмяПараметра = Строка(Элемент.Параметр);
		СтррРезультат.Вставить(ИмяПараметра, Элемент.ИдентификаторПользовательскойНастройки);
	КонецЦикла;
	
	Возврат СтррРезультат;
	
КонецФункции

&НаСервере
Процедура СформироватьОтчетСервер(КомпоновщикНастроек,ПараметрыФОрмирования, ДокументРезультат)
	
	ОтчетТабличныйДокумент.Очистить();
	
	Пока ОтчетТабличныйДокумент.Рисунки.Количество() > 0 Цикл
		
		ОтчетТабличныйДокумент.Рисунки.Удалить(ОтчетТабличныйДокумент.Рисунки.Получить(0));
		
	КонецЦикла;
	
	
	ОтчетТабличныйДокумент.Очистить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Отчет");
	
	ТекстУсловияОтбора = "";
	
	ИдентификаторыПараметров = ПолучитьИдентификаторыПараметровОтчета(КомпоновщикНастроек.ПолучитьНастройки(), ЭтотОбъект);
	
	Период 		  		= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период").Значение;
	МаксКоличествоФото	= 6; // максимально допустимое количество отображаемых фотографий в отчете (значение по умолчанию)
	ОграничениеНаКоличествоФото = ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, "КоличествоФотографий", МаксКоличествоФото);
	
	ПоказыватьКомментарии = Ложь;
	ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, "ПоказыватьКомментарииКФото", ПоказыватьКомментарии);
	
	ВыводитьКатегорииФотографий = Ложь;
	ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, "ВыводитьКатегорииФотографий", ВыводитьКатегорииФотографий);
	
	СтррПараметры = Новый Структура("НачПериода,КонПериода,Агент,ТорговаяТочка,Документ,Вид,КоличествоКолонок,СозданаВТТ", 
	?(ЗначениеЗаполнено(Период),Период.ДатаНачала,Неопределено), ?(ЗначениеЗаполнено(Период),Период.ДатаОкончания,Неопределено));
	
	ВыражениеСравнения = "&Агент";
	Если ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, "Агент", СтррПараметры.Агент, ВыражениеСравнения) Тогда
		ТекстУсловияОтбора = ТекстУсловияОтбора + " И ВТ_Мерчендайзинг.Агент" + ВыражениеСравнения;
	КонецЕсли;
	
	ВыражениеСравнения = "&ТорговаяТочка";
	Если ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, "ТорговаяТочка", СтррПараметры.ТорговаяТочка, ВыражениеСравнения) Тогда
		ТекстУсловияОтбора = ТекстУсловияОтбора + " И ВТ_Мерчендайзинг.ТорговаяТочка" + ВыражениеСравнения;
	КонецЕсли;
	
	Если ПараметрыФормирования.Действие = "ТабличныйДокумент" Тогда
		ВыражениеСравнения = "&ТорговаяТочка";
		ТекстУсловияОтбора = ТекстУсловияОтбора + " И ВТ_Мерчендайзинг.ТорговаяТочка В (" + ВыражениеСравнения + ")";
	КонецЕсли;
	
	ВыражениеСравнения = "&СозданаВТТ";
	Если ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, "СозданаВТТ", СтррПараметры.СозданаВТТ, ВыражениеСравнения) Тогда
		ТекстУсловияОтбора = ТекстУсловияОтбора + " И ВТ_Мерчендайзинг.СозданаВТТ" + ВыражениеСравнения;
	КонецЕсли;
	
	ВыражениеСравнения = "&Документ";
	
	Если ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, "Документ", СтррПараметры.Документ, ВыражениеСравнения) Тогда
		ТекстУсловияОтбора = " ВТ_Мерчендайзинг.Документ" + ВыражениеСравнения + ТекстУсловияОтбора;
	Иначе
		ТекстУсловияОтбора = "ВТ_Мерчендайзинг.ДатаСоздания МЕЖДУ &НачПериода И &КонПериода" + ТекстУсловияОтбора;
	КонецЕсли;
	
	ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, "Вид", СтррПараметры.Вид);
	
	Группировки = Новый ТаблицаЗначений;
	Группировки.Колонки.Добавить("Путь");
	Группировки.Колонки.Добавить("Значение");
	Группировки.Колонки.Добавить("Представление");
	//((dm
	Группировки.Колонки.Добавить("ТипЗначения");
	//))dm
	
	НоваяСтрока = Группировки.Добавить();
	НоваяСтрока.Значение = "ТорговаяТочка";
	НоваяСтрока.Представление = НСтр("ru = 'Торговая точка'");
	
	НоваяСтрока = Группировки.Добавить();
	НоваяСтрока.Значение = "ВладелецФайла";
	НоваяСтрока.Представление = НСтр("ru = 'Документ'");
	
	Если ПараметрыФормирования.Действие = "ТабличныйДокумент" Тогда
		
		СтррПараметры.ТорговаяТочка = ПараметрыФормирования.Уровень1;
		
		Если ПараметрыФОрмирования.Свойство("Уровень2") Тогда
			
			ТекстУсловияОтбора = ТекстУсловияОтбора +  " И ВТ_ТаблицаФотографий.ВладелецФайла = &Документ";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтррПараметры.КоличествоКолонок = ПолучитьПараметрОтчета(КомпоновщикНастроек, ИдентификаторыПараметров, "КоличествоКолонок").Значение;
	
	ТекстСортировки = "";
	ТекстСортировкиПредставление = "";
	Для каждого ТекГруппировка Из Группировки Цикл		
		Если ТекстСортировки = "" Тогда
			ТекстСортировки = ТекстСортировки + ТекГруппировка.Путь + ТекГруппировка.Значение;
		Иначе 
			ТекстСортировки = ТекстСортировки + ",
			|	" + ТекГруппировка.Путь + ТекГруппировка.Значение;
		КонецЕсли;
		
		Если ТекстСортировкиПредставление = "" Тогда
			ТекстСортировкиПредставление = ТекстСортировкиПредставление + СокрЛП(ТекГруппировка.Путь) + СокрЛП(ТекГруппировка.Представление);
		Иначе 
			ТекстСортировкиПредставление = ТекстСортировкиПредставление + ", " + СокрЛП(ТекГруппировка.Путь) + СокрЛП(ТекГруппировка.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	
	РеквизитОбработки = "_Мерчендайзинг";
	
	ТаблицаМерчендайзинга = ОбработкаОбъект.ВОТЗЗагрузить(РеквизитОбработки);
	
	КС = Новый КвалификаторыСтроки(36);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);	
	КС_256 = Новый КвалификаторыСтроки(256);
	ОписаниеТиповС_256 = Новый ОписаниеТипов(Массив, , КС_256);	
	
	ТаблицаМерчендайзинга.Колонки.Добавить("УИД", ОписаниеТиповС);
	ТаблицаМерчендайзинга.Колонки.Добавить("ДокументМерчендайзинга", ОписаниеТиповС_256);
	ТаблицаМерчендайзинга.Колонки.Добавить("ДокументМерчендайзингаПредставление", ОписаниеТиповС_256);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	
	ОписаниеТиповБ = Новый ОписаниеТипов(Массив);	
	
	ТаблицаМерчендайзинга.Колонки.Добавить("СозданаВТТ",ОписаниеТиповБ);
	ТаблицаМерчендайзинга.Сортировать("Дата УБЫВ");
	
	ТаблицаМерчендайзинга.Колонки.Добавить("Широта2",ТаблицаМерчендайзинга.Колонки.Долгота.ТипЗначения);
	ТаблицаМерчендайзинга.Колонки.Добавить("Долгота2",ТаблицаМерчендайзинга.Колонки.Широта.ТипЗначения);
	
	Для Каждого СтрМ Из ТаблицаМерчендайзинга Цикл
		
		Если СтрМ.Широта = "-" или 
			СтрМ.Широта = ""
			Тогда
			
			СтрМ.Широта = "0";
			
		КонецЕсли;
		
		Если СтрМ.Широта2 = "-" или 
			СтрМ.Широта2 = "" Тогда
			
			СтрМ.Широта2 = "0";
			
		КонецЕсли;
		
		Если СтрМ.Долгота = "-" или 
			СтрМ.Долгота = "" Тогда
			
			СтрМ.Долгота = "0";
			
		КонецЕсли;
				
		Если СтрМ.Долгота2 = "-" или 
			СтрМ.Долгота2 = "" Тогда
			
			СтрМ.Долгота2 = "0";
			
		КонецЕсли;

		СтрМ.УИД = Строка(СтрМ.ID);
		СтрМ.ДокументМерчендайзинга = "Мерчендайзинг " +СтрМ.Номер + " от " + формат(СтрМ.Дата, "ДЛФ=DDT");
		СтрМ.ДокументМерчендайзингаПредставление = "Мерчендайзинг " + СтрМ.Номер + " от " + формат(СтрМ.Дата, "ДЛФ=DDT");
		
		стррКоординаты = Новый Структура("Адрес,Широта,Долгота,Широта2,Долгота2,Расстояние,МаксРасстояние", 
		"",0,0,0,0); // последние 4 свойства используются при расчете расстояния между двумя точками
		
	
		ОбновитьАдресПартнераСервер(СтрМ.Партнер, стррКоординаты);
		
		стррКоординаты.Широта2 =  стррКоординаты.Широта;
		стррКоординаты.Долгота2 =  стррКоординаты.Долгота;
		стррКоординаты.Широта = Число(СтрМ.Широта);
		стррКоординаты.Долгота = Число(СтрМ.Долгота);
		
		СтрМ.СозданаВТТ = ПолучитьРасстояние(СтрМ.Партнер, стррКоординаты);
		
		СтрМ.Широта2 =  стррКоординаты.Широта2;
		СтрМ.Долгота2 =  стррКоординаты.Долгота2;
		
	КонецЦикла;
	
	
	РеквизитОбработки = "_Фотографии";
	ТаблицаФотографий = ОбработкаОбъект.ВОТЗЗагрузить(РеквизитОбработки);
	
	ТаблицаФотографий.Колонки.Добавить("УИД",ОписаниеТиповС);
	ТаблицаФотографий.Колонки.Добавить("ВладелецУИД",ОписаниеТиповС);
	
	Для Каждого СтрМ Из ТаблицаФотографий Цикл
		
		СтрМ.УИД = Строка(СтрМ.ID);
		СтрМ.ВладелецУИД = Строка(СтрМ.ВладелецФайла);
		
	КонецЦикла;
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаМерчендайзинга.УИД как ID,
	|	ТаблицаМерчендайзинга.Дата как ДатаСоздания,
	|	ТаблицаМерчендайзинга.Номер,
	|	ТаблицаМерчендайзинга.Менеджер как Агент,
	|	ТаблицаМерчендайзинга.ДокументМерчендайзинга,  
	|	ТаблицаМерчендайзинга.ДокументМерчендайзингаПредставление как ВладелецФайлаПредставление,   
	|	ТаблицаМерчендайзинга.Долгота,
	|	ТаблицаМерчендайзинга.Долгота2,	
	|	ТаблицаМерчендайзинга.Широта2,
	|	ТаблицаМерчендайзинга.Статус,	
	|	ТаблицаМерчендайзинга.Контрагент,
	|	ТаблицаМерчендайзинга.СозданаВТТ,
	|	ТаблицаМерчендайзинга.Партнер как ТорговаяТочка,
	|	ТаблицаМерчендайзинга.Широта
	|ПОМЕСТИТЬ ВТ_Мерчендайзинг
	|ИЗ
	|	&ТаблицаМерчендайзинга КАК ТаблицаМерчендайзинга
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФотографий.УИД как ID,
	|	ТаблицаФотографий.ВладелецУИД КАК ВладелецФайла,
	|	ТаблицаФотографий.Наименование КАК ФотоПредставление,
	|	ТаблицаФотографий.Расширение КАК Расширение,
	|	ТаблицаФотографий.ХранимыйФайл КАК ХранимыйФайл,
	|	ТаблицаФотографий.Статус,
	|	ТаблицаФотографий.Описание
	|ПОМЕСТИТЬ ВТ_ТаблицаФотографий
	|ИЗ
	|	&ТаблицаФотографий КАК ТаблицаФотографий
	|ГДЕ
	|	ТаблицаФотографий.Статус <> 4
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Мерчендайзинг.ID,
	|	ВТ_Мерчендайзинг.ДатаСоздания,
	|	ВТ_Мерчендайзинг.Номер,
	|	ВТ_Мерчендайзинг.Долгота,
	|	ВТ_Мерчендайзинг.Долгота2,
	|	ВТ_Мерчендайзинг.ДокументМерчендайзинга,
	|	ВТ_ТаблицаФотографий.ВладелецФайла,
	|	ВТ_Мерчендайзинг.Контрагент,
	|	ВТ_Мерчендайзинг.Агент, 
	|	ВТ_Мерчендайзинг.ТорговаяТочка,
	|	ВТ_Мерчендайзинг.Широта,
	|	ВТ_Мерчендайзинг.Широта2,	
	|	ВТ_Мерчендайзинг.СозданаВТТ,	 
	|	ВТ_ТаблицаФотографий.ID КАК Фото,
	|	ВТ_ТаблицаФотографий.ВладелецФайла,
	|	ВТ_ТаблицаФотографий.ФотоПредставление,
	|	ВТ_ТаблицаФотографий.Расширение,
	|	ВТ_ТаблицаФотографий.ХранимыйФайл,
	|	ВТ_Мерчендайзинг.ТорговаяТочка.Представление,
	|	ВТ_Мерчендайзинг.ВладелецФайлаПредставление, 
	|	ВТ_Мерчендайзинг.Статус,   
	|	ВТ_ТаблицаФотографий.Описание
	|ИЗ
	|	ВТ_Мерчендайзинг КАК ВТ_Мерчендайзинг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаФотографий КАК ВТ_ТаблицаФотографий
	|		ПО ВТ_Мерчендайзинг.ID = ВТ_ТаблицаФотографий.ВладелецФайла
	|ГДЕ
	|	[УсловияОтбора]
	|
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Фото)
	|ПО
	|	[Сортировка]
	|
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловияОтбора]", ТекстУсловияОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Сортировка]", ТекстСортировки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаМерчендайзинга",ТаблицаМерчендайзинга);
	Запрос.УстановитьПараметр("ТаблицаФотографий",ТаблицаФотографий);
	
	Для Каждого Элемент Из СтррПараметры Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
	КонецЦикла;
	
	Если ПараметрыФОрмирования.Свойство("Уровень2") Тогда
		Запрос.УстановитьПараметр("Документ", ПараметрыФОрмирования.Уровень2);	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	ДЗДанныеОтчета = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// проверяем - не превышено ли в выборке количество фотографий
	ВыводитьФотографии = ?(ОграничениеНаКоличествоФото, ДЗДанныеОтчета.Строки.Итог("Фото", Ложь) <= МаксКоличествоФото, Истина);
	
	СтрокиГруппировки1 = ДЗДанныеОтчета.Строки;
	СтрокиГруппировки1.Сортировать("Фото Убыв", Истина);
	МаксимальноеКоличествоКолонок = 0;
	Для каждого Строка Из СтрокиГруппировки1 Цикл
		МаксимальноеКоличествоКолонок = Макс(МаксимальноеКоличествоКолонок, Строка.Строки[0].Фото);
	КонецЦикла;
	СтрокаСортировки = "";
	Для каждого ТекГруппировка Из Группировки Цикл
		СтрокаСортировки = СтрокаСортировки + ТекГруппировка.Значение + " Возр, ";
	КонецЦикла;
	
	Для каждого СтрокаГруппировка1 Из ДЗДанныеОтчета.Строки Цикл
		
		Для каждого СтрокаГруппировка2 Из СтрокаГруппировка1.Строки Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ДокументМерчендайзинга", СтрокаГруппировка2.ДокументМерчендайзинга);
			
			НайденныеСтроки = ТаблицаМерчендайзинга.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаГруппировка2.ДатаСоздания = НайденныеСтроки.Получить(0).Дата;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокаСортировки = СтрокаСортировки;
	СтрокиГруппировки1.Сортировать("ДатаСоздания Убыв", Истина); 
	
	
	Если СтрНайти(ПараметрыФормирования.Действие, "Дерево") <> 0 Тогда
		
		Дерево = Новый ДеревоЗначений;
		Дерево.Колонки.Добавить("Данные");
		Дерево.Колонки.Добавить("ID");
		Дерево.Колонки.Добавить("КартинкаСтрок");
		
		Для каждого СтрокаГруппировка1 Из ДЗДанныеОтчета.Строки Цикл
			
			ПараметрыГруппировки1 = ПараметрыГруппировки(СтрокаГруппировка1, Группировки[0].Значение, Тип("СправочникСсылка.Партнеры"), Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки);
			ОтчетУровень1 = Дерево.Строки.Добавить();
			ОтчетУровень1.Данные = ПараметрыГруппировки1.Значение;
			
			Для каждого СтрокаГруппировка2 Из СтрокаГруппировка1.Строки Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("ID", Новый УникальныйИдентификатор(СтрокаГруппировка2.ВладелецФайла));
				
				НайденныеСтроки = ТаблицаМерчендайзинга.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					СтрокаГруппировка2.ДатаСоздания = НайденныеСтроки.Получить(0).Дата;
					СтрокаГруппировка2.ВладелецФайлаПредставление =  НайденныеСтроки.Получить(0).ДокументМерчендайзинга;
					СтрокаГруппировка2.Статус = НайденныеСтроки.Получить(0).Статус;
					   
				КонецЕсли;
				
			КонецЦикла;
			
			
			Для каждого СтрокаГруппировка2 Из СтрокаГруппировка1.Строки Цикл
				
				ПараметрыГруппировки2 = ПараметрыГруппировки(СтрокаГруппировка2, Группировки[1].Значение, Тип("СправочникСсылка.Партнеры"), Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки);
				
				ОтчетУровень2 = ОтчетУровень1.Строки.Добавить();
				ОтчетУровень2.Данные = ПараметрыГруппировки2.Представление;
				ОтчетУровень2.ID = СтрокаГруппировка2.ВладелецФайла;
				
				Если СтрокаГруппировка2.Статус = 0 Тогда
					ОтчетУровень2.КартинкаСтрок =  9;
				ИначеЕсли СтрокаГруппировка2.Статус = 1 Тогда
					ОтчетУровень2.КартинкаСтрок =  7;
				ИначеЕсли СтрокаГруппировка2.Статус = 2 Тогда
					ОтчетУровень2.КартинкаСтрок =  8;					
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;
		
		//ДеревоГруппировок = Новый Структура("ЗаголовокДереваГруппировок, ДеревоГруппировок", ТекстСортировкиПредставление, Дерево);
		//ПоместитьВоВременноеХранилище(ДеревоГруппировок, КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИдентификаторХранилищаДополнительногоРезультата").Значение);
		ЗначениеВРеквизитФормы(Дерево,"СоставОтчета");
		
		
	КонецЕсли;
	
	Если СтрНайти(ПараметрыФормирования.Действие, "ТабличныйДокумент") <> 0 Тогда
		
		КаталогВремФайлов = КаталогВременныхФайлов();
		ДополнитьСлешВПуть(КаталогВремФайлов);
		КаталогФото = КаталогВремФайлов + "Photos_AgentPlusUD\";
		КаталогУменьшенныхФото = КаталогФото + "SmallPhotos\";
		СоздатьКаталог(КаталогУменьшенныхФото);
		
		
		ТабДокумент = ДокументРезультат;
		Макет = ОбработкаОбъект.ПолучитьМакет("ФотоОтчет");
		
		
		ЛинияГраницы = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, Ложь);
		
		ТабДокумент.НачатьАвтогруппировкуСтрок();
		
		ОбластьПустаяЯчейкаФото			   = Макет.ПолучитьОбласть("СтрокаПустоеФото|Фото1");	
		ОбластьСтрокаГруппировки1Краткая   = Макет.ПолучитьОбласть("СтрокаГруппировки1|Фото1");
		ОбластьСтрокаГруппировки2Краткая   = Макет.ПолучитьОбласть("СтрокаГруппировки2|Фото1");
		ОбластьСтрокаГруппировки2Дополнительная   = Макет.ПолучитьОбласть("СтрокаГруппировки2Дополнительная|Фото1");
		ОбластьСтрокаГруппировки1Фото	   = Макет.ПолучитьОбласть("СтрокаГруппировки2Фото|Фото1");
		ОбластьПустаяСтрока				   = Макет.ПолучитьОбласть("СтрокаПустая|Фото1");
		//((OM_180313 
		ОбластьСтрокаГруппировкиКатегория  = Макет.ПолучитьОбласть("СтрокаКатегория|Фото1");
		//))OM_180313 
		
		ЦветРамки = Новый Цвет(160,160,160);
		
		ТипСсылкаТТ = Тип("СправочникСсылка.Партнеры");
		ВидКИАдресаТТ = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
		ДанныеФото = Новый Структура("ВыводитьФотографии, КартинкаФотоНеНайдено, СозданаВТТ, ДатаСоздания, Фото, ФотоПредставление, ДокументМерчендайзинга, ДокументМерчендайзингаПредставление, Расширение, Описание, Широта, Широта2, Долгота,Долгота2, ХранимыйФайл, ВладелецФайла", 
		ВыводитьФотографии,БиблиотекаКартинок.Предупреждение32);
		
		ПерваяСтрока = Истина;
		
		КоличествоКолонок= ПолучитьПараметрОтчета(КомпоновщикНастроек, ИдентификаторыПараметров, "КоличествоКолонок").Значение;
		
		Для каждого СтрокаГруппировка1 Из ДЗДанныеОтчета.Строки Цикл
			
			ПараметрыГруппировки1 = ПараметрыГруппировки(СтрокаГруппировка1, Группировки[0].Значение, ТипСсылкаТТ, ВидКИАдресаТТ);
			ОбластьСтрокаГруппировки1Краткая.Параметры.ПечГруппировка1Иерархия = ПараметрыГруппировки1.Представление;
			ОбластьСтрокаГруппировки1Краткая.Параметры.Группировка1Иерархия = ПараметрыГруппировки1.Значение;
			ТабДокумент.Вывести(ОбластьСтрокаГруппировки1Краткая, 0);
			ПерваяСтрока = Истина;
			
			ОбластьДляОбъединения = ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,1,ТабДокумент.ВысотаТаблицы, КоличествоКолонок*ОбластьСтрокаГруппировки1Краткая.ШиринаТаблицы);
			ОбластьДляОбъединения.Объединить();
			
			Для каждого СтрокаГруппировка2 Из СтрокаГруппировка1.Строки Цикл
				
				ТабДокумент.Вывести(ОбластьПустаяСтрока, 1);
				ОбластьДляОбъединения = ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,1,ТабДокумент.ВысотаТаблицы, КоличествоКолонок*ОбластьПустаяСтрока.ШиринаТаблицы);
				ОбластьДляОбъединения.Объединить();
				
				ПараметрыГруппировки2 = ПараметрыГруппировки(СтрокаГруппировка2, Группировки[1].Значение, ТипСсылкаТТ, ВидКИАдресаТТ);
				
				СтрокаДок = ТаблицаМерчендайзинга.Найти(Новый УникальныйИдентификатор(ПараметрыГруппировки2.Значение),"ID"); 
				
				ОбластьСтрокаГруппировки2Краткая.Параметры.ПечГруппировка2Иерархия = СтрокаДок.ДокументМерчендайзингаПредставление;
				
				Структура = Новый Структура;
				Структура.Вставить("ДокументID", ПараметрыГруппировки2.Значение);

				ОбластьСтрокаГруппировки2Краткая.Параметры.Группировка2Иерархия = Структура;
				ТабДокумент.Вывести(ОбластьСтрокаГруппировки2Краткая, 1);
				ПерваяСтрока = Истина;
				
				ОбластьДляОбъединения = ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,1,ТабДокумент.ВысотаТаблицы, КоличествоКолонок*ОбластьСтрокаГруппировки2Краткая.ШиринаТаблицы);
				ОбластьДляОбъединения.Объединить();
				
				Если ЗначениеЗаполнено(ПараметрыГруппировки2.ДополнительноеПредставление) Тогда
					
					ОбластьСтрокаГруппировки2Дополнительная.Параметры.ПечГруппировка2Дополнительная = ПараметрыГруппировки2.ДополнительноеПредставление;
					ОбластьСтрокаГруппировки2Дополнительная.Параметры.Группировка2Дополнительная = ПараметрыГруппировки2.ДополнительноеПредставление;
					ТабДокумент.Вывести(ОбластьСтрокаГруппировки2Дополнительная, 1);
					ОбластьДляОбъединения = ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,1,ТабДокумент.ВысотаТаблицы, КоличествоКолонок*ОбластьСтрокаГруппировки2Краткая.ШиринаТаблицы);
					ОбластьДляОбъединения.Объединить();
					
				КонецЕсли;
				
				Если ВыводитьКатегорииФотографий Тогда
					
					Для каждого СтрокаГруппировкаКатегорияФото Из СтрокаГруппировка2.Строки Цикл
						
						ТабДокумент.Вывести(ОбластьПустаяСтрока, 2);
						ОбластьДляОбъединения = ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,1,ТабДокумент.ВысотаТаблицы, КоличествоКолонок*ОбластьПустаяСтрока.ШиринаТаблицы);
						ОбластьДляОбъединения.Объединить();
						
						ОбластьСтрокаГруппировкиКатегория.Параметры.КатегорияФото = СтрокаГруппировкаКатегорияФото.КатегорияФотографии;
						ТабДокумент.Вывести(ОбластьСтрокаГруппировкиКатегория, 2);
						
						ОбластьДляОбъединения = ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,1,ТабДокумент.ВысотаТаблицы, КоличествоКолонок*ОбластьСтрокаГруппировкиКатегория.ШиринаТаблицы);
						ОбластьДляОбъединения.Объединить();
						ПерваяСтрока = Истина;
						
						ФотоВСтроке = СтрокаГруппировкаКатегорияФото.Фото;
						Индекс = 0;
						Пока Индекс <= (ФотоВСтроке - 1) Цикл	
							Первый = Истина;
							ФотографийВыведеноВСтроке = 0;
							Для Сч = 1 По КоличествоКолонок Цикл
								ОбластьОснова = Макет.ПолучитьОбласть("СтрокаГруппировки2Фото|Фото1");
								Строка = СтрокаГруппировкаКатегорияФото.Строки[Индекс];
								ЗаполнитьЗначенияСвойств(ДанныеФото, Строка);
								ДанныеФото.ДатаСоздания = Формат(Строка["ДатаСоздания"],"ДФ=""дд.ММ.гггг""");
								ЗаполнитьОснову(ОбластьОснова, ДанныеФото);
								Если Первый Тогда
									ДобавитьГраницы(ОбластьОснова, ЛинияГраницы, ЦветРамки, Ложь, ?(ПерваяСтрока, Ложь, Истина), Ложь, Ложь);
									ТабДокумент.Вывести(ОбластьОснова,3);
									Первый = Ложь;
								Иначе
									ДобавитьГраницы(ОбластьОснова, ЛинияГраницы, ЦветРамки, Истина, ?(ПерваяСтрока, Ложь, Истина), Ложь, Ложь);
									ТабДокумент.Присоединить(ОбластьОснова);
									
								КонецЕсли;
								Индекс = Индекс + 1;
								ФотографийВыведеноВСтроке = ФотографийВыведеноВСтроке + 1;
								Если Индекс > (ФотоВСтроке - 1) Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Для а = ФотографийВыведеноВСтроке + 1 По КоличествоКолонок Цикл
								ДобавитьГраницы(ОбластьПустаяЯчейкаФото, ЛинияГраницы, ЦветРамки, Истина, ?(ПерваяСтрока, Ложь, Истина), Ложь, Ложь);
								ТабДокумент.Присоединить(ОбластьПустаяЯчейкаФото);
							КонецЦикла;
							
							ПерваяСтрока = Ложь;
							
						КонецЦикла;
						
					КонецЦикла;
					
				Иначе 
					КоличествоКолонок= ПолучитьПараметрОтчета(КомпоновщикНастроек, ИдентификаторыПараметров, "КоличествоКолонок").Значение;
					ФотоВСтроке = СтрокаГруппировка2.Фото;
					Индекс = 0;
					Пока Индекс <= (ФотоВСтроке - 1) Цикл	
						Первый = Истина;
						ФотографийВыведеноВСтроке = 0;
						Для Сч = 1 По КоличествоКолонок Цикл
							ОбластьОснова = Макет.ПолучитьОбласть("СтрокаГруппировки2Фото|Фото1");
							Строка = СтрокаГруппировка2.Строки[Индекс];
							ЗаполнитьЗначенияСвойств(ДанныеФото, Строка);
							ДанныеФото.ДатаСоздания = Формат(Строка["ДатаСоздания"],"ДФ=""дд.ММ.гггг""");
							ЗаполнитьОснову(ОбластьОснова, ДанныеФото);
							Если Первый Тогда
								ДобавитьГраницы(ОбластьОснова, ЛинияГраницы, ЦветРамки, Ложь, ?(ПерваяСтрока, Ложь, Истина), Ложь, Ложь);
								ТабДокумент.Вывести(ОбластьОснова,3);
								Первый = Ложь;
							Иначе
								ДобавитьГраницы(ОбластьОснова, ЛинияГраницы, ЦветРамки, Истина, ?(ПерваяСтрока, Ложь, Истина), Ложь, Ложь);
								ТабДокумент.Присоединить(ОбластьОснова);
							КонецЕсли;
							Индекс = Индекс + 1;
							ФотографийВыведеноВСтроке = ФотографийВыведеноВСтроке + 1;
							Если Индекс > (ФотоВСтроке - 1) Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Для а = ФотографийВыведеноВСтроке + 1 По КоличествоКолонок Цикл
							ДобавитьГраницы(ОбластьПустаяЯчейкаФото, ЛинияГраницы, ЦветРамки, Истина, ?(ПерваяСтрока, Ложь, Истина), Ложь, Ложь);
							ТабДокумент.Присоединить(ОбластьПустаяЯчейкаФото);
						КонецЦикла;
						ПерваяСтрока = Ложь;
					КонецЦикла;
				КонецЕсли;  // Если ВыводитьКатегорииФотографий Тогда
				
			КонецЦикла;  // Для каждого СтрокаГруппировка2 Из СтрокаГруппировка1.Строки Цик
			
		КонецЦикла; // Для каждого СтрокаГруппировка1 Из ДЗДанныеОтчета.Строки Цикл
		
		
		ТабДокумент.ЗакончитьАвтогруппировкуКолонок();
		
		ТабДокумент.ОтображатьСетку		= Ложь;
		ТабДокумент.Защита 				= Истина;
		ТабДокумент.ТолькоПросмотр 		= Истина;
		ТабДокумент.ОтображатьЗаголовки = Ложь;
		ТабДокумент.ФиксацияСверху = ОбластьСтрокаГруппировки1Краткая.ВысотаТаблицы;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресПартнераСервер(Партнер, стррАдрес)
	
	стррАдрес.Широта  = 0;
	стррАдрес.Долгота = 0;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		стррАдрес.Адрес = "";
		Возврат;
	КонецЕсли; 
	
	АдресПартнера = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Партнер, Справочники.ВидыКонтактнойИнформации.АдресПартнера);	
	
	Если РеквизитФормыВЗначение("Отчет").ПолучитьКоординатыПартнера(Партнер, стррАдрес) Тогда
		Если ЗначениеЗаполнено(АдресПартнера) Тогда
			стррАдрес.Адрес = АдресПартнера;
		Иначе
			стррАдрес.Адрес = СтрШаблон_(НСтр("ru = '(ш/д: %1; %2)'"), стррАдрес.Широта, стррАдрес.Долгота);
		КонецЕсли; 
	Иначе
		стррАдрес.Адрес = АдресПартнера;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПараметраОтчетаСПроверкой(КомпоновщикНастроек, ИдентификаторыПараметров, ИмяПараметра, Значение = Неопределено, УсловиеЗапроса = Неопределено)
	
	СтррРезультат = ПолучитьПараметрОтчета(КомпоновщикНастроек, ИдентификаторыПараметров, ИмяПараметра);
	
	Если ТипЗнч(СтррРезультат) <> Тип("Структура") Тогда
		Возврат Ложь;
	ИначеЕсли Не СтррРезультат.Использование Тогда
		Возврат Ложь;
	Иначе
		Значение = СтррРезультат.Значение;
		Если УсловиеЗапроса <> Неопределено Тогда
			УсловиеЗапроса = ПолучитьВыражениеУсловияДляЗапроса(СтррРезультат.ВидСравнения, УсловиеЗапроса);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьВыражениеУсловияДляЗапроса(ВидСравнения, ПравыйОперанд) Экспорт
	
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Результат = " = " + ПравыйОперанд;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Результат = " <> " + ПравыйОперанд;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Результат = " В (" + ПравыйОперанд + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Результат = " НЕ В (" + ПравыйОперанд + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Результат = " В ИЕРАРХИИ (" + ПравыйОперанд + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Результат = " НЕ В ИЕРАРХИИ (" + ПравыйОперанд + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Результат = " <> NULL";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Результат = " = NULL";
	Иначе
		Результат = " = " + ПравыйОперанд;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрОтчета(КомпоновщикНастроек, ИдентификаторыПараметров, ИмяПараметра)
	
	Если Не ИдентификаторыПараметров.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено; // параметр не задействован
	КонецЕсли;
	
	СтррРезультат = Новый Структура("Использование,Значение,ВидСравнения,ПредставлениеСравнения", Ложь);
	
	Элемент = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторыПараметров[ИмяПараметра]);
	
	Если Элемент <> Неопределено Тогда
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Элемент.Использование Тогда
				СтррРезультат.Использование = Истина;
				СтррРезультат.Значение 		= Элемент.ПравоеЗначение;
				СтррРезультат.ВидСравнения 	= Элемент.ВидСравнения;
				ПредставлениеСравнения = НРег(Строка(Элемент.ВидСравнения));
				СтррРезультат.ПредставлениеСравнения = ПредставлениеСравнения + ?(Найти(ПредставлениеСравнения,"спис")<>0, ": ", " ");
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если Элемент.Использование Тогда
				СтррРезультат.Использование = Истина;
				СтррРезультат.Значение 		= Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;			
	
	Возврат СтррРезультат;	
	
КонецФункции


&НаСервере
Процедура ДополнитьСлешВПуть(Каталог) Экспорт
	
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
КонецПроцедуры //ДополнитьСлешВПуть

&НаСервере
Функция ПараметрыГруппировки(СтрокаГруппировки, ИмяГруппировки, ТипСсылкаТорговойТочки, ВидКонтактнойИнформации)
	
	ЗначениеГруппировки = СтрокаГруппировки[ИмяГруппировки];
	ПредставлениеЗначенияГруппировки = СтрокаГруппировки[ИмяГруппировки + "Представление"];
	ДополнительноеПредставление = "";
	Если ТипЗнч(ЗначениеГруппировки) = ТипСсылкаТорговойТочки Тогда
		//ПредставлениеЗначенияГруппировки = ПредставлениеЗначенияГруппировки + "," + Символы.ПС + УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначениеГруппировки, ВидКонтактнойИнформации);
		ДополнительноеПредставление = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначениеГруппировки, ВидКонтактнойИнформации);
	КонецЕсли;
	
	Возврат Новый Структура("Значение, Представление, ДополнительноеПредставление", ЗначениеГруппировки, ПредставлениеЗначенияГруппировки, ДополнительноеПредставление);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОснову(ОбластьОснова, ДанныеФото)
	
	НетКоординат = Ложь;
	
	ОбластьОснова.Параметры.Документ = ДанныеФото.ФотоПредставление;
	
	Если ДанныеФото.Широта2 = "0" Или
		ДанныеФото.Долгота2 = "0" Тогда  
		
		НетКоординат = Истина;
		
		ОбластьОснова.Области.Расстояние.Картинка = БиблиотекаКартинок.ВниманиеКрасный;
		ОбластьОснова.Области.Расстояние.Примечание.Текст  = "Не заданы координаты торговой точки. ";
		
	КонецЕсли;
	
	Если ДанныеФото.Широта = "0" или
		ДанныеФото.Долгота  = "0" Тогда  
		
		НетКоординат = Истина;

		ОбластьОснова.Области.Расстояние.Картинка = БиблиотекаКартинок.ВниманиеКрасный;
		ОбластьОснова.Области.Расстояние.Примечание.Текст  =  ОбластьОснова.Области.Расстояние.Примечание.Текст + " Нет координат фотографии к документу. ";
	КонецЕсли;
	
	Если ДанныеФото.СозданаВТТ = Ложь
		И НетКоординат  = Ложь Тогда
		
		ОбластьОснова.Области.Расстояние.Картинка = БиблиотекаКартинок.Предупреждение;	
		ОбластьОснова.Области.Расстояние.Примечание.Текст  = ОбластьОснова.Области.Расстояние.Примечание.Текст + "Фотография к документу создана за пределами торговой точки." +
					Символы.ПС + "Допустимый радиус удалённости от торговой точки - " + Строка(МаксимальноеРасстояниеОтТТ) + " м";		
		
	КонецЕсли;
	
	ЭлементФото = ДанныеФото.Фото;
	
	Если НЕ ДанныеФото.ВыводитьФотографии Тогда
		ПодробноеОписание = НСтр("ru = 'Документ: %1'") + Символы.ПС + НСтр("ru = 'Наименование: %2'");
		ПодробноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПодробноеОписание, ДанныеФото.ДокументПредставление, ДанныеФото.ФотоПредставление);		 
		ОбластьОснова.Параметры.ПодробноеОписание = ПодробноеОписание;
		ОбластьОснова.Параметры.РасшифровкаФото = ЭлементФото;
	Иначе
		//проверка на тип файла
		РасширениеФайла = НРег(СтрЗаменить(ДанныеФото.Расширение, ".", "")); // если с точкой, то убираем её
		Если СтрНайти(РасширенияФайловИзображений(), РасширениеФайла) <> 0 Тогда
			Попытка
				файл = Новый Файл(ПодкаталогФотграфий + ДанныеФото.ХранимыйФайл);
				ДанныеКартинки = Новый ДвоичныеДанные(ПодкаталогФотграфий + ДанныеФото.ХранимыйФайл);
				
				//ДанныеКартинки = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				Если ТипЗнч(ДанныеКартинки) = Тип("ДвоичныеДанные") Тогда	
					ИмяУменьшеннойКартинки = УменьшеннаяКартинка(ДанныеФото.Фото, ДанныеКартинки, файл.ПолучитьВремяИзменения());
					Если ТипЗнч(ИмяУменьшеннойКартинки) = Тип("Строка") Тогда
						ОбластьОснова.Рисунки.ФотоКДокументу.Картинка = Новый Картинка(ИмяУменьшеннойКартинки);
					Иначе 
						ОбластьОснова.Рисунки.ФотоКДокументу.Картинка = Новый Картинка(ДанныеКартинки);
					КонецЕсли;
					ОбластьОснова.Параметры.РасшифровкаФото = ДанныеФото.Фото; //расшифровка
				КонецЕсли;
			Исключение
				ОбластьОснова.Рисунки.ФотоКДокументу.Картинка = ДанныеФото.КартинкаФотоНеНайдено;
				ОбластьОснова.Параметры.РасшифровкаФото = НСтр("ru = 'Фотография не обнаружена"); //расшифровка
			КонецПопытки;
		ИначеЕсли ЗначениеЗаполнено(ЭлементФото) И ЗначениеЗаполнено(РасширениеФайла) Тогда
			ОбластьОснова.Рисунки.ФотоКДокументу.Картинка = БиблиотекаКартинок.Предупреждение32;
			Наименование = ЭлементФото.Наименование + "." + ЭлементФото.Расширение;
			СтрРасшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл ""%1"" не является фотографией.'"), Наименование);
			ОбластьОснова.Параметры.РасшифровкаФото = СтрРасшифровка; //расшифровка
		КонецЕсли;
	КонецЕсли;
	Комментарий = ДанныеФото.Описание;
	ОбластьОснова.Параметры.Комментарий = ?(СтрДлина(Комментарий) > 20, Лев(Комментарий, 20) + "...", Комментарий);
	КомментарийРасш = Новый Структура;
	КомментарийРасш.Вставить("Описание",ДанныеФото.Описание); 
	ОбластьОснова.Параметры.КомментарийРасш = КомментарийРасш;

КонецПроцедуры

&НаСервере
Функция ПолучитьРасстояние(ТорговаяТочка, Данные)
	
	Результат =Ложь;
	//LatLong	
	ТТШирота 	= Данные.Широта;
	ТТДолгота 	= Данные.Долгота;	
	// Константа определения максимально допустимого расстояния между местом создания документа и торговой точкой
	Радиус = МаксимальноеРасстояниеОтТТ;  
	
	ДокШирота = Данные.Широта2;
	ДокДолгота = Данные.Долгота2;
	
	
	Если ТТШирота = 0 
		Или ТТДолгота = 0
		Или ДокШирота = 0
		Или ДокДолгота = 0 
		Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	
	Расстояние = РасстояниеМеждуТочками(КонвертироватьNMEAWGS84(ДокШирота),
	КонвертироватьNMEAWGS84(ДокДолгота),
	КонвертироватьNMEAWGS84(ТТШирота),
	КонвертироватьNMEAWGS84(ТТДолгота));
	
	Если Радиус > Расстояние Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КонвертироватьNMEAWGS84(Значение) Экспорт
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	Возврат Окр(Результат, 6);
КонецФункции

&НаСервере
Функция РасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong) Экспорт 
	//Pi = 3.1415926535897932;
	
	// Передаваемые широта/долгота в градусах и сотых долях 
	//StartLat: double; // Начальная широта 
	//StartLong: double; // Начальная долгота 
	//EndLat: double; // Конечная широта 
	//EndLong: double; // Конечная долгота 
	
	//// Переменные, используемые для вычисления смещения и расстояния 
	//fPhimean: Double; // Средняя широта 
	//fdLambda: Double; // Разница между двумя значениями долготы 
	//fdPhi: Double; // Разница между двумя значениями широты 
	//fAlpha: Double; // Смещение 
	//fRho: Double; // Меридианский радиус кривизны 
	//fNu: Double; // Поперечный радиус кривизны 
	//fR: Double; // Радиус сферы Земли 
	//fz: Double; // Угловое расстояние от центра сфероида 
	//fTemp: Double; // Временная переменная, использующаяся в вычислениях 
	//Distance: Double; // Вычисленное расстояния в метрах 
	//Bearing: Double; // Вычисленное от и до смещение 
	
	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	КонецЕсли;
	
	// Константы, используемые для вычисления смещения и расстояния 
	D2R = 0.017453; // Константа для преобразования градусов в радианы 
	R2D = 57.295781; // Константа для преобразования радиан в градусы 
	a = 6378137.0; // Основные полуоси 
	b = 6356752.314245; // Неосновные полуоси 
	e2 = 0.006739496742337; // Квадрат эксцентричности эллипсоида 
	f = 0.003352810664747; // Выравнивание эллипсоида 
	
	fdLambda = (StartLong - EndLong) * D2R; 
	fdPhi = (StartLat - EndLat) * D2R; 
	fPhimean = ((StartLat + EndLat) / 2.0) * D2R; 
	
	// Вычисляем меридианные и поперечные радиусы кривизны средней широты 
	fTemp = 1 - e2 * (Pow(Sin(fPhimean), 2)); 
	fRho = (a * (1 - e2)) / Pow(fTemp, 1.5); 
	fNu = a / (Sqrt(1 - e2 * (Sin(fPhimean) * Sin(fPhimean)))); 
	
	// Вычисляем угловое расстояние 
	fz = Sqrt(Pow(Sin(fdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(fdLambda / 2.0), 2)); 
	
	fz = 2 * ASin(fz); 
	
	// Вычисляем смещение 
	fAlpha = Cos(EndLat * D2R) * Sin(fdLambda) * 1 / Sin(fz);
	
	Если fAlpha > 1 Тогда
		fAlpha = 1;
	ИначеЕсли fAlpha < -1 Тогда
		fAlpha = -1;
	КонецЕсли;
	
	fAlpha = ASin(fAlpha); 
	
	// Вычисляем радиус Земли 
	fR = (fRho * fNu) / ((fRho * Pow(Sin(fAlpha), 2)) + (fNu * Pow(Cos(fAlpha), 2))); 
	
	// Получаем смещение и расстояние 
	Distance = (fz * fR); 
	
	//AbsAD = fAlpha * R2D; 
	//if AbsAD < 0 then 
	//    AbsAD = AbsAD * (-1); 
	//endif; 
	// 
	//if ((StartLat < EndLat) and (StartLong < EndLong)) then 
	//    Bearing =  AbsAD; 
	//elsif ((StartLat < EndLat) and (StartLong > EndLong)) then 
	//    Bearing = 360 - AbsAD; 
	//elsif ((StartLat > EndLat) and (StartLong > EndLong)) then 
	//    Bearing = 180 + AbsAD; 
	//elsif ((StartLat > EndLat) and (StartLong < EndLong)) then 
	//    Bearing = 180 - AbsAD; 
	//endif; 
	
	Возврат Distance;
	
КонецФункции


&НаСервере
Функция РасширенияФайловИзображений() Экспорт	
	Возврат "*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf";		
КонецФункции

&НаСервере
Функция УменьшеннаяКартинка(ИДКартинки, ДанныеКартинки, ДатаМодификацииКартинки)
	
	ИмяУменьшеннойКартинки = КаталогУменьшенныхФото + ИДКартинки;
	УменьшеннаяКартинка = Новый Файл(ИмяУменьшеннойКартинки);
	Если УменьшеннаяКартинка.Существует() Тогда
		Если ДатаМодификацииКартинки = УменьшеннаяКартинка.ПолучитьУниверсальноеВремяИзменения() Тогда 
			Возврат ИмяУменьшеннойКартинки;
		Иначе 
			Возврат НоваяУменьшеннаяКартинка(ИДКартинки, ДанныеКартинки, ДатаМодификацииКартинки);
		КонецЕсли;
	Иначе 
		Возврат НоваяУменьшеннаяКартинка(ИДКартинки, ДанныеКартинки, ДатаМодификацииКартинки);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НоваяУменьшеннаяКартинка(ИДКартинки, ДанныеКартинки, ДатаМодификацииКартинки)
	
	Попытка
		
		ИмяКартинки = КаталогФото + ИДКартинки;
		ДанныеКартинки.Записать(ИмяКартинки);
		
		Если ТипЗнч(ОбъектФайлКартинки) <> Тип("COMОбъект") Тогда
			ОбъектФайлКартинки = Новый COMОбъект("WIA.ImageFile");  // Создаем объект
		КонецЕсли;
		
		ОбъектФайлКартинки.LoadFile(ИмяКартинки);
		
		Если ТипЗнч(ОбъектОбработкаКартинки) <> Тип("COMОбъект") Тогда
			ОбъектОбработкаКартинки = Новый COMОбъект("WIA.ImageProcess");  // Создаем объект
			
			// Добавляем фильтр, устанавливаем его параметры.
			ОбъектОбработкаКартинки.Filters.Add(ОбъектОбработкаКартинки.FilterInfos("Scale").FilterID);
			ОбъектОбработкаКартинки.Filters(1).Properties("MaximumWidth").Value  = 100;
			ОбъектОбработкаКартинки.Filters(1).Properties("MaximumHeight").Value = 100;
			ОбъектОбработкаКартинки.Filters(1).Properties("PreserveAspectRatio").Value = Истина;
			
		КонецЕсли;
		
		ОбъектФайлКартинки = ОбъектОбработкаКартинки.Apply(ОбъектФайлКартинки);
		
		ИмяУменьшеннойКартинки = КаталогУменьшенныхФото + ИДКартинки;
		СтараяКартинка = Новый Файл(ИмяУменьшеннойКартинки);
		Если СтараяКартинка.Существует() Тогда
			УдалитьФайлы(ИмяУменьшеннойКартинки);
		КонецЕсли;
		ОбъектФайлКартинки.SaveFile(ИмяУменьшеннойКартинки);
		
		Попытка
			УдалитьФайлы(ИмяКартинки);
		Исключение
			
		КонецПопытки;
		
		УменьшеннаяКартинка = Новый Файл(ИмяУменьшеннойКартинки);
		Если УменьшеннаяКартинка.Существует() Тогда
			УменьшеннаяКартинка.УстановитьУниверсальноеВремяИзменения(ДатаМодификацииКартинки);
			Возврат ИмяУменьшеннойКартинки;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//((OM_180313 
&НаСервере
Процедура ДобавитьГраницы(ТабличныйДокумент, Линия, ЦветРамки = Неопределено, Лево, Верх, Право, Низ)
	
	ОбластьТабличногоДокумента = ТабличныйДокумент.Область();
	Если ЦветРамки <> Неопределено Тогда
		ОбластьТабличногоДокумента.ЦветРамки = ЦветРамки;
	КонецЕсли;
	ОбластьТабличногоДокумента.Обвести(?(Лево, Линия, Неопределено), ?(Верх, Линия, Неопределено), ?(Право, Линия, Неопределено), ?(Низ, Линия, Неопределено));
	
КонецПроцедуры
//))OM_180313 

&НаКлиенте
Процедура ПередФормированиемНаКлиенте()
	ОтчетСформирован = Ложь;
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		Комментарий = НастройкиОтчета.ПрефиксЗамеров + "; " + НСтр("ru = 'Непосредственно:'") + " " + Строка(Непосредственно);
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Ложь,
		НастройкиОтчета.КлючЗамеров + ".Формирование");
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, Комментарий);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияНаКлиенте()
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	ФормированиеПриОткрытии = Ложь;
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
	ПоказатьРезультатЗаполненияНастроек();
	ОбновитьОтображениеДанных(); 
	Обработчик = ОбработчикПослеФормированияНаКлиенте;
	Если ТипЗнч(Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Обработчик, ОтчетСформирован);
		ОбработчикПослеФормированияНаКлиенте = Неопределено;
	КонецЕсли;
	//ОтчетыКлиентПереопределяемый.ПослеФормирования(ЭтотОбъект, ОтчетСформирован);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте()
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ОтчетТабличныйДокумент, УникальныйИдентификатор));
	Вложение.Вставить("Представление", ОтчетНаименованиеТекущегоВарианта);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = ОтчетНаименованиеТекущегоВарианта;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЕслиТребуется()
	Если ВариантыПанелиКлючТекущегоВарианта <> " - " Тогда // Изменения уже применены
		Возврат;
	КонецЕсли;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Если ИдентификаторКД = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	ВсеДополнительныеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ЭлементыФормы");
	Если ВсеДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВсеДополнительныеНастройки[ИдентификаторЭлемента];
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	ПоказатьРезультатЗаполненияНастроек();
	Если ПараметрыЗаполнения.Свойство("Переформировать") И ПараметрыЗаполнения.Переформировать Тогда
		ОчиститьСообщения();
		
		ПараметрыФОрмирования = Новый Структура("Действие", "Дерево");
		Сформировать(ПараметрыФОрмирования);
		//Сформировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатЗаполненияНастроек()
	Если ТипЗнч(РезультатЗаполненияНастроек) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СвоиСпискиВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЗаполненияНастроек, "СвоиСпискиВыбора");
	Если ТипЗнч(СвоиСпискиВыбора) = Тип("Массив") Тогда
		Для Каждого ИдентификаторЭлемента Из СвоиСпискиВыбора Цикл
			НастройкаВарианта = НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента);
			Если НастройкаВарианта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
			Если ДополнительныеНастройки = Неопределено
				Или ТипЗнч(ДополнительныеНастройки.ЗначенияДляВыбора) <> Тип("СписокЗначений") Тогда
				Продолжить;
			КонецЕсли;
			Тип = ТипЗнч(НастройкаВарианта.ЭлементКД);
			Если Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ДоступныеПараметры = НастройкаВарианта.УзелКД.ДоступныеПараметры;
				Если ДоступныеПараметры = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДоступнаяНастройкаКД = ДоступныеПараметры.НайтиПараметр(НастройкаВарианта.ЭлементКД.Параметр);
			ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ДоступныеПоляОтбора = НастройкаВарианта.УзелКД.ДоступныеПоляОтбора;
				Если ДоступныеПоляОтбора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДоступнаяНастройкаКД = ДоступныеПоляОтбора.НайтиПоле(НастройкаВарианта.ЭлементКД.ЛевоеЗначение);
			КонецЕсли;
			Если ДоступнаяНастройкаКД = Неопределено
				Или ТипЗнч(ДоступнаяНастройкаКД.ДоступныеЗначения) <> Тип("СписокЗначений") Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ДоступнаяНастройкаКД.ДоступныеЗначения.Очистить();
				Для Каждого Элемент Из ДополнительныеНастройки.ЗначенияДляВыбора Цикл
					ЗаполнитьЗначенияСвойств(ДоступнаяНастройкаКД.ДоступныеЗначения.Добавить(), Элемент);
				КонецЦикла;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗаполненияНастроек.Очистить();
КонецПроцедуры

&НаКлиенте
Функция ПерейтиПоСсылке(АдресСсылки)
	Если ПустаяСтрока(АдресСсылки) Тогда
		Возврат Ложь;
	КонецЕсли;
	АдресСсылкиВРег = ВРег(АдресСсылки);
	Если СтрНачинаетсяС(АдресСсылкиВРег, ВРег("http://"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("https://"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1cib/"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1c://")) Тогда
		ОбщегоНазначенияКлиент.ПерейтиПоСсылке(АдресСсылки);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(ФайлКартинки, ИдентификаторФормы)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента)
	ПоискНастройкиВарианта = ЭтотОбъект.БыстрыйПоискНастроекВарианта.Получить(ИдентификаторЭлемента);
	Если ПоискНастройкиВарианта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	КорневойУзелКД = ЭтотОбъект.ФотоОтчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ПоискНастройкиВарианта.ИдентификаторУзлаКД);
	Результат = Новый Структура("УзелКД, ЭлементКД");
	Результат.УзелКД = КорневойУзелКД[ПоискНастройкиВарианта.ИмяКоллекции];
	Результат.ЭлементКД = Результат.УзелКД.ПолучитьОбъектПоИдентификатору(ПоискНастройкиВарианта.ИдентификаторЭлементаКД);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ОчиститьДеревоГруппировок()
	
	ДеревоГруппировок = РеквизитФормыВЗначение("СоставОтчета");
	ДеревоГруппировок.Строки.Очистить();
	ЗначениеВРеквизитФормы(ДеревоГруппировок,"СоставОтчета");	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуДляИдентификатораИзРасшифровки(ИдентификаторРасшифровки)
	
	СсылкаИзРасшифровки = Справочники.апФайлыКДокументамПрисоединенныеФайлы.ПолучитьСсылку(ИдентификаторРасшифровки);
	Если СсылкаИзРасшифровки <> Справочники.апФайлыКДокументамПрисоединенныеФайлы.ПустаяСсылка() Тогда 
		Возврат СсылкаИзРасшифровки;
	КонецЕсли;	
	
	СсылкаИзРасшифровки = Справочники.апФайлыКДокументам.ПолучитьСсылку(ИдентификаторРасшифровки);
	Если СсылкаИзРасшифровки <> Справочники.апФайлыКДокументам.ПустаяСсылка() Тогда 
		Возврат СсылкаИзРасшифровки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

&НаСервере
Процедура УстановитьВидимостьДоступность(ОбновитьКоманды = Истина)
	//ПоказыватьКомандыВыбораВариантов = РежимВариантаОтчета() И НастройкиОтчета.РазрешеноВыбиратьВарианты;
	//	
	//// Команды выбора вариантов.
	//Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
	//	//ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
	//	
	//	Если ПоказыватьКомандыВыбораВариантов Тогда
	//		ЗаполнитьКомандыВыбораВариантов();
	//	КонецЕсли;
	//	
	//	Если ПравоВывода Тогда
	//		////КлючСохраненияПоложенияОкна = ОтчетыКлиентСервер.КлючУникальности(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
	//		//НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", КлючСохраненияПоложенияОкна);
	//		//ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
	//	КонецЕсли;
	//	
	//	НавигационнаяСсылка = "";
	//	Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка)
	//		И Не НастройкиОтчета.Внешний
	//		И Не НастройкиОтчета.Контекстный Тогда
	//		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Заголовок.
	//ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
	//Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
	//	Заголовок = ОтчетНаименованиеТекущегоВарианта;
	//Иначе
	//	Заголовок = НастройкиОтчета.Наименование;
	//КонецЕсли;
	//Если РежимРасшифровки Тогда
	//	Заголовок = Заголовок + " (" + НСтр("ru = 'Расшифровка'") + ")";
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция БыстрыеНастройкиЗаполнить(Знач ПараметрыКлиента)
	// Вставка значений по умолчанию для обязательных ключей параметров заполнения.
	ПараметрыЗаполнения = БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента);
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	// Запись новых настроек варианта и пользовательских настроек в компоновщик.
	БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения);
	
	// Получение информации из КД.
	УсловияВывода = Новый Структура;
	УсловияВывода.Вставить("ТолькоПользовательские", Истина);
	УсловияВывода.Вставить("ТолькоБыстрые",          Истина);
	УсловияВывода.Вставить("ИдентификаторТекущегоУзлаКД", Неопределено);
	Информация = ОтчетыСервер.РасширеннаяИнформацияОНастройках(
	Отчет.КомпоновщикНастроек,
	НастройкиОтчета,
	ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя,
	УсловияВывода);
	ЕстьБыстрыеНастройки = Информация.ЕстьБыстрыеНастройки;
	ЕстьОбычныеНастройки = Информация.ЕстьОбычныеНастройки;
	
	// Удаление элементов старых настроек.
	БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения);
	
	// Добавление элементов актуальных настроек и загрузка значений.
	БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация);
	
	// Связи.
	ЗарегистрироватьОтключаемыеСвязи(Информация);
	
	// Стандартные периоды.
	НастройкиОтчета.Вставить("СтандартныеПериоды", Новый Массив);
	СтандартныеПериоды = Информация.ПользовательскиеНастройки.НайтиСтроки(Новый Структура("ТипЭлементов", "СтандартныйПериод"));
	Для Каждого СвойстваНастройки Из СтандартныеПериоды Цикл
		НастройкиОтчета.СтандартныеПериоды.Добавить(СвойстваНастройки.ИдентификаторКД);
	КонецЦикла;
	
	// Обработка дополнительных настроек.
	ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения);
	
	УстановитьВидимостьДоступность();
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если НастройкиОтчета.Свойство("ОтчетОбъект") Тогда
		НастройкиОтчета.Удалить("ОтчетОбъект");
	КонецЕсли;
	
	РезультатЗаполненияНастроек = ПараметрыЗаполнения.Результат;
	
	// Очистка цикличных ссылок.
	Информация.ДеревоВарианта.Колонки.Очистить();
	Информация.НастройкиВарианта.Колонки.Очистить();
	Информация.ПользовательскиеНастройки.Колонки.Очистить();
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить(Знач ФормированиеПриОткрытии, Непосредственно, ПараметрыФормирования)
	
	ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИдентификаторХранилищаДополнительногоРезультата");
	ПараметрСКД.Значение = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИдентификаторХранилищаПараметровФормирования");
	ПараметрСКД.Значение = Новый ХранилищеЗначения(ПараметрыФормирования);
	
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
	//Если Не ПроверитьЗаполнение() Тогда
	Если ФормированиеПриОткрытии Тогда
		ТекстОшибки = "";
		Сообщения = ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из Сообщения Цикл
			ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", ";" + Символы.ПС + Символы.ПС) + Сообщение.Текст;
		КонецЦикла;
		ПоказатьОшибкиФормирования(ТекстОшибки);
	КонецЕсли;
	Возврат Ложь;
	//КонецЕсли;
	
	КоличествоКолонок = Отчет.КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.Элементы.Найти("КоличествоКолонок");
	Если КоличествоКолонок <> Неопределено Тогда
		КоличествоКолонок = КоличествоКолонок.Значение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоличествоКолонок) Тогда
		
		ПоказатьОшибкиФормирования(НСтр("ru = 'Не указано количество колонок отчета.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	//))OM_180305 
	
	// Запуск фонового задания
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("СсылкаОтчета",   НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("СсылкаВарианта", НастройкиОтчета.ВариантСсылка);
	ПараметрыФормированияОтчета.Вставить("КлючВарианта",   КлючТекущегоВарианта);
	ПараметрыФормированияОтчета.Вставить("НастройкиКД",                 Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройкиКД",    Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройкиКД", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормированияОтчета.Вставить("СхемаМодифицирована", НастройкиОтчета.СхемаМодифицирована);
	ПараметрыФормированияОтчета.Вставить("КлючСхемы",           НастройкиОтчета.КлючСхемы);
	
	ИмяОтчета = СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1];
	
	Если НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров) Тогда
		Разрезы = Новый Соответствие;
		Разрезы.Вставить("ИмяОтчета",            ИмяОтчета);
		Разрезы.Вставить("ИмяИсходногоВарианта", НастройкиОтчета.ИмяИсходногоВарианта);
		Разрезы.Вставить("Внешний",          Число(НастройкиОтчета.Внешний));
		Разрезы.Вставить("Пользовательский", Число(НастройкиОтчета.Пользовательский));
		Разрезы.Вставить("Расшифровка",      Число(РежимРасшифровки));
		//Разрезы.Вставить("Модифицирован",    Число(ВариантМодифицирован));
		
		Если НастройкиОтчета.Свойство("СтандартныеПериоды") Тогда
			Для Каждого ИдентификаторКД Из НастройкиОтчета.СтандартныеПериоды Цикл
				ПользовательскаяНастройкаКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
				Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
				ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Значение = ПользовательскаяНастройкаКД.Значение;
				Иначе
					Продолжить;
				КонецЕсли;
				Если ПользовательскаяНастройкаКД.Использование И ТипЗнч(Значение) = Тип("СтандартныйПериод") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Разрезы, ОтчетыСервер.АнализПериода(Значение), Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыФормированияОтчета.Вставить("ИмяКлючевойОперации", НастройкиОтчета.КлючЗамеров + ".Формирование");
		ПараметрыФормированияОтчета.Вставить("КомментарийКлючевойОперации", Разрезы);
	КонецЕсли;
	
	Если Непосредственно Тогда
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			ПараметрыФормированияОтчета.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		КонецЕсли;
		ПараметрыФормированияОтчета.Вставить("Объект", РеквизитФормыВЗначение("Отчет"));
		ПараметрыФормированияОтчета.Вставить("ПолноеИмя", НастройкиОтчета.ПолноеИмя);
	Иначе
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			ПараметрыФормированияОтчета.Вставить("СхемаКД", ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Выполнение отчета: %1'"),
	ИмяОтчета);
	ПараметрыЗапуска.ОжидатьЗавершение = Ложь;
	ПараметрыЗапуска.ЗапуститьНеВФоне = Непосредственно;
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
	"ВариантыОтчетов.СформироватьОтчетВФоне",
	ПараметрыФормированияОтчета,
	ПараметрыЗапуска);
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
		ЗаданиеЗапущено = Ложь;
	Иначе
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		
		ЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат ЗаданиеЗапущено;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеПроверитьНаСервере()
	Задание = НайтиЗаданиеСлужебный(ФоновоеЗаданиеИдентификатор);
	Если Не Задание.Выполняется Тогда
		Если Задание.Успех Тогда
			ФоновоеЗаданиеЗагрузитьРезультат();
		Иначе
			ПоказатьОшибкиФормирования(Задание.Ошибка);
		КонецЕсли;
	КонецЕсли;
	Задание.Удалить("Ошибка");
	Возврат Задание;
КонецФункции

&НаСервере
Функция НайтиЗаданиеСлужебный(Знач Идентификатор)
	// Считывает состояние фонового задания по переданному идентификатору.
	//
	// Параметры:
	//   Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания.
	//
	// Возвращаемое значение:
	//   Неопределено - Задание не найдено.
	//   Структура - Сведения о задании.
	//       * Выполняется - Булево - Истина когда фоновое задание еще выполняется.
	//       * Успешно     - Булево - Истина когда сеанс фонового задания завершился без ошибок.
	//       * Ошибка      - Строка, ИнформацияОбОшибке, Неопределено - Описание ошибки.
	//
	Результат = Новый Структура("Выполняется, Успех, Ошибка", Ложь, Ложь, Неопределено);
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Выполняется = Истина;
	Иначе
		Результат.Выполняется = Ложь;
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Успех = Истина;
		Иначе
			Результат.Успех = Ложь;
			Результат.Ошибка = Задание.ИнформацияОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

//&НаСервере
//Процедура ЗагрузитьВариант(КлючВарианта)
//	Если Не РежимРасшифровки Тогда
//		// Сохранение текущих пользовательских настроек.
//		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
//			НастройкиОтчета.ПолноеИмя + "/" + КлючТекущегоВарианта + "/ТекущиеПользовательскиеНастройки",
//			"",
//			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
//	КонецЕсли;
//	РежимРасшифровки = Ложь;
//	ВариантМодифицирован = Ложь;
//	ПользовательскиеНастройкиМодифицированы = Ложь;
//	НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Истина;
//	// Загрузка нового варианта.
//	УстановитьТекущийВариант(КлючВарианта);
//	// Переключение состояния.
//	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
//	ОтображениеСостояния.Видимость = Истина;
//	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
//	ОтображениеСостояния.Картинка  = БиблиотекаКартинок.Информация32;
//	ОтображениеСостояния.Текст     = НСтр("ru = 'Выбран другой вариант отчета. Нажмите ""Сформировать"" для получения отчета.'");
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента)
	ПараметрыЗаполнения = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗаполнения, ПараметрыКлиента, Истина);
	Если Не ПараметрыЗаполнения.Свойство("ИмяСобытия") Тогда
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "");
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("Результат") Тогда
		ПараметрыЗаполнения.Вставить("Результат", Новый Структура);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ОтчетОбъектИлиПолноеИмя", НастройкиОтчета.ПолноеИмя);
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
КонецФункции

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения)
	
	НовыеНастройкиКД = Неопределено;
	НовыеПользовательскиеНастройкиКД = Неопределено;
	Если ПараметрыЗаполнения.Свойство("КомпоновщикНастроекКД") Тогда
		НовыеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.Настройки;
		НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		Если ПараметрыЗаполнения.Свойство("НастройкиКД") Тогда
			НовыеНастройкиКД = ПараметрыЗаполнения.НастройкиКД;
		КонецЕсли;
		Если ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиКД") Тогда
			НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.ПользовательскиеНастройкиКД;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		НовыеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеНастройкиXML");
		Если ТипЗнч(НовыеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеНастройкиXML);
			Исключение
				НовыеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеНастройкиXML = Неопределено;
		КонецЕсли;
		
		НовыеПользовательскиеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеПользовательскиеНастройкиXML");
		Если ТипЗнч(НовыеПользовательскиеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеПользовательскиеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеПользовательскиеНастройкиXML);
			Исключение
				НовыеПользовательскиеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СброситьНастройкиВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "СброситьНастройкиВарианта", Ложь);
	Если СброситьНастройкиВарианта Тогда
		//ЗагрузитьВариант(КлючТекущегоВарианта);
	КонецЕсли;
	
	СброситьПользовательскиеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "СброситьПользовательскиеНастройки", Ложь);
	Если СброситьПользовательскиеНастройки Тогда
		НовыеПользовательскиеНастройкиКД = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
		ЭтотОбъект,
		НастройкиОтчета.КлючСхемы,
		КлючТекущегоВарианта,
		НовыеНастройкиКД,
		НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
	НастройкиЗагружены = ОтчетыКлиентСервер.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
	Если НастройкиЗагружены Тогда
		// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
		// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
		Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
			ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
		КонецЕсли;
		//Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
		// Подготовка к предварительной инициализации компоновщика (используется при расшифровке).
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекРасширенныйРежим") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекРасширенныйРежим", ПараметрыЗаполнения.ФормаНастроекРасширенныйРежим);
	КонецЕсли;
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекИмяСтраницы") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекИмяСтраницы", ПараметрыЗаполнения.ФормаНастроекИмяСтраницы);
	КонецЕсли;
	
	УсловияОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "УсловияОтборов");
	Если УсловияОтборов <> Неопределено Тогда
		УзелКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Для Каждого КлючИЗначение Из УсловияОтборов Цикл
			ПользовательскаяНастройкаКД = УзелКД.ПолучитьОбъектПоИдентификатору(КлючИЗначение.Ключ);
			ПользовательскаяНастройкаКД.ВидСравнения = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Если НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек Тогда
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения)
	// Удаление элементов.
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы);
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда)
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")
			Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		КонецЕсли;
		Куда.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация)
	// Кэши для быстрого поиска с клиента.
	СоответствиеПользовательскихНастроек = Новый Соответствие;
	СоответствиеИменОбъектовМетаданных   = Информация.СоответствиеИменОбъектовМетаданных;
	СоответствиеНастроекВарианта         = Новый Соответствие;
	
	// Удаление реквизитов
	ПараметрыЗаполнения.Вставить("Реквизиты", Новый Структура);
	ПараметрыЗаполнения.Реквизиты.Вставить("Добавляемые",  Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Удаляемые",    Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Существующие", Новый Соответствие);
	ВсеРеквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		Если ПостоянныеРеквизиты.НайтиПоЗначению(ПолноеИмяРеквизита) = Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Существующие.Вставить(ПолноеИмяРеквизита, Реквизит.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	// Локальные переменные для установки значений и свойств после создания реквизитов.
	ДобавленныеПоляВвода          = Новый Структура;
	ДобавленныеСтандартныеПериоды = Новый Массив;
	
	// Структура связей.
	Связи = Информация.Связи;
	
	ИменаОсновныхРеквизитовФормы     = Новый Соответствие;
	ИменаЭлементовДляУстановкиСвязей = Новый Соответствие;
	ИменаФлажковИспользование        = Новый Соответствие;
	НастройкиСВидомСравненияРавно    = Новый Соответствие;
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	ДополнительныеНастройкиЭлементов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПользовательскиеНастройкиКД.ДополнительныеСвойства, "ЭлементыФормы");
	Если ДополнительныеНастройкиЭлементов = Неопределено Тогда
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	
	ГруппыВывода = Новый Структура;
	ГруппыВывода.Вставить("Быстрые", Новый Структура("Порядок, Размер", Новый Массив, 0));
	
	ЕстьЗагрузкаДанныхИзФайла = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла");
	
	ВыводимыеНастройки = Информация.ПользовательскиеНастройки.Скопировать(Новый Структура("ВыводРазрешен, Быстрая", Истина, Истина));
	ВыводимыеНастройки.Сортировать("ИндексВКоллекции Возр");
	
	Прочее = Новый Структура;
	Прочее.Вставить("Связи",       Связи);
	Прочее.Вставить("ОтчетОбъект", Неопределено);
	Прочее.Вставить("ПараметрыЗаполнения",       ПараметрыЗаполнения);
	Прочее.Вставить("ПутьККомпоновщику",         "Отчет.КомпоновщикНастроек");
	Прочее.Вставить("ЕстьЗагрузкаДанныхИзФайла", ЕстьЗагрузкаДанныхИзФайла);
	Прочее.Вставить("ДополнительныеНастройкиЭлементов",   ДополнительныеНастройкиЭлементов);
	Прочее.Вставить("ИменаОсновныхРеквизитовФормы",       ИменаОсновныхРеквизитовФормы);
	Прочее.Вставить("ИменаЭлементовДляУстановкиСвязей",   ИменаЭлементовДляУстановкиСвязей);
	Прочее.Вставить("СоответствиеИменОбъектовМетаданных", СоответствиеИменОбъектовМетаданных);
	Прочее.Вставить("ДобавленныеПоляВвода",          ДобавленныеПоляВвода);
	Прочее.Вставить("ДобавленныеСтандартныеПериоды", ДобавленныеСтандартныеПериоды);
	Прочее.Вставить("ДобавленныеСпискиЗначений",     Неопределено);
	Прочее.Вставить("ЕстьОтборыСУсловиями", Ложь);
	
	ГруппаВывода = ГруппыВывода.Быстрые;
	
	Для Каждого СвойстваНастройки Из ВыводимыеНастройки Цикл
		СоответствиеПользовательскихНастроек.Вставить(СвойстваНастройки.ИдентификаторЭлемента, СвойстваНастройки.ИдентификаторКД);
		
		Если СвойстваНастройки.НастройкаВарианта <> Неопределено Тогда
			ПоискНастройкиВарианта = Новый Структура;
			ПоискНастройкиВарианта.Вставить("ИдентификаторУзлаКД",     СвойстваНастройки.СтрокаДерева.ИдентификаторКД);
			ПоискНастройкиВарианта.Вставить("ИмяКоллекции",            СвойстваНастройки.НастройкаВарианта.ИмяКоллекции);
			ПоискНастройкиВарианта.Вставить("ИдентификаторЭлементаКД", СвойстваНастройки.НастройкаВарианта.ИдентификаторКД);
			СоответствиеНастроекВарианта.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ПоискНастройкиВарианта);
		КонецЕсли;
		
		ОтчетыСервер.ВывестиЭлементыНастройки(ЭтотОбъект, Элементы, СвойстваНастройки, ГруппаВывода, Прочее);
		
		ЭлементПолеВвода = Элементы.Найти("ЭлементОтбора_Значение_" + СвойстваНастройки.ИдентификаторЭлемента);
		
		ПолеКД = Новый ПолеКомпоновкиДанных("Агент");
		ПолеКД2 = Новый ПолеКомпоновкиДанных("ТорговаяТочка");
		
		Если ЭлементПолеВвода <> Неопределено Тогда
			
			Если СвойстваНастройки.ПолеКД = ПолеКД 
				Или СвойстваНастройки.ПолеКД = ПолеКД2
				Тогда
				
				ЭлементПолеВвода.КнопкаОткрытия = Истина;
				
			КонецЕсли;
			
			Если СвойстваНастройки.ПолеКД = ПолеКД Тогда
				
				ЭлементПолеВвода.УстановитьДействие("Открытие","АгентОткрытие");
				ЭлементПолеВвода.УстановитьДействие("НачалоВыбора","АгентНачалоВыбора");
				ПутьКДаннымАгента = СвойстваНастройки.Идентификатор;
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		Если СвойстваНастройки.ПолеКД =  Новый ПолеКомпоновкиДанных("ПараметрыДанных.Период") Тогда
			
			ПутьКПериоду = СвойстваНастройки.Идентификатор;
			ПутьКПериодуКД = элементы.Найти("ЗначениеПараметраНастроек_Начало_" + СвойстваНастройки.ИдентификаторЭлемента).ПутьКДанным;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппаВывода, Элементы.БыстрыеНастройки, 2, Ложь);
	
	// Удаление старых и добавление новых реквизитов.
	Для Каждого КлючИЗначение Из ПараметрыЗаполнения.Реквизиты.Существующие Цикл
		ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	ИзменитьРеквизиты(ПараметрыЗаполнения.Реквизиты.Добавляемые, ПараметрыЗаполнения.Реквизиты.Удаляемые);
	
	// Поля ввода (установка значений и связей).
	Для Каждого КлючИЗначение Из ДобавленныеПоляВвода Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЭтотОбъект[ИмяРеквизита] = КлючИЗначение.Значение;
		Элементы[ИмяРеквизита].ПутьКДанным = ИмяРеквизита;
	КонецЦикла;
	
	// Стандартные периоды (установка значений и связей).
	Для Каждого СвойстваНастройки Из ДобавленныеСтандартныеПериоды Цикл
		Дополнительно = СвойстваНастройки.Дополнительно;
		ЭтотОбъект[Дополнительно.ЗначениеИмя] = СвойстваНастройки.Значение;
		Элементы[Дополнительно.ПериодНачалоИмя].ПутьКДанным    = Дополнительно.ЗначениеИмя + ".ДатаНачала";
		Элементы[Дополнительно.ПериодОкончаниеИмя].ПутьКДанным = Дополнительно.ЗначениеИмя + ".ДатаОкончания";
	КонецЦикла;
	
	// Сохранение соответствий для быстрого поиска в данные формы.
	БыстрыйПоискПользовательскихНастроек = Новый ФиксированноеСоответствие(СоответствиеПользовательскихНастроек);
	БыстрыйПоискИменОбъектовМетаданных   = Новый ФиксированноеСоответствие(СоответствиеИменОбъектовМетаданных);
	БыстрыйПоискНастроекВарианта         = Новый ФиксированноеСоответствие(СоответствиеНастроекВарианта);
	
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ЭлементыФормы", ДополнительныеНастройкиЭлементов);
КонецПроцедуры

&НаКлиенте
Процедура АгентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Перем Агент;
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого ПНастройка Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ПНастройка.ИдентификаторПользовательскойНастройки = ПутьКДаннымАгента Тогда
			Агент = ПНастройка.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	стррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Пользователь", Агент));
	Оповещение = Новый ОписаниеОповещения("ПользовательВыборЗавершение", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборАгента", стррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Для Каждого ПНастройка Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			
			Если ПНастройка.ИдентификаторПользовательскойНастройки = ПутьКДаннымАгента Тогда
				ПНастройка.ПравоеЗначение = Результат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура АгентОткрытие(Элемент, СтандартнаяОбработка)
	
	Перем Агент;
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого ПНастройка Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ПНастройка.ИдентификаторПользовательскойНастройки = ПутьКДаннымАгента Тогда
			Агент = ПНастройка.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ЗначениеЗаполнено(Агент) Тогда
		МодульК().ОткрытьФормуОбработки("НастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("Пользователь", Агент));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	ДополнительныйРезультат = Неопределено;
	АдресДополнительногоРезультата = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИдентификаторХранилищаДополнительногоРезультата").Значение;
	Если ЗначениеЗаполнено(АдресДополнительногоРезультата) Тогда
		
		ДополнительныйРезультат = ПолучитьИзВременногоХранилища(АдресДополнительногоРезультата);
		УдалитьИзВременногоХранилища(АдресДополнительногоРезультата);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИдентификаторХранилищаДополнительногоРезультата").Значение = "";
	КонецЕсли;
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
		УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	КонецЕсли;
	ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.Расшифровка, УникальныйИдентификатор);
	
	Если ДополнительныйРезультат <> Неопределено Тогда
		
		//УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		//ФоновоеЗаданиеАдресХранилища = Неопределено;
		//ФоновоеЗаданиеИдентификатор = Неопределено;
		Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
			УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
		КонецЕсли;
		
		ЭтаФорма.Элементы.СоставОтчета.ПодчиненныеЭлементы.Данные.Заголовок = ДополнительныйРезультат.ЗаголовокДереваГруппировок;
		
		ЗначениеВРеквизитФормы(ДополнительныйРезультат.ДеревоГруппировок,"СоставОтчета");
		
		ОтчетТабличныйДокумент.Очистить();
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = Новый Картинка;
		//((OM_180312 
		Если ДополнительныйРезультат.ДеревоГруппировок.Строки.Количество() = 0 Тогда
			ОтображениеСостояния.Текст                          = "Нет данных для отображения.";
		Иначе
			ОтображениеСостояния.Текст                          = "Выберите значение в дереве группировок....";
		КонецЕсли;
		//))OM_180312 
		
		ОтчетСформирован = Истина;
		
	КонецЕсли;
	
	Если РезультатФормирования.ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
		Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "Успех");
		Если Успех <> Истина Тогда
			ПоказатьОшибкиФормирования(РезультатФормирования.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеЕщеОбновляются = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "ДанныеЕщеОбновляются", Ложь);
		Если ДанныеЕщеОбновляются Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ВариантыОтчетов.СообщениеДанныеЕщеОбновляются());
		КонецЕсли;
		
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Ложь;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка                       = Новый Картинка;
		ОтображениеСостояния.Текст                          = "";
		
		ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент); // Сохранение настроек печати.
		ОтчетТабличныйДокумент = РезультатФормирования.ТабличныйДокумент;
		ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать); // Восстановление.
		
		ОтчетСформирован = Истина;
		
		Если РезультатФормирования.ВариантМодифицирован
			Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
			РезультатФормирования.Вставить("ИмяСобытия", "ПослеФормирования");
			РезультатФормирования.Вставить("Непосредственно", Ложь);
			БыстрыеНастройкиЗаполнить(РезультатФормирования);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ОписаниеОшибки;
	
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетов.ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ПодробноеПредставлениеОшибки, НастройкиОтчета.ВариантСсылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РекурсивныйАнализНастроекКД(Коллекция, Соответствие)
	Если Коллекция = Неопределено Тогда
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы, Соответствие);
	Иначе
		// Регистрация значений включенных отборов и параметров КД, не выведенных в быстрый доступ.
		Для Каждого НастройкаВарианта Из Коллекция Цикл
			// ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных,
			// ЗначениеПараметраКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных.
			Если ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.Значение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если НастройкаВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ
				И ЗначениеЗаполнено(НастройкаВарианта.ИдентификаторПользовательскойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			Если НастройкаВарианта.Использование <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				РекурсивныйАнализНастроекКД(НастройкаВарианта.Элементы, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = НастройкаВарианта.ЛевоеЗначение;
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение)
	Если ТипЗнч(Значение) = Тип("ПолеКомпоновкиДанных") Тогда
		Возврат ЗначениеЗаполнено(Строка(Значение));
	Иначе
		Возврат ЗначениеЗаполнено(Значение);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьКомандыВыбораВариантов()
	ВариантыФормы = РеквизитФормыВЗначение("ДобавленныеВарианты");
	ВариантыФормы.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Отчеты", ОтчетыКлиентСервер.ЗначениеВМассив(НастройкиОтчета.ОтчетСсылка));
	ПараметрыПоиска.Вставить("ПометкаУдаления", Ложь);
	ПараметрыПоиска.Вставить("ПолучатьИтоговуюТаблицу", Истина);
	РезультатПоиска = ВариантыОтчетов.НайтиСсылки(ПараметрыПоиска);
	ТаблицаВариантов = РезультатПоиска.ТаблицаЗначений;
	Если НастройкиОтчета.Внешний Тогда // Добавить предопределенные варианты внешнего отчета в таблицу вариантов.
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы = ТаблицаВариантов.Добавить();
			СтрокаТаблицы.Наименование = ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта = ЭлементСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	ТаблицаВариантов.Свернуть("Ссылка, КлючВарианта, Наименование, Автор, ТолькоДляАвтора");
	ТаблицаВариантов.Сортировать("Наименование Возр, КлючВарианта Возр");
	
	Группа = Элементы.ВариантыОтчета;
	КнопкиГруппы = Группа.ПодчиненныеЭлементы;
	ПоследнийИндекс = ВариантыФормы.Количество() - 1;
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		Если СтрокаТаблицы.ТолькоДляАвтора = Истина
			И СтрокаТаблицы.Автор <> АвторизованныйПользователь Тогда
			Продолжить;
		КонецЕсли;
		Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("КлючВарианта, Найден", СтрокаТаблицы.КлючВарианта, Ложь));
		Если Найденные.Количество() = 1 Тогда
			ВариантФормы = Найденные[0];
			ВариантФормы.Найден = Истина;
			Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
			Кнопка.Видимость = Истина;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			Элементы.Переместить(Кнопка, Группа);
		Иначе
			ПоследнийИндекс = ПоследнийИндекс + 1;
			ВариантФормы = ВариантыФормы.Добавить();
			ЗаполнитьЗначенияСвойств(ВариантФормы, СтрокаТаблицы);
			ВариантФормы.Найден = Истина;
			ВариантФормы.ИмяКоманды = "ВыбратьВариант_" + Формат(ПоследнийИндекс, "ЧН=0; ЧГ=");
			
			Команда = Команды.Добавить(ВариантФормы.ИмяКоманды);
			Команда.Действие = "Подключаемый_ЗагрузитьВариантОтчета";
			
			Кнопка = Элементы.Добавить(ВариантФормы.ИмяКоманды, Тип("КнопкаФормы"), Группа);
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды = ВариантФормы.ИмяКоманды;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			
			ПостоянныеКоманды.Добавить(ВариантФормы.ИмяКоманды);
		КонецЕсли;
		//Кнопка.Пометка = (КлючТекущегоВарианта = СтрокаТаблицы.КлючВарианта);
	КонецЦикла;
	
	Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("Найден", Ложь));
	Для Каждого ВариантФормы Из Найденные Цикл
		Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
		Кнопка.Видимость = Ложь;
	КонецЦикла;
	
	ВариантыФормы.Колонки.Удалить("Найден");
	ЗначениеВРеквизитФормы(ВариантыФормы, "ДобавленныеВарианты");
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.ИмяСобытия <> "ПослеФормирования" Тогда
		Переформировать = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "Переформировать");
		Если Переформировать = Истина Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		ИначеЕсли ПараметрыЗаполнения.ВариантМодифицирован
			Или ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость = Истина;
			ОтображениеСостояния.Текст     = НСтр("ru = 'Изменились настройки. Нажмите ""Сформировать"" для получения отчета.'");
			Если Переформировать = Неопределено Тогда
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			Иначе
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// В безопасном режиме отчеты нельзя сохранить при помощи стандартного диалога,
	// возникающего перед закрытием, поскольку не включается привилегированный режим при доступе к планам обмена.
	Если НастройкиОтчета.Безопасный
		И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОтключаемыеСвязи(Информация)
	ОтключаемыеСвязи.Очистить();
	Для Каждого ОписаниеСвязи Из Информация.ОтключаемыеСвязи Цикл
		Связь = ОтключаемыеСвязи.Добавить();
		ЗаполнитьЗначенияСвойств(Связь, ОписаниеСвязи);
		Связь.ВедущийИдентификаторВФорме     = ОписаниеСвязи.Ведущий.ИдентификаторЭлемента;
		Связь.ПодчиненныйИдентификаторВФорме = ОписаниеСвязи.Подчиненный.ИдентификаторЭлемента;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	//Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL 
	|			ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиОтчета.Вставить("ВариантСсылка",          Выборка.ВариантСсылка);
		НастройкиОтчета.Вставить("КлючЗамеров",            Выборка.КлючЗамеров);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Выборка.ПредопределенныйСсылка);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   ?(Выборка.Пользовательский, Выборка.ИмяИсходногоВарианта, КлючТекущегоВарианта));
		НастройкиОтчета.Вставить("Пользовательский",       Выборка.Пользовательский);
	Иначе
		НастройкиОтчета.Вставить("ВариантСсылка",          Неопределено);
		НастройкиОтчета.Вставить("КлючЗамеров",            Неопределено);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Неопределено);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   Неопределено);
		НастройкиОтчета.Вставить("Пользовательский",       Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РежимВариантаОтчета()
	Возврат ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта);
КонецФункции

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизацииОбласти(Элемент)
КонецПроцедуры

#КонецОбласти


